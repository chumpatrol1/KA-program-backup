/****************************************
 * Move ball along multiple cubic splines
*****************************************/

// Visualise the control points and curve for debugging purposes
var drawPoints = false;
var drawSpline = true;

/****************************************
 *  Handy function
****************************************/

var arrayToPoint = function(arr) {
    return new PVector(arr[0], arr[1], arr[2]);
};

/****************************************
 *      Cubic spline
 * Create a bezier curve from 4 points
****************************************/

var Spline = function(start, end, control1, control2) {
    this.p1 = arrayToPoint(start);
    this.p2 = arrayToPoint(end);
    this.c1 = arrayToPoint(control1);
    this.c2 = arrayToPoint(control2);
};

// This is where the magic happens
Spline.prototype.interpolate = function(t) {
    var t2 = t * t;
    var t3 = t * t2;
    
    var a = -1 * t3 + 3 * t2 - 3 * t + 1;
    var b = t3;
    var c =  3 * t3 - 6 * t2 + 3 * t;
    var d = -3 * t3 + 3 * t2;
    
    return {
        x: this.p1.x * a + this.p2.x * b + this.c1.x * c + this.c2.x * d,
        y: this.p1.y * a + this.p2.y * b + this.c1.y * c + this.c2.y * d
    };
};

Spline.prototype.draw = function() {
    if (drawSpline) {
        noFill();
        strokeWeight(3);
        stroke(28, 173, 123);
        
        // How nicely the curve is drawn
        var resolution = 32;
        
        beginShape();
        for (var i = 0; i <= resolution; i++) {
            var p = this.interpolate(i / resolution);
            vertex(p.x, p.y);
        }
        endShape();
    }
    
    if (drawPoints) {
        strokeWeight(1);
        stroke(64, 95, 237);
        line(this.p1.x, this.p1.y, this.c1.x, this.c1.y);
        line(this.p1.x, this.p1.y, this.p2.x, this.p2.y);
        line(this.p2.x, this.p2.y, this.c2.x, this.c2.y);
        
        var d = 12;
        fill(255, 165, 0);
        noStroke();
        ellipse(this.p1.x, this.p1.y, d, d);
        ellipse(this.p2.x, this.p2.y, d, d);
        ellipse(this.c1.x, this.c1.y, d, d);
        ellipse(this.c2.x, this.c2.y, d, d);
    }
};

// Make some splines by define the start and end points, and the control points.
// Ideally, the start point of one should be the end point of another
var splines = [
    new Spline([20, 20], [320, 100], [20, 160], [260, 20]),
    new Spline([320, 100], [100, 380], [380, 180], [320, 320]),
];

/****************************************
 *      Display functions
****************************************/

var t = 0;
var speed = 0;

draw = function() {
    background(250);

    // Not necessary
    for (var i = 0; i < splines.length; i++) {
        splines[i].draw();
    }

    // Accelerate until a particular speed is reached
    if (t < 1 && speed < 0.03) {
        speed += 0.00025;
    } else if (t > 1 && speed > 0) {
        speed -= 0.00025;
    }

    // Move along spline
    t += speed;
    
    // Return to beginning once we've finished
    if (t > splines.length) {
        t %= 1;
        speed = 0;
    }
    
    // Find position of ellipse
    var position = splines[floor(t)].interpolate(t % 1);
    
    // Draw ellipse
    strokeWeight(1);
    stroke(250);
    fill(200, 0, 0);
    ellipse(position.x, position.y, 20, 20);
};
