/*****************************************************
 *          Rigging Challenge
 * 
 * What character can you make and rig?
 * 
 * Edit the modelData variable below to build your 
 * model.
 * We have got you started with a snowman, but you
 * can make anything you like.
 * 
 * Try changing the colours, the amount of subdivision
 * and the vertices. Add more shapes, connect them,
 * then add some deformers.
******************************************************/

var shapes = [
    {
        name: "head",
        radius: 80,
        center: [120, 220],
        origin: [120, 260]
    },
    {
        name: "body",
        radius: 120,
        center: [120, 300],
        origin: [120, 360]
    },
    {
        name: "hat",
        vertices: [
            [90, 150], [90, 190], [70, 190], [70, 200],
            [170, 200], [170, 190], [150, 190], [150, 150]
        ],
        fill: color(0),
        origin: [120, 195]
    },
    {
        name: "nose",
        vertices: [
            [120, 220], [120, 230], [150, 225]],
        fill: color(224, 154, 33),
        origin: [120, 225]
    },
    {
        name: "eyes",
        origin: [120, 215]
    },
    {
        name: "eye1",
        vertices: [
            [98, 215], [105, 210], [112, 215], [105, 220]],
        fill: color(0),
        subdivide: 4,
        origin: [105, 215]
    },
    {
        name: "eye2",
        vertices: [
            [128, 215], [135, 210], [142, 215], [135, 220]],
        fill: color(0),
        subdivide: 4,
        origin: [135, 215]
    }
];

var connections = ["body->head->hat", "head->nose", "head->eyes", "eyes->eye1", "eyes->eye2"];
var deformers = [
    'translateX->body',
    'rotate->eyes',
    'rotate->hat',
    'translateX->hat',
    'rotate->body',
];

/*****************************************************
 *          Deformers
 * This is the deformers variable. Here you can edit
 * the deformers used to rig the model. Try making
 * your own deformer with a new transform function.
 * What sort of effects can you come up with?
 * 
 * The min and max values control the range of the
 * slider.
******************************************************/

var deformerData = {
    Tx: {
        name: "TranslateX",
        min: -200,
        max: 200,
        transform: function(coordinates, value) {
            coordinates.x += value;
        }
    },
    Ty: {
        name: "TranslateY",
        min: -200,
        max: 200,
        transform: function(coordinates, value) {
            coordinates.y -= value;
        }
    },
    S: {
        name: "Scale",
        min: 0.2,
        max: 3,
        value: 1,
        transform: function(coordinates, value, origin) {
            coordinates.x = (coordinates.x - origin.x) * value + origin.x;
            coordinates.y = (coordinates.y - origin.y) * value + origin.y;
        }
    },
    R: {
        name: "Rotate",
        min: -180,
        max: 180,
        transform: function(coordinates, value, origin) {
            var cosAngle = cos(value);
            var sinAngle = sin(value);
            var x = coordinates.x - origin.x;
            var y = coordinates.y - origin.y;
            
            coordinates.x = origin.x + x * cosAngle - y * sinAngle;
            coordinates.y = origin.y + x * sinAngle + y * cosAngle;
        }
    }
};

/*****************************************************
 * Function for drawing the background
******************************************************/

var BACKGROUND1 = color(110, 90, 230);
var BACKGROUND2 = color(35, 20, 110);

var drawBackground = function() {
    background(255);
    var h = 80;
    var h2 = height - h;
    
    strokeWeight(2);
    for (var i = 0; i <= h2; i += 2) {
        stroke(lerpColor(BACKGROUND2, BACKGROUND1, i / h2));
        line(0, i, width, i);
    }
};
/*****************************************************
 *      Main code below here
 * No need to look in here unless you're interested.
*****************************************************/

var showing = {
    Deformers: true
};

var callFunctionForEach = function(arr, func) {
    for (var i = 0; i < arr.length; i++) {
        arr[i][func]();
    }
};

// Standard colours and variables
{
var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var GUI_GREY = color(180, 180, 180);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);
}
/*****************************************************
 *  Generic GUI component from which other elements
 * inherit
******************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};

GUI_Component.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*****************************************************
 *  GUI Button
******************************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

var FilledButtonDraw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function(col) {
    this.draw = FilledButtonDraw.bind(this);
    this.defaultCol = color(0, 0, 0, 1);
    this.highlightCol = col;
};

var CircleButton = function(x, y, r, clickFunction, drawIcon) {
    Button.call(this, x, y, r * 2, r * 2, "", clickFunction);
    this.r = r;
    this.drawIcon = drawIcon;
};
CircleButton.prototype = Object.create(Button.prototype);

CircleButton.prototype.draw = function() {
    this.fade();
    
    fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
    
    stroke(lerpColor(GUI_GREY, this.highlightCol, this.transition / 10));
    strokeWeight(2);
    ellipse(this.x, this.y, this.w, this.w);
    
    if (this.drawIcon) {
        var c = lerpColor(color(100, 100, 100), color(255, 255, 255), this.transition / 10);
        this.drawIcon(this.x, this.y, this.r, c);   
    }
};

CircleButton.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r;
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/*****************************************************
 * GUI Slider to vary parameters
******************************************************/
{
var Slider = function(x, y, w, minValue, maxValue, nowValue, name, updateFunction) {
    GUI_Component.call(this, x, y, w, 4, name, updateFunction);
    
    this.x2 = x + w;
    this.ballR = 10;
    this.ballD = this.ballR * 2;
    
    this.min = minValue || 0;
    this.max = maxValue === undefined ? 1 : maxValue;
    this.val = nowValue === undefined ? this.min : nowValue;
    this.setValue(this.val);
    
    this.held = false;
    this.decimalPlaces = 0;
    if (this.max - this.min < 8) {
        this.decimalPlaces = 1;
    }
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    this.fade();
    fill(lerpColor(BACKGROUND, GUI_GREY, this.transition / 10));
    stroke(GUI_GREY);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*****************************************************
 *          Toolbar
 *  Contains other GUI elements
******************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 2;
    
    this.buttons = [];
    this.sliders = [];
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, 240);
    rect(this.x, this.y, this.w, this.h, 8);
    callFunctionForEach(this.components, 'draw');
};

Toolbar.prototype.addButton = function(name, updateF, options) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    var button = new Button(x, y, w, h, name, updateF);
    
    if (options) {
        for (var opt in options) {
            button[opt] = options[opt];
        }
    }
    
    this.buttons.push(button);
    this.components.push(button);
    this.h += h + 8;
    return button;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = 10;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    var slider = new Slider(x, y, w, minX, maxX, nowX, name, updateF);
    
    this.sliders.push(slider);
    this.components.push(slider);
    this.h += h + 16;
    return slider;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.buttons.push(button);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    callFunctionForEach(this.components, 'mousePressed');
};

Toolbar.prototype.mouseReleased = function() {
    callFunctionForEach(this.components, 'mouseReleased');
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].mouseDragged()) {
            return true;
        }
    }
};
}
/*****************************************************
 *          DraggableDeformer
 * An unattached deformer which can be dragged to a 
 * node on a shape to attach a deformer to it.
******************************************************/
{
var DraggableDeformer = function(x, y, name) {
    this.name = name;
    this.x = x;
    this.y = y;
    this.originX = x;
    this.originY = y;
    this.r = 14;
    this.animation = 0;
};

DraggableDeformer.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 7) {
            this.animation++;
        }
        cursor(MOVE);
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(250, 250, 250);
    fill(ORANGE);
    
    var r = this.r * 2 + 5 * sin(this.animation * 90 / 4);
    ellipse(this.x, this.y, r, r);
    
    fill(0);
    textFont(serifFont, 18);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y);
};

DraggableDeformer.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};

DraggableDeformer.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r;
};
}
/*****************************************************
 *          Deformer Toolbar
 * A place for DraggableDeformers to sit.
*****************************************************/
{
var DeformerToolbar = function(x, y, model) {
    this.x = x;
    this.y = y;
    this.model = model;
    this.deformers = [];
    this.selected = false;
};

DeformerToolbar.prototype.draw = function() {
    if (this.selected) {
        var x = this.selected.originX;
        var y = this.selected.originY;
        var d = this.selected.r * 2;
        stroke(200);
        strokeWeight(1);
        fill(120);
        ellipse(x, y, d, d);
        
        fill(80);
        textFont(serifFont, 16);
        textAlign(CENTER, CENTER);
        text(this.selected.name, x, y);
    }
    
    callFunctionForEach(this.deformers, 'draw');
};

DeformerToolbar.prototype.addDeformer = function(name) {
    var deformer = new DraggableDeformer(this.x, this.y, name);
    this.deformers.push(deformer);
    this.x += deformer.r * 2 + 5;
};

DeformerToolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.deformers.length; i++) {
        if (this.deformers[i].mouseOver()) {
            this.selected = this.deformers[i];
            break;
        }
    }
};

DeformerToolbar.prototype.mouseReleased = function() {
    if (this.selected) {
        this.model.dropDeformer(this.selected);
        this.selected.x = this.selected.originX;
        this.selected.y = this.selected.originY;
        this.selected = false;
    }
};

DeformerToolbar.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
    }
};
}
/*****************************************************
 *          Deformer Control
 * A slider that controls a deformer.
 * Has a close button to remove it from a node and a
 * handle to allow reordering.
*****************************************************/
{
// Icon draw function
var drawCloseIcon = function(x, y, r, col) {
    var d = floor(r / 2);
    strokeWeight(2);
    stroke(col);
    line(x - d, y - d, x + d, y + d);
    line(x - d, y + d, x + d, y - d);
};

var drawResetIcon = function(x, y, r, col) {
    textAlign(CENTER, CENTER);
    textSize(r * 1.5);
    fill(col);
    text("↻", x, y);
};
    
var DeformerControl = function(model, y, name, deformer, shape, index) {
    this.model = model;
    this.w = 138;
    this.h = 46;
    this.x = width - this.w - 32;
    this.y = y;
    
    this.name = name;
    this.index = index;
    this.shape = shape;
    this.transform = deformer.transform;
    this.defaultValue = deformer.value || 0;
    this.value = this.defaultValue;
    this.selected = false;
    
    this.elements = [
        new Slider(
            this.x + 32, this.y + 32, this.w - 66,
            deformer.min, deformer.max, this.value,
            "", this.update.bind(this)
        ),
        new CircleButton(
            this.x + this.w - 12, this.y + 13, 8,
            this.remove.bind(this), drawCloseIcon
        ),
        new CircleButton(
            this.x + this.w - 12, this.y + 33, 8,
            this.reset.bind(this), drawResetIcon
        )
    ];
    
    this.elements[1].highlightCol = color(200, 0, 0);
    this.elements[2].highlightCol = color(0, 100, 160);
};

DeformerControl.prototype.draw = function() {
    // Background
    if (this.shape.mouseOverOrigin()) {
        strokeWeight(3);
        stroke(PINK);
    } else {
        strokeWeight(1);
        stroke(GUI_GREY);
    }

    fill(BACKGROUND);
    rect(this.x, this.y, this.w, this.h, 8);
    
    // Label
    fill(TEXTCOL);
    textAlign(CENTER, TOP);
    textFont(sansFont, 13);
    var name = this.index + ". " + this.name;
    text(name, this.x + 18, this.y + 3, this.w - 36, 20);
    
    // Grip effect
    strokeWeight(1);
    stroke(200);
    line(this.x + 17, this.y + 1, this.x + 17, this.y + this.h - 1);
    
    for (var i = 4; i < 13; i += 4) {
        stroke(220);
        line(this.x + i, this.y + 6,
             this.x + i, this.y + this.h - 6);
        stroke(200);
        line(this.x + i + 1, this.y + 6,
             this.x + i + 1, this.y + this.h - 6);
    }
    
    callFunctionForEach(this.elements, 'draw');
};

DeformerControl.prototype.update = function(value) {
    this.value = value;
    this.model.update();
};

DeformerControl.prototype.updateDeformer = function() {
    this.shape.transform(this.transform, this.value, this.shape.origin);
};

DeformerControl.prototype.updatePosition = function(y) {
    var dy = y - this.y;
    this.y = y;
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].y += dy;
    }
};

DeformerControl.prototype.remove = function() {
    this.shape.removeDeformer(this);
    this.model.removeDeformer(this);
};

DeformerControl.prototype.reset = function() {
    this.elements[0].setValue(this.defaultValue);
};

DeformerControl.prototype.mouseOver = function() {
    return mouseX >= this.x && mouseX <= this.x + this.w &&
           mouseY >= this.y && mouseY <= this.y + this.h;
};

DeformerControl.prototype.mouseOverMoveTab = function() {
    return mouseX >= this.x && mouseX <= this.x + 20 &&
           mouseY >= this.y && mouseY <= this.y + this.h;
};

DeformerControl.prototype.mousePressed = function() {
    if (!this.mouseOver()) { return; }
    
    for (var i = 0; i < this.elements.length; i++) {
        if (this.elements[i].mousePressed()) {
            this.selected = this.elements[i];
        }
    }
    
    // Are we going to drag this
    return this.mouseOverMoveTab();
};

DeformerControl.prototype.mouseReleased = function() {
    callFunctionForEach(this.elements, 'mouseReleased');
    
    if (this.selected) {
        this.selected.selected = false;
        this.selected = false;
    }
};

DeformerControl.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.mouseDragged();
    }
};
}
/*****************************************************
 *          Shape
 * A set of points, which are connected by straight
 * lines, and filled. Points are drawn relative to
 * an origin, which is a node where deformers can be
 * added.
*****************************************************/
{
var drawCircle = function() {
    var r = dist(this.finalCoords[0].x,
                 this.finalCoords[0].y,
                 this.finalCoords[1].x,
                 this.finalCoords[1].y);
    ellipse(this.finalCoords[0].x,
            this.finalCoords[0].y, r, r);
};
    
var Shape = function(data, name) {
    this.name = name;
    this.nodeR = 5;
    
    if (data.origin) {
        this.originalOrigin = new PVector(data.origin[0], data.origin[1]);
    }
    this.originalCoords = data.vertices || [];

    this.fillColor = data.fill;
    this.strokeColor = data.stroke;
    this.strokeWeight = data.strokeWeight || 1;
    this.subdivide = constrain(data.subdivide | 0, 0, 4);

    if (data.drawShape) {
        this.drawShape = data.drawShape.bind(this);
    }

    // Deformers that control this shape
    this.deformers = [];
    
    // Shapes controlled by this one
    this.dependentShapes = [];
    
    this.resetCoords();
    this.updateCurvePoints();
};

// Convert arrays of two coordinates, [x, y], into PVectors
// With values relative to the origin
Shape.prototype.resetCoords = function() {
    this.finalCoords = [];
    for (var i = 0; i < this.originalCoords.length; i++) {
        var coord = this.originalCoords[i];
        this.finalCoords.push(new PVector(coord[0], coord[1]));
    }
    
    if (this.originalOrigin) {
        this.origin = this.originalOrigin.get();
    }
};

Shape.prototype.transform = function(transform, origin, value) {
    for (var i = 0; i < this.finalCoords.length; i++) {
        transform(this.finalCoords[i], origin, value);
    }
    
    this.updateCurvePoints();
    
    for (var i = 0; i < this.dependentShapes.length; i++) {
        var shape = this.dependentShapes[i];
        transform(shape.origin, origin, value);
        shape.transform(transform, origin, value);
    }
};

Shape.prototype.draw = function() {
    if (this.fillColor || this.drawShape) {
        // Shadow
        noStroke();
        fill(0, 0, 0, 50);
        pushMatrix();
        translate(2, 3);
        this.drawShape(true);
        popMatrix();
        
        fill(this.fillColor);
    } else {
        noFill();
    }
    
    if (this.strokeColor) {
        strokeWeight(this.strokeWeight);
        stroke(this.strokeColor);
    } else {
        noStroke();
    }
    
    this.drawShape();
};

Shape.prototype.drawShape = function() {
    beginShape();
    for (var i = 0; i < this.curvePoints.length; i++) {
        var p = this.curvePoints[i];
        vertex(p.x, p.y);
    }
    endShape(CLOSE);
};

Shape.prototype.drawNode = function() {
    if (this.origin) {
    var d = this.nodeR * 2;
    
    if (this.deformers.length) {
        d += 4;
        var isPink = this.mouseOverOrigin();
        if (!isPink) {
            for (var i = 0; i < this.deformers.length; i++) {
                if (this.deformers[i].mouseOver()) {
                    isPink = true;
                    break;
                }
            }
        }
        fill(isPink ? PINK : ORANGE);
    } else {
        fill(120);
    }
    
    strokeWeight(1);
    stroke(250, 250, 250);
    ellipse(this.origin.x, this.origin.y, d, d);
    
    // TODO: Only do this when deformers reordered
    var deformers = [];
    for (var i = 0; i < this.deformers.length; i++) {
        deformers.push(this.deformers[i].index);
    }
    
    deformers.sort(function(a, b) { return a - b; });
    
    textAlign(LEFT, BASELINE);
    textFont(serifFont, 16);
    fill(PINK);
    text(deformers.join(", "), this.origin.x + this.nodeR + 2, this.origin.y);
    }
};

Shape.prototype.updateCurvePoints = function() {
    if (!this.subdivide) {
        this.curvePoints = this.finalCoords;
        return;
    }
    
    this.curvePoints = [];
    
    var q = pow(2, this.subdivide);
    var q2 = q * q;
    var n = this.finalCoords.length;
    var p1, p2, p3, a, b, c, s, t, x, y;
    
    for (var i = 0; i < n; i++) {
        p1 = this.finalCoords[(i + n - 1) % n];
        p2 = this.finalCoords[i];
        p3 = this.finalCoords[(i + 1) % n];
        
        for (t = 0; t < q; t++) {
            s = q - t - 1;
            a = (s * s + s) >> 1;
            c = (t * t + t) >> 1;
            b = q2 - a - c;
            
            x = (p1.x * a + p2.x * b + p3.x * c) / q2;
            y = (p1.y * a + p2.y * b + p3.y * c) / q2;
            this.curvePoints.push({x: x, y: y});
        }
    }
};

Shape.prototype.addDependentShape = function(shape) {
    this.dependentShapes.push(shape);
};

Shape.prototype.removeDeformer = function(deformer) {
    var index = this.deformers.indexOf(deformer);
    this.deformers.splice(index, 1);
};

Shape.prototype.mouseOverOrigin = function() {
    return dist(mouseX, mouseY, this.origin.x, this.origin.y) <= this.nodeR;
};
}
/*****************************************************
 *          Model
 * A character consisting of a set shapes.
 * It also stores the deformers when they are added.
*****************************************************/
{
var Model = function(shapes) {
    this.shapes = {};
    this.deformers = [];
    this.id = 0;
    
    // Position for avar controls
    this.y = 10;
    this.dy = 50;
    
    // Scroll bar ball
    this.scrollX = width - 16;
    this.scrollY = 20;
    this.scrollH = height - 20;
    this.scrollR = 12;
    this.scrollPosition = 0;
    this.setScrollAmount();
    
    this.selectedControl = false;
    
    if (shapes) { this.addShapes(shapes); }
    if (deformers) { this.addDeformers(deformers); }
    if (connections) { this.addConnections(connections); }
};

Model.prototype.draw = function() {
    for (var shape in this.shapes) {
        this.shapes[shape].draw();
    }
    
    if (showing.Deformers) {
        for (var shape in this.shapes) {
            this.shapes[shape].drawNode();
        }
    }
    
    this.drawControls();
};

Model.prototype.drawControls = function() {
    for (var i = 0; i < this.deformers.length; i++) {
        var deformer = this.deformers[i];
        
        if (deformer === this.selectedDeformer) {
            cursor(MOVE);
        } else {
            deformer.draw();
            if (deformer.mouseOverMoveTab()) {
                cursor(MOVE);
            } else if (deformer.elements[0].mouseOver() ||
                       deformer.elements[1].mouseOver()) {
                cursor(HAND);
            }
        }
    }
    
    if (this.selectedDeformer) {
        var x = this.selectedDeformer.x;
        var y = this.selectedDeformer.y;
        
        pushMatrix();
            translate(x, y + this.selectedDeformer.dragY);
            rotate(5);
            // Shadow
            noStroke();
            fill(0, 0, 0, 50);
            rect(3, 3, this.selectedDeformer.w, this.selectedDeformer.h, 8);
            
            // Moving deformer
            translate(-x, -y);
            this.selectedDeformer.draw();
        popMatrix();
    }
    
    // Draw scrollbar
    if (this.maxScroll) {
        fill(BACKGROUND);
        stroke(GUI_GREY);
        strokeWeight(4);
        
        line(this.scrollX, 10, this.scrollX, this.scrollH + 10);
        ellipse(this.scrollX, this.scrollY, this.scrollR * 2, this.scrollR * 2);
    }
};

Model.prototype.setScrollAmount = function() {
    // Length of content that is scrollable
    this.maxScroll = max(0, this.y + this.dy * this.deformers.length - this.scrollH);
    this.scrollScale = this.maxScroll / this.scrollH;
    this.scrollPosition = min(this.scrollPosition, this.maxScroll);
    this.scrollY = map(this.scrollPosition, 0, this.maxScroll, 20, this.scrollH);
};

Model.prototype.addShapes = function(shapes) {
    for (var i = 0; i < shapes.length; i++) {
        var shape = shapes[i];
        
        if (!shape) { continue; }
        
        // Are we creating a circle
        if (shape.radius && shape.center) {
            var center = shape.center;
            shape.vertices = [center, [center[0] + shape.radius, center[1]]];
            shape.drawShape = drawCircle;
        }
        
        this.addShape(shape);
    }
};

Model.prototype.addShape = function(shape) {
    var shapeName = shape.name || "shape" + this.id++;
    this.shapes[shapeName] = new Shape(shape, shapeName);
};

Model.prototype.getShape = function(name) {
    var shape = this.shapes[name];
    if (shape) {
        return shape;
    } else {
        println("ERROR: Invalid index: " + name);
    }
};

Model.prototype.addConnections = function(connections) {
    for (var i = 0; i < connections.length; i++) {
        var shapes = connections[i].split(/\s*->\s*/);
        for (var j = 0; j < shapes.length - 1; j++) {
            var parent = this.getShape(shapes[j]);
            var child = this.getShape(shapes[j + 1]);
            if (parent && child && parent !== child) {
                parent.dependentShapes.push(child);
            }
        }
    }
};

Model.prototype.addDeformers = function(deformers) {
    for (var i = 0; i < deformers.length; i++) {
        var d = deformers[i].split(/\s*->\s*/);
        switch(d[0]) {
            case 'translateX':
                this.addDeformer(deformerData.Tx, d[1]);
                break;
            case 'translateY':
                this.addDeformer(deformerData.Ty, d[1]);
                break;
            case 'scale':
                this.addDeformer(deformerData.S, d[1]);
                break;
            case 'rotate':
                this.addDeformer(deformerData.R, d[1]);
                break;
            default:
                println("ERROR: no such deformer, " + d[0]);
                break;
        }
    }
};

// Check whether dropped deformer hits node. If it does, add it.
Model.prototype.dropDeformer = function(node) {
    for (var el in this.shapes) {
        var shape = this.shapes[el];
        
        // Check whether deformer overlaps with node
        if (dist(node.x, node.y, shape.origin.x, shape.origin.y) <= node.r + shape.nodeR) {
            // Add deformer
            var deformer = deformerData[node.name];
            this.addDeformer(deformer, el);
            break;
        }
    }
};

Model.prototype.addDeformer = function(deformer, shapeName) {
    var shape = this.getShape(shapeName);
    if (!shape) { return; }
    
    var name = deformer.name + " " + shapeName;
    var n = this.deformers.length;
    var y = this.y + this.dy * n;
    var deformer = new DeformerControl(this, y, name, deformer, shape, n + 1);
    
    this.deformers.push(deformer);
    shape.deformers.push(deformer);
    
    this.setScrollAmount();
    this.scrollPosition = this.maxScroll;
    this.scrollY = this.scrollH;
    this.reorderDeformers(0);
};

Model.prototype.removeDeformer = function(deformer) {
    var index = this.deformers.indexOf(deformer);
    if (index !== -1) {
        this.deformers.splice(index, 1);
        this.setScrollAmount();
        this.reorderDeformers(0);
    }
};

// Drag and drop deformers to move them
Model.prototype.rearrangeDeformers = function() {
    var t = this.selectedDeformer;
    if (!t || this.deformers.length < 2) { return; }
    
    var index = this.deformers.indexOf(t);
    
    if (index < this.deformers.length - 1 && t.dragY > t.h / 2) {
        // Move down
        this.deformers[index] = this.deformers[index + 1];
        this.deformers[index + 1] = t;
        t.dragY -= this.deformers[index].h;
        this.reorderDeformers(index);
    } else if (index > 0 && -t.dragY > t.h / 2) {
        // Move up
        this.deformers[index] = this.deformers[index - 1];
        this.deformers[index - 1] = t;
        t.dragY += this.deformers[index].h;
        this.reorderDeformers(index - 1);
    }
};

// Change the y positions of deformer controls to match
// their order, starting with a given control
Model.prototype.reorderDeformers = function(start) {
    for (var i = start; i < this.deformers.length; i++) {
        this.deformers[i].updatePosition(this.y + i * this.dy - this.scrollPosition);
        this.deformers[i].index = i + 1;
    }
    this.update();
};

Model.prototype.update = function() {
    // Reset all coords equal to original positions
    for (var shape in this.shapes) {
        this.shapes[shape].resetCoords();
    }
    
    // Go through deformers in order, updating each shape
    for (var i = 0; i < this.deformers.length; i++) {
        this.deformers[i].updateDeformer();
    }
};

Model.prototype.mousePressed = function() {
    if (this.maxScroll && dist(mouseX, mouseY, this.scrollX, this.scrollY) <= this.scrollR) {
        this.selectedScroll = true;
        return;
    }
    
    for (var i = 0; i < this.deformers.length; i++) {
        if (this.deformers[i].mousePressed()) {
            this.selectedDeformer = this.deformers[i];
            this.selectedDeformer.dragX = 0;
            this.selectedDeformer.dragY = 0;
        }
    }
};

Model.prototype.mouseReleased = function() {
    if (this.selectedDeformer) {
        this.selectedDeformer = false;
    } else {
        callFunctionForEach(this.deformers, 'mouseReleased');
    }
    this.selectedScroll = false;
};

Model.prototype.mouseDragged = function() {
    if (this.selectedDeformer) {
        this.selectedDeformer.dragY += mouseY - pmouseY;
        this.rearrangeDeformers();
    } else if (this.selectedScroll) {
        var d = this.scrollScale * (mouseY - pmouseY);
        this.scrollPosition = constrain(this.scrollPosition + d, 0, this.maxScroll);
        this.scrollY = map(this.scrollPosition, 0, this.maxScroll, 20, this.scrollH);
        this.reorderDeformers(0);
    } else {
        callFunctionForEach(this.deformers, 'mouseDragged');
    }
};
}
/*****************************************************
 * Create display objects
*****************************************************/

// Create our model object
var model = new Model(shapes, connections, deformers);

/*****************************************************
 * Create interface
*****************************************************/
{
var deformerToolbar = new DeformerToolbar(22, 22, model);

for (var deformer in deformerData) {
    deformerToolbar.addDeformer(deformer);
}

var toolbar = new Toolbar(10, 48, 128);
toolbar.addOptions(showing);

var items = [model, toolbar, deformerToolbar];
}
/*****************************************************
 *  Main loop
*****************************************************/

draw = function() {
    cursor();
    drawBackground();
    callFunctionForEach(items, 'draw');
};

/*****************************************************
 *  Event handling
*****************************************************/

mousePressed = function() {
    callFunctionForEach(items, 'mousePressed');
};

mouseDragged = function() {
    callFunctionForEach(items, 'mouseDragged');
};

mouseReleased = function() {
    callFunctionForEach(items, 'mouseReleased');
};

mouseOut = function() {
    mouseReleased();
};
