/*********************************************************
 * Build a Voronoi diagram using Fortune's algorithm.
 * 
 * Can make this more efficient.
 * Final edges are not added to cells correctly
**********************************************************/

var BACKGROUND = color(250, 250, 250);
var PINK = color(255, 0, 175);
var BLUE = color(64, 95, 237);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var COLOURS = [
    color(196, 196, 200),
    color(76, 184, 222),
    color(55, 90, 152),
    color(132, 20, 218),
];

textSize(12);
textAlign(CENTER, BASELINE);
var POINT_SIZE = 6;

/*********************************************************
 *      Get sites
*********************************************************/

var possionDiscSampling = function(meanDistance) {
    // How many points we try before rejecting a point
    var k = 30;
    
    var minDist = meanDistance * 0.75;
    
    // Build grid of samples for quick look
    var cellSize = floor(minDist / Math.SQRT2);
    var gridWidth = width / cellSize;
    var gridHeight = height / cellSize;
    
    var x, y;
    /*
    var sampleGrid = [];
    for (x = 0; x < gridWidth; x++) {
        var row = [];
        for (y = 0; y < gridWidth; y++) {
            row.push([]);
        }
        sampleGrid.push(row);
    }
    */
    
    // Final array of points that we'll return
    var points = [];
    
    // Points that we use to find neighbours
    var activePoints = [];
    
    var addPoint = function(x, y) {
        points.push([x, y]);
        activePoints.push([x, y]);
        //var gridX = floor(x / cellSize);
        //var gridY = floor(y / cellSize);
        //sampleGrid[gridX][gridY] = [x, y];
    };
    
    // Start at a random point
    addPoint((0.2 + random() * 0.6) * width, (0.2 + random() * 0.6) * height);
    
    while (activePoints.length) {
        // Pick a random active point
        var activeIndex = floor(random() * activePoints.length);
        var currentPoint = activePoints[activeIndex];
        
        var pointAdded = false;
        
        for (var i = 0; i < k; i++) {
            var angle = random() * 360;
            var d = minDist + random() * minDist;
            x = currentPoint[0] + cos(angle) * d;
            y = currentPoint[1] + sin(angle) * d;
            
            if (x < 0 || x > width || y < 0 || y > height) {
                continue;
            }
            
            // Check distance from each other point is > minDist
            // TODO make this more efficient using the sampleGrid
            var collision = false;
            for (var j = 0; j < points.length; j++) {
                if (dist(x, y, points[j][0], points[j][1]) < minDist) {
                    collision = true;
                    break;
                }
            }
            
            if (!collision) {
                addPoint(x, y);
                pointAdded = true;
                break;
            }
        }
        
        // Failed to add point so remove it from the active list
        if (!pointAdded) {
            activePoints.splice(activeIndex, 1);
        }
    }
    
    return points;
};

var sites = possionDiscSampling(50);

sites.forEach(function(s) {
    //println("[" + round(s[0]) + ", " + round(s[1]) + "],");
});

/*********************************************************
 *       Site Object
 * Represents an initial point on the diagram.
 * Has methods to draw a parabola using the site
 * as a focus and the sweepline as a directrix.
*********************************************************/
{
var Site = function(focus, id, cell) {
    this.id = id;
    this.x = focus[0];
    this.x2 = this.x * this.x;
    this.y = focus[1];
    this.cell = cell;
};

// Get the parameters of the parabola with the current directrix
Site.prototype.getParabolaCoefficients = function(directrixY) {
    // Vertical distance between focus and directrix
    var d = this.y - directrixY;
    this.y1 = directrixY + 0.5 * d;
    
    // Coeffiecients for equation in standard form
    if (d < 0) {
        this.A = 0.5 / d;
        this.B = -2 * this.A * this.x;
        this.C = this.A * this.x2 + this.y1;
    }
};
}
/*********************************************************
 *          Cell object
 * A cell in a Voronoi diagram
*********************************************************/
{
var Cell = function() {
    this.vertices = [];
    this.colour = color(
        60 + random(150),
        120 + random(120),
        150 + random(100)
    );
};

Cell.prototype.addRight = function(p) {
	this.vertices.push(p);
	this.last = p;
	if (this.vertices.length === 1) {
	    this.first = p;
	}
};

Cell.prototype.addLeft = function(p) {
	this.vertices.unshift(p);
	this.first = p;
	if (this.vertices.length === 1) {
	    this.last = p;
	}
};

Cell.prototype.draw = function(col) {
    //fill(col + (50 << 24));
    //stroke(col);
    //strokeWeight(2);
    
    stroke(this.colour);
    fill(this.colour);
    strokeWeight(1);
    
    beginShape();
    this.vertices.forEach(function(p) {
        vertex(p.x, p.y);
    });
    endShape();
    
    /*
    stroke(GREEN);
    strokeWeight(6);
    this.vertices.forEach(function(p) {
        point(p.x, p.y);
    });
    */
};
}
/*********************************************************
 *          Node object
 * Represents a node in the binary tree
 * Internal nodes represents breakpoint between
 * two arcs in the beachline (left and right).
 * Leaf nodes point to a parabola site and
 * represent an arc in the beachline.
*********************************************************/
{
var Node = function() {
	if (arguments.length === 1) {
	    // Make an arc
	    this.site = arguments[0];
	} else {
	    // Make a breakpoint with the parameters as children
	    this.setChild('left', arguments[0]);
	    this.setChild('right', arguments[1]);
	}
};

Node.prototype.setChild = function(dir, child) {
    this[dir] = child;
    child.parent = this;
};

// Find the arc to the left of this breakpoint
Node.prototype.getLeftArc = function() {
    var node = this.left;
	while (!node.site) {
	    node = node.right;
	}
	return node;
};

Node.prototype.getRightArc = function() {
    var node = this.right;
	while (!node.site) {
	    node = node.left;
	}
	return node;
};

Node.prototype.getParent = function(dir) {
    var parent = this.parent;
	var parentLast = this;
	
	while (parent[dir] === parentLast) { 
		if (!parent.parent) { return; }
		parentLast = parent;
		parent = parent.parent; 
	}
	
	return parent;
};

// If node is a breakpoint, calculate where it intersects
Node.prototype.calculateIntersections = function() {
    if (!this.site) {
        var leftArc = this.getLeftArc();
        var rightArc = this.getRightArc();
        
        // Find intersection of parabolas
        var p1 = leftArc.site;
        var p2 = rightArc.site;
        var a = p1.A - p2.A;
        var b = p1.B - p2.B;
        var c = p1.C - p2.C;
        var discriminant = b * b - 4 * a * c;
        
        if (discriminant >= 0) {
            a *= 2;
            var x1 = (-b + sqrt(discriminant)) / a;
            var x2 = (-b - sqrt(discriminant)) / a;
            var x = p1.y > p2.y ? max(x1, x2) : min(x1, x2);
            
            leftArc.stop = x;
            rightArc.start = x;
            this.x = x;
        }
        
        // Recurse
        this.left.calculateIntersections();
        this.right.calculateIntersections();
    }
};

Node.prototype.getY = function(x) {
    var site = this.site;
    return site.A * x * x + site.B * x + site.C;
};

Node.prototype.finishEdge = function() {
    var edge = this.edge;
    if (edge) {
        var x = edge.dx < 0 ?
            max(width, edge.start.x + 10) :
            min(0, edge.start.x - 10);
        
        var p = { x: x, y: edge.getY(x) };
        edge.end = p;
        
        // Add vertex to cell
        // TODO: Fix this
        var cell1 = edge.siteLeft.cell;
        var cell2 = edge.siteRight.cell;
        
        if (cell1.last === cell2.first) {
            cell1.addRight(p);
            cell2.addLeft(p);
            //println(edge.siteLeft.id + " " + edge.siteRight.id);
        } else {
            cell1.addLeft(p);
            cell2.addRight(p);
        }
        
    }
	if (!this.left.site) { this.left.finishEdge(); }
	if (!this.right.site) { this.right.finishEdge(); }
};

Node.prototype.getSites = function() {
    return this.site ? this.site.id : "(" + this.getLeftArc().site.id + ", "  + this.getRightArc().site.id + ")";
};
}
/*********************************************************
 *          Edge object
 * Represents an edge in Voronoi diagram
 * Edges are created whenever a breakpoint is created
 * They can be ended when a breakpoint is removed.
*********************************************************/
{
var Edge = function(start, siteLeft, siteRight) {
    this.start = start;
    this.siteLeft = siteLeft;
    this.siteRight = siteRight;
    
    // Direction vector
    this.dx = this.siteLeft.y - this.siteRight.y;
    this.dy = this.siteRight.x - this.siteLeft.x;
    
    this.tempEnd = {
        x: this.start.x + this.dx,
        y: this.start.y + this.dy,
    };
    
    // TODO: fix for dy = 0
    this.grad = this.dy / this.dx;
};

Edge.prototype.getY = function(x) {
    return this.start.y + this.grad * (x - this.start.x);
};
}
/*********************************************************
 *          Voronoi object
 * Constructs the cells for a Voronoi diagram.
*********************************************************/

var Voronoi = function(sites) {
	this.events = [];
	this.edges = [];
	this.vertices = [];
	this.cells = [];
    this.initialise(sites);
};

Voronoi.prototype.initialise = function(sites) {
    this.sites = [];
    
    // Add each site to the event queue
    // Add a cell for each site
    for (var i = 0; i < sites.length; i++) {
        var cell = new Cell();
        this.cells.push(cell);
        
        // Convert array of coordinates into a site object
        var site = new Site(sites[i], i, cell);
        this.sites.push(site);
        
		this.events.push({
		    site: site,
		    newArc: true
		});
	}
	
	this.events.sort(function(a, b) {
	    return a.site.y - b.site.y;
	});
};

Voronoi.prototype.draw = function() {
    for (var i = 0; i < this.cells.length; i++) {
        this.cells[i].draw(COLOURS[i % 4]);
    }
    
    // Draw sites
    fill(0);
    stroke(BLUE);
    strokeWeight(POINT_SIZE);
    for (var i = 0; i < this.sites.length; i++) {
        //point(this.sites[i].x, this.sites[i].y);
        //text(this.sites[i].cell.vertices.length, this.sites[i].x, this.sites[i].y);
        text(this.sites[i].id, this.sites[i].x, this.sites[i].y);
    }
    
    // Draw edges
    stroke(PINK + (50 << 24));
    strokeWeight(3);
    var edge;
    for (var i = 0; i < this.edges.length; i++) {
        edge = this.edges[i];
        //line(edge.start.x, edge.start.y, edge.end.x, edge.end.y);
    }
};

Voronoi.prototype.compute = function() {
	while (this.events.length) {
	    var event = this.events.shift();
        this.sweepline = event.site.y;
    
        // Update parabolas with new sweep line position
        for (var i = 0; i < this.sites.length; i++) {
            this.sites[i].getParabolaCoefficients(this.sweepline);
        }
        
        // Loop through breakpoints, updating them and arc start and stop.
        if (this.root) {
            this.root.calculateIntersections();
        }
        
        // Process event
        if (event.newArc) {
            this.insertArc(event.site);
        } else {
            this.removeArc(event);
        }
	}
	
	this.root.finishEdge();
    for (var i = 0; i < this.edges.length; i++) {
	    if (this.edges[i].neighbour) {
	        this.edges[i].start = this.edges[i].neighbour.end;
	    }
    }
};

// Add a new arc with its focus at the given site
Voronoi.prototype.insertArc = function(site) {
    // Create a new arc based on this site
    // TODO: set start and stop values
    var newArc = new Node(site);
    
    // No need to do anything further with the first parabola
    if (!this.root) {
        this.root = newArc;
        newArc.start = 0;
        newArc.stop = width;
        return;
    }
    
    // New Parabola starts as a degenerate parabola
    newArc.start = site.x;
    newArc.stop = site.x;
    
    // Find leaf representing the arc above the new parabola
    var existingArc = this.getArcAbovePointX(site.x);
    
    // Split existing arc into two pieces
    var arc1 = new Node(existingArc.site);
    var arc2 = new Node(existingArc.site);
    
    // Create new breakpoint
    var breakpoint = new Node(newArc, arc2);
    
    // Set breakpoint values
    arc1.start = existingArc.start;
    arc1.stop = site.x;
    arc2.start = site.x;
    arc2.stop = existingArc.stop;
    
    // Update arc neighbours
    arc1.left = existingArc.left;
    arc1.right = newArc;
    arc2.left = newArc;
    arc2.right = existingArc.right;
    newArc.left = arc1;
    newArc.right = arc2;
    
    if (existingArc.left) { existingArc.left.right = arc1; }
    if (existingArc.right) { existingArc.right.left = arc2; }

    // Convert existing arc node to a breakpoint
    existingArc.setChild('left', arc1);
    existingArc.setChild('right', breakpoint);
    
    this.removeCircleEvent(existingArc);
	
	// Add a new edge
	var p = { x: site.x, y: existingArc.getY(site.x) };
    var leftEdge = new Edge(p, existingArc.site, site);
	var rightEdge = new Edge(p, site, existingArc.site);
	
	leftEdge.neighbour = rightEdge;
	this.edges.push(leftEdge);
	existingArc.edge = rightEdge;
	breakpoint.edge = leftEdge;
	
	existingArc.site = false;
	
	// Check for new circle events
    this.checkForCircleEvent(arc1);
	this.checkForCircleEvent(arc2);
};

// Search binary tree for parabola covering given x-position
Voronoi.prototype.getArcAbovePointX = function(x) {
	var node = this.root;
	var testX = 0;
	
	// While we are not at a leaf in the tree (representing an arc).
	while (!node.site) {
	    /*
		testX = findParabolaIntersection(
		    node.getLeftArc().site,
		    node.getRightArc().site
		);
		*/
		node = node.x > x ? node.left : node.right;
	}
	
	return node;
};

Voronoi.prototype.removeArc = function(event) {
    var arc = event.arc;
	var leftArc = arc.left;
	var rightArc = arc.right;

	// Get point where the arc disappears
	var x = event.site.x;
	var p = { x: x, y: arc.getY(x) };
	this.vertices.push(p);
	
	// Get cell associated with this event's arc's site
    var cell = arc.site.cell;
    var leftCell = leftArc.site.cell;
	if (leftCell.last === cell.first) {
	    cell.addLeft(p);
	} else {
	    cell.addRight(p);
	}
	
	leftCell.addRight(p);
	rightArc.site.cell.addLeft(p);
	
	// Add an end point to the two breakpoints that have joined
    var leftBreak = arc.getParent('left');
    var rightBreak = arc.getParent('right');
    leftBreak.edge.end = p;
	rightBreak.edge.end = p;
    
    this.removeCircleEvent(leftArc);
	this.removeCircleEvent(rightArc);
	
	// Find the higher breakpoint
	var higher;
	var parent = arc;
	while (parent !== this.root){
		parent = parent.parent;
		if (parent === leftBreak) { higher = leftBreak; }
		if (parent === rightBreak) { higher = rightBreak; }
	}
	
	higher.edge = new Edge(p, rightArc.site, leftArc.site);
	this.edges.push(higher.edge);

    // Remove leaf from tree and reorder
    parent = arc.parent;
    var gparent = parent.parent;
	
	var d1 = gparent.left === parent ? 'left' : 'right';
	var d2 = parent.left === arc ? 'right' : 'left';
	
	// Set new parents
	gparent.setChild(d1, parent[d2]);
	
	// Join arcs
	leftArc.right = rightArc;
	rightArc.left = leftArc;
	
	this.checkForCircleEvent(leftArc);
	this.checkForCircleEvent(rightArc);
};

Voronoi.prototype.checkForCircleEvent = function(b) {
    var leftBreak = b.getParent('left');
    var rightBreak = b.getParent('right');
    
    if (!leftBreak || !rightBreak) { return; }
    
	var a = leftBreak.getLeftArc();
	var c = rightBreak.getRightArc();
	
	if (!a || !c || a.site === c.site) { return; }
	
	//println(a + " " + b + " " + c);
	
	// Check whether edges of breakpoints intersect
	var e1 = leftBreak.edge;
	var e2 = rightBreak.edge;
	var den = e1.dx * e2.dy - e1.dy * e2.dx;
	
	// Lines are parallel
	if (!den) { return; }
	
	// Cross products
	var c1 = e1.start.x * e1.tempEnd.y - e1.start.y * e1.tempEnd.x;
	var c2 = e2.start.x * e2.tempEnd.y - e2.start.y * e2.tempEnd.x;
	
	// Center circle at intersection point
	var ix = -(c1 * e2.dx - c2 * e1.dx) / den;
	var iy = -(c1 * e2.dy - c2 * e1.dy) / den;
	
	/*
	println((ix - e1.start.x) * e1.dx);
	println((ix - e2.start.x) * e2.dx);
	println((iy - e1.start.y) * e1.dy);
	println((iy - e2.start.y) * e2.dy);
    */
	
	// Test whether edge is in the wrong direction
	if ((ix - e1.start.x) * e1.dx > 0 || (iy - e1.start.y) * e1.dy > 0 ||
	    (ix - e2.start.x) * e2.dx > 0 || (iy - e2.start.y) * e2.dy > 0) {
		return;
	}

	var radius = dist(ix, iy, a.site.x, a.site.y);
	
	//println(radius);
	//println(ix + " " + iy);
	
	// Convert center to lower edge
	iy += radius;
	
	// Ignore circle if the sweep line has passed
	if (iy <= this.sweepline) { return; }
	
	// Create new event
	var event = {
	    site: { x: ix, y: iy },
	    radius: radius,
	    arc: b
	};
	
	b.circleEvent = event;
	this.events.push(event);
	this.events.sort(function(a, b) {
	    return a.site.y - b.site.y;
	});
	
	//println("Add circle event: " + a + " " + b + " " + c);
};

// Remove a circle event associated with the given arc
Voronoi.prototype.removeCircleEvent = function(arc) {
    //println("Remove circle event " + arc);
    if (arc.circleEvent) {
        //println("Removed");
	    var index = this.events.indexOf(arc.circleEvent);
        if (index > -1) { this.events.splice(index, 1); }
        arc.circleEvent = null;
	}
};

/*********************************************************
 *      Create object
*********************************************************/

var voronoi = new Voronoi(sites);
var ms = millis();
voronoi.compute();
println(millis() - ms);
// 100 - 149

/*********************************************************
 *      Main Loop
*********************************************************/

var draw = function() {
    background(BACKGROUND);
    voronoi.draw();
};

/*********************************************************
 *      Event handling
*********************************************************/
{

var mousePressed = function() {
};

var mouseReleased = function() {
};

var mouseDragged = function() {
};
}
