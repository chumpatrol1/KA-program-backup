var blockSize = 30;
var selected = false;

var lineSegment = {
    x1: 20,
    y1: 120,
    x2: 200,
    y2: 79,
    
    draw: function() {
        strokeWeight(2);
        stroke(255, 0, 0, 120);
        line(this.x1, this.y1, this.x2, this.y2);
        noFill();
        ellipse(this.x1, this.y1, 5, 5);
    }
};

// A block like element, centered on (x, y), with width, w, and height, h.
var Element = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w || blockSize;
    this.h = h || blockSize;

    this.color = color(120);
    this.findVertices();
};

Element.prototype.findVertices = function() {
    this.x1 = this.x - this.w * 0.5;
    this.x2 = this.x + this.w * 0.5;
    this.y1 = this.y - this.h * 0.5;
    this.y2 = this.y + this.h * 0.5;
};

Element.prototype.draw = function() {
    noStroke();
    fill(this.color);
    rect(this.x1, this.y1, this.w, this.h, 4);
    
    if (this.hit) {
        stroke(255, 0, 0);
        noFill();
        ellipse(this.hit[0], this.hit[1], 5, 5);
    }
};

Element.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
    this.findVertices();
};

Element.prototype.mouseOver = function() {
    return mouseX >= this.x1 && mouseX <= this.x2 &&
           mouseY >= this.y1 && mouseY <= this.y2;
};

Element.prototype.findIntersection = function(lineSegement) {
    var dx = lineSegement.x2 - lineSegement.x1;
    var dy = lineSegement.y2 - lineSegement.y1;
    
    this.hit = false;
    
    // Hit left
    if (lineSegement.x1 < this.x1 && lineSegement.x2 > this.x1) {
        // Hit right
        var y = lineSegement.y1 + (this.x1 - lineSegement.x1) * dy / dx;
        if (y >= this.y1 && y <= this.y2) {
            this.hit = [this.x1, y];
            return;
        }
    } else if (lineSegement.x1 > this.x2 && lineSegement.x2 < this.x2) {
        // Hit right
        var y = lineSegement.y1 + (this.x2 - lineSegement.x1) * dy / dx;
        if (y >= this.y1 && y <= this.y2) {
            this.hit = [this.x2, y];
            return;
        }
    }

    // Hit top
    if (lineSegement.y1 < this.y1 && lineSegement.y2 > this.y1) {
        var x = lineSegement.x1 + (this.y1 - lineSegement.y1) * dx / dy;
        if (x >= this.x1 && x <= this.x2) {
            this.hit = [x, this.y1];
            return;
        }
    } else if (lineSegement.y1 > this.y2 && lineSegement.y2 < this.y2) {
        // Hit bottom
        var x = lineSegement.x1 + (this.y2 - lineSegement.y1) * dx / dy;
        if (x >= this.x1 && x <= this.x2) {
            this.hit = [x, this.y2];
            return;
        }
    }
};

var elements = [
    new Element(120, 20),
    new Element(120, 50),
    new Element(120, 80),
    new Element(120, 125),
    new Element(220, 20),
];

var display = function() {
    background(255);
    elements.forEach(function(e) {
        e.findIntersection(lineSegment);
        e.draw();
    });
    lineSegment.draw();
};

mousePressed = function() {
    for (var i = elements.length; i--;) {
        if (elements[i].mouseOver()) {
            selected = elements[i];
            break;
        }
    }
};

mouseDragged = function() {
    if (selected) {
        selected.move(mouseX - pmouseX, mouseY - pmouseY);
    }
    display();
};

mouseReleased = function() {
    selected = false;
};

mouseOut = mouseReleased;

display();
