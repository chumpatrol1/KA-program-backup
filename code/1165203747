var populationSize = 10;
var minValue = 2;
var maxValue = 20;
var sampleSize = 3;

// Display variables
var graphX = 20;
var popGraphY = 40;
var sampleGraphY = 220;
var graphHeight = 100;
var cross = 3;  // Size of cross
var gap = 5;    // Gap between data
var scaleX = (graphHeight - 5) / maxValue;

var titleFont = createFont("Times", 18);
var labelFont = createFont("Arial", 10);

var createPopulation = function(N) {
    var population = [];
    var popRange = maxValue - minValue;
    
    for (var i=0; i<N; i++) {
        population.push(minValue + floor(random()*popRange));
    }
    
    return population;
};

var calculateParameters = function(pop) {
    var i;
    var mean = 0;
    
    for (i=0; i<pop.length; i++) { 
        mean += pop[i];
    }    
    mean /= pop.length;
    
    // Total difference from mean
    var difference = 0;
    var variance = 0;
    for (i=0; i<pop.length; i++) {
        var delta = abs(pop[i] - mean);
        difference += delta;
        variance += delta * delta;
    } 

    variance /= pop.length;
    return [mean, variance, difference];
};

var getRandomSample = function(population, size) {
    if (size >= population.length) {
        return population;
    }
    
    var sampleIndices = [];
    var sample = [];
    var i;
    
    var populationCopy = [];
    for (i=0; i<population.length; i++) {
        populationCopy.push(i);
    }
    
    for (i=0; i<size; i++) {
        var x = floor(random() * populationCopy.length);
        var index = populationCopy[x];
        sampleIndices.push(index);
        sample.push(population[index]);
        populationCopy.splice(x, 1);
    }

    return [sample, sampleIndices];
};

var population = createPopulation(populationSize);
var popStats = calculateParameters(population);
var popMean = popStats[0];
var popVar = popStats[1];

var sample = getRandomSample(population, 3);
var sampleIndices = sample[1];
var sampleStats = calculateParameters(sample[0]);
var sampleMean = sampleStats[0];
var sampleVar = sampleStats[1];

var allGaps = (population.length + 2) * gap;
var graphWidth = popStats[2] * scaleX + allGaps;
if (graphWidth > 360) {
    graphWidth = 360;
    scaleX = (graphWidth - allGaps) / popStats[2];
}

var drawData = function (x, data, size, mean, graphY) {
    var meanLine = graphY - mean * scaleX;
    var value = data * scaleX;
    
    noStroke();
    fill(0, 150, 0, 160);
    if (data > mean) {
        rect(x, meanLine - size, size, size);  
    } else {
        rect(x, meanLine + 1, size, size);
    }
    
    /*
    stroke(100, 100, 200);
    line(x, graphY - value, x, graphY);
    */
    
    // Cross
    stroke(20, 20, 20);
    x += size/2;
    line(x-cross, graphY-value-cross,
         x+cross, graphY-value+cross);
    line(x+cross, graphY-value-cross,
         x-cross, graphY-value+cross);  
};

var drawMeanLine = function (mean, graphY, name) {
    var x = graphX;
    var dashSize = 4;
    var meanLine = graphY - mean * scaleX;
    
    fill(10, 10, 20);
    stroke(10, 10, 20);
    
    while (x < graphX + graphWidth) {
        line(x, meanLine, x + dashSize, meanLine);
         x += dashSize * 2;
    }
    
    textFont(labelFont, 10);
    text (name, x, meanLine + 3);
};

var graphPopulation = function(pop, graphY) {
    var x = graphX + cross + gap;
    
    for (var i=0; i<pop.length; i++) {
        var size = abs(pop[i] - popMean) * scaleX;
        drawData(x, pop[i], size, popMean, graphY);
        x += size + gap;
    }

    drawMeanLine(popMean, graphY, "Mean");

    // Axes
    stroke(20, 20, 20);
    line(graphX, graphY, graphX + graphWidth, graphY);
    line(graphX, graphY, graphX, graphY - graphHeight);
    
    // Mean Square (variance)
    //fill(20, 80, 255, 80);
    //rect(graphX, graphY+36, popVar, popVar); 
};

var graphSample = function (sample, pop, graphY) {
    var x = graphX + cross + gap;
    
    for (var i=0; i<pop.length; i++) {
        var size = abs(pop[i] - popMean) * scaleX;
        for (var j=0; j<sample.length; j++) {
            if (i === sample[j]) {
                drawData(x, pop[i], size, popMean, graphY);
                var meanLine = graphY - sampleMean * scaleX;
                    
                // second square
                noFill();
                stroke(0, 100, 0);
                var s2 = abs(pop[i] - sampleMean) * scaleX;
                if (pop[i] > sampleMean) {
                    rect(x-0.5*(s2 - size)-1, meanLine - s2, s2, s2);  
                } else {
                    rect(x-0.5*(s2 - size)-1, meanLine, s2, s2);
                }

                break;
            }
        }
        x += size + gap;
    }
    
    drawMeanLine(sampleMean, graphY, "Mean");
    
    // Axes
    line(graphX, graphY, graphX + graphWidth, graphY);
    line(graphX, graphY, graphX, graphY - graphHeight);
};

var draw = function() {
    background(245, 245, 255);
    graphPopulation(population, popGraphY + graphHeight);
    graphSample(sampleIndices, population, sampleGraphY + graphHeight);

    fill(20, 20, 40);
    textFont(titleFont, 18);
    text("Population", graphX - 5, popGraphY - 10);
    text("Sample", graphX - 5, sampleGraphY - 10);
};
