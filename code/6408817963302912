/**************************************************
 * 17/05/15 {
 *   Create World object.
 *   Draw grid of grass tiles
 *   Cache tiles
 *   Generate water at the edges of the map
 *   Add Towns and roads
 *   Move with arrow keys
 *}
 * 18/05/15 Add trees, rocks, gems
 * 24/05/15 {
 *   Limit roads to towns on this row and above
 *   Draw city walls where there are no roads
 * }
 * 05/06/15 {
 *   Add Creature object
 *   Add Player object 
 *   Add player and draw her
 *   Add player move function including impassible tiles
 *   Start moving map with player (too jerky)
 * }
 * 06/06/15 {
 *   Fix map offset when moving
 * }
***************************************************/

/**************************************************
 *  Parameters for map properities.
***************************************************/
// Percents don't include road, city and water
var PERCENT_TREES = 15;
var PERCENT_ROCKS = 5;
var PERCENT_GEMS = 0.2;

/************************************************************
 *  Tiles for different ground types
 *    Speed determines how fast creature walk over the tile.
 *    If speed is undefined the tile is impassible
*************************************************************/

var tileBases = {
    grass: {
        image: getImage("cute/GrassBlock"),
        speed: 1
    },
    path: {
        image: getImage("cute/DirtBlock"),
        speed: 1.6
    },
    bridge: {
        image: getImage("cute/WoodBlock"),
        speed: 1.25
    },
    stone: {
        image: getImage("cute/StoneBlock"),
        speed: 1.6
    },
    water: {
        image: getImage("cute/WaterBlock"),
    },
    sand: {
        image: getImage("cute/BrownBlock"),
        speed: 0.9
    },
    wall: {
        image: getImage("cute/WallBlockTall"),
    },
};

var tileObjects = {
    tree1: {
        image: getImage("cute/TreeShort"),
        impassible: true,
        draw: function(x, y) {
            image(this.image, x, y);
        }
    },
    tree2: {
        image: getImage("cute/TreeUgly"),
        impassible: true,
        draw: function(x, y) {
            image(this.image, x, y);
        }
    },
    tree3: {
        image: getImage("cute/TreeTall"),
        impassible: true,
        draw: function(x, y) {
            image(this.image, x, y);
        }
    },
    rock: {
        image: getImage("cute/Rock"),
        impassible: true,
        draw: function(x, y) {
            image(this.image, x, y);
        }
    },
    gem: {
        name: "gem",
        image: getImage("cute/GemBlue"),
        collectable: true,
        draw: function(x, y) {
            var w = this.image.width;
            var h = this.image.height;
            image(this.image, x + w * 0.2, y + h * 0.35, w * 0.6, h * 0.6);
        }
    },
    signpost: {
        draw: function(x, y) {
            strokeWeight(1);
            stroke(170, 90, 20);
            fill(200, 120, 40);
            //rect(x + dx * 0.4, y + dy * 0.3, dx * 0.15, dy * 0.8);
            //rect(x + dx * 0.15, y + dy * 0.3, dx * 0.65, dx * 0.15);
        }
    }
};

// Save object positions so they are not spawned when the tile cache is emptied
var objectCache = {};

/**************************************************
 *  Creature object
***************************************************/

var Creature = function(world, x, y, level) {
    this.world = world;
    this.x = x;
    this.y = y;
    this.level = level;
    this.speed = 0;
    this.animation = 0;
    this.animationLength = 10;
};

Creature.prototype.draw = function(x, y) {
    if (this.image) {
        y -= 8 * sin(180 * this.animation / this.animationLength);
        image(this.image, x, y);
    }
    if (this.animation > 0) {
        this.animation--;
    }
    //println(this.y);
};

Creature.prototype.move = function(dx, dy) {
    var bonus = 1;//tileCache[round(this.x) + "," + round(this.y)].speed || 1;
    var speed = this.speed * bonus;
    
    var newX = this.x + speed * dx;
    var newY = this.y + speed * dy;
    
    // Check for impassibility
    // TODO: make this more efficient
    var d = 0.25;
    var x1 = floor(newX + d);
    var x2 = ceil(newX - d);
    var y1 = floor(newY + d);
    var y2 = ceil(newY - 2 * d);
    var tiles = this.world.tiles;
    
    if (!tiles[x1 + "," + y1].speed ||
        !tiles[x1 + "," + y2].speed ||
        !tiles[x2 + "," + y1].speed ||
        !tiles[x2 + "," + y2].speed) {
            return;
    }
    
    this.x = newX;
    this.y = newY;
    // println(this.x + " " + this.y);
    
    if (!this.animation) {
        this.animation = this.animationLength;
    }

    //tileCache[round(this.x) + "," + round(this.y)].walkOver();
};

/**************************************************
 *  Player is a type of Creature
***************************************************/

var Player = function(world, x, y, level) {
    Creature.call(this, world, x, y, level);
    
    this.image = getImage("cute/CharacterHornGirl");
    
    this._base_speed = 16;
    this.speed = log(this._base_speed) * 0.015;
    
    this.items = [];
};
Player.prototype = Object.create(Creature.prototype);

/************************************************************
 *  Tiles Object
 * Controls what is drawn on a tile
*************************************************************/

var Tile = function(base) {
    this.base = tileBases[base].image;
    this.speed = tileBases[base].speed;
    this.objects = [];
    this.h = this.base.height * 0.2;
};

Tile.prototype.draw = function(x, y) {
    image(this.base, x, y);
    
    for (var i = 0; i < this.objects.length; i++) {
        this.objects[i].draw(x, y - this.h);
    }
};

Tile.prototype.addObject = function(obj, id) {
    if (id) {
        if (!objectCache[id]) {
            objectCache[id] = obj;
        } else {
            return;
        }
    }
    
    var obj = tileObjects[obj];

    this.objects.push(obj);
    if (obj.impassible) {
        this.speed = 0;
    }
};
/**************************************************
 *      World object
***************************************************/

var World = function(tileScale) {
    this.tileScale = tileScale;
    
    this.cameraX = 0;
    this.cameraY = 0;
    
    // Tile width and height before scaling
    this.dx = tileBases.grass.image.width;
    this.dy = tileBases.grass.image.height / 2;
    
    this.tilesAcross = ceil(width / this.dx / tileScale);
    this.tilesDown = ceil(height / this.dy / tileScale);
    
    // Parameters for world building
    this.blockSize = 7;
    
    // How many blocks apart are roads and towns?
    this.roadX = this.blockSize * 2;
    this.roadY = this.blockSize * 5;
    
    // Position of towns in a block
    this.townX = this.blockSize;
    this.townY = this.blockSize * 2;
    
    // Map position to tile to save recalculation
    this.tiles = {};
    this.tileCacheCount = 0;
    this.MAX_TILE_CACHE = 400;
    
    this.player = false;
    this.creatures = {};
};

World.prototype.draw = function() {
    background(255);
    
    // Find world coordinate in bottom left corner
    var startX = this.cameraX - this.tilesAcross / 2;
    var startY = this.cameraY - this.tilesDown / 2;
    
    // Find first tile (bottom left)
    var startTileX = floor(startX);
    var startTileY = floor(startY);
    
    var i = max(0, floor(this.cameraX));
    var j = max(0, floor(this.cameraY));
    var offsetX = startX - startTileX;
    var offsetY = startY - startTileY;
    var h = height / this.tileScale;
    
    pushMatrix();
    scale(this.tileScale, this.tileScale);
    
    var tileX, tileY, x, y, tile;
    for (var y = this.tilesDown + 1; y >= -1; y--) {
        tileY = (this.tilesDown - y - 1 + offsetY) * this.dy;
        
        for (var x = 0; x <= this.tilesAcross; x++) {
            tile = this.getTile(startTileX + x, startTileY + y);
            if (tile) {
                tile.draw((x - offsetX) * this.dx, tileY);
            } else {
                println("ERROR: Tile not found at (" + i + ", " + j + ")");
            }
        }
        
        if (this.player && round(this.player.y - 0.25) === y + startTileY) {
            this.player.draw(
                (this.player.x - startTileX - offsetX) * this.dx,
                 h - (this.player.y - startTileY + 1 - offsetY) * this.dy);
        }
    }
    
    popMatrix();
};

// Check tileCache otherwise calculate and save
World.prototype.getTile = function(i, j) {
    var id = i + "," + j;
    
    if (!this.tiles[id]) {
        this.tiles[id] = this.calculateTile(i, j);
        this.tileCacheCount++;
        if (this.tileCacheCount > this.MAX_TILE_CACHE) {
            this.removeTileFromCache();
            this.tileCacheCount--;
        }
    }
    return this.tiles[id];
};

World.prototype.calculateTile = function(i, j) {
    //println("Get tile " + i + ", " + j);
    
    // Create some noise and look at the numbers
    // at the 4th and 5th decimal place
    var noiseValue = noise(i * 0.07, j * 0.07);
    var noiseNum = round(noiseValue * 100000);
    var shore = (noiseNum % 10) / 3;
    var water = noiseNum < 36600;
    
    // Water on left and lower edge
    if (i <= 0 || j <= 0) {
        return new Tile('water');
    } else if (i - shore <= 0 || j - shore <= 0) {
        water = true;
    }
    
    // What are the coordinates of this tileblock
    // Tileblocks are 7 by 7 blocks of tiles
    var blockX = floor(i / this.roadX);
    var blockY = floor(j / this.roadY);
    
    // Which tile within the tileset
    var inTileX = i - blockX * this.roadX;
    var inTileY = j - blockY * this.roadY;
    
    // Return an array of the block where towns are for a given row
    // Sort so we know the left most and rightmost town
    // TODO: cache this?
    var townsForRow = function(row) {
        return [(row * 3) % (row + 3), (row * 4) % (row  + 3)];
    };
    
    var checkTown = function(towns) {
        return (blockX === towns[0] || blockX === towns[1]);
    };
    
    var townsHere = townsForRow(blockY);
    var townsBelow = townsForRow(max(0, blockY - 1));
    var isTownHere = checkTown(townsHere);
    var isTownBelow = checkTown(townsBelow);
    
    // Get sorted array of the blocks where towns are on this row and above
    var townRoads = townsHere.concat(townsBelow).sort(function(a, b) {return a - b;});
    
    // Are we the leftmost town?
    var isLeftTown = blockX === townRoads[0];
    
    // Are we the rightmost town?
    var isRightTown = blockX === townRoads[3];
    
    // Create city
    if (isTownHere) {
        var dx = inTileX - this.townX;
        var dy = inTileY - this.townY;
        
        if  (abs(dx) < 3 && abs(dy) < 3) {
            // Add town walls and floor
            if (abs(dx * dy) > 1 || 
               (!isTownBelow && dy === -2) ||
               (isLeftTown && dx === -2) ||
               (isRightTown && dx === 2)) {
                return new Tile('wall');
            } else {
                return new Tile('stone');
            }
        }
    }
    
    var onRoad = false;
    // Horizontal roads in the middle of every <this.roadY> blocks between the towns on this row and the row above
    if (inTileY === this.townY && blockX >= townRoads[0] && blockX <= townRoads[3]) {
        onRoad = !((isLeftTown && inTileX < this.townX) || (isRightTown && inTileX > this.townX));
    }
    
    // Vertical roads from towns
    if (inTileX === this.townX) {
        onRoad = onRoad || (inTileY < this.townY ? isTownBelow : isTownHere);
    }
    
    if (onRoad) {
        return water ? new Tile('bridge') : new Tile('path');
    }
    
    // Default to grass
    var tile = new Tile('grass');
    
    // Pools of water
    if (water) {
        return new Tile('water');
    }
    // Sand
    if (noiseNum < 37500) {
        //return new Tile('sand');
    }
    
    // Add objects Trees
    var n = (noiseNum % 1000) / 10;
    if (n < PERCENT_TREES + PERCENT_ROCKS + PERCENT_GEMS) {
        if (n < PERCENT_TREES) {
            var tree = ['tree1', 'tree2', 'tree3'][noiseNum % 3];
            tile.addObject(tree);
        } else if (n - PERCENT_TREES < PERCENT_ROCKS) {
            tile.addObject('rock');
        } else {
            tile.addObject('gem', i + "," + j);
        }
    }
    
    return tile;
};

// Remove the first n items in the tile cache
World.prototype.removeTileFromCache = function(n) {
    n = n || 1;
    var counter = 0;
    
    for (var item in this.tiles) {
        delete this.tiles[item];
        counter++;
        
        if (counter === n) {
            break;   
        }
    }
};

World.prototype.addPlayer = function(x, y, level) {
    this.player = new Player(this, x, y, level);
};

/**************************************************
 *      Setup
***************************************************/

var world = new World(1 / 2.5);
world.addPlayer(7, 3, 1);

/**************************************************
 *      Key controls
***************************************************/

var keys = [];
var keyHandling = function() {
    if (world.player) {
        if (keys[UP] || keys[87]) {
            world.player.move(0, 1);
        } else if (keys[DOWN] || keys[83]) {
            world.player.move(0, -1);
        }
        
        if (keys[LEFT] || keys[65]) {
            world.player.move(-1, 0);
        } else if (keys[RIGHT] || keys[68]) {
            world.player.move(1, 0);
        }
    }
    
    world.cameraX = world.player.x;
    world.cameraY = world.player.y;
};

/**************************************************
 *      Main Loop
***************************************************/

var draw = function() {
    var m = millis();
    keyHandling();
    world.draw();
    
    fill(0);
    //text(millis() - m, 10, 20);
    //text(world.tileCacheCount, 10, 35);
    text(world.player.x.toFixed(3) + " " + world.player.y.toFixed(3), 10, 20);
    //text(world.cameraX.toFixed(3) + " " + world.cameraY.toFixed(3), 10, 20);
};

/**************************************************
 *      Event handling
***************************************************/

keyPressed = function() {
    keys[keyCode] = true;
};

keyReleased = function() {    
    keys[keyCode] = false;
};

mouseDragged = function() {
    var speed = 0.2;
    /*
    world.cameraX += speed * (mouseX - pmouseX);
    world.cameraY += speed * (pmouseY - mouseY);
    world.cameraX = max(0, world.cameraX);
    world.cameraY = max(0, world.cameraY);
    */
};
