/**********************************************************
*   Exploring energy of a fluid in a tube of 
*       non-constant diameter
* 
* Constantly calculates the arithmetic mean for each section of:
*   Mean Velocity in the rightward direction
*   Cell Density (number of cell / area)
*   Movement energy = density * velocity squared
*   Pressure - average force outwards on wall / wall length
* 
* Related to this video: http://www.khanacademy.org/science/healthcare-and-medicine/arterial-stiffness/v/bernoulli-s-equation-of-total-energy
* 
*     --- To do ---
* Draw graphs?
**********************************************************/

/******************************************************
 * Variables most interesting to change
*******************************************************/

// List of widths and height for each section in the tube
var wallSections = [[120, 100], [80, 50], [160, 100]];

// Probability of an cell entering the system
// Related to flow rate somehow
var pCellEntering = 0.1;

// Energy of atoms in wall
var wallTemp = 3.5;

// Only used for display purposes
var cellSize = 3;

/******************************************************
 * Vessel variables
*******************************************************/
// Calculate the dimensions of the vessel
var wallLength = 0;
var wallHeight = 0;
var sectionVolumes = [];

for (var i=0; i<wallSections.length; i++) {
   wallLength += wallSections[i][0];
   wallHeight = max(wallHeight, wallSections[i][1]);
   sectionVolumes.push(wallSections[i][0] * wallSections[i][1]);
}

// Create array of heights and sections number 
// of length wallLength for easy lookup
var sections = [];
var wallHeights = [];
var boundaries = [wallSections[0][0]];
var s = 0;
for (var x=0; x < wallLength; x++) {
    if (x > boundaries[s]) {
        s++;
        boundaries.push(boundaries[s-1] + wallSections[s][0]);
    }
    wallHeights.push(wallSections[s][1]);
    sections.push(s);
}

var wallThickness = 4;  // For display purpuses only
var wallX = 0.5 * (400 - wallLength);
var wallY = 80;    // Middle of vessel
var wallY1 = wallY - wallHeight/2 - wallThickness;
var wallY2 = wallY + wallHeight/2 + wallThickness;

for (var i=0; i<boundaries.length; i++) {
    boundaries[i] += wallX;
}

/******************************************************
 * Meaurement variables
*******************************************************/

var iterationCount = 0;
var measurements = {
    velocities: [],
    atomCount: [],
    pressure: [],
    meanVelocity: [],
    meanCellCount: [],
    meanMovementE: [],
    meanPressure: []
};
var meanValues = ['meanVelocity', 'meanCellCount',
                  'meanMovementE', 'meanPressure'];

for (var i=0; i<boundaries.length; i++) {
    for (var key in measurements) {
        measurements[key].push(0);
    }
}

// Info box variables
var myFont = createFont("Times", 15);
var boxX = 20;
var boxY = wallY2 + 42;
var boxWidth = 360;
var boxHeight = 200;
var boxDataX = boxX + 126;
var boxDataWidth = (boxWidth-boxDataX+boxX) / wallSections.length;

/******************************************************
 * Blood cell variables
 * Sometimes the word 'atom' is used due to the program
 * this code is based on.
*******************************************************/
// Distance at which cells repel
var REPULSION_LENGTH = 10;
var REPULSION_STRENGTH = 0.5;

// Cell display variables
var hotColour = color(255, 198, 194);
var coolColour = color(120, 0, 0);

// Cell object with a position and velocity 
var Cell = function(x, y, r) {
    this.x = x;
    this.y = y;
    this.r = r;
    
    this.dx = wallTemp * (random() - 0.5);
    this.dy = wallTemp * (random() - 0.5);
    
    // Move atom based on its velocity
    this.move = function() {
        this.x += this.dx;
        this.y += this.dy;
    };
    
    // Calculate the kinetic energy of an atom
    this.temp = function() {
        return sqrt(this.dx * this.dx + this.dy * this.dy);
    };
    
    // Colour based on heat
    this.colour = function() {
        return lerpColor(coolColour, hotColour, this.temp()/5);
    };
    
    // Bounce off walls
    this.bounce = function() {
        var temp = this.temp();
        var dtemp = 0.75 * (temp + wallTemp) / (2 * temp);
        if (this.x < wallX + 5) {
            this.dx *= -dtemp;
            this.x = 2 * (wallX + 5) - this.x;
        } else if (this.x > wallX + wallLength) {
            // Disappear
            return true;
        }
        
        var h = wallHeights[round(this.x - wallX)] / 2;
        var hBounce;
        var section = sections[round(this.x - wallX)];
        
        if (this.y < wallY - h) {
            // Check for collision with a horizontal wall
            hBounce = this.horizontalCollision(dtemp);
            
            // If still collides, bounce on vertical
            h = wallHeights[round(this.x - wallX)] / 2;
            if (this.y < wallY - h) {
                if (!hBounce) {
                    measurements.pressure[section] -= this.dy;
                    this.y = 2 * (wallY - h) - this.y;   
                }
                this.dy *= -dtemp;
            }
        } else if (this.y > wallY + h) {
            hBounce = this.horizontalCollision(dtemp);
            
            // If still collides, bounce on vertical
            h = wallHeights[round(this.x - wallX)] / 2;
            if (this.y > wallY + h) {
                if (!hBounce) {
                    this.y = 2 * (wallY + h) - this.y;
                    measurements.pressure[section] += this.dy;
                }
                this.dy *= -dtemp;
            }
        }
        return false;
    };
    
    this.horizontalCollision = function(dtemp) {
        var threshold = 3;
        var boundary = false;
        
        for (var i=0; i<boundaries.length; i++) {
            if (abs(this.x - boundaries[i]) < threshold) {
                boundary = boundaries[i];
                break;
            }
        }
        if (boundary) {
            this.dx *= -dtemp;
            this.x = 2 * boundary - this.x;
            return true;
        } else {
            return false;
        }
    };
    
    this.interact = function(that) {
        var dx = this.x - that.x;
        var dy = this.y - that.y;
        
        var dist = sqrt(dx * dx + dy * dy);
        if (dist < REPULSION_LENGTH) {
            var force = REPULSION_STRENGTH*(1-dist/REPULSION_LENGTH);
            var theta = atan2(dy, dx);
            
            this.dx = this.dx + force * cos(theta);
            that.dx = that.dx - force * cos(theta);
            this.dy = this.dy + force * sin(theta);
            that.dy = that.dy - force * sin(theta);
        }
    };
    
    this.makeMeasurements = function() {
        var section = sections[round(this.x - wallX)];
        measurements.atomCount[section]++;
        measurements.velocities[section] += this.dx;
    };
};

// Position atoms randomly with a uniform density distribution
// i.e. narrow regions are less likely to have atoms
var atoms = [];

/*
while (atoms.length < numAtoms) {
    var x = round(random() * wallLength);
    var y = round(random() * wallHeight) - wallHeight/2;
    
    if (abs(2 * y) + atomSize < wallHeights[parseInt(x, 1)]) {
        atoms.push(new Atom(wallX + x, wallY + y, atomSize)); 
    }
}
*/

var addCells = function() {
    if (random() < pCellEntering) {
        var y = wallY1 + round(random() * wallHeight);
        var cell = new Cell(wallX + cellSize, y, cellSize);
        atoms.push(cell);
        cell.dx = abs(cell.dx);
        cell.dy *= 0.5;
    }
};

var drawBloodVessel = function() {
    fill(224, 29, 29);
    var x = wallX;
    var y;
    for (var i=0; i<wallSections.length; i++) {
        var newY = 0.5 * wallSections[i][1];
        var newX = x + wallSections[i][0];
        
        // Colour walls
        noStroke();
        var h = (wallHeight - wallSections[i][1])/2 + wallThickness;
        rect(x, wallY1, wallSections[i][0], h);
        rect(x, wallY2 - h, wallSections[i][0], h);
             
        // Inner walls (vertical)
        stroke(186, 9, 9);
        strokeWeight(2);
        line(x, wallY - newY, newX - 1, wallY - newY);
        line(x, wallY + newY, newX - 1, wallY + newY);
        
        // Inner walls (horizontal)
        if (i > 0 && newY !== y) {
            if (newY < y) {
                line(x, wallY - y, x, wallY - newY-1);
                line(x, wallY + y-1, x, wallY + newY);
            } else {
                line(x, wallY - y-1, x, wallY - newY);
                line(x, wallY + y, x, wallY + newY -1);
            }
        }
        
        x = newX;
        y = newY;
    }
    
    // Outer walls
    line(wallX, wallY1, wallX + wallLength-1, wallY1);
    line(wallX, wallY2, wallX + wallLength-1, wallY2);
};
    
var drawInfoBox = function() {
    noStroke();
    fill(100, 100, 100);
    rect(boxX + 2, boxY + 2, boxWidth, boxHeight, 8);
    fill(255, 250, 255);
    rect(boxX, boxY, boxWidth, boxHeight, 8);    
    
    stroke(10, 10, 10);
    fill(10, 10, 10);
    strokeWeight(1);
    textFont(myFont, 13);
    
    var x = wallX;
    for (i=0; i<wallSections.length; i++) {
        line(x+1, wallY2+6, boundaries[i]-1, wallY2+6);
        line(x+1, wallY2 + 3, x+1, wallY2 + 9);
        line(boundaries[i]-1, wallY2+3, boundaries[i]-1, wallY2+9);
        
        text("Section "+(i+1), 0.5*(x + boundaries[i]), wallY2+16);
        x = boundaries[i];
    }
    
    textFont(myFont, 15);
    textAlign(LEFT, CENTER);
    x = boxX + 10;
    text("Number of cells:", x, boxY + 40);
    text("Cell density:", x, boxY + 64);
    text("Mean velocity:", x, boxY + 88);
    text("Movement energy:", x, boxY + 112);
    text("Pressure:", x, boxY + 136);
    text("Total energy:", x, boxY + 160);
    
    textFont(myFont, 12);
    textAlign(CENTER, CENTER);
    var label = "Mean values based on ";
    label += iterationCount + " ticks of the simulation";
    text(label , 200, boxY + boxHeight - 12);
    
    for (i=0; i<wallSections.length; i++) {
        x = boxDataX + (i+0.5) * boxDataWidth;
        
        textFont(myFont, 15);
        text("Section " + (i+1), x, boxY + 16);
        
        textFont(myFont, 13);
        var density = 10000 * measurements.meanCellCount[i] /
                      sectionVolumes[i];
        var totalEnergy = measurements.meanMovementE[i] + 
                          measurements.meanPressure[i];
        text(measurements.meanCellCount[i], x, boxY + 40);
        text(density, x, boxY + 64);
        text(measurements.meanVelocity[i],  x, boxY + 88);
        text(1000*measurements.meanMovementE[i], x, boxY + 112);
        text(1000*measurements.meanPressure[i], x, boxY + 136);
        text(1000*totalEnergy, x, boxY + 160);
    }
};

var makeMeasurements = function() {
    iterationCount++;
    
    for (i = 0; i < atoms.length; i++) {
        atoms[i].makeMeasurements();
    }
    
    for (i=0; i<boundaries.length; i++) {
        var x = boundaries[i] - wallSections[i][0]/2;
        
        var meanVelocity = 0;
        var density = 0;
        var movementEnergy = 0;
        var nAtoms = measurements.atomCount[i];
        
        if (nAtoms > 0) {
            meanVelocity = measurements.velocities[i] / nAtoms;
            density = nAtoms / sectionVolumes[i];
            movementEnergy = 0.5*density*meanVelocity*meanVelocity;
        }
        
        // Update means
        var pressure = measurements.pressure[i] /
                       wallSections[i][0];
        var toAdd = [meanVelocity, nAtoms, movementEnergy, pressure];
        
        for (var j=0; j<meanValues.length; j++) {
            measurements[meanValues[j]][i] *= iterationCount - 1;
            measurements[meanValues[j]][i] += toAdd[j];
            measurements[meanValues[j]][i] /= iterationCount;
        }
    }
    
    for (i = 0; i < atoms.length; i++) {
        measurements.velocities[i] = 0;
        measurements.atomCount[i] = 0;
        measurements.pressure[i] = 0;
    }
};

var running = true;
var draw = function() {
    background(220, 220, 230);  // Clear everything
    var i, j;

    // Run simulation
    if (running) {
        makeMeasurements();
        addCells();
        
        // Calculate interactions
        for (i = 0; i < atoms.length; i++) {
            for (j = i+1; j < atoms.length; j++) {
                atoms[i].interact(atoms[j]);
            }
        }
        
        // Move atoms
        for (i = 0; i < atoms.length; i++) {
            atoms[i].move();
            var remove = atoms[i].bounce();
            if (remove) {
                atoms.splice(i, 1);
                i--;
            }
        }
    }
    
    // Draw atoms
    noStroke();
    for (i = 0; i < atoms.length; i++) {
        var atom = atoms[i];
        fill(atom.colour());
        ellipse(atom.x, atom.y, atom.r*2, atom.r*2);
    }

    drawBloodVessel();
    drawInfoBox();
};

var keyReleased = function() {
    //println(keyCode);
    
    if (keyCode === 32) {
        // Spacebar toogles pausing 
        if(running) { running = false; }
        else { running = true;  }
    } else if (keyCode === 67) {
        // 'c' freezes all the atoms;
        for (var i = 0; i < atoms.length; i++) {
            atoms[i].dx = 0;
            atoms[i].dy = 0;
        }
    }
};

// Let go when mouse leaves canvas
var mouseOut = function() { mouseIsPressed = false; };