/*************************************
 * 
 * Version history
 * {
 * 5.4 {
 *    Create grid of hex tiles
 *    Find neighbours
 *    Mouseover selection
 *    Start generating tile images
 * }
 * 6.4 {
 *    Create two-colour sand texture
 *    Start merging neighbouring tiles
 * }
 * }
 * 
 * TODO:
 *  Improve merge with neighbouring tiles
 *  Vary noise for terrain types?
 *  Contours
**************************************/

// Square root of 3 is very useful for regular hexagons
var R3 = sqrt(3);
var halfAngle = 2 * asin(1);
var hexAngle = halfAngle / 3;
var hexAngleI = 1 / hexAngle;

// Map tile ID to its properties
var tileTypes = {
    G: {
        name: 'Grass',
        color1: color(60, 150, 70),
        color2: color(106, 176, 92),
    },
    S: {
        name: 'Sand',
        color1: color(180, 150, 90),
        color2: color(195, 175, 145)
    },
    W: {
        name: 'Water',
        color1: color(40, 80, 185)
    }
};

// 2D array of the types for each tile
var terrainMap = [
    'SSS',
    'SGG'
];

var TILES_TO_LOAD = 6;
var DRAW_BORDER = false;

// 2D array of heights for tile vertices
var heightMap = [
    [  0,  0,  0,  0,  0   ],
    [0,  5,  0,  0,  10, 20],
    [  0,  10, 12, 16, 24  ],
    [0,  16, 20, 20, 30, 28],
];

// TODO: calculate normal of each vertex by averaging normal for each edge ajoining edge
var calculateNormals = function(heightMap) {
    var deltas = [[0, 1], [0, -1], [-1, -1], [-1, 1], [1, -1], [1, 1]];
    
};

var getTiles = function(heightMap) {
    var x, y, row;
    for (y = 1; y < heightMap.length - 1; y++) {
        row = heightMap[y];
        for (x = 2 - y % 2; x < row.length; x += 3) {
            //println(x + " " + y + " " + row[x]);
        }
    }
};

getTiles(heightMap);

/*************************************
 *  A hexagonal tile on the grid
**************************************/

var HexTile = function(x, y, r, row, col, type) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.row = row;
    this.col = col;
    
    this.type = type;
    if (type) {
        this.color1 = type.color1;
        this.color2 = type.color2;
    } else {
        this.color1 = color(240);
    }
    
    // Coordinates for drawing tile
    this.getCoords(this.x, this.y, this.r, this.tilt);
    
    // Which tiles touch this one
    this.neighbours = [false, false, false, false, false, false];
};

HexTile.prototype.createImage = function() {
    // Make things global
    var tileX = this.x;
    var tileY = this.y;
    var midX = this.r;
    var midY = this.r * R3 / 2;
    var tileWidth = midX * 2;
    var tileHeight = midY * 2;
    
    var R1 = red(this.color1);
    var G1 = green(this.color1);
    var B1 = blue(this.color1);
    
    var R2 = red(this.color2);
    var G2 = green(this.color2);
    var B2 = blue(this.color2);
    
    // TODO: find colours for each neighbour
    var R0 = red(tileTypes.W.color1);
    var G0 = green(tileTypes.W.color1);
    var B0 = blue(tileTypes.W.color1);
    
    // Get colours of neighbouring tiles
    var nColours = [];
    for (var i = 0; i < 6; i++) {
        if (this.neighbours[i]) {
            if (this.neighbours[i].type === this.type) {
                nColours.push([]);
            } else {
                nColours.push([
                    true,
                    red(this.neighbours[i].color1),
                    green(this.neighbours[i].color1),
                    blue(this.neighbours[i].color1)
                ]);
            }
        } else {
            nColours.push([false, R0, G0, B0]);
        }
    }
    
    background(0);
    loadPixels();
    
    noiseDetail(2, 0.4);
    var p = imageData.data;
    var x, y, dx, dy, d, c, p1, p2, v, r, g, b, r2, g2, b2;
    var nColour, angle, triangle, index;
    
    for (y = 0; y <= tileHeight; y++) {
        for (x = 0; x <= tileWidth; x++) {
            dx = x - midX;
            dy = y - midY;
            index = x + y * width << 2;

            if ((midX - abs(dx)) * R3 >= abs(dy)-1) {
                // Get initial color
                c = 1.2 * noise(x * 0.1, y * 0.2);
                if (c > 1) {c = 1; }
                c *= c * (3 - 2 * c);
                
                r = c * R1 + (1 - c) * R2;
                g = c * G1 + (1 - c) * G2;
                b = c * B1 + (1 - c) * B2;
                
                // Distance from center
                d = sqrt(dx * dx + dy * dy);

                // Distance as a proportion
                p1 = d / midX;

                // Smooth distance
                p1 *= p1 * (3 - 2 * p1);
                
                // Angle around center
                angle = atan2(dy, dx);
                angle += hexAngle * p1 * 0.5 * (noise((tileX + x) * 0.25, (tileY + y) * 0.25) - 0.5);
                angle *= hexAngleI;
                if (angle < 0) { angle += 6 ; }

                // Which triangle are we in?
                triangle = floor(angle);
                nColour = nColours[triangle];
                
                // Merge colour with neighbour
                if (nColour.length) {
                    r2 = nColour[1];
                    g2 = nColour[2];
                    b2 = nColour[3];
                    
                    // How much to merge with neighbour
                    //c = min(1, 0.8 + 0.5 * noise(x * 0.015, y * 0.015) - p1 * 0.5);
                    //c = 1.2 * (1 - p1) + noise(x * 0.025, y * 0.025);
                    //if (c > 1) {c = 1; }
                    // Add contrast
                    //c *= c * (3 - 2 * c);
                    
                    c = (1 - p1) + noise((tileX + x) * 0.03, (tileY + y) * 0.03);
                    if (c > 1) { c = 1; }
                    
                    // If not water then convert range from 0 - 1 to 0.5 - 1
                    if (nColour[0]) {
                        c = 0.4 + c * 0.6;
                    } else {
                        c = c * 2 - 0.5;
                        if (c > 1) { c = 1; }
                        else if (c < 0) { c = 0; }
                        c *= c * (3 - 2 * c);
                        c *= c * (3 - 2 * c);
                        c *= c * (3 - 2 * c);
                        c *= c * (3 - 2 * c);
                    }
                    
                    // Intensity based on contours
                    v = 1;
                    
                    p[index] = (c * r + (1 - c) * r2) * v;
                    p[index + 1] = (c * g + (1 - c) * g2) * v;
                    p[index + 2] = (c * b + (1 - c) * b2) * v;
                } else {
                    p[index] = r * v;
                    p[index + 1] = g * v;
                    p[index + 2] = b * v;
                }
            } else {
                p[index + 3] = 0;
            }
            
        }
    }
    
    updatePixels();
    this.img = get(0, 0, tileWidth, tileHeight);
};

HexTile.prototype.draw = function(highlight) {
    if (this.img) {
        imageMode(CENTER);
        image(this.img, this.x, this.y);
        noFill();
    } else {
        fill(this.color1);
    }
    
    if (highlight || DRAW_BORDER) {
        beginShape();
        for (var i = 0; i < this.coords.length; i++) {
            vertex(this.coords[i][0], this.coords[i][1]);
        }
        endShape(CLOSE);
    }
    
    
    textAlign(CENTER, CENTER);
    textSize(16);
    fill(0);
    //text(this.row + ", " + this.col, this.x, this.y);
    /*
    if (highlight === true) {
        for (var i = 0; i < this.neighbours.length; i++) {
            var n = this.neighbours[i];
            if (n) {
                text(i, n.x, n.y);
            }
        }
    }
    */
};

HexTile.prototype.getCoords = function(x, y, r, tilt) {
    this.coords = [];
    for (var theta = tilt ? 30 : 0; theta < 360; theta += 60) {
        this.coords.push([x + r * cos(theta), y + r * sin(theta)]);
    }
};

/*************************************
 *  A grid of hexagonal tiles
**************************************/

var Grid = function(terrainMap, tileSize) {
    this.cols = terrainMap[0].length;  // Number of tiles across
    this.rows = terrainMap.length;     // Number of tiles down
    this.tileSize = tileSize;
    this.tileHeight = tileSize * R3;
    
    // Get board dimensions
    this.width = (this.cols * 3 + 1) * tileSize * 0.5;
    this.height = (this.rows + 0.5) * this.tileHeight;
    
    // Put board in the center of the screen
    this.x = (width - this.width) / 2;
    this.y = (height - this.height) / 2;
    
    this.makeTiles(terrainMap);
    this.tilesLoaded = 0;
};

Grid.prototype.makeTiles = function(terrainMap) {
    this.tiles = [];
    
    var x = this.x + this.tileSize;
    for (var i = 0; i < this.cols; i++) {
        var row = [];
        var y = this.y + (i % 2 + 1) * this.tileHeight * 0.5;
        
        for (var j = 0; j < this.rows; j++) {
            var type = tileTypes[terrainMap[j][i]];
            var tile = new HexTile(x, y, this.tileSize, i, j, type);
            row.push(tile);
            y += this.tileHeight;
        }
        
        x += this.tileSize * 1.5;
        this.tiles.push(row);
    }
    
    // Add neighbours
    for (var i = 0; i < this.cols; i++) {
        for (var j = 0; j < this.rows; j++) {
            // Add tile below
            this.addNeighbour(this.tiles[i][j], i, j + 1, 1);
            if (i % 2) {
                this.addNeighbour(this.tiles[i][j], i + 1, j, 5);
                this.addNeighbour(this.tiles[i][j], i + 1, j + 1, 0);
            } else {
                this.addNeighbour(this.tiles[i][j], i + 1, j, 0);
                this.addNeighbour(this.tiles[i][j], i + 1, j - 1, 5);
            }
        }
    }
};

Grid.prototype.addNeighbour = function(tile1, x, y, n) {
    var tile2 = this.getTile([x, y]);
    if (tile2) {
        tile1.neighbours[n] = tile2;
        tile2.neighbours[(n + 3) % 6] = tile1;
    }
};

Grid.prototype.loadTileImage = function() {
    if (this.tilesLoaded < TILES_TO_LOAD) {
        var x = floor(this.tilesLoaded / this.rows);
        var y = this.tilesLoaded - x * this.rows;
        this.tiles[x][y].createImage();
        this.tilesLoaded++;
        return true;
    }
};

Grid.prototype.draw = function() {
    stroke(40);
    strokeWeight(1);
    noFill();
    //rect(this.x, this.y, this.width, this.height);
    
    for (var i = 0; i < this.cols; i++) {
        var row = this.tiles[i];
        for (var j = 0; j < this.rows; j++) {
            row[j].draw();
        }
    }
    
    var highlight = this.getTile(this.pixelToHex(mouseX, mouseY));
    if (highlight) {
        strokeWeight(3);
        highlight.draw(true);
    }
};

Grid.prototype.pixelToHex = function(x, y) {
    var boardX = x - this.x;
    var boardY = y - this.y;
    
    if (boardX >= 0 && boardX <= this.width && boardY >= 0 && boardY <= this.height) {
        var tileX = boardX / (this.tileSize * 1.5);
        var fTileX = floor(tileX);
        var downRow = fTileX % 2;
        var tileY = boardY / this.tileHeight - downRow * 0.5;
        var fTileY = floor(tileY);
        
        // Take into account jagged edge
        if (3 * (tileX - fTileX) < 1) {
            var dy = 0.5 + fTileY - tileY;
            var fTileX2 = floor(tileX - abs(dy) * 2 / 3);
            
            // If we back a column, check whether we should move up or down a row
            if (fTileX2 !== fTileX) {
                if (downRow) {
                    if (dy < 0) { fTileY++; }
                } else {
                    if (dy > 0) { fTileY--; }
                }
                fTileX = fTileX2;
            }
        }
        //println(fTileX + " " + fTileY);
        return [fTileX, fTileY];
    }
    
    return [-1, -1];
};

Grid.prototype.getTile = function(coord) {
    var row = this.tiles[coord[0]];
    if (!row) {
        return false;
    } else {
        return row[coord[1]];
    }
};

/*************************************
 *  Setup
**************************************/

var grid = new Grid(terrainMap, 72);

/*************************************
 *      Main loop
**************************************/

var draw = function() {
    if (grid.loadTileImage()) {
        // Loading screen
    }
    
    background(tileTypes.W.color1);
    grid.draw();    
};

/*************************************
 *      Event handling
**************************************/

mouseClicked = function() {
};
