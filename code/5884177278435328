// Size of texture
var s = 400;

// Where to start the square to center it
var t = (width - s) / 2;

var possionDiscSampling = function(meanDistance) {
    // How many points we try before rejecting a point
    var k = 30;
    
    var minDist = meanDistance * 0.75;
    
    // Final array of points that we'll return
    var points = [];
    
    // Points that we use to find neighbours
    var activePoints = [];
    
    var addPoint = function(x, y) {
        points.push([x, y]);
        activePoints.push([x, y]);
    };
    
    // Start at a random point not too close to the edge
    addPoint((0.2 + random() * 0.6) * width, (0.2 + random() * 0.6) * height);
    
    var x, y;
    while (activePoints.length) {
        // Pick a random active point
        var activeIndex = floor(random() * activePoints.length);
        var currentPoint = activePoints[activeIndex];
        
        var pointAdded = false;
        
        for (var i = 0; i < k; i++) {
            var angle = random() * 360;
            var d = minDist + random() * minDist;
            x = currentPoint[0] + cos(angle) * d;
            y = currentPoint[1] + sin(angle) * d;
            
            if (x < 0 || x > width || y < 0 || y > height) {
                continue;
            }
            
            // Check distance from each other point is > minDist
            // TODO make this more efficient using the sampleGrid
            var collision = false;
            for (var j = 0; j < points.length; j++) {
                if (dist(x, y, points[j][0], points[j][1]) < minDist) {
                    collision = true;
                    break;
                }
            }
            
            if (!collision) {
                addPoint(x, y);
                pointAdded = true;
                break;
            }
        }
        
        // Failed to add point so remove it from the active list
        if (!pointAdded) {
            activePoints.splice(activeIndex, 1);
        }
    }
    
    return points;
};

var points = possionDiscSampling(120);
var n = points.length;

draw = function() {
    background(0);
    loadPixels();
    var p = this.imageData.data, x, y, z, i, q;
    var d1, d2, d3;
    
    for (x = 0; x < s; x++) {
        for (y = 0; y < s; y++) {
            d1 = 160000;
            
            // Find minimum distance to each point
            for (z = 0; z < n; z++) {
                q = points[z];
                d3 = (x - q[0]) * (x - q[0]) + (y - q[1]) * (y - q[1]);
                if (d3 < d1) {
                    d2 = d1;
                    d1 = d3;
                } else if (d3 < d2) {
                    d2 = d3;
                }
                
            }
            
            // Pixel index
            //i = t + x + (y + t) * 400 << 2;
            i = x + y * 400 << 2;
            d1 = (sqrt(d2 - d1) * 2);
            //d1 = (sqrt(d2 - d1) * 0.008);
            //d1 *= d1 * (3 - 2 * d1);
            //d1 *= 255;
            
            //d1 = 255 * (1 - 40 / (20 + sqrt(d2 - d1)));
            
            // Set pixel
            p[i++] = d1;
            p[i++] = d1;
            p[i]   = d1;
        }
    }

    updatePixels();
    noLoop();
};
