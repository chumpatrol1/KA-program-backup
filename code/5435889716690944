<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" name="viewport" content="width=device-width, initial-scale=1">
    <title>Basic bioinformatics algorithms</title>

<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet">
<link href='https://fonts.googleapis.com/css?family=Alegreya+Sans+SC:900,500' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Josefin+Sans:400,600' rel='stylesheet' type='text/css'>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    
<style>
    h1,h2,h3 {
        font-family: 'Alegreya Sans SC', impact;
    }
    
    body {
        margin: 0;
        background-color: #f8f8f8;
        font-family: 'Josefin Sans', Arial, sans-serif;
        font-size: 1.7em;
    }
    
    textarea.code {
        font-family: 'Monaco', monospace;
    }
    
    .button-row {
        margin-top: 8px;
    }
</style>

</head>

<body>
<div class="container-fluid">
    <h1 class="text-center text-primary">Basic bioinformatics algorithms</h1>
    
    <h2>Aim</h2>
    <div class="row">
        <div class="col-xs-4">
            <img class="img-responsive" src="https://www.khanacademy.org/computer-programming/3d-double-stranded-dna/1170514481/11001.png" />
        </div>
        
        <div class="col-xs-8">
            
            <p>I'm experimenting with making a page of coding tests. So far, I have a basic framework that can accept code and test that it gives the correct result for a range of different inputs (try the code box below). I hope to make it easy for people to adapt to their own challenges.</p>
        </div>
    </div>
        
    <h2>Part 1 - DNA sequences</h2>
    <p><i class="fa fa-info-circle"></i> First we'll start with some simple analysis of DNA sequences. DNA sequences can be represented as string of letters, A, T, C and G. Sometimes the letter N is used to represent a nucleotide.</p>

<div class="challenge well">
    <h3>Challenge 1</h3>
    <p>As a simple warm up, write a function called <code>findLength</code> that takes a single parameter which will always be a string and returns the length of that string.</p>
        
    <div class="form-group code-input">
        <label for="comment">Code:</label>
        <!-- Messages -->
        <div style="display:none;" class="alert alert-success">
            <strong>Success!</strong> <span class="message">All tests passed.</span>
        </div>
        <div style="display:none;" class="alert alert-info">
            <strong>Hint:</strong> <span class="message"></span>
        </div>
        <div style="display:none;" class="alert alert-danger">
            <strong>Error!</strong> <span class="message"></span>
        </div>
        <div style="display:none;" class="alert alert-warning">
            <strong>Test Failed!</strong> <span class="message"></span>
        </div>
    
        <textarea spellcheck="false" class="form-control code" rows="5" id="comment">var findLength = function(dna) {
    // Return the length of dna
};
</textarea>
    <div class="row button-row">
        <div class="col-xs-4">
            <button class="btn btn-block btn-primary"> <i class="fa fa-paper-plane"></i> Submit</button>
        </div>
        <div class="col-xs-4">
            <button class="btn btn-block btn-info"><i class="fa fa-info-circle"></i> Hint</button>
        </div>
        <div class="col-xs-4">
            <button class="btn btn-block btn-danger"><i class="fa fa-trash"></i> Clear</button>
        </div>
        </div>
    </div>
</div>

<div class="challenge well">
    <h3>Challenge 2</h3>
    <p>Now let's try some more complex DNA analysis. Write a function <code>countNucleotides</code> that takes a string and returns an array of four numbers representing the number of As, Cs, Gs and Ts in that order. Note that DNA strings maybe in upper or lowercase.</p>
        
    <div class="form-group code-input">
        <label for="comment">Code:</label>
        <!-- Messages -->
        <div style="display:none;" class="alert alert-success">
            <strong>Success!</strong> <span class="message">All tests passed.</span>
        </div>
        <div style="display:none;" class="alert alert-info">
            <strong>Hint:</strong> <span class="message"></span>
        </div>
        <div style="display:none;" class="alert alert-danger">
            <strong>Error!</strong> <span class="message"></span>
        </div>
        <div style="display:none;" class="alert alert-warning">
            <strong>Test Failed!</strong> <span class="message"></span>
        </div>
    
        <textarea spellcheck="false" class="form-control code" rows="6" id="comment">var countNucleotides = function(dna) {
    // Return an array of the counts of nucleotides
    // in the form [As, Cs, Gs, Ts]
    
};
</textarea>
    <div class="row button-row">
        <div class="col-xs-4">
            <button class="btn btn-block btn-primary"> <i class="fa fa-paper-plane"></i> Submit</button>
        </div>
        <div class="col-xs-4">
            <button class="btn btn-block btn-info"><i class="fa fa-info-circle"></i> Hint</button>
        </div>
        <div class="col-xs-4">
            <button class="btn btn-block btn-danger"><i class="fa fa-trash"></i> Clear</button>
        </div>
        </div>
    </div>
</div>
    
</div>

<script>
/**************************************************
        Write challenges here
 Challenges should consist of writing a function
 with a given name. The function is tested by
 calling it with the inputs in each test and
 checking whether it returns the expected output.
**************************************************/    

    var challenges = [
        {
            functionName: 'findLength',
            hint: "Strings have an attribute `length`, which is accessed using dot notation. Don't forget to return it.",
            tests: [
                {
                    inputs: ['ATCGN'],
                    output: 5
                },
                {
                    inputs: ['AtCgTaGc'],
                    output: 8
                },
                {
                    inputs: ['abcdefghijklmnopqrstuvwxyz_!?='],
                    output: 30
                },
                {
                    inputs: [''],
                    output: 0
                },
            ]
        },
        {
            functionName: 'countNucleotides',
            hint: "You can loop through a string as you would an array and check the value of each character.",
            tests: [
                {
                    inputs: ['ATCGN'],
                    output: [1, 1, 1, 1]
                },
                {
                    inputs: ['AtCgTaGcAtCc'],
                    output: [3, 4, 2, 3]
                },
                {
                    inputs: ['1.taAg 2.GgccCC'],
                    output: [2, 4, 3, 1]
                },
                {
                    inputs: ['abcdefghijklm nopqrstuvwxyz_!?='],
                    output: [1, 1, 1, 1]
                },
                {
                    inputs: [''],
                    output: [0, 0, 0, 0]
                },
            ]
        }
    ];

    var testInput = function(ans1, ans2) {
        // Assume we won't have objects or arrays of arrays
        if (ans1 instanceof Array && ans2 instanceof Array) {
            for (var i = 0; i < ans1.length; i++) {
                if (ans1[i] !== ans2[i]) {
                    return false;
                }
            }
            return true;
        } else {
            return ans1 === ans2;
        }
    };

    $('.code-input').each(function(i) {
        var $this = $(this);
        
        var $textArea = $($this.find('textarea')[0]);
        var $passAlert = $($this.find('.alert-success')[0]);
        var $hintAlert = $($this.find('.alert-info')[0]);
        var $failAlert = $($this.find('.alert-warning')[0]);
        var $errorAlert = $($this.find('.alert-danger')[0]);
        
        var challenge = challenges[i];
        if (!challenge) { return; }
        var functionName = challenge.functionName;
        var tests = challenge.tests;
        
        $this.find('.btn-primary').click(function() {
            var code = $textArea.val();
            code = code.replace(functionName, '__testFunction__');
            // Just in case people want overwrite the test function
            code = code.replace('testInput', '__testInput__');
            
            try {
                eval(code);
                var passed = true;
                
                for (var j = 0; j < tests.length; j++) {
                    var test = tests[j];
                    var result = __testFunction__.apply(null, test.inputs);
                    if (!testInput(test.output, result)) {
                        passed = false;
                        $failAlert.find('.message').text("Test failed with input '" + test.inputs + "'. Expected result " + test.output + ", but got " + result + ".");
                        $failAlert.show(100);
                        $passAlert.hide();
                        $errorAlert.hide();
                        break;
                    }
                }
                
                if (passed) {
                    var n = tests.length;
                    $failAlert.hide();
                    $errorAlert.hide();
                    $passAlert.find('.message').text(n + "/" + n + " tests passed.");
                    $passAlert.show(100);
                }
                
            } catch (e) {
                $failAlert.hide();
                $passAlert.hide();
                $errorAlert.find('.message').text(e);
                $errorAlert.show(100);
            }
        });
        
        $this.find('.btn-info').click(function() {
            if (challenge.hint) {
                $hintAlert.find('.message').text(challenge.hint);
                $hintAlert.show(100);
            } else {
                alert("Sorry, there is no hint for this challenge.");
            }
        });
        
        $this.find('.btn-danger').click(function() {
            $textArea.val('');
        });
    });
</script>
    
</body>
</html>
