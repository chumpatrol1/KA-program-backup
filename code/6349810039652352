/********************************************************
 *      Image edit program
 * 
 * Either select the whole image or a region.
 * When selecting a region, click on the image to 
 * define a polygon.
 * Close it by click on an existing point.
 * Then edit the hue, saturation, lightness or contrast.
 * 
 * TODO:
 *  DRY the update functions
 *  Add/remove seletion points
 *  Subdivide selection?
 *  Feather selection?
*********************************************************/

var TEXTCOL = color(20, 20, 20);
var WHITE = color(255);
var TOOLBAR = color(230, 230, 230, 200);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var mode = 'Start';
var scene;

// Function called to update image
var updateFunction;

var toUpdate = 0;

// Used to limit how much processing is done
// in an attempt to avoid crashing the program
var timer;
var MAX_TIMER = 300;

var images = [
    getImage('insideout/shot2_layer0blur0'),
    getImage('insideout/shot2_layer1blur0'),
    getImage('insideout/shot2_layer2blur0'),
    getImage('insideout/shot2_layer4blur0'),
    getImage('insideout/shot2_layer3blur0')
];

// Set up image parameters
var imgWidth = images[0].width;
var imgHeight = images[0].height;
var imgX1 = 0;
var imgX2 = imgX1 + imgWidth;
var imgY1 = 0;
var imgY2 = imgY1 + imgHeight;

/********************************************************
 * Generic GUI component from which other
 * elements inherit
 * The default object is basically a button
*********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
    this.activeCursor = HAND;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
         cursor(this.activeCursor);
        this.transition = min(10, this.transition + 2);
    } else {
        this.transition = max(0, this.transition - 2);
    }
};
}
/******************************************
 *      GUI Button
*******************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.textCol = params.textCol || color(20);
    this.defaultCol = color(240);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    this.disabledFunc = params.disabledFunc;
    
    this.tx = x + w * 0.5;
    this.ty = y + h * 0.5 + 1;
    this.stroke = params.stroke || color(200);
    
    if (params.filled) {
        this.highlightCol = params.filled;
        this.stroke = params.filled;
        
        Object.defineProperty(this, 'textCol', {
            get: function() {
                return lerpColor(color(20), WHITE, this.transition * 0.1);
            }
        });
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    this.disabled = this.disabledFunc && this.disabledFunc();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition * 0.1));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    fill(this.disabled ? 120 : this.textCol);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.tx, this.ty);
};

}   // Button
{
var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}   // Radio button
/********************************************************
 *      Label
*********************************************************/

var Label = function(x, y, w, h, name) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.tx = x + w * 0.5;
    this.ty = y + h * 0.5 + 1;
};

Label.prototype.draw = function() {
    noFill();
    strokeWeight(1);
    stroke(250);
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    fill(250);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.tx, this.ty);
};

/********************************************************
 *      GUI Slider
*********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballD = h;
    this.ballR = this.ballD * 0.5;
    
    x += this.ballR;
    w -= this.ballD;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    this.trigger();
    this.activeCursor = MOVE;
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(16);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 20);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(12);
    textAlign(CENTER, CENTER);
    text(this.val + "", this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/********************************************************
 *      Functions for dealing the scene
*********************************************************/

// Some useful numbers to calculate
var third  = 1 / 3;
var third2 = third * 2;
var sixth  = 1 / 6;
var sixth5 = 5 / 6;
var i255 = 1 / 255;

var getScene = function() {
    for (var i = 0; i < images.length; i++) {
        image(images[i], 0, 0);
    }
    scene = get(0, 0, imgWidth, imgHeight);
    updateFunction = false;
};

updateFunction = getScene;

var updateHue = function(Selection, amount) {
    var points = Selection.indices;
    var n = points.length;
    if (!n || !amount) { return; }
    
    var hs = Selection.hues;
    var ss = Selection.sats;
    var ls = Selection.bris;

    image(scene, imgX1, imgY1);
    loadPixels();
    var pixels = imageData.data;
    var ix, r, g, b, h, s, l, p, q, _min, _max;
    
    for (; toUpdate < n; toUpdate++) {
        // Get HSL
        ix = points[toUpdate];
        h = hs[toUpdate];
        s = ss[toUpdate];
        l = ls[toUpdate];

        // Update hue
        h += amount;
        if (h > 1) { h -= 1; }
        else if (h < 0) { h += 1; }

        // Calculate RGB
        if (s === 0) {
            // achromatic
            r = l;
            g = l; 
            b = l;
        } else {
            q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            p = 2 * l - q;
            
            if (h < sixth) {
                g = p + (q - p) * 6 * h;
                r = q;
                b = p;
            } else if (h < third) {
                g = q;
                r = p + (q - p) * (third - h) * 6;
                b = p;
            } else if (h < 0.5) {
                g = q;
                r = p;
                b = p + (q - p) * (h - third) * 6;
            } else if (h < third2) {
                g = p + (q - p) * (third2 - h) * 6;
                r = p;
                b = q;
            } else if (h < sixth5) {
                g = p;
                r = p + (q - p) * 6 * (h - third2);
                b = q;
            } else {
                g = p;
                r = q;
                b = p + (q - p) * (1 - h) * 6;
            }
        }
        
        pixels[ix] = r * 0xFF | 0;
        pixels[ix + 1] = g * 0xFF | 0;
        pixels[ix + 2] = b * 0xFF | 0;
        
        // Every 1024 updates check whether time is too long
        if (!(toUpdate & 1023) && (millis() - timer > MAX_TIMER)) {
            toUpdate++;
            break;
        }
    }
    
    updatePixels();
    
    scene = get(0, 0, imgWidth, imgHeight);
    
    // Stop updating once loop is complete
    if (toUpdate === n) {
        updateFunction = false;
    }
};

var updateSaturation = function(Selection, amount) {
    var points = Selection.indices;
    var n = points.length;
    if (!n || !amount) { return; }
    
    var hs = Selection.hues;
    var ss = Selection.sats;
    var ls = Selection.bris;

    image(scene, imgX1, imgY1);
    loadPixels();
    var pixels = imageData.data;
    var ix, r, g, b, h, s, l, p, q;
    
    // Get function to update saturation
    // If amount is less than 0, then scale s down to 0
    // Else down difference between s and 1.
    var update;
    if (amount < 0) {
        amount = 1 + amount;
        update = function() {
            s *= amount;
        };
    } else {
        amount = 1 - amount;
        update = function() {
            s = 1 - (1 - s) * amount;
        };
    }
    
    for (; toUpdate < n; toUpdate++) {
        // Get HSL
        ix = points[toUpdate];
        h = hs[toUpdate];
        s = ss[toUpdate];
        l = ls[toUpdate];

        // Update saturation
        update();

        // Calculate RGB
        if (s === 0) {
            // achromatic
            r = l;
            g = l; 
            b = l;
        } else {
            q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            p = 2 * l - q;
            
            if (h < sixth) {
                g = p + (q - p) * 6 * h;
                r = q;
                b = p;
            } else if (h < third) {
                g = q;
                r = p + (q - p) * (third - h) * 6;
                b = p;
            } else if (h < 0.5) {
                g = q;
                r = p;
                b = p + (q - p) * (h - third) * 6;
            } else if (h < third2) {
                g = p + (q - p) * (third2 - h) * 6;
                r = p;
                b = q;
            } else if (h < sixth5) {
                g = p;
                r = p + (q - p) * 6 * (h - third2);
                b = q;
            } else {
                g = p;
                r = q;
                b = p + (q - p) * (1 - h) * 6;
            }
        }
        
        pixels[ix] = r * 0xFF | 0;
        pixels[ix + 1] = g * 0xFF | 0;
        pixels[ix + 2] = b * 0xFF | 0;
        
        // Every 1024 updates check whether time is too long
        if (!(toUpdate & 1023) && (millis() - timer > MAX_TIMER)) {
            toUpdate++;
            break;
        }
    }
    
    updatePixels();
    
    scene = get(0, 0, imgWidth, imgHeight);
    
    // Stop updating once loop is complete
    if (toUpdate === n) {
        updateFunction = false;
    }
};

var updateLightness = function(Selection, amount) {
    var points = Selection.indices;
    var n = points.length;
    if (!n || !amount) { return; }
    
    var hs = Selection.hues;
    var ss = Selection.sats;
    var ls = Selection.bris;

    image(scene, imgX1, imgY1);
    loadPixels();
    var pixels = imageData.data;
    var ix, r, g, b, h, s, l, p, q;
    
    // Get function to update lightness
    // If amount is less than 0, then scale l down to 0
    // Else down difference between l and 1.
    var update;
    if (amount < 0) {
        amount = 1 + amount;
        update = function() {
            l *= amount;
        };
    } else {
        amount = 1 - amount;
        update = function() {
            l = 1 - (1 - l) * amount;
        };
    }

    for (; toUpdate < n; toUpdate++) {
        // Get HSL
        ix = points[toUpdate];
        h = hs[toUpdate];
        s = ss[toUpdate];
        l = ls[toUpdate];

        // Update lightness
        update();

        // Calculate RGB
        if (s === 0) {
            // achromatic
            r = l;
            g = l; 
            b = l;
        } else {
            q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            p = 2 * l - q;
            
            if (h < sixth) {
                g = p + (q - p) * 6 * h;
                r = q;
                b = p;
            } else if (h < third) {
                g = q;
                r = p + (q - p) * (third - h) * 6;
                b = p;
            } else if (h < 0.5) {
                g = q;
                r = p;
                b = p + (q - p) * (h - third) * 6;
            } else if (h < third2) {
                g = p + (q - p) * (third2 - h) * 6;
                r = p;
                b = q;
            } else if (h < sixth5) {
                g = p;
                r = p + (q - p) * 6 * (h - third2);
                b = q;
            } else {
                g = p;
                r = q;
                b = p + (q - p) * (1 - h) * 6;
            }
        }
        
        pixels[ix] = r * 0xFF | 0;
        pixels[ix + 1] = g * 0xFF | 0;
        pixels[ix + 2] = b * 0xFF | 0;
        
        // Every 1024 updates check whether time is too long
        if (!(toUpdate & 1023) && (millis() - timer > MAX_TIMER)) {
            toUpdate++;
            break;
        }
    }
    
    updatePixels();
    
    scene = get(0, 0, imgWidth, imgHeight);
    
    // Stop updating once loop is complete
    if (toUpdate === n) {
        updateFunction = false;
    }
};

var updateContrast = function(Selection, amount) {
    var points = Selection.indices;
    var n = points.length;
    if (!n || !amount) { return; }
    
    var rs = Selection.reds;
    var gs = Selection.gres;
    var bs = Selection.blus;
    
    image(scene, imgX1, imgY1);
    loadPixels();
    var px = imageData.data;
    var ix, r, g, b;
    var a = amount < 0 ? 1 + amount : 1 - amount;

    for (; toUpdate < n; toUpdate++) {
        ix = points[toUpdate];

        if (amount < 0) {
            // Scale down distance from 128
            px[ix] = 128 + (rs[toUpdate] - 128) * a;
            px[ix + 1] = 128 + (gs[toUpdate] - 128) * a;
            px[ix + 2] = 128 + (bs[toUpdate] - 128) * a;
        } else {
            r = rs[toUpdate];
            g = gs[toUpdate];
            b = bs[toUpdate];
        
            // Scale up distance from 128
            px[ix] = r < 128 ? r * a : 255 - (255 - r) * a;
            px[ix + 1] = g < 128 ? g * a : 255 - (255 - g) * a;
            px[ix + 2] = b < 128 ? b * a : 255 - (255 - b) * a;
        }
        
        // Every 1024 updates check whether time is too long
        if (!(toUpdate & 255) && (millis() - timer > MAX_TIMER)) {
            toUpdate++;
            break;
        }
    }
    
    updatePixels();
    
    scene = get(0, 0, imgWidth, imgHeight);
    
    // Stop updating once loop is complete
    if (toUpdate === n) {
        updateFunction = false;
    }
};

var pointInImage = function(x, y) {
    return x >= imgX1 && x <= imgX2 &&
           y >= imgY1 && y <= imgY2;
};

/********************************************************
 *      An area of the image that is selected
*********************************************************/

var Selection = {
    points: [],
    indices: [],
    pointR: 8,
    pointR2: 64,
    color1: color(255, 255, 255, 200),
    color2: color(255, 0, 0, 200),
    mouseIsIn: true,
    
    draw: function() {
        var points = this.points.slice(0);
        
        // Draw line to current mouse position
        if (mode === 'Selecting' &&
            pointInImage(mouseX, mouseY) &&
            points.length > 0) {
                points.push({x: mouseX, y: mouseY} );
        }
        
        var p = 0.5 * (1 + sin(frameCount * 8));
        var i, x, y, n = points.length;
        strokeWeight(3);
        //stroke(lerpColor(this.color1, this.color2, p));
        stroke(255);
        noFill();
        
        // Draw selection boundary
        beginShape();
        
        for (var i = 0; i < n; i++) {
            x = points[i].x;
            y = points[i].y;
            vertex(x, y);
        }
        
        if (mode === 'Selecting') {
            endShape();
        } else {
            endShape(CLOSE);
        }
        
        stroke(0);
        var p1, p2, dx, dy, d;
        var deltas = [];
        var dists = [];
        
        // Calculate some useful values
        for (i = 0; i < n; i++) {
            p1 = points[i];
            p2 = points[(i + 1) % n];
            dx = p2.x - p1.x;
            dy = p2.y - p1.y;
            d = sqrt(dx * dx + dy * dy);
            if (d) {
                dists.push(d);
                deltas.push([dx / d, dy / d]);
            }
        }
        
        var len = 10;
        var len2 = len * 2;
        var t = (frameCount) % len2;
        var s, x, y, totalDist;
        
        n = dists.length;
        if (mode === 'Selecting') {
            n--;
        }
        
        for (i = 0; i < n; i++) {
            totalDist = dists[i];
            x = points[i].x;
            y = points[i].y;
            dx = deltas[i][0];
            dy = deltas[i][1];
            
            // Draw partial line start if necessary
            if (t > len) {
                s = t - len;
                line(x, y, x + dx * s, y + dy * s);
            }
    
            for (; t < totalDist; t += len2) {
                s = min(totalDist, t + len - 1);
                line(x + t * dx, y + t * dy, x + s * dx, y + s * dy);
            }
            
            t -= totalDist;
        }
        
        if (mode === 'Selected' || mode === 'Selecting') {
            this.drawSelectionPoint();
        }
        
    },
    
    drawSelectionPoint: function() {
        var p = this.getPointAt(mouseX, mouseY);
        if (p > -1) {
            p = this.points[p];
            var d = this.pointR * 2;
            
            strokeWeight(2);
            stroke(255, 0, 0);
            fill(255, 255, 255);
            ellipse(p.x, p.y, d, d);
        }
    },
    
    getPointAt: function(x, y) {
        var p;
        for (var i = this.points.length; i--;) {
            p = this.points[i];
            if ((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y) <= this.pointR2) {
                return i;
            }
        }
        return -1;
    },
    
    addPoint: function(x, y) {
        var n = this.points.length;
        
        if (!pointInImage(x, y)) {
            // Can't start a selection off image
            if (n === 0) {
                return;
            }
            
            // Truncate selection to image
            var p = this.points[n - 1];
            var dx = x - p.x;
            var dy = y - p.y;

            /*
            if (dy < 0) {
                // Truncate at top of image
                var dy2 = imageY1 - p.y;
                if (dy2) {
                    x = p.x + dx * dy2 / dy;
                }
                y = imageY1;
            } else {
                // Truncate at bottom of image
                var dy2 = imageY2 - p.y;
                if (dy2) {
                    x = p.x + dx * dy2 / dy;
                }
                y = imageY2;
            }
            */
            
            // Truncate at bottom of image
            var dy2 = imgHeight - p.y;
            if (dy2) {
                x = p.x + dx * dy2 / dy;
            }
            y = imgHeight;
            
            // Just don't allow it
            return;
        }
        
        // Check whether point is added on another point
        var hit = this.getPointAt(x, y);
        
        // If so, make selection and quit selection mode
        if (hit > -1) {
            this.points = this.points.slice(hit - n);
            this.getPixels();
            return;
        }
        
        
        this.points.push({ x: x, y: y});
    },
    
    getPixels: function() {
        // Get indices of pixels in selection
        var points = this.points;
        var n = points.length;

        // Find bounding box
        var minX = points[0].x;
        var minY = points[0].y;
        var maxX = minX;
        var maxY = minY;
        
        var x, y, i, p, p1, p2, c;
        
        for (i = 1; i < n; i++) {
            p = points[i];
            if (p.x < minX) { minX = p.x; }
            else if (p.x > maxX) { maxX = p.x; }
            if (p.y < minY) { minY = p.y; }
            else if (p.y > maxY) { maxY = p.y; }
        }
        
        this.deltas = [];
        this.lengths = [];
        var grads = [];
        p2 = points[n - 1];
        
        var dx, dy, d;
        for (i = 0; i < n; i++) {
            p1 = points[i];
            dx = p2.x - p1.x;
            dy = p2.y - p1.y;
            d = sqrt(dx * dx + dy * dy);
            this.deltas.push([dx / d, dy / d]);
            this.lengths.push(d);
            grads.push(dx / dy);
            p2 = p1;
        }
        
        // Get an array of pixel indices for
        // pixels that are inside the selection
        this.indices = [];
        
        for (x = minX; x <= maxX; x++) {
            for (y = minY; y <= maxY; y++) {
                
                // Test whether point is inside selection
                c = false;
                p2 = points[n - 1];
    
                for (i = 0; i < n; i++) {
                    p1 = points[i];
                    
                    if (((p1.y > y) !== (p2.y > y)) &&
                         (x < (y - p1.y) * grads[i] + p1.x)) {
                       c = !c;
                    }
                    p2 = p1;
                }
                
                if (c) {
                    this.indices.push(x + y * width << 2);
                }
            }
        }

        this.getHSL();
        this.completeSelection();
    },
    
    completeSelection: function() {
        // To be overwritten
    },
    
    getHSL: function() {
        this.oldScene = scene;
        var n = this.indices.length;
        
        if (!n) { return; }
        
        image(scene, imgX1, imgY1);
        loadPixels();
        var pixels = imageData.data;
        var i, ix, r, g, b, h, s, l, d, m1, m2;
        
        this.hues = [];
        this.sats = [];
        this.bris = [];
        this.reds = [];
        this.gres = [];
        this.blus = [];

        for (i = 0; i < n; i++) {
            ix = this.indices[i];
            
            r = pixels[ix]; 
            g = pixels[ix + 1];
            b = pixels[ix + 2];
    
            this.reds.push(r);
            this.gres.push(g);
            this.blus.push(b);
    
            r *= i255;
            g *= i255;
            b *= i255;
    
            // Convert rgb to hsl
            m1 = Math.min(r, g, b);
            m2 = Math.max(r, g, b);
            l = (m1 + m2) * 0.5;
            
            if (m1 === m2) {
                // achromatic
                h = 0;
                s = 0;
            } else {
                d = m2 - m1;
                s = l > 0.5 ? d / (2 - m1 - m2) : d / (m1 + m2);
                switch(m2) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
                h *= sixth;
            }
            
            this.hues.push(h);
            this.sats.push(s);
            this.bris.push(l);
        }
        
    },
    
    selectAll: function() {
        this.points = [
            { x: imgX1, y: imgY1 },
            { x: imgX2, y: imgY1 },
            { x: imgX2, y: imgY2 },
            { x: imgX1, y: imgY2 }
        ];
        this.getPixels();
    },
    
    mousePressed: function() {
        if (mode === 'Selected') {
            var hit = this.getPointAt(mouseX, mouseY);
            if (hit > -1) {
                // Select a control point
                this.selected = this.points[hit];
            } else if (pointInImage(mouseX, mouseY)) {
                // Close current selection and start new one
                this.clearSelection();
            }
        }
    },
    
    mouseDragged: function() {
        if (this.selected) {
            this.selected.x += mouseX - pmouseX;
            this.selected.y += mouseY - pmouseY;
        }
    },
    
    mouseReleased: function() {
        if (mode === 'Selecting') {
            this.addPoint(mouseX, mouseY);
        } else {
            if (this.selected) {
                this.getPixels();
                this.selected = false;
            }
        }
    }
};

/********************************************************
 *      Create interface
*********************************************************/

var GUI = [];
var labels = [];

var buildGUI = function() {
    var elements = {};

    var showSelectButtons = function() {
        mode = 'Start';
        Selection.points = [];
        
        GUI = [
            elements['Select all'],
            elements['Select region']
        ];
        labels = [];
    };
    
    var showControlButtons = function() {
        // Cancel selection if not enough points selected
        if (Selection.points.length < 3) {
            showSelectButtons();
            return;
        }
            
        mode = 'Selected';
        GUI = [
            elements.Hue,
            elements.Saturation,
            elements.Lightness,
            elements.Contrast,
            elements.Deselect
        ];
        // Remove control labels
        labels.length = 1;
    };
    
    var selectRegion = function() {
        mode = 'Selecting';
        Selection.points = [];
        GUI = [elements.Deselect];
        labels = [elements['Select region button']];
    };
    
    Selection.clearSelection = selectRegion;
    Selection.completeSelection = showControlButtons;
    
    // Get functions for buttons to trigger change of mode
    var getTriggerFunction = function(name) {
        if (name === 'Deselect') {
            return showSelectButtons;
        }
        
        if (name === 'Select all') {
            return function() {
                labels = [elements['Select all button']];
                Selection.selectAll();
            };
        }
        
        if (name === 'Select region') {
            return selectRegion;
        }
        
        var name2 = name.toLowerCase().slice(0, 3) + 'Slider';
        return function() {
            mode = 'Edit';
            var slider = elements[name2];
            
            GUI = [
                elements.cancelChange,
                elements.applyChange,
                slider
            ];
            labels.push(elements[name + ' button']);
            
            // Set default value
            slider.setValue(0);
        };
    };
    
    var buttons = [
        'Select all',
        'Select region',
        'Deselect',
        'Hue',
        'Saturation',
        'Lightness',
        'Contrast'
    ];

    var x = 10;
    var startY = imgY2 + 8;
    var y = startY;
    var dy = 30;

    // Buttons for different select modes
    for (var i = 0; i < buttons.length; i++) {
        var name = buttons[i];
        elements[name] = new Button(x, y, 110, 20,
            {
                name: name,
                filled: name === 'Deselect' ?
                                    color(200, 0, 0): 
                                    color(0, 136, 255),
                trigger: getTriggerFunction(name)
            }
        );
        
        // Add labels corresponding to buttons
        elements[name + " button"] = new Label(x, y, 110, 20, name);
        
        y += dy;
        
        if (i === 2) {
            x += 122;
            y = startY;
        }
    }

    // Add sliders to control
    x += 122;
    y = startY;
    var w = 201;
    var h = 30;
    
    elements.hueSlider = new Slider(x, y, w, h, {
        min: -100,
        max: 100,
        now: 0,
        trigger: function() {
            var val = this.val * 0.01;
            if (Selection.indices.length) {
                toUpdate = 0;
                updateFunction = function() {
                    updateHue(Selection, val);
                };
            }
        }
    });
    y += dy;
    
    elements.satSlider = new Slider(x, y, w, h, {
        min: -100,
        max: 100,
        trigger: function() {
            var val = this.val * 0.01;
            if (Selection.indices.length) {
                toUpdate = 0;
                updateFunction = function() {
                    updateSaturation(Selection, val);
                };
            }
        }
    });
    y += dy;
    
    elements.ligSlider = new Slider(x, y, w, h, {
        min: -100,
        max: 100,
        trigger: function() {
            var val = this.val * 0.01;
            if (Selection.indices.length) {
                toUpdate = 0;
                updateFunction = function() {
                    updateLightness(Selection, val);
                };
            }
        }
    });
    y += dy;
    
    elements.conSlider = new Slider(x, y, w, h, {
        min: -100,
        max: 100,
        trigger: function() {
            var val = this.val * 0.01;
            if (Selection.indices.length) {
                toUpdate = 0;
                updateFunction = function() {
                    updateContrast(Selection, val);
                };
            }
        }
    });
    y += dy + 4;

    elements.cancelChange = new Button(x + 20, y, 75, 20,
        {
            name: 'Cancel',
            filled: color(200, 0, 0),
            trigger: function() {
                scene = Selection.oldScene;
                showControlButtons();
            }
        }
    );
    
    elements.applyChange = new Button(x + w - 75 - 20, y, 75, 20,
        {
            name: 'Apply',
            filled: color(67, 122, 57),
            trigger: function() {
                Selection.getHSL();
                showControlButtons();
            }
        }
    );

    showSelectButtons();
};

buildGUI();

/********************************************************
 *      Main loop
*********************************************************/

frameRate(30);

draw = function() {
    background(0);
    
    // Ensures we only update the image only once per draw update
    //println(millis() - mm)
    if (updateFunction) {
        updateFunction();
    }

    image(scene, imgX1, imgY1);
    
    // Define cursor
    if (mode === 'Selecting') {
        cursor(pointInImage(mouseX, mouseY) ? 'crosshair' : 'not-allowed');
    } else {
        cursor('default');
    }
    
    Selection.draw();

    GUI.forEach(function(p) { p.draw(); });
    labels.forEach(function(p) { p.draw(); });
    
    if (mode === 'Selecting') {
        fill(255);
        textFont(sansFont, 15);
        textAlign(LEFT, TOP);
        text("Click on the image to define\na region of to edit.", 160, imgY2 + 8);
        text("To close a region click on\nthe starting point.", 160, imgY2 + 45);
    }
    
    fill(255);
    //text(mode, width - 50, height - 20);
    
    timer = millis();
};

/********************************************************
 *      Event handling
*********************************************************/
{
mousePressed = function() {
    Selection.mousePressed();
    GUI.forEach(function(p) { p.mousePressed(); });
};

mouseDragged = function() {
    Selection.mouseDragged();
    GUI.forEach(function(p) { p.mouseDragged(); });
};

mouseReleased = function() {
    Selection.mouseReleased();
    GUI.forEach(function(p) { p.mouseReleased(); });
};

mouseOver = function() {
    Selection.mouseIsIn = true;
};

mouseOut = function() {
    Selection.mouseIsIn = false;
   // mouseReleased();
};
}
