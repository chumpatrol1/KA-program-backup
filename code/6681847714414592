/******************************************************
 * TODO:
 *   Blurring
 *   Focussing
 *   Change camera direction
 *   Improve scene
 *   Change aspect ratio
*******************************************************/

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

// Determines how we map Circle of Confusion diameter to blurred image
var BLUR_AMOUNT = 2;

var NUMBER_OF_JOYS = 6;
var DISTANCE_BETWEEN_JOYS = 1000;

// Convert focal length of angle in degrees
var focalLengthToAngle = {
    '35mm': 54,
    '50mm': 40,
    '70mm': 29,
    '100mm': 20,
    '200mm': 10
};

var showing = {};
angleMode = "degrees";

// GUI functions
{
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, {name: name});
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}
/*******************************************************
 *      GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 14);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 * GUI Label
********************************************************/
var Label = function(x, y, w, h, name) {
    this.x = x + w / 2;
    this.x1 = x + 8;
    this.x2 = x + w - 8;
    this.y = y + h + 1;
    this.y2 = y + h / 2 + 3;
    this.name = name;
};

Label.prototype.draw = function() {
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y2);
    
    strokeWeight(1);
    stroke(20);
    line(this.x1, this.y, this.x2, this.y);
};
/*******************************************************
 *  Dropdown Menu
********************************************************/
{
var Dropdown = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    
    this.options = params.options || [];
    this.selectedOption = params.selectedOption || 0;
    this.dy = 20;
    this.boxW = 55;
    this.boxH = this.dy * (this.options.length + 1);
    this.x2 = this.x + this.w - this.boxW;
    
    this.showDropdown = false;
};
Dropdown.prototype = Object.create(Button.prototype);

Dropdown.prototype.draw = function() {
    this.fade();

    fill(10);
    textFont(sansFont, 13);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + 4, this.y + this.h / 2);
    var y = this.y + this.h / 2;

    textAlign(RIGHT, CENTER);
    var x = this.x2 + this.boxW - 4;
    
    if (this.showDropdown) {
        // Show all options
        strokeWeight(1);
        fill(250);
        rect(this.x2, this.y, this.boxW, this.boxH, 5);
        
        // Highlight selected
        if (this.mouseOver()) {
            if (this.transition) {
                noStroke();
                fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
                var index = this.getOption();
                rect(this.x2, this.y + index * this.dy, this.boxW, this.dy, 5);
            }
        }
        
        fill(10);
        text(this.options[this.selectedOption], x, y);
        for (var i = 0; i < this.options.length; i++) {
            y += this.dy;
            text(this.options[i], x, y);
        }
        
    } else {
        // Selection box
        if (this.transition) {
            fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        } else {
            fill(250);
        }
        strokeWeight(1);
        stroke(200);
        rect(this.x2, this.y, this.boxW, this.h, 5);
        
        fill(10);
        text(this.options[this.selectedOption], x, y);
    }
};

Dropdown.prototype.getOption = function() {
    return min(floor((mouseY - this.y) / this.dy), this.options.length);
};

Dropdown.prototype.mouseOver = function() {
    return (mouseX >= this.x2 && mouseX <= this.x2 + this.boxW &&
            mouseY >= this.y && mouseY <= this.y + (this.showDropdown ? this.boxH : this.h));
};

Dropdown.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        if (this.showDropdown) {
            var selected = this.getOption();
            if (selected) {
                this.selectedOption = selected - 1;
                this.trigger(this.options[this.selectedOption]);
            }
            this.showDropdown = false;
        } else {
            this.showDropdown = true;
        }
    } else {
        this.showDropdown = false;
    }
    this.selected = false;
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
    this.labels = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    fill(250);
    strokeWeight(1);
    stroke(180);
    //rect(this.x, this.y, this.w, this.h, 8);
   
    this.labels.forEach(function(p) { p.draw(); });
    
    var selected = false;
    this.components.forEach(function(p) {
        if (!p.showDropdown) {
            p.draw();
        } else {
            // Draw selected component later, so they are on top
            selected = p;
        }
    });
    
    if (selected) {
        selected.draw();
    }
    
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addLabel = function(name) {
    var h = 20;
    this.labels.push(new Label(this.x, this.y + this.h, this.w, h, name));
    this.h += h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.addRadioButtons = function(options, trigger, defaultOption) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var radioButtons = [];
    
    var triggerFunction = function() {
        if (!this.marked) {
            this.marked = true;
            
            // Deselected other buttons
            for (var i = 0; i < radioButtons.length; i++) {
                if (radioButtons[i] !== this) {
                    radioButtons[i].marked = false;
                }
            }
        }
        if (trigger) { trigger(this.name); }
    };
    
    for (var i = 0; i < options.length; i++) {
        var button = new RadioButton(x, y, w, 22, options[i], triggerFunction);
        radioButtons.push(button);
        y += 27;
        this.h += 27;
    }
    
    radioButtons[defaultOption || 0].trigger();
    
    this.components = this.components.concat(radioButtons);
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
}
/***********************************************
 *     Scene elements
 * image:       image
 * worldHeight: height of element in pixels
 * when camera at 45 degree angle
************************************************/

var Element = function(imgData, x, z, worldHeight) {
    this.x = x;
    this.z = z;
    
    this.images = imgData.images;
    this.image = this.images[0];
    this.height = worldHeight;
    this.width = this.image.width * worldHeight / this.image.height;
    
    // Where the center of the base of the image content is
    this.xOffset = 0.5 + (imgData.xOffset || 0);
    this.yOffset = 1 + (imgData.yOffset || 0);
};

Element.prototype.draw = function(dx, dy, _scale, blur, ctx) {
    var imgWidth = this.width * _scale;
    var imgHeight = this.height * _scale;
    
    var x = (this.x - dx) * _scale - imgWidth * this.xOffset;
    var y = dy - imgHeight * this.yOffset;
    
    var index = 1 + log(blur * BLUR_AMOUNT) * Math.LOG2E;
    //println(index);
    index = constrain(floor(index), 0, 4);
    //println(blur + " " + index);
    
    index = 4;
    //println(blur);
    if (blur < 0.5) { index = 0; } 
    else if (blur < 1) { index = 1; }
    else if (blur < 2) { index = 2; }
    else if (blur < 5) { index = 3; }
    
    ctx.image(this.images[index], x, y, imgWidth, imgHeight);
};

/***********************************************
 * Images with offsets to center the characters
************************************************/

var JOY = {
    images: [
        getImage("insideout/shot1_layer3blur0"),
        getImage("insideout/shot1_layer3blur10"),
        getImage("insideout/shot1_layer3blur20"),
        getImage("insideout/shot1_layer3blur40"),
        getImage("insideout/shot1_layer3blur80")
    ],
    img: getImage("insideout/shot1_layer3blur40"),
    xOffset: -0.27,
    yOffset: 0.12,
};

/***********************************************
 * Create all the elements in the scene
************************************************/
var scene = [];

for (var i = 0; i < NUMBER_OF_JOYS; i++) {
    scene.push(new Element(JOY, i * i * 20, i * DISTANCE_BETWEEN_JOYS, 100));
}

scene = scene.sort(function(a, b) { return b.z - a.z; });

/**************************************
 *      Camera object
 * Captures image of the scene
***************************************/

var Camera = {
    x: 0,
    y: 230,         // Height above ground
    z: 500,           // Distance from scene
    angle: 54,      // Angle for field of view
    focalLength: 35,
    fstop: 2.8,
    imagePlane: 35,
    maxFrames: 24,  // Number of frames for capture
    
    // Dimensions of screen
    width: 490,
    height: 400,
    image: null,
    
    // Draw the view from the camera
    draw: function(x, y) {
        //image(this.image, x + 5, y + 5, this.width, this.height);
        image(this.image, x, y, this.width, this.height);
    },
    
    drawFrame: function(x, y) {
        noFill();
        strokeWeight(5);
        stroke(10, 10, 20);
        rect(x + 2, y + 2, this.width + 5, this.height + 5, 5);
    },
    
    captureImage: function() {
        if (!this.image) {
            this.image = createGraphics(this.width, this.height, JAVA2D);
        }
        
        this.drawBackground();
        this.drawElements();
    },
    
    drawBackground: function() {
        this.image.background(0);
    },
    
    drawElements: function() {
        var img = this.image;
        var tanAngle = tan(this.angle * 0.5);
        var aperture = 0.5 * this.focalLength / this.fstop;
        
        img.pushMatrix();
        img.translate(this.width * 0.5, this.height * 0.5);
        img.noFill();
        
        img.stroke(255);
        //image.line(0, -this.height / 2, 0, this.height / 2);
        
        // Draw items in scene
        for (var i = 0; i < scene.length; i++) {
            var item = scene[i];
            var dz = item.z + this.z;
            
            // Width that can camera can view at given z position
            var fieldWidth = dz * tanAngle;
            var _scale = 1 / fieldWidth;
            var dy = this.height * this.y * _scale;
            
            var imgDistance = 1 / (1 / this.focalLength - 1 / dz);
       
            var blur = aperture * abs(this.imagePlane - imgDistance) / imgDistance;
            
            //println(aperture);
            
            item.draw(this.x, dy, _scale * 1000, blur, img);
            //img.rect(x, y, imgWidth, imgHeight);
            
        }
        img.popMatrix();
    }
};

/**************************************
 * Creation of objects
***************************************/

var toolbar = new Toolbar(5, 10, 150);
toolbar.add(Slider, {
    name: "Camera x",
    min: -200,
    now: 0,
    max: 200,
    trigger: function() {
        if (this.val !== Camera.y) {
            Camera.x = this.val;
            Camera.captureImage();
        }
    }
});
toolbar.add(Slider, {
    name: "Camera y (distance)",
    min: 2.5,
    now: 5,
    max: 100,
    decimalPlaces: 1,
    trigger: function() {
        var val = this.val * 100;
        if (val !== Camera.z) {
            Camera.z = val;
            Camera.captureImage();
        }
    }
});
toolbar.add(Slider, {
    name: "Camera z (height)",
    min: 0,
    now: 160,
    max: 400,
    trigger: function() {
        if (this.val !== Camera.y) {
            Camera.y = this.val;
            Camera.captureImage();
        }
    }
});
toolbar.add(Dropdown, {
    name: "Focal length:",
    options: ["35mm", "50mm", "70mm", "100mm", "200mm"],
    trigger: function(focalLength) {
        Camera.focalLength = parseFloat(focalLength);
        Camera.angle = focalLengthToAngle[focalLength];
        Camera.captureImage();
    }
});
toolbar.add(Dropdown, {
    name: "f-stop:",
    options: ['2.8', '4', '5.6', '8', '11'],
    trigger: function(fstop) {
        Camera.fstop = parseFloat(fstop);
        Camera.captureImage();
    }
});
toolbar.add(Slider, {
    name: "Image plane",
    min: 35,
    max: 200,
    trigger: function() {
        if (this.val !== Camera.imagePlane) {
            Camera.imagePlane = this.val;
            Camera.captureImage();
        }
    }
});

//Camera.captureImage();

//  Main loop
draw = function() {
    background(BACKGROUND);
    Camera.draw(160, 0, 400, 400);
    toolbar.draw();
};

{
mousePressed = function() {
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
};

mouseReleased = function() {
    toolbar.mouseReleased();
};

mouseOut = mouseReleased;
} //  Event handling
