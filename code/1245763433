noFill();

var x1 = 150;
var y1 = 179;
var r1 = 80;
var dx1 = 50;
var dy1 = -11;
var m1 = 64;

var x2 = 230;
var y2 = 238;
var r2 = 120;
var dx2 = -40;
var dy2 = -10;
var m2 = 144;

var dotProduct = function(ax, ay, bx, by) {
    return ax * bx + ay * by;
};

var drawParticle = function(x, y, r, dx, dy) {
    noStroke();
    ellipse(x, y, r, r);
    
    strokeWeight(3);
    stroke(0, 0, 0, 220);
    line(x, y, x + dx, y + dy);
};

draw = function() {
    background(255);

    fill(160, 40, 40);
    drawParticle(x1, y1, r1, dx1, dy1);
    fill(40, 40, 160);
    drawParticle(x2, y2, r2, dx2, dy2);
    
    var collisionDist = dist(x1, y1, x2, y2);
    var collisionVx = x2 - x1;
    var collisionVy = y2 - y1;
    var collisionVi = collisionVx / collisionDist;
    var collisionVj = collisionVy / collisionDist;

    // Vectors in direction of collision
    strokeWeight(3);
    stroke(255, 60, 60);
    var projectA = dotProduct(dx1, dy1, collisionVx, collisionVy) / collisionDist;
    var projectAp = dotProduct(dx1, dy1, -collisionVy, collisionVx) / collisionDist;
    
    line(x1, y1, x1 + projectA * collisionVi, y1 + projectA * collisionVj);
    line(x1, y1, x1 - projectAp * collisionVj, y1 + projectAp * collisionVi);

    stroke(60, 60, 255);
    var projectB = dotProduct(dx2, dy2, collisionVx, collisionVy) / collisionDist;
    var projectBp = dotProduct(dx2, dy2, -collisionVy, collisionVx) / collisionDist;
    line(x2, y2, x2 + projectB * collisionVi, y2 + projectB * collisionVj);
    line(x2, y2, x2 - projectBp * collisionVj, y2 + projectBp * collisionVi);

    var sumMass = m1 + m2;
    var diffMass = m1 - m2;
    var v1p = (diffMass * projectA + 2 * m2 * projectB) / sumMass;
    var v2p = (2 * m1 * projectA - diffMass * projectB) / sumMass;

    var vx1 = v1p * collisionVi - projectAp * collisionVj;
    var vy1 = v1p * collisionVj + projectAp * collisionVi;
    var vx2 = v2p * collisionVi - projectBp * collisionVj;
    var vy2 = v2p * collisionVj + projectBp * collisionVi;
    
    stroke(0, 0, 0, 120);
    line(x1, y1, x1 + vx1, y1 + vy1);
    line(x2, y2, x2 + vx2, y2 + vy2);

    // collision line
    /*
    strokeWeight(1);
    stroke(160, 160, 160, 220);
    line(x1, y1, x2, y2);    
    */
    
};