
// TODO:
//  Anti-alias
//  Shade edges (bump-map)
//  Colours

// Position of cylinder
var legY1 = 80;
var legY2 = 320;
var legH = legY2 - legY1;
var legX = 200;
var legR = 100;
var legR2 = legR * legR;

// Voronoi dimensions
var vWidth = 400;
var vHeight = 400;

// For pespective
var warp = 0.25;

// Vector for incoming light
var lightX = -0.3;
var lightZ = sqrt(1 - lightX * lightX);


/*******************************************************
 *      Calculate height based on voronoi
********************************************************/

var possionDiscSampling = function(minDist, x1, y1, w, h) {
    x1 = x1 || 0;
    y1 = y1 || 0;
    w = w || width;
    h = h || height;
    
    // How many points we try before rejecting a point
    var k = 30;
    
    // Final array of points that we'll return
    var points = [];
    
    // Points that we use to find neighbours
    var activePoints = [];
    
    var addPoint = function(x, y) {
        points.push([x, y, color(100 + random(40), 130 + random(40), 50 + random(40))]);
        activePoints.push([x, y]);
    };
    
    // Start at a random point not too close to the edge
    addPoint(x1 + (0.2 + random() * 0.6) * w, y1 + (0.2 + random() * 0.6) * h);
    
    var x, y;
    while (activePoints.length) {
        // Pick a random active point
        var activeIndex = floor(random() * activePoints.length);
        var currentPoint = activePoints[activeIndex];
        
        var pointAdded = false;
        
        for (var i = 0; i < k; i++) {
            var angle = random() * 360;
            var d = minDist + random() * minDist;
            x = currentPoint[0] + cos(angle) * d;
            y = currentPoint[1] + sin(angle) * d;
            
            if (x < x1 || x > w || y < y1 || y > h) {
                continue;
            }
            
            // Check distance from each other point is > minDist
            // TODO make this more efficient using the sampleGrid
            var collision = false;
            for (var j = 0; j < points.length; j++) {
                if (dist(x, y, points[j][0], points[j][1]) < minDist) {
                    collision = true;
                    break;
                }
            }
            
            if (!collision) {
                addPoint(x, y);
                pointAdded = true;
                break;
            }
        }
        
        // Failed to add point so remove it from the active list
        if (!pointAdded) {
            activePoints.splice(activeIndex, 1);
        }
    }
    
    return points;
};

var sites = possionDiscSampling(100, 0, 0, vWidth, vHeight);

var d1, d2, d3, i, m, coord;
var n = sites.length;
/*
var getNearestSites = function(x, y) {
    d1 = 160000;
    coord = [];
    
    // Find minimum distance to each point
    // TODO: Try to limit based on y-coordinate
    
    for (i = 0; i < n; i++) {
        m = sites[i];
        d3 = (x - m[0]) * (x - m[0]) + (y - m[1]) * (y - m[1]);
        if (d3 < d1) {
            d2 = d1;
            d1 = d3;
            coord[2] = coord[0];
            coord[3] = coord[1];
            coord[0] = m[0];
            coord[1] = m[1];
        } else if (d3 < d2) {
            d2 = d3;
            coord[2] = m[0];
            coord[3] = m[1];
        }
    }
    
    coord[4] = sqrt(d2) - sqrt(d1) + 1;
};

var getHeight = function(x, y) {
    d1 = sqrt((x - coord[0]) * (x - coord[0]) + (y - coord[1]) * (y - coord[1]));
    d2 = sqrt((x - coord[2]) * (x - coord[2]) + (y - coord[3]) * (y - coord[3]));
    m = d2 - d1 + 1;
    
    if (m < 16) {
        // Skin
        m *= m * 0.002;
        m += 0.1;
    } else {
        //m = 0.8 * m / (16 + m) + 0.1;
        m = 1 - 256 / (256 + m * m); 
        // Scale top
        if (m > 0.75) { m = 0.75; }
    }
    
    return m;
};
*/

var isSkin = false;
var c1, c2, c3;
var getHeight = function(x, y) {
    d1 = 160000;
    
    // Find minimum distance to each point
    // TODO: Try to limit based on y-coordinate
    for (i = 0; i < n; i++) {
        m = sites[i];
        d3 = (x - m[0]) * (x - m[0]) + (y - m[1]) * (y - m[1]);
        if (d3 < d1) {
            d2 = d1;
            d1 = d3;
        } else if (d3 < d2) {
            d2 = d3;
        }
    }
    
    m = sqrt(d2) - sqrt(d1) + 1;
    
    if (m < 16) {
        m *= m * 0.002;
        m += 0.1;
        // Set color
        c1 += 50;
        c2 += 40;
        c3 += 15;
    } else {
        m = 1 - 256 / (256 + m * m); 
        // Scale top
        if (m > 0.75) { m = 0.75; }
        // Set color
        c1 += 14;
        c2 += 40;
        c3 += 28;
    }
    
    return m;
};

/*******************************************************
 *      Draw
********************************************************/

var x, y, ix, iz, dx, dy, y2, yh, h, ih, px, ux, uy;
var d0, d1, d2, bx, by;
var index, intensity;
var i180 = 1 / 180;

//draw = function() {
    background(0);
    loadPixels();
    var p = imageData.data;

    for (x = -legR; x <= legR; x++) {
        px = legX + x;          // pixel for this x value
        ix = x / legR;          // x in the range -1 to 1
        iz = sqrt(1 - ix * ix);
        
        // position along cylinder surface
        ux = vWidth * (1 - acos(ix) * i180);

        yh = iz * legR * warp | 0;  // Additional height of cylinder due to perspective
        h = legH + yh + yh;         // Total height of cylinder
        ih = vHeight / h;           // Inverse

        for (y = 0; y < h; y++) {
            uy = y * ih;
            
            c1 = 0;
            c2 = 0;
            c3 = 0;
            d0 = getHeight(ux, uy);
            dx = getHeight(ux + 0.5, uy);
            dy = getHeight(ux, uy + 0.5);
            
            // Shift each position
            bx = ix + (dx - d0) * 100;
            by = (dy - d0) * 100;
            
            // Normalise
            m = (1 - d0 * 0.2) / sqrt(bx * bx + by * by + iz * iz);
            intensity = (0.3 + m * (bx * lightX + iz * lightZ));
            
            // Set the pixels
            index = (px + (y + legY1 - yh) * 400) << 2;
            p[index++] = c1 * intensity | 0;
            p[index++] = c2 * intensity | 0;
            p[index++] = c3 * intensity | 0;
        }
    }

    updatePixels();
    
//    noLoop();
//};
