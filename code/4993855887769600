/******************************************************
 * Short but tricky hacker puzzle
 *  - Can you break into the admin file?
 * 
 * Tips
 *  - Type help in new environments to get commands
 *  - Up arrow: get previous commands
 *  - Right arrow: auto-complete file/folder names
 * 
 * To Do:
 *  Create a get file by filepath function
 *  Allow cd ../folder etc.
 *  Sudo
 *  More levels
********************************************************/

// Colours
var BACKGROUND = color(24, 24, 20);
var BASICTEXT = color(10, 255, 20);
var BASICTEXT = color(200, 200, 200);

// Display parameters
var myFont = createFont("monospace", 14);
var fontSize = 13;
var CURSORBLINK = 30;

var commandPromptX = 8;
var commandPromptY = 8;
var maxWidth = width - 2 * commandPromptX;
var scroll = 0;

var command = "";
var commands = [];
var outputs = [];
var lastCommand = 0;

var randFromArray = function(arr) {
    return arr[floor(random() * arr.length)];
};

/*****************************************************
 *  Global parameters
******************************************************/

// Mapping keyCode to output
var LETTERS = "abcdefghijklmnopqrstuvwxyz";
var NUMBERS = {
    32: " ", 48: '0', 49: '1', 50: '2', 51: '3', 52: '4', 
    53: '5', 54: '6', 55: '7', 56: '8',  57: '9', 189: '-', 190: '.'
};

/*****************************************************
 *  People with usernames and passwords
******************************************************/
var clearanceNames = ['guest', 'user', 'admin', 'trusted', 'secure', 'special', 'secret']; 

var generatePassword = function(n) {
    var chars = LETTERS + "0123456789";
    var password = "";
    for (var i = 0; i < n; i++) {
        password += chars.charAt(floor(random() * chars.length));
    }
    return password;
};

var firstNames = ["Sophia", "Isabella", "Emma", "Olivia", "Ava", "Emily", "Abigail", "Madison", "Mia", "Chloe", "Elizabeth", "Ella", "Addison", "Natalie", "Lily", "Grace", "Samantha", "Avery", "Sofia", "Aubrey", "Brooklyn", "Lillian", "Victoria", "Evelyn", "Hannah", "Alexis", "Charlotte", "Zoey", "Leah", "Amelia", "Zoe", "Hailey", "Layla", "Gabriella", "Nevaeh", "Kaylee", "Alyssa", "Anna", "Sarah", "Allison", "Savannah", "Ashley", "Audrey", "Taylor", "Brianna", "Aaliyah", "Riley", "Camila", "Khloe", "Claire", "Jacob", "Mason", "William", "Jayden", "Noah", "Michael", "Ethan", "Alexander", "Aiden", "Daniel", "Anthony", "Matthew", "Elijah", "Joshua", "Liam", "Andrew", "James", "David", "Benjamin", "Logan", "Christopher", "Joseph", "Jackson", "Gabriel", "Ryan", "Samuel", "John", "Nathan", "Lucas", "Christian", "Jonathan", "Caleb", "Dylan", "Landon", "Isaac", "Gavin", "Brayden", "Tyler", "Luke", "Evan", "Carter", "Nicholas", "Isaiah", "Owen", "Jack", "Jordan", "Brandon", "Wyatt", "Julian", "Aaron"];

var surnames = ["Adams", "Allen", "Anderson", "Bailey", "Baker", "Bell", "Bennett", "Brown", "Butler", "Campbell", "Carter", "Chapman", "Clark", "Collins", "Cook", "Cooper", "Cox", "Davies", "Davis", "Edwards", "Ellis", "Evans", "Fox", "Graham", "Gray", "Green", "Griffiths", "Hall", "Harrison", "Hill", "Holmes", "Hughes", "Hunt", "Hunter", "Jackson", "James", "Johnson", "Jones", "Kelly", "Kennedy", "Khan", "King", "Knight", "Lee", "Lewis", "Lloyd", "Marshall", "Martin", "Mason", "Matthews", "Miller", "Mitchell", "Moore", "Morgan", "Morris", "Murphy", "Murray", "Owen", "Palmer", "Parker", "Patel", "Phillips", "Powell", "Price", "Reid", "Reynolds", "Richards", "Richardson", "Roberts", "Robinson", "Rogers", "Rose", "Russell", "Saunders", "Scott", "Shaw", "Simpson", "Smith", "Stevens", "Stewart", "Taylor", "Thomas", "Thomson", "Turner", "Walker", "Walsh", "Ward", "Watson", "White", "Wilkinson", "Williams", "Wilson", "Wood", "Wright", "Young"];

var group1People = {};
var group1PeopleArray = [];

// Generate a username from the first two letters of the first name
// and the first three of the second name
var getUserName = function(name1, name2) {
    var username = name1.slice(0, 2) + name2.slice(0, 3);
    username = username.toLowerCase();
    return username;
};

// Get a random person with given clearance
var getRandomPerson = function(clearance) {
    var peopleSet = [];
    
    for (var p in group1People) {
        if (group1People[p].clearance === clearance) {
            peopleSet.push(group1People[p]);
        }
    }
    
    return randFromArray(peopleSet);
};

var createRandomPerson = function(clearance) {
    var name1 = randFromArray(firstNames);
    var name2 = randFromArray(surnames);
    
    return {
        firstName: name1,
        surname: name2,
        username: getUserName(name1, name2),
        password: generatePassword(floor(random() * 5) + 8),
        clearance: clearance
    };
};

var addPersonToGroup = function(person, group) {
    var existingPerson = group[person.username];
    
    if (existingPerson) {
        person.clearance = existingPerson.clearance;
    }
    
    group[person.username] = person;
};

var createPeople = function(levels) {
    for (var i = 0; i < levels.length; i++) {
        var person = createRandomPerson(levels[i]);
        addPersonToGroup(person, group1People);
        group1PeopleArray.push(person);
    } 
};

createPeople([2, 1, 1, 1, 1, 1]);
var level4Person = createRandomPerson(4);

/*******************************************************
 * An environment is a program that responds to input.
 * The main environment is the file explorer.
 * Contains generic functions for parsing commands.
 * Shouldn't need editing - just create objects that
 * inherit from it.
********************************************************/
var currentEnv;
var envName = {};

var Environment = function(name) {
    this.canEnter = true;
    this.name = name;
    envName[name] = this;
    
    // Allow commands to be called with multiple commands
    this.synonyms = {};
    
    // Generic help
    this.helpString = [
        "Type a command then enter",
        "Use the left arrow for backspace"
    ];
};

// Output a string to the terminal
Environment.prototype.output = function(txt) {
    outputs.push([commandPromptY, txt]);
    
    // Calculate how high we are after wrapping
    // Doesn't always work
    var predictedHeight = ceil(textWidth(txt) / maxWidth);
    commandPromptY += 16 * predictedHeight;
};

// Output an array of strings as different lines to the terminal
Environment.prototype.outputArray = function(arr) {
    for (var i = 0; i < arr.length; i++) {
        this.output(arr[i]);   
    }
};

Environment.prototype.help = function(arr) {
    this.outputArray(this.helpString);
};

// Start a new environment
Environment.prototype._run = function(program) {
    if (envName[program]) {
        currentEnv = envName[program];
        if (currentEnv.info) {
            currentEnv.info();
        }
    } else {
        this.output("Unable to run program " + program);
    }
};

// Get the string that is displayed when entering a command
Environment.prototype.getCommandString = function() {
    return ">" + command;
};

// Entered commands are parsed here and recorded here
// Then passed to the useCommand function
Environment.prototype.enterCommand = function() {
    var parts = command.split(" ");
    var cmd = parts[0];
    var parameters = parts.splice(1);
    
    commands.push(command);
    this.output(this.getCommandString());
    this.useCommand(cmd, parameters);

    command = "";
    lastCommand = 0;
};

// If command or an synonym exists then call it with the parameter
Environment.prototype.useCommand = function(cmd, parameters) {
    if (this[cmd]) {
        this[cmd](parameters);
    } else if (this.synonyms[cmd]) {
        this[this.synonyms[cmd]](parameters);
    } else {
        this.output(cmd + ": command not found");   
    }
};

// Pressing the right arrow completes command
// Needs to be overwritten
Environment.prototype.tabCompletion = function() {};

/*******************************************************
 *    Connection Program
 * Doesn't actually do anything, just wastes time
 * pretending to connect to a server
********************************************************/

var connectionEnv = new Environment("connection");
connectionEnv.canEnter = false;

// Overwrite enterCommand - no command does anything
connectionEnv.enterCommand = function() { };

connectionEnv.getCommandString = function() {
    if (!this.started) {
        this.started = millis();
        this.time = (1.25 + random()) * 2000;
    }
    
    var s = "Requesting access to omniScopia peripheral server";
    if (millis() - this.started < 1000) {
        return s;
    } else if (!this.connecting) {
        this.connecting = true;
        this.output(s);
    }
    
    if (millis() - this.started < this.time) {
        var s = "Connecting to server";
        var n = floor(frameCount / 10) % 4;
        
        if (n === 1) { s += "."; }
        else if (n === 2) { s += ".."; }
        else if (n === 3) { s += "..."; }
        
        return s;
    } else {
        this.output("Connected on port " + (1 + ceil(random()*8)));
        this._run('login');
    }
};

/*************************************************************
 *    Login Program
 * Allows user to login into omniScopia server
 * User must type login then username and password
 * User can login as guest without having to type a password
**************************************************************/

var loginEnv = new Environment("login");
loginEnv.helpString = [
    "Type a command then enter",
    "Use the left arrow for backspace",
    "Commands:",
    "  login:           login into server",
    "  login [name]:    login into server as name"
];

loginEnv.info = function() {
    var welcome = [" ",
    " ************************************************",
    "              Welcome to omniScopia              ",
    "        Where your privacy is our concern        ",
    " ",
    "  Type help for help and login to login      ",
    "  First-time users can login as guest        ",
    " ************************************************"];
    this.outputArray(welcome);
};

// Change mode to enter username
loginEnv.login = function(username) {
    if (username.length > 0) {
        this.enterUsername(username[0]);
    } else {
        this.specialEntry = 'username';   
    }
};

// If in username mode, record username
loginEnv.enterUsername = function(username) {
    this.username = username;
    if (username === 'guest') {
        this.loginSucess('guest', 0);
    } else {
        this.specialEntry = 'password';   
    }
};

loginEnv.loginSucess = function(username, clearance) {
    this.specialEntry = false;
    
    var s = "Logged in as " + username;
    if (username !== 'guest') {
        s += " (" + clearanceNames[clearance] + ")";
    }
    this.output(s);
    
    this._run('explorer');
    currentEnv.username = username;
    currentEnv.clearance = clearance;
    currentEnv.currentFolder = currentEnv.root;
};

// Deal with username and password entry
loginEnv.useCommand = function(cmd, parameters) {
    if (this.specialEntry === 'username') {
        this.enterUsername(cmd);
    } else if (this.specialEntry === 'password') {
        var person = group1People[this.username];
        if (person && cmd === person.password) {
            this.loginSucess(this.username, person.clearance);
        } else {
            this.output("Incorrect password");
            this.specialEntry = false;   
        }
    } else {
        if (this[cmd]) {
            this[cmd](parameters);
        } else {
            this.output(cmd + ": command not found");
        }
    }
};

// Dealing with login details
// Has normal mode, username mode and password mode
loginEnv.getCommandString = function() {
    if (!this.specialEntry) {
        return "> " + command;   
    } else if (this.specialEntry === 'username') {
        return "username: " + command;
    } else if (this.specialEntry === 'password') {
        var s = "password: ";
        for (var i = 0; i < command.length; i++) {
            s += '*';
        }
        return s;
    }
};

/*******************************************************
 *    Explorer program
 * Allows user to explore files and folders
********************************************************/
var explorerEnv = new Environment("explorer");

// Map names to file and folder objects
explorerEnv.folderNames = {};

// Allow multiple commands to trigger the same command
explorerEnv.synonyms = {
    list: 'ls',
    show: 'ls',
    dir: 'ls',
    cat: 'read',
    more: 'read',
    logout: 'exit'
};

explorerEnv.helpString = [
    " Type a command then enter",
    " Use the left arrow for backspace",
    " Use the right arrow to complete a file or folder name",
    " Commands:",
    "  exit           logout of server",
    "  ls             list files and folders",
    "  ls -l          details of files and folders",
    "  cd [name]      change to folder [name]",
    "  cd ..          change parent directory",
    "  read [name]    read file called [name]",
    "  run [name]     run file called [name]"];

explorerEnv.getCommandString = function() {
    var name = this.username + "@omniS:";
    var path = this.currentFolder.getPath();
    return name + path + ">" + command;
};

// Pressing right arrow completes file and folder names
explorerEnv.tabCompletion = function() {
    var cmd = command.split(" ");
    var last = cmd[cmd.length - 1];
    var n = last.length;
    
    var options = [];
    for (var folder in this.currentFolder.folders) {
        if (last === folder.slice(0, n)) {
            options.push(folder);
        }
    }
    
    for (var file in this.currentFolder.files) {
        if (last === file.slice(0, n)) {
            options.push(file);
        }
    }
    
    if (options.length === 1) {
        cmd.splice(cmd.length - 1, 1, options[0]);
        command = cmd.join(" ");
    } else if (options.length > 1) {
        this.output(options.join(" "));
    }
};

/*******************************************************
 *    Explorer functions
 * As many generic UNIX commands as I can manage
********************************************************/

explorerEnv.exit = function() {
    this._run('login');
};

// List folders and files
explorerEnv.ls = function(parameters) {
    if (parameters[0] === '-l') {
        this.output("  NAME                 TYPE     CLEARANCE");
        for (var folder in this.currentFolder.folders) {
            var s = " ";
            s += folder;
            s += Array(22 - folder.length).join(" ");
            s += "folder        ";
            s += this.currentFolder.folders[folder].clearance;
            this.output(s);
        }
        for (var file in this.currentFolder.files) {
            var f = this.currentFolder.files[file];
            var s = " ";
            s += file;
            s += Array(22 - file.length).join(" ");
            s += f.ext === 'exe'? "script        " : "text          ";
            s += f.clearance;
            this.output(s);
        }
    } else {
        for (var folder in this.currentFolder.folders) {
            this.output(" " + folder);
        }
        for (var file in this.currentFolder.files) {
            this.output(" " + file);
        }
    }
};

// Change directory (folder) if possible
explorerEnv.cd = function(parameters) {
    var folderName = parameters[0];
    
    if (!folderName) {
        this.output("You must specify a folder");
        return;
    }
    
    if (folderName === '..') {
        var parent = this.currentFolder.parent;
        if (parent) {
            this.currentFolder = parent;
        } else {
            this.output("You are at the root");
        }
        return;
    }
    
    var nextFolder = this.currentFolder.folders[folderName];
    if (nextFolder) {
        var clearance = nextFolder.clearance;
        if (this.clearance >= clearance) {
            this.currentFolder = nextFolder;
        } else {
            this.output("You do not have the clearance to open this folder");
        }
    } else {
        this.output("No such directory: " + folderName);   
    }
};

explorerEnv.callFunctionOnFile = function(fileName, func) {
    if (!fileName) {
        this.output("You must specify a file name");
        return;
    }
    
    var file = this.currentFolder.files[fileName];
    if (file) {
        file[func]();
    } else {
        this.output("No such file: " + fileName);
    }
};

explorerEnv.read = function(parameters) {
    this.callFunctionOnFile(parameters[0], 'read');
};

explorerEnv.run = function(parameters) {
    this.callFunctionOnFile(parameters[0], 'run');
};

explorerEnv.echo = function(str) {
    this.output(str);
};

/*******************************************************
 *    Create profile script
********************************************************/

var createProfileEnv = new Environment("createprofile");
createProfileEnv.entry = 'first name';

createProfileEnv.getCommandString = function() {
    if (this.entry !== 'password') {
        return this.entry + ": " + command;
    } else {
        var s = "password: ";
        for (var i = 0; i < command.length; i++) {
            s += '*';
        }
        return s;
    }
};

// Deal with username and password entry
createProfileEnv.useCommand = function(cmd, parameters) {
    switch (this.entry) {
        case 'first name':
            this.firstName = cmd;
            this.entry = 'last name';
            break;
        case 'last name':
            this.lastName = cmd;
            this.entry = 'password';
            break;
        case 'password':
            var newUser = {
                firstName: this.firstName,
                surname: this.lastName,
                username: getUserName(this.firstName, this.lastName),
                password: cmd,
                clearance: 1
            };
            
            addPersonToGroup(newUser, group1People);
            var s = "Created user profile: " + newUser.username;
            s +=  " (level " + newUser.clearance + " clearance)";
            
            this.output(s);
            this.password = cmd;
            this.entry = 'first name';
            
            explorerEnv.root.folders.data.files['personnel.txt'].update();
            
            this._run('explorer');
            break;
    } 
};

/*****************************************************
 *  Generic File object
 * Text files have canRead = true
 * Program files have canRun = true
******************************************************/

var File = function(name, clearance, data) {
    var txt = name.split(".");
    this.name = txt[0];
    if (txt.length > 0) {
        this.ext = txt[1];
    }
    
    this.clearance = clearance;
    this.data = data || [];
    
    if (this.ext === 'txt') { this.canRead = true; }
    if (this.ext === 'exe') { this.canRun = true; }
    
    this.read = function() {
        if (this.canRead) {
            if (explorerEnv.clearance >= this.clearance) {
                for (var i = 0; i < this.data.length; i++) {
                    currentEnv.output(" " + this.data[i]);   
                }
            } else {
                currentEnv.output("You do not have the clearance to read this file");
            }
        } else {
            currentEnv.output("File cannot be read");
        }
    };
    
    this.run = function() {
        if (this.canRun) {
            if (explorerEnv.clearance >= this.clearance) {
                currentEnv._run(this.name);
            } else {
                currentEnv.output("You do not have the clearance to run this file");
            }
        } else {
            currentEnv.output("File cannot be run");
        }
    };
};


/*******************************************************
 *  Generic Folder object
 * Contains other files and folders
********************************************************/
var Folder = function(name, clearance) {
    this.name = name;
    this.clearance = clearance;
    this.folders = {};
    this.files = {};
    
    this.getPath = function() {
        if (!this.parent) {
            return "";
        } else {
            return this.parent.getPath() + "/" + this.name;
        }
    };
    
    this.addFolder = function(folder) {
        this.folders[folder.name] = folder;
        folder.parent = this;
    };
    
    this.addFile = function(name, clearance, data) {
        var f = new File(name, clearance, data);
        this.files[name] = f;
    };
};

/*******************************************************
 *    Create folders and files
 * f = new Folder("name", clearance);
 * f.addFolder(anotherFolder);
 * f.addFile("name", clearance, [array of text]);
********************************************************/

var populateDataFolder = function(folder) {
    // Useless password file
    folder.addFile('passwords.txt', 0,
        ["Employees are reminded to change their passwords every eight weeks."]);
    
    // Personnel names and clearance levels
    // Update when player logs in
    folder.addFile('personnel.txt', 1);
    folder.files['personnel.txt'].update = function() {
        this.data = [];
        for (var i in group1People) {
            var person = group1People[i];
            var s = person.firstName + " " + person.surname;
            s += " (" + i + ") " + clearanceNames[person.clearance];
            this.data.push(s);
        }
    };
    folder.files['personnel.txt'].update();
};

var populateAdminDataFolder = function(folder) {
    folder.addFile('success.txt', 0,
        ["Congratulations! You hacked into the admin folder.",
         "I'll try to add more puzzles later if enough people crack this one."]);
    
    // Admin's todo list
    folder.addFile('todo.txt', 0,
        ["Prepare for Dr " + level4Person.surname + "'s visit",
         "Get a haircut - done",
         "Test password security - done",
         "Fix faulty login script on " + 
          group1PeopleArray[2].firstName + "'s machine"]);
         
    // Log of people access machines yesterday
    var _day = day() - 1;
    var _month = month();
    var _year = year();
    
    // Yesterday's date
    if (_day < 1) {
        var days = [31,28,31,30,31,30,31,31,30,31,30,31,30,31];
        _month -= 1;
        
        if (_month < 1) {
            _month = 12;
            _year -= 1;
        }
        
        _day = days[_month + 1];
    }
    var date = [_year, _month, _day].join("-");

    folder.addFile(date + '-logins.txt', 0,
        ["This is a log of all the machines accessed today.",
         "  TIME    MACHINE  USERNAME",
         "08:38:10     3      " + group1PeopleArray[3].username,
         "08:42:06     1      " + group1PeopleArray[0].username,
         "08:45:37     4      " + group1PeopleArray[2].username,
         "08:45:52     4      " + group1PeopleArray[2].username,
         "08:45:49     5      " + group1PeopleArray[1].username,
         "08:48:19     9      " + group1PeopleArray[5].username,
         "08:49:01     2      " + group1PeopleArray[4].username,
         "08:55:36     4      " + group1PeopleArray[0].username,
         "08:56:06     4      " + group1PeopleArray[0].username,
         "08:58:30     4      " + group1PeopleArray[0].username,
         "09:02:07     7      " + group1PeopleArray[2].username,
        ]);
};

var createFolders = function() {
    // root folder
    explorerEnv.root = new Folder('root', 0);
    
    // data folder
    var data = new Folder('data', 0);
    explorerEnv.root.addFolder(data);
    populateDataFolder(data);
    
    // scripts folder
    var scripts = new Folder("scripts", 0);
    explorerEnv.root.addFolder(scripts);
    scripts.addFile('createprofile.exe', 0);
    scripts.addFile('makeadmin.exe', 3);
    
    // admin folder
    var admin = new Folder("admin", 2);
    explorerEnv.root.addFolder(admin);
    
    // admin data folder
    var adminData = new Folder("data", 2);
    admin.addFolder(adminData);
    populateAdminDataFolder(adminData);
    
    // admin scripts folder
    var adminScripts = new Folder("scripts", 2, 'admin');
};

createFolders();

/*****************************************************
 *  Set starting program
******************************************************/

currentEnv = connectionEnv;

/*****************************************************
 *  Draw functions
******************************************************/

var drawCommandPrompt = function() {
    fill(BASICTEXT);
    noStroke();
    textFont(myFont, 14);
    textSize(fontSize);
    textAlign(LEFT, BASELINE);
    
    var ty = commandPromptY + textAscent() + scroll;
    ty -= max(0, commandPromptY - 385);
    var str = currentEnv.getCommandString();
    text(str, commandPromptX, ty);
    
    ty -= textAscent() + 1;
    
    if (focused && currentEnv.canEnter) {
        var n = frameCount % CURSORBLINK < CURSORBLINK / 2;
        if (n) {
            var x = commandPromptX + textWidth(str) + 2;
            rect(x, ty, 6, textAscent() + 2);   
        }
    }
};

var drawOldOutput = function() {
    textFont(myFont, 14);
    textSize(fontSize);
    textAlign(LEFT, BASELINE);
    fill(BASICTEXT);
    
    var dy = max(0, commandPromptY - 385) - scroll;
    for (var i = 0; i < outputs.length; i++) {
        var ty = outputs[i][0] - dy;
        text(outputs[i][1], commandPromptX, ty, maxWidth, 400);
        if (ty > height) { break; }
    }
};

var drawScrollbar = function() {
    var screenExtra = max(0, commandPromptY - 385);
    if (screenExtra === 0) { return; }
    
    var fraction = 385 / commandPromptY ;
    var barHeight = max(25, height * fraction);
    var scrollSpace = 396 - barHeight;
    var position = scroll * scrollSpace / screenExtra;
    
    fill(10, 160, 10);
    fill(200);
    rect(392, 398 - barHeight - position, 6, barHeight, 4);
};

var draw = function() {
    background(BACKGROUND);
    drawCommandPrompt();
    drawOldOutput();
    drawScrollbar();
};

/*****************************************************
 *  Event handling
******************************************************/
// Use up and down arrows to get previous commands
var getOldCommand = function() {
    var n = max(0, commands.length - lastCommand);
    if (n < commands.length) {
        command = commands[n];   
    } else {
        command = "";
    }
};

var keyPressed = function() {
    //println(keyCode);
    
    // Press enter
    if (keyCode === 10 && command.length > 0) {
        currentEnv.enterCommand();
    }
    
    // Text too long
    if (command.length > 40) { return; }
    
    if (keyCode > 64 && keyCode < 91) {
        command += LETTERS[keyCode - 65];
    } else if (keyCode in NUMBERS) {
        command += NUMBERS[keyCode];
    } else if (keyCode === 37 || keyCode === DELETE || keyCode === BACKSPACE) {
        if (command.length > 0) {
            // Left arrow used as backspace
            command = command.slice(0, command.length - 1);   
        }
    } else if (keyCode === 39) {
        currentEnv.tabCompletion();
    } else if (keyCode === 38) {
        lastCommand++;
        getOldCommand();
    } else if (keyCode === 40) {
        lastCommand--;
        getOldCommand();
    }
};

var scrolling = false;
var mousePressed = function() {
    scrolling = true;
};

var mouseOut = function() {
    scrolling = false;
};

var mouseDragged = function () {
    if (scrolling) {
        var screenExtra = max(0, commandPromptY - 385);
        if (screenExtra === 0) { return; }
        
        var fraction = 385 / commandPromptY;
        var barHeight = max(25, height * fraction);
        var scrollSpace = 396 - barHeight;
        
        var d = (pmouseY - mouseY) * screenExtra / scrollSpace;
        scroll = constrain(scroll+d, 0, max(0, commandPromptY - 385));  
    }
};

