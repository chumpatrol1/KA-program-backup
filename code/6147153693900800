/**************************************
 * Ray tracing in 2D
 * Drawing a ray from a camera at C,
 * through pixel, P, on an image
 * plane to line AB.
 * 
 * TODO:
 *  Fix projection when line is behind camera
 *  Auto-width for equations.
 *  Improve how code for snapping is organised
***************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var PURPLE = color(157, 56, 189);
var GREY = color(60, 60, 70);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var sansFont = createFont("sans", 14);
var serifFont = createFont("serif", 16);

var CONTROL_POINT_SIZE = 12;
var tickSize = 80;
var snapSize = tickSize / 10;

var showing = {
    'Line AB': true,
    Camera: true,
    'Image line': true,
    Ray: true,
    Pixel: true,
    Projection: true,
    Grid: false,
    Equations: false
};

var dragX, dragY;
var snap = function(n) {
    return round(n / snapSize) * snapSize;
};

var snapX = function(x) {
    return snap(x);
};

var snapY = function(y) {
    return height / 2 - snap(height / 2 - y);
};

/**************************************
 *      Linear algebra
**************************************/

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

var crossProduct2D = function(v1, v2) {
    return v1.x * v2.y - v2.x * v1.y;
};

var addVectors = function(v1, v2) {
    return { x: v1.x + v2.x, y: v1.y + v2.y };
};

var subtractVectors = function(v1, v2) {
    return { x: v1.x - v2.x, y: v1.y - v2.y };
};

var vectorLength = function(v) {
    return sqrt(v.x * v.x + v.y * v.y);
};

var normaliseVector = function(v) {
    var d = vectorLength(v);
    return { x: v.x / d, y: v.y / d };
};

// Multiple 2D vector, v, by scalar, s.
var multiplyVector = function(v, s) {
    return { x: v.x * s, y: v.y * s };
};

// Return a point, t along a line defined by two vectors
var pointAlongLine = function(v1, v2, t) {
    var d = multiplyVector(subtractVectors(v2, v1), t);
    return addVectors(v1, d);
};

// http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect
var lineLineIntersection = function(v1a, v1b, v2a, v2b) {
    var r = subtractVectors(v1b, v1a);
    var s = subtractVectors(v2b, v2a);
    
    var rs = crossProduct2D(r, s);
    var qp = subtractVectors(v2a, v1a);
    var qpr = crossProduct2D(qp, r);
    
    if (rs !== 0) {
        var t = crossProduct2D(qp, s) / rs;
        var u = qpr / rs;
        if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {
            return {
                x: v1a.x + t * r.x,
                y: v1a.y + t * r.y,
                t: t
            };
        } else {
            return {
                t: t
            };
        }
    }
};

// Given two points,
// return the implicit form of the
// equation for that line
var getLineEquation = function(x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    if (dy < 0) {
        dx *= -1;
        dy *= -1;
    }
    var c = dx * y1 - dy * x1;
    return [dy, -dx, c];
};

/**************************************
 *  Draggable point object
**************************************/

var DraggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

DraggablePoint.prototype.move = function() {
    this.x = snapX(mouseX + dragX);
    this.y = snapY(mouseY + dragY);
};

DraggablePoint.prototype.draw = function() {
    if (this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

DraggablePoint.prototype.drawLabel = function(dx, dy) {
    fill(this.color);
    textAlign(CENTER, CENTER);
    textFont(serifFont);
    text(this.name, this.x + dx, this.y + dy);
};

/***************************************
 *  A draggable point constrained to a line
 * It starts t units (0 - 1) along the line
***************************************/

var constrainedPoint = function(line, t, color, name) {
    this.line = line;
    this.t = t;
    this.update();
    DraggablePoint.call(this, this.x, this.y, color, name);
};
constrainedPoint.prototype = Object.create(DraggablePoint.prototype);

constrainedPoint.prototype.update = function() {
    var p = pointAlongLine(this.line.p1, this.line.p2, this.t);
    this.x = p.x;
    this.y = p.y;
};

constrainedPoint.prototype.move = function() {
    // Project (mouseX, mouseY) onto line
    var line = subtractVectors(this.line.p2, this.line.p1);
    var m = {
        x: mouseX - this.line.p1.x,
        y: mouseY - this.line.p1.y
    };
    
    var t = dotProduct(m, line) / (line.x * line.x + line.y * line.y);
    this.t = constrain(t, 0, 1);
};

/**************************************
 *  A line defined by two draggable points
***************************************/

var draggableLine = function(x1, y1, x2, y2, color, name) {
    name = name || "  ";
    this.label1 = name.charAt(0);
    this.label2 = name.charAt(1);
    
    this.p1 = new DraggablePoint(x1, y1, ORANGE, this.label1);
    this.p2 = new DraggablePoint(x2, y2, ORANGE, this.label2);
    this.color = color || BLUE;
    this.minLength = 60;
};

draggableLine.prototype.draw = function(noPoints) {
    // Line
    stroke(this.color);
    strokeWeight(3);
    line(this.p1.x, this.p1.y, this.p2.x, this.p2.y);
    
    // Points
    if (!noPoints) {
        this.p1.draw();
        this.p2.draw();   
    }
    
    // Labels
    fill(ORANGE);
    textAlign(CENTER, CENTER);
    textFont(serifFont);
    var d = multiplyVector(normaliseVector(subtractVectors(this.p1, this.p2)), 16);
    text(this.label1, this.p1.x + d.x, this.p1.y + d.y);
    text(this.label2, this.p2.x - d.x, this.p2.y - d.y);
    
};

draggableLine.prototype.mouseOver = function() {
    if (this.p1.mouseOver()) {
        this.selected = this.p1;
        this.notSelected = this.p2;
        // So the drag offset can be calculated
        this.x = this.p1.x;
        this.y = this.p1.y;
        return true;
    } else if (this.p2.mouseOver()) {
        this.selected = this.p2;
        this.notSelected = this.p1;
        // So the drag offset can be calculated
        this.x = this.p2.x;
        this.y = this.p2.y;
        return true;
    } else {
        this.selected = false;
        return false;
    }
};

draggableLine.prototype.move = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
        if (dist(this.p1.x, this.p1.y, this.p2.x, this.p2.y) < this.minLength) {
            var angle = atan2(this.notSelected.y - this.selected.y, this.notSelected.x - this.selected.x);
            
            var dx = this.selected.x + this.minLength * cos(angle) - this.notSelected.x;
            var dy = this.selected.y + this.minLength * sin(angle) - this.notSelected.y;
            this.notSelected.move(dx, dy);
            this.selected.x = this.notSelected.x - this.minLength * cos(angle);
            this.selected.y = this.notSelected.y - this.minLength * sin(angle);
        }
    }
};

/**************************************
 *      Scene object
 *  Wraps the other objects
**************************************/

var Scene = function() {
    var h2 = height / 2;
    this.lineAB = new draggableLine(
        tickSize * 5, h2 - tickSize*2,
        tickSize * 6, h2 + tickSize,
        BLUE, 'AB'
    );
    
    this.imageLine = new draggableLine(
        tickSize * 4, h2 - tickSize,
        tickSize * 4, h2 + tickSize,
        GREEN, ''
    );
    
    this.pixel = new constrainedPoint(this.imageLine, 0.25, PINK, 'P');
    this.camera = new DraggablePoint(tickSize * 2, h2, ORANGE, "C");
    
    this.selected = false;
    this.draggable = [
        this.lineAB,
        this.imageLine,
        this.camera,
        this.pixel
    ];

};

Scene.prototype.draw = function() {
    this.pixel.update();
    this.drawRay();
    
    if (showing['Line AB']) {
        this.lineAB.draw();
    }
    
    if (showing.Ray && this.imagePoint.x){
        stroke(BACKGROUND);
        fill(BLUE);
        ellipse(this.imagePoint.x, this.imagePoint.y, 12, 12);

        textAlign(CENTER, CENTER);
        textFont(serifFont);
        text('I', this.imagePoint.x + 12, this.imagePoint.y - 12);
    }
    
    if (showing['Image line']) {
        this.imageLine.draw(true);
    }
    
    if (showing.Projection) {
        this.drawProjection();   
    }
    
    if (showing['Image line']) {
        this.imageLine.p1.draw();
        this.imageLine.p2.draw();
    }
    
    if (showing.Camera) {
        this.camera.draw();
        this.camera.drawLabel(-12, -12);
    }
    
    if (showing.Pixel) {
        this.pixel.draw();
        this.pixel.drawLabel(12, -12);
    }
};

Scene.prototype.drawRay = function() {
    var angle = atan2(this.pixel.y - this.camera.y, this.pixel.x - this.camera.x);
    var d = 1000;
    var ray = {
        x: this.camera.x + d * cos(angle),
        y: this.camera.y + d * sin(angle)
    };
    
    if (showing.Ray) {
        strokeWeight(1);
        stroke(PINK);
        line(this.camera.x, this.camera.y, ray.x, ray.y);
    }
    
    this.imagePoint = lineLineIntersection(this.lineAB.p1, this.lineAB.p2, this.camera, ray);
    if (this.imagePoint.x) {
        this.imagePoint.name = 'I';
        this.imagePoint.color = BLUE;
    }
    
};

Scene.prototype.drawProjection = function() {
    
    var ps = [];
    var linePs = [
        this.lineAB.p1,
        this.lineAB.p2,
    ];
    
    var v = subtractVectors(
        this.imageLine.p2,
        this.imageLine.p1
    );
    
    for (var i = 0; i < 2; i++) {
        var p = lineLineIntersection(
            this.imageLine.p1,
            this.imageLine.p2,
            this.camera, linePs[i]);
        
        if (!p) { return; }
        p.t = constrain(p.t, 0, 1);
        
        ps.push({
            x: this.imageLine.p1.x + p.t * v.x,
            y: this.imageLine.p1.y + p.t * v.y
        });
    }
    
    if (ps[0].x !== ps[1].x ||
        ps[0].y !== ps[1].y) {
        strokeWeight(5);
        stroke(this.lineAB.color);
        line(ps[0].x, ps[0].y,
             ps[1].x, ps[1].y);
    }

};

Scene.prototype.mousePressed = function() {
    for (var i = 0; i < this.draggable.length; i++) {
        if (this.draggable[i].mouseOver()) {
            this.selected = this.draggable[i];
            dragX = this.selected.x - mouseX;
            dragY = this.selected.y - mouseY;
        }
    }
};

Scene.prototype.mouseReleased = function() {
    this.selected = false;
};

Scene.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
    }
};

/**************************************
 *      Grid object
 *  Draws a grid and converts between
 * pixels and grid coordinates.
***************************************/

var Grid = function(x0, y0, tickSize, tickValue) {
    this.originX = x0;
    this.originY = y0;
    this.tickSize = tickSize;
    this.tickValue = tickValue;
    
    this.minX = this.originX % this.tickSize;
    this.minY = this.originY % this.tickSize;
    
    this.color = color(230, 240, 230);
};

Grid.prototype.draw = function() {
    // Grid lines
    stroke(this.color);
    strokeWeight(1);
    
    for (var x = this.minX; x < width; x += this.tickSize) {
        line(x, 0, x, height);
    }
    
    for (var y = this.minY; y < height; y += this.tickSize) {
        line(0, y, width, y);
    }
    
    // Axes
    stroke(GREY);
    line(this.originX, 0, this.originX, height);
    line(0, this.originY, width, this.originY);
    
    // Labels
    fill(GREY);
    textSize(11);
    
    /*
    var minX = originX - tickSize * 2 * floor(0.5 * originX / tickSize);
    var maxX = originX + tickSize * 2 * floor(0.5 * (width - originX) / tickSize);
    var scaleX = xTickValue/ tickSize * 1000;

    textAlign(CENTER, TOP);
    for (var x = minX; x <= maxX; x += 2 * tickSize) {
        if (x !== originX) {
            line(x, originY - 2, x, originY + 2);
            text("" + round((x - originX) * scaleX) / 1000, x, originY + 5);
        }
    }
    
    var minY = originY - tickSize * 2 * floor(0.5 * originY / tickSize);
    var maxY = originY + tickSize * 2 * floor(0.5 * (height - originY) / tickSize);
    var scaleY = yTickValue/ tickSize * 1000;
    
    textAlign(RIGHT, CENTER);
    for (var y = minY; y <= maxY; y += 2 * tickSize) {
        if (y !== originY) {
            line(originX - 2, y, originX + 2, y);
            text("" + round((originY - y) * scaleY) / 1000,  originX - 5, y);
        }
    }
    */
};

Grid.prototype.pixelToGridX = function(x) {
    return (x - this.originX) / this.tickSize;
};

Grid.prototype.pixelToGridY = function(y) {
    return (this.originY - y) / this.tickSize;
};

Grid.prototype.gridToPixelX = function(x) {
    return x * this.tickSize + this.originX;
};

Grid.prototype.gridToPixelY = function(y) {
    return this.originY - y * this.tickSize;
};

/**************************************
 *  GUI Button
***************************************/

var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(220, 220, 220, 250);
    this.highlightCol = color(255, 255, 255, 240);
    this.showing = true;
    this.clickFunction = clickFunction;
};

Button.prototype.mouseOver = function() {
    return mouseX >= this.x &&
           mouseX <= this.x + this.w &&
           mouseY >= this.y &&
           mouseY <= this.y + this.h;
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver() || this.selected) {
        fill(this.defaultCol);
    } else {
        noFill();
    }
    strokeWeight(1);
    stroke(200);
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    fill(10);
    textSize(15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    noStroke();
    if (this.mouseOver() || this.selected) {
        fill(this.highlightCol);
        rect(this.x, this.y, this.w, this.h + 1, 5);
    } else {
        noFill();
    }
    
    fill(10);
    textSize(14);
    textFont(sansFont);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1,
             this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

/**************************************
 *      Toolbar
 *  Contains other GUI elements
***************************************/

var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 0;
    
    this.buttons = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.buttons.length; i++) {
        this.buttons[i].draw();
    }
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + 4;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        this.buttons.push(new CheckBox(x, y, w, h, opt));
        y += 28;
    }
    
    this.h = y - 5;
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseOver() && this.buttons[i].selected) {
            this.buttons[i].click();
        }
        this.buttons[i].selected = false;
    }
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseOver()) {
            this.buttons[i].selected = true;
        }
    }
};

/**************************************
 *      Create objects
**************************************/

var grid = new Grid(tickSize * 2, height / 2, tickSize, 1);
var scene = new Scene();
var toolbar = new Toolbar(width * 0.01, width * 0.01, 110);
toolbar.addOptions(showing);

/***************************************
 *      Draw equations
***************************************/

var writeCoords = function(obj, tx, ty) {   
    fill(obj.color);
    textFont(serifFont);
    textSize(20);
    
    var txt = obj.name;
    text(txt, tx, ty);
    tx += textWidth(txt);
    
    fill(TEXTCOL);
    textFont(sansFont);
    textSize(18);
    
    var x = grid.pixelToGridX(obj.x);
    var y = grid.pixelToGridY(obj.y);
    x = round(x * 1000) / 1000;
    y = round(y * 1000) / 1000;
    
    txt = ' = (' + x + ', ' + y + ')';
    text(txt, tx, ty);
    tx += textWidth(txt);
};

var coefficient = function(c, v, p) {
    if (c === 0) { return ''; }

    var pos = c > 0;
    c = abs(c);
    if (c === 1 && v !== '') { c = ''; }
    
    if (p) {
        if (pos) {
            return ' + ' + c + v;
        } else {
            return ' - ' + c + v;
        }
    }
    
    return c + v;
};

var drawEquations = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(10, 360, 250, 172, 8);
    
    var tx = 16;
    var ty = 380;
    var dy = 24;
    
    textAlign(LEFT, BASELINE);
    
    writeCoords(scene.camera, tx, ty);
    ty += dy;
    writeCoords(scene.pixel, tx, ty);
    ty += dy;
    writeCoords(scene.lineAB.p1, tx, ty);
    ty += dy;
    writeCoords(scene.lineAB.p2, tx, ty);
    
    fill(scene.lineAB.color);
    textFont(serifFont);
    textSize(20);
    
    ty += dy;
    var txt = 'AB'; 
    text(txt, tx, ty);
    
    var x1 = grid.pixelToGridX(scene.lineAB.p1.x);
    var y1 = grid.pixelToGridY(scene.lineAB.p1.y);
    var x2 = grid.pixelToGridX(scene.lineAB.p2.x);
    var y2 = grid.pixelToGridY(scene.lineAB.p2.y);
    
    var eq = getLineEquation(x1, y1, x2, y2);
    var a = round(eq[0] * 1000) / 1000;
    var b = round(eq[1] * 1000) / 1000;
    var c = round(eq[2] * 1000) / 1000;
    
    var equation = '';
    equation += coefficient(a, 'x');
    equation += coefficient(b, 'y', equation !== '');
    
    equation += coefficient(c, '', equation !== '');
    
    fill(TEXTCOL);
    textFont(sansFont);
    textSize(18);
    text(': ' + equation + " = 0", tx + textWidth(txt) + 2, ty);
    
    ty += dy;
    if (scene.imagePoint.x) {
        writeCoords(scene.imagePoint, tx, ty);
        var px = grid.pixelToGridX(scene.pixel.x);
        var py = grid.pixelToGridY(scene.pixel.y);
        var t = -c / (a * px + b * py);
        
        fill(scene.lineAB.color);
        textFont(serifFont);
        textSize(20);
        
        ty += dy;
        var txt = 't'; 
        text(txt, tx, ty);
        fill(TEXTCOL);
        textFont(sansFont);
        textSize(18);
        text(' = ' + round(t * 1000) / 1000, tx + textWidth(txt), ty);
    }
};

/***************************************
 *      Main loop
***************************************/

var draw = function() {
    background(BACKGROUND);
    if (showing.Grid) { grid.draw(); }
    scene.draw();
    toolbar.draw();
    if (showing.Equations) {
        drawEquations();   
    }
};

/****************************************
 *      Event handling
****************************************/

mousePressed = function() {
    scene.mousePressed();
    toolbar.mousePressed();
};

mouseReleased = function() {
    scene.mouseReleased();
    toolbar.mouseReleased();
};

mouseOut = function() {
    mouseReleased();
};

mouseDragged = function() {
    scene.mouseDragged();
};