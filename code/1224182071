 /****************************************************
 * Explore pressure volume boxes by changing
 * contractility, arterial elastance and preload.
 * 
 * Drag the circles to change the parameters
 * 
 * Based on this video:
 * http://www.khanacademy.org/science/healthcare-and-medicine/changing-the-PV-loop/v/contractility--ea--and-preload-effects-on-pv-boxes
 *****************************************************/

// Heart parameters
var ESPVR_x_intersect = 15;
var ESPVR_gradient = 100 / (50 - ESPVR_x_intersect);
var ESPVR_colour = color(255, 234, 0);

var Ea_x_intersect = 125;
var Ea_gradient = 100 / (50 - Ea_x_intersect);
var Ea_colour = color(140, 0, 255);

var PVBox_colour1 = color(34, 143, 34);
var PVBox_colour2 = color(5, 255, 13, 50);

// Graph display parameters
var originX = 58;
var originY = 245;
var graphWidth = 260;
var graphHeight = 200;
var maxX = 175;
var maxY = 175;
var dx = 25;
var dy = 25;
var scaleX = graphWidth / maxX;
var scaleY = graphHeight / maxY;

var sliderSize = 16;
var mouseOverSlider = false;
var sliders;

var findIntersection = function() {
    var grad = ESPVR_gradient / Ea_gradient;
    var x = (Ea_x_intersect - grad * ESPVR_x_intersect) /
            (1 - grad);
    var y = Ea_gradient * (x - Ea_x_intersect);
    return [x, y];
};

var getESPVREnd = function() {
    // Given gradient calculate end position
    var theta = atan(ESPVR_gradient);
    var x = (maxX - ESPVR_x_intersect) * cos(theta);
    x += ESPVR_x_intersect;
    var y = (maxX - ESPVR_x_intersect) * sin(theta);
    return [originX + scaleX * x, originY - scaleY * y];
};

var getEaEnd = function() {
    // Given gradient calculate end position
    var theta = atan(Ea_gradient);
    var p = (theta + 90) / 90;
    var d = p * Ea_x_intersect + (1-p) * maxY;
    var x = scaleX * (Ea_x_intersect - d * cos(theta));
    var y = scaleY * d * sin(theta);
    return [originX + x, originY + y];
};

var ESPVRend = getESPVREnd();
var ESPVRx = ESPVRend[0];
var ESPVRy = ESPVRend[1];

var EAend = getEaEnd();
var EAx = EAend[0];
var EAy = EAend[1];

// Sliders
var Slider = function(x, y, moveFunc) {
    this.x = x;
    this.y = y;
    this.moveFunc = moveFunc;
    
    this.draw = function() {
     if (mouseOverSlider === this ||
        (mouseX >= this.x - sliderSize/2 &&
         mouseX <= this.x + sliderSize/2 &&
         mouseY >= this.y - sliderSize/2 &&
         mouseY <= this.y + sliderSize/2 &&
         !mouseOverSlider)) {
            fill(160, 160, 160, 200);
            stroke(240, 240, 240);
            mouseOverSlider = this;
        } else {
            fill(160, 160, 160, 60);
            stroke(200, 200, 200, 200);
            if (!mouseIsPressed) {
                mouseOverSlider = false;   
            }
        }
        
        strokeWeight(2); 
        ellipse(this.x, this.y, sliderSize, sliderSize);
    };
    
    this.move = function() {
        var position = this.moveFunc();
        this.x = position[0];
        this.y = position[1];
    };
};

var moveEaIntersect = function() {
    var x = (mouseX - originX) / scaleX;
    var y = 0;
    
    if (x < ESPVR_x_intersect + 1) {
        x = ESPVR_x_intersect + 1;
    } else if (x > maxX) {
        x = maxX;
    }
    Ea_x_intersect = x;
    
    var EAend = getEaEnd();
    EAx = EAend[0];
    EAy = EAend[1];
    sliders[2].x = EAx;
    sliders[2].y = EAy;
    return [originX + scaleX * x, originY];
};

var changeContractility = function() {
    var x = (mouseX - originX) / scaleX;
    var y = (originY - mouseY) / scaleY;
       
    if (x < ESPVR_x_intersect + 1) {
        x = ESPVR_x_intersect + 1;
    } else if (x > maxX) {
        x = maxX;
    }
    if (y < 1) {
        y = 1;
    } else if (y > maxY) {
        y = maxY;
    }
    
    ESPVR_gradient = y / (x - ESPVR_x_intersect);
    ESPVRend = getESPVREnd();
    ESPVRx = ESPVRend[0];
    ESPVRy = ESPVRend[1];
    
    return [ESPVRx, ESPVRy];
};

var changeElastance = function() {
    var x = (mouseX - originX) / scaleX;
    var y = (originY - mouseY) / scaleY;
       
    if (x < 0) {
        x = 0;
    } else if (x > Ea_x_intersect - 1) {
        x = Ea_x_intersect - 1;
    }
    if (y < 1) {
        y = 1;
    } else if (y > maxY) {
        y = maxY;
    }
    
    Ea_gradient = y / (x - Ea_x_intersect);
    EAend = getEaEnd();
    EAx = EAend[0];
    EAy = EAend[1];
    
    return [EAx, EAy];
    
};

sliders = [
    new Slider(originX + scaleX * Ea_x_intersect, originY,
               moveEaIntersect),
    new Slider(ESPVRx, ESPVRy, changeContractility),       
    new Slider(EAx, EAy, changeElastance)
];

var writeLabel = function(x, y, label, colour) {
    fill(0, 0, 0, 200);
    noStroke();
    rect(x, y - 11, textWidth(label) + 2, 14);
    fill(colour);
    text(label, x + 1, y);
};

var drawPVBox = function() {
    var x1, y1, x2, y2, str;
    
    // PVBox
    strokeWeight(2);
    stroke(PVBox_colour1);
    fill(PVBox_colour2);
    textSize(12);
    textAlign(LEFT, BASELINE);
    
    var intersection = findIntersection();
    x1 = originX + intersection[0] * scaleX;
    y1 = originY - intersection[1] * scaleY;
    x2 = originX + Ea_x_intersect * scaleX;
    rect(x1, y1, x2- x1, originY - y1);
    
    // Stroke volume
    strokeWeight(1);
    fill(PVBox_colour1);
    x1 = originX + intersection[0] * scaleX;
    x2 = originX + Ea_x_intersect * scaleX;
    var SVy = originY - graphHeight - 12;
    var strokeVolume = Ea_x_intersect - intersection[0];
    line(x1, SVy, x2, SVy);
    line(x1, SVy-2, x1, SVy+2);
    line(x2, SVy-2, x2, SVy+2);
    
    textSize(11);
    textAlign(CENTER, BASELINE);
    str = "Stroke volume: " + round(strokeVolume) + " mL";
    text(str, (x1+x2)/2, SVy-6);
    
    // End-systolic pressure
    stroke(PVBox_colour1);
    textAlign(LEFT, BASELINE);
    
    var PesX = originX + graphWidth + 10;    
    line(PesX, y1, PesX, originY-1);
    line(PesX-2, y1, PesX+2, y1);
    line(PesX-2, originY, PesX+2, originY);
    
    var p = "P";
    text(p, PesX+4, (originY + y1)/2 - 10);
    textSize(10);
    text("ES", PesX + 4 + textWidth(p), (originY + y1)/2 - 6);
    textSize(11);
    str = round(intersection[1]) + " mmHg";
    text(str, PesX + 4, (originY + y1)/2 + 10);
    
    // ESPVR (contractility) line
    stroke(ESPVR_colour);
    x1 = originX + ESPVR_x_intersect * scaleX;
    line(x1, originY-1, ESPVRx, ESPVRy);
    
    // Ea line
    stroke(Ea_colour);
    x1 = originX + Ea_x_intersect * scaleX;
    line(x1, originY-1, EAx, EAy);
    
    // ESPVR label
    textSize(12);
    str = "Contractility: " + round(ESPVR_gradient * 100) / 100;
    x1 = ESPVRx + sliderSize/2;
    writeLabel(x1, ESPVRy - 3, str, ESPVR_colour);
    
    // Ea label
    str = "Ea: " + round(100 * intersection[1] / strokeVolume)/100;
    x1 = EAx + sliderSize/2 + 1;
    writeLabel(x1, EAy - 3, str, Ea_colour);
    
    // Preload label
    str = "Preload: " + round(Ea_x_intersect);
    x1 = originX + Ea_x_intersect * scaleX + sliderSize/2;
    writeLabel(x1, originY - 3, str, Ea_colour);
    
    // Information text
    var y = 315;
    textSize(15);
    textAlign(CENTER, BASELINE);
    
    /*
    fill(Ea_colour);
    str = "Arterial elastance = " + round(100*elastance)/100;
    text(str, 200, y);
    y += 20;
    
    fill(ESPVR_colour);
    var contractility = round(ESPVR_gradient * 100) / 100;
    text("Contractility = " + contractility, 200, y);
    y += 20;
    
    fill(Ea_colour);
    str = "Preload = " + round(Ea_x_intersect);
    text(str, 200, y);
    y += 20;
    */
    
    fill(PVBox_colour1);
    var work = intersection[1] * strokeVolume;
    var joules = work * 0.1333/1000;
    str = "Stroke work = " + round(work) + " mmHg.mL";
    str +=" (" + round(100*joules)/100 + " joules)";
    text(str, 200, y);
    
    textSize(13);
    fill(242, 19, 3);
    y += 30;
    
    str = "Enough to power " +round(joules * 200)+ " laser pointers";
    text(str, 200, y);
    y += 20;
    
    str = round(600 / joules) / 10;
    str += " hearts needed to power an average light bulb";
    text(str, 200, y);
    
};

var drawGraph = function() {
    var x, y, x1, y1, x2, y2;
    
    // Gridlines
    strokeWeight(1);
    stroke(30, 30, 32);
    
    for (x = 0; x <= maxX; x += dx) {
        x1 = originX + scaleX * x;
        line(x1, originY-graphHeight, x1, originY);
    }
    
    for (y = 0; y <= maxY; y += dy) {
        y1 = originY - scaleY * y;
        line(originX, y1, originX+graphWidth, y1);
    }
    
    // Draw lines
    drawPVBox();
    
    // Axes
    stroke(250, 250, 255);
    strokeWeight(1);
    line(originX, originY - graphHeight, originX, originY);
    line(originX, originY, originX + graphWidth, originY);
    
    // Axis units
    textSize(11);
    textAlign(CENTER, 1);
    fill(250, 250, 255);
    
    for (x = 0; x <= maxX; x += dx) {
        x1 = originX + scaleX * x;
        text(x, x1, originY + 19);
        line(x1, originY, x1, originY + 5);
    }
    
    textAlign(RIGHT, 1);
    for (y = 0; y <= maxY; y += dy) {
        y1 = originY - scaleY * y;
        text(y, originX - 7, y1 + 4);
        line(originX, y1, originX - 4, y1);
    }
    
    // Axis labels
    textAlign(CENTER, 1);
    textSize(15);
    text("Volume (mL)", originX + graphWidth/2, originY+38);
    
    translate(originX - 34, originY - graphHeight/2);
    rotate(270);
    text("Pressure (mmHg)", 0, 0);
    resetMatrix(); 
};

var draw = function() {
    background(0, 0, 0);
    drawGraph();
    
    for (var i=0; i<sliders.length; i++) {
        sliders[i].draw();
    }
};

var mouseDragged = function() {
    if (mouseOverSlider) {
        mouseOverSlider.move();
    }
};

var mouseReleased = function () {
    mouseOverSlider = false;
};

var mouseOut = function(){
    mouseOverSlider = false;
};