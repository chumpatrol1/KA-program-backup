noCursor();

// Cell object - contains its position, size and colour
var Cell = function(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.colour = color(random(220, 255), 0, random(0, 20));
};

// Draw cell function
Cell.prototype.draw = function() {
    noStroke();
    fill(this.colour);
    ellipse(this.x, this.y, this.size, this.size);
};

// Update cell function
Cell.prototype.update = function() {
    this.y -= random(-1, 1);
    this.x -= random(-1, 1);
    
    if (this.x < 0 || this.x > 400 || this.y < 0 || this.y > 400) {
        this.remove = true;
    }
};

// Function allowing interaction between two cells (called that)
Cell.prototype.interactWith = function(that) {
    var d = (this.size + that.size) / 2;
    if (dist(this.x, this.y, that.x, that.y) < d) {
        if (this.size > that.size) {
            // this eats that - increase size of this
            // Increase by the sqrt of cell size
            // so area increases not radius
            that.remove = true;
            this.size += sqrt(that.size);
        } else if (that.size > this.size) {
            // that eats this
            this.remove = true;
            that.size += sqrt(this.size);
        }
    }
};

var cells = [new Cell(200, 200, random(5,15))];

var draw = function() {
    background(255, 255, 255);

    // Update and draw cells
    for (var i = 0; i < cells.length; i++) {
        cells[i].update();
        cells[i].draw();
    }

    // Compare each cell with each other cell
    // Check if any are in contact
    // Remove the smallest
    
    for (var i = 0; i < cells.length - 1; i++) {
        for (var j = i + 1; j < cells.length; j++) {
            cells[i].interactWith(cells[j]);
        }
    }

    // Remove cells that need to be removed
    // Go through array backwards otherwise counting is messed up
    for (var i = cells.length - 1; i >= 0 ; i--) {
        if (cells[i].remove) {
            cells.splice(i, 1);
        }
    }

    // Draw cursor
    noFill();
    stroke(255, 0, 0);
    ellipse(mouseX, mouseY, 12, 12);
};


// Clicking adds a new cell at that position
mouseClicked = function() {
    cells.push(new Cell(mouseX, mouseY, random(5,15)));
};
