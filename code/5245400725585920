var getRotateXMatrix = function(theta) {
    var c = cos(theta);
    var s = sin(theta);
    return [[1, 0, 0], [0, c, -s], [0, s, c]];
};

var getRotateYMatrix = function(theta) {
    var c = cos(theta);
    var s = sin(theta);
    return [[c, 0, s], [0, 1, 0], [-s, 0, c]];
};

var multiplyMatrices = function(m1, m2) {
    var newMatrix = [];
    
    var n1 = m1.length;
    var n2 = m1[0].length;
    var n3 = m2.length;
    var n4 = m2[0].length;
    
    if (n2 !== n3) {
        println("Dimensions don't match");
        return;
    }

    for (var i = 0; i < n1; i++) {
        var row = [];
        
        for (var j = 0; j < n4; j++) {
            var v = 0;
            
            for (var k = 0; k < n3; k++) {
                v += m1[i][k] * m2[k][j];
            }
            
            row.push(v);
        }
        
        newMatrix.push(row);
    }
    
    return newMatrix;
};

// Combine the elements of two equal-sized arrays with an operation
// Add add, subtract or multiply matrices
var elementwiseOperation = function(op, m1, m2) {
    var f;
    
    if (op === '+') {
        f = function(a, b) { return a + b; };
    } else if (op === '-') {
        f = function(a, b) { return a - b; };
    } else if (op === '*') {
        f = function(a, b) { return a * b; };
    } else {
        println("Operation " + op + " is not defined");
        return;
    }
    
    var newMatrix = [];
    
    var n1 = m1.length;
    var n2 = m1[0].length;
    var n3 = m2.length;
    var n4 = m2[0].length;
    
    if (n1 !== n3 || n2 !== n4) {
        println("Dimensions don't match");
        return;
    }
    
    for (var i = 0; i < n1; i++) {
        var row = [];
        
        for (var j = 0; j < n2; j++) {
            row.push(f(m1[i][j], m2[i][j]));
        }
        newMatrix.push(row);
    }
    
    return newMatrix;
};

var transpose = function(m) {
    var newMatrix = [];
    
    var n1 = m.length;
    var n2 = m[0].length;
    
    for (var i = 0; i < n2; i++) {
        var row = [];
        
        for (var j = 0; j < n1; j++) {
            row.push(m[j][i]);
        }
        newMatrix.push(row);
    }
    
    return newMatrix;
};

// Assume matrix is invertible and 3x3
var invertMatrix = function(m) {
    var A = m[1][1] * m[2][2] - m[2][1] * m[1][2];
    var B = m[1][2] * m[2][0] - m[1][0] * m[2][2];
    var C = m[1][0] * m[2][1] - m[1][1] * m[2][0];
    
    // Inverse of the determinant
    var det = (m[0][0] * A + m[0][1] * B + m[0][2] * C);
    
    if (!det) {
        println("Matrix not invertible");
        return;
    }
    
    var idet = 1 / det;
    
    return [
        [A * idet, (m[0][2] * m[2][1] - m[0][1] * m[2][2]) * idet,
                   (m[0][1] * m[1][2] - m[0][2] * m[1][1]) * idet],
        [B * idet, (m[0][0] * m[2][2] - m[0][2] * m[2][0]) * idet,
                   (m[1][0] * m[0][2] - m[0][0] * m[1][2]) * idet],
        [C * idet, (m[2][0] * m[0][1] - m[0][0] * m[2][1]) * idet,
                   (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * idet]
        ];
};

var writeMatrix = function(m) {
    if (!m) { return; }
    for (var i = 0; i < m.length; i++) {
        println(m[i]);
    }
};

var drawMatrix = function(m, x, y, d, name) {
    if (!m) { return; }
    
    d = d || 20;
    var h = m.length * 20;
    var w = m[0].length * d;

    fill(20);
    textAlign(CENTER, CENTER);
    for (var i = 0; i < m.length; i++) {
        var row = m[i];
        
        for (var j = 0; j < row.length; j++) {
            var n = "" + round(row[j] * 10000) / 10000;
            var w = max(w, textWidth(n) + 5);
            text(n, x + (j + 0.5) * d, y + (i + 0.5) * 20);
        }
    }
    
    x -= (w - m[0].length * d) / 2;
    
    if (name) {
        text(name, x + w / 2, y - 10);
    }
    
    stroke(20);
    line(x, y, x, y + h);
    line(x, y, x + 5, y);
    line(x, y + h, x + 5, y + h);
    line(x + w, y, x + w, y + h);
    line(x + w, y, x + w - 5, y);
    line(x + w, y + h, x + w - 5, y + h);
};

var identity = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
var translat = [[1, 0, 8], [0, 1, 5], [0, 0, 1]];

var c = cos(90);
var s = sin(90);

var rot = [[c, -s, 0], [s, c, 0], [0, 0, 1]];
var t_r = multiplyMatrices(translat, rot);
var r_t = multiplyMatrices(rot, translat);

var m = [[1, 2, 3],
         [7, 5, 3],
         [4, 7, 4]];
         
var a = [[2], [3.5], [4.25]];

drawMatrix(m, 20, 20);
drawMatrix(a, 120, 20);

var ma = multiplyMatrices(m, a);
var ima = invertMatrix(m);

drawMatrix(ma, 200, 20);
drawMatrix(ima, 250, 20, 35);

// New test

// Rotation 1
var r1 = multiplyMatrices(getRotateYMatrix(55), getRotateXMatrix(20));

// Rotation2
var r2 = multiplyMatrices(getRotateXMatrix(35), getRotateYMatrix(40));

// Node after rotate 1
var mxy1 = multiplyMatrices(r1, a);

// Node after rotate 2
var mxy2 = multiplyMatrices(r2, a);

// Invert rotate 1
var ixy = invertMatrix(r1);

// Undo rotate 1
var rev = multiplyMatrices(ixy, mxy1);

// Undo rotate 1 and apply rotate 2 in one go
var allInOne = multiplyMatrices(r2, ixy);

var rot2 = multiplyMatrices(allInOne, mxy1);

drawMatrix(a, 20, 150, false, "node");
drawMatrix(mxy1, 80, 150, false, "rotate 1");
drawMatrix(ixy, 140, 150, 50, "inverse");

drawMatrix(rev, 20, 250, false, "node");
drawMatrix(mxy2, 80, 250, false, "rotate 2");
drawMatrix(rot2, 140, 250, false, "all in one");

