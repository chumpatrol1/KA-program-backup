var points = [[100, 120], [150, 80], [200, 80], [250, 150], [200, 250], [100, 200]];

var drawShape = function(points) {
    noFill();
    stroke(50);
    
    beginShape();
    for (var i = points.length; i--;) {
        vertex(points[i][0], points[i][1]);
    }
    endShape(CLOSE);
};

var findNearestEdge = function(points) {
    var n = points.length;
    if (!n) { return; }

    var i, p, c, d, d2, p1, p2, s, r, g, b, mean;
    
    // Get edges as vectors
    var deltas = [];
    var grads = [];
    var dists = [];
    
    var dx, dy;
    p2 = points[n - 1];
    
    for (i = 0; i < n; i++) {
        p1 = points[i];
        dx = p1[0] - p2[0];
        dy = p1[1] - p2[1];
        deltas.push([dx, dy]);
        grads.push(dx / dy);
        dists.push([dx * dx + dy * dy]);
        p2 = p1;
    }
    
    // Find distance to each edge
    var minD = 9999999999;
    
    var x, y, delta, t;
    
    for (i = 0; i < n; i++) {
        // Dot product of edge with line from (x, y) to edge vertex
        delta = deltas[i];
        p = points[i];
        t = ((p[0] - mouseX) * delta[0] + (p[1] - mouseY) * delta[1]) / dists[i];
        
        if (t >= 0 && t <= 1) {
            // Project point onto line
            x = p[0] - delta[0] * t;
            y = p[1] - delta[1] * t;
            
            stroke(20);
            ellipse(x, y, 6, 6);
            
            // Difference between (x, y) and projection onto the line
            dx = mouseX - x;
            dy = mouseY - y;
            
            // Squared distance from (x, y) and projection onto the line
            d = dx * dx + dy * dy;
            if (d < minD) {
                minD = d;
            }
            
            stroke(255 - round(sqrt(d)), 0, 0);
            line(x, y, mouseX, mouseY);
        }
    }

};


draw = function() {
    background(255);
    
    findNearestEdge(points);
    drawShape(points);

};



