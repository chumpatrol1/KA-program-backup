/*******************************************************
 * Using a mass-spring system to simulate hair.
*******************************************************/

var BACKGROUND = color(255);
var TEXTCOL = color(20, 20, 20);

var sansFont = createFont("sans", 15);

var running = true;

/*******************************************************
 *  Generic GUI component from which other elements
 * inherit
 * 
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};

GUI_Component.prototype.deactivationCondition = function() {
    if (this.deactivationFunction) {
        this.deactivated = this.deactivationFunction();
    }
};
}
/*******************************************************
 *  GUI Button
********************************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = color(235, 235, 235, 240);
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var FilledButtonDraw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function(col) {
    this.draw = FilledButtonDraw.bind(this);
    this.defaultCol = color(0, 0, 0, 1);
    this.highlightCol = col;
};

// Circular button
var CircleButton = function(x, y, w, h, clickFunction, drawFunction) {
    Button.call(this, x, y, w, h, "", clickFunction);
    this.drawIcon = drawFunction;
    this.cx = this.x + this.w / 2;
    this.cy = this.y + this.w / 2;
};
CircleButton.prototype = Object.create(Button.prototype);

CircleButton.prototype.draw = function() {
    var c;
    if (this.mouseOver()) {
        c = color(20, 20, 20);
        fill(235, 235, 235, 240);
    } else {
        c = color(40, 40, 40);
        fill(255);
    }
    
    stroke(c);
    strokeWeight(2);
    ellipse(this.cx, this.cy, this.w, this.w);
    
    if (this.drawIcon) {
        fill(c);
        this.drawIcon(this.cx, this.cy, this.w / 2);   
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    //showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    /*
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
    */
};
}
/**************************************
 * GUI Slider to vary parameters
***************************************/
{
var Slider = function(x, y, w, minValue, maxValue, nowValue, name, updateFunction) {
    GUI_Component.call(this, x, y, w, 12, name, updateFunction);
    
    this.x2 = x + w;
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = minValue || 0;
    this.max = maxValue === undefined ? 1 : maxValue;
    this.val = nowValue === undefined ? this.min : nowValue;
    this.setValue(this.val);
    
    this.held = false;
    this.decimalPlaces = 0;
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(TEXTCOL);
        textSize(15);
        textAlign(CENTER, BASELINE);
        text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 13);
    }
    
    noStroke();
    fill(180);
    rect(this.x - 8, this.y - this.h/2, this.w + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);

};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
};
}
/*******************************************************
 *      GUI
 * Contains and coordinates all the GUI elements.
********************************************************/
{
var GUI = function() {
    this.elements = [];
};

GUI.prototype.draw = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].draw();
    }
};

GUI.prototype.addElement = function(element) {
    this.elements.push(element);
};

GUI.prototype.mousePressed = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mousePressed();
    }
};

GUI.prototype.mouseReleased = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mouseReleased();
    }
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, updateF, options) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    var button = new Button(x, y, w, h, name, updateF);
    
    if (options) {
        for (var opt in options) {
            button[opt] = options[opt];
        }
    }
    
    this.buttons.push(button);
    this.components.push(button);
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = name ? 24 : 10;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    var slider = new Slider(x, y, w, minX, maxX, nowX, name, updateF);
    
    this.sliders.push(slider);
    this.components.push(slider);
    this.h += h + 16;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.buttons.push(button);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].mouseDragged()) {
            return true;
        }
    }
};
}
/*******************************************************
 *      Body object
 * Bodies are Particles that move under gravity
********************************************************/
{
var Body = function(system, x, y, r, mass) {
    this.system = system;
    this.position = new PVector(x, y);
    this.r = r;
    this.mass = mass || 1;
    this.velocity = new PVector(0, 0);
    this.acceleration = new PVector(0, 0);
    this.color = color(80, 80, 250);
};

Body.prototype.draw = function() {
    if (this.hide) { return; }
    strokeWeight(2);
    stroke(this.color);
    fill(255);
    ellipse(this.position.x, this.position.y, this.r * 2, this.r * 2);
};

Body.prototype.update = function() {
    // Try to stop bouncing forever
    if (this.position.y < height - 1 - this.r) {
        this.applyForce(this.system.gravity);
    } else if (abs(this.velocity.y) < 0.2) {
        this.velocity.mult(0);
    }
    this.velocity.mult(this.system.drag);
    
    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);
    // Now we make sure to clear acceleration each time
    this.acceleration.mult(0);
    this.bounce();
};

Body.prototype.bounce = function() {
    var boundary = height - this.r;
    var elasticity = 0.95;
    if (this.position.y > boundary) {
        this.velocity.mult(new PVector(elasticity, -elasticity));
        this.position.y = 2 * boundary - this.position.y;
    }
    
    boundary = this.r;
    if (this.position.x < boundary) {
        this.velocity.mult(new PVector(-elasticity, elasticity));
        this.position.x = 2 * boundary - this.position.x;
    }
    
    boundary = width - this.r;
    if (this.position.x > boundary) {
        this.velocity.mult(new PVector(-elasticity, elasticity));
        this.position.x = 2 * boundary - this.position.x;
    }
};

Body.prototype.applyForce = function(force) {
  var f = PVector.div(force, this.mass);
  this.acceleration.add(f);
};

Body.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.position.x, this.position.y) <= this.r;
};
}
/*******************************************************
 *      Spring object
 * Generates a force that acts to move two bodies to
 * a specific distance apart.
********************************************************/
{
var Spring = function(p1, p2, restLength, strength) {
    this.p1 = p1;
    this.p2 = p2;
    this.restLength = restLength;
    this.strength = strength;
    
    // Display attributes
    this.thickness = 10;
    this.kinks = 12;
    this.color = color(60);
};

Spring.prototype.draw = function() {
    if (this.hide) { return; }
    strokeWeight(2);
    stroke(this.color);
    line(this.p1.position.x, this.p1.position.y, this.p2.position.x, this.p2.position.y);
};

Spring.prototype.update = function() {
    // Contract
    var difference = PVector.sub(this.p1.position, this.p2.position);
    var distance = difference.mag();
    difference.div(distance);
    
    var force = (this.restLength - distance) * this.strength;
    difference.mult(force);

    this.p1.applyForce(difference);
    difference.mult(-1);
    this.p2.applyForce(difference);
    
    //this.p1.acceleration.mult(this.damping);
    //this.p2.acceleration.mult(this.damping);
};

Spring.prototype.mouseOver = function() {
    // Spring are unselectable (could change at a later date)
    return false;
};
}
/*******************************************************
 *      System object
 * This is the top-level object which contains all the
 * objects in the universe.
 * It handles gravity, drag and mouse events.
********************************************************/
{
var System = function() {
    // All elements
    this.elements = [];
    
    this.fixedBodies = [];
    this.dynamicBodies = [];
    this.springs = [];
    
    this.gravity = new PVector(0, 10);
    this.drag = 0.98;
    
    this.selected = false;
};

System.prototype.addFixedPoint = function(x, y, r) {
    var body = new Body(this, x, y, r);
    this.fixedBodies.push(body);
    this.elements.push(body);
};

System.prototype.addBody = function(x, y, r, mass) {
    var body = new Body(this, x, y, r, mass);
    this.dynamicBodies.push(body);
    this.elements.push(body);
};

System.prototype.addSpring = function(n1, n2, length, strength) {
    var p1 = this.elements[n1];
    var p2 = this.elements[n2];
    var spring = new Spring(p1, p2, length, strength);
    this.springs.push(spring);
    this.elements.push(spring);
};

System.prototype.draw = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].draw();
    }
};

System.prototype.update = function() {
    for (var i = 0; i < this.springs.length; i++) {
        this.springs[i].update();
    }
    
    for (var i = 0; i < this.dynamicBodies.length; i++) {
        this.dynamicBodies[i].update();
    }
    
};

System.prototype.mousePressed = function() {
    // Go in inverse order, so we select the top object;
    for (var i = this.elements.length - 1; i >= 0; i--) {
        if (this.elements[i].mouseOver()) {
            this.selected = this.elements[i];
            break;
        }
    }
};

System.prototype.mouseDragged = function() {
    if (this.selected) {
        var p = this.selected.position;
        var mouseVector = new PVector(mouseX - p.x, mouseY - p.y);
        this.selected.position.add(mouseVector);
        this.selected.velocity = mouseVector;
    }
};

System.prototype.mouseReleased = function() {
    this.selected = false;
};
}
/*******************************************************
 *      Create objects
********************************************************/

var system = new System();

var addHair = function(x, y, col, support) {
    var n = system.elements.length;
    var len = 12;
    var segments = 8;
    
    system.addFixedPoint(x, y, 8);
    system.addFixedPoint(x + len, y, 8);

    for (var i = 0; i < segments; i++) {
        system.addBody(x + (i + 2) * len, y, 8, 200);
    }

    for (var i = n; i < system.elements.length; i++) {
        system.elements[i].hide = true;
    }
    
    for (var i = 0; i < segments; i++) {
        system.addSpring(i + n + 1, i + n + 2, len, 20);
    }
    
    if (col) {
        for (var i = n; i < system.elements.length; i++) {
            system.elements[i].color = col;
        }
    }

    if (support) {
        for (var j = 1; j <= support; j++) {
            for (var i = 0; i < segments + 1 - support; i++) {
                system.addSpring(i + n, i + n + j + 1, len * (j + 1), 100);
                system.elements.slice(-1)[0].hide = true;
            }
        }
    }
};

addHair(40, 280, color(147, 149, 153));
addHair(40, 200, color(78, 109, 189), 1);
addHair(40, 120, color(232, 79, 140), 2);
addHair(40, 40, color(88, 230, 80), 3);


/*******************************************************
 *      Main loop
 * This is where the system is updated.
*******************************************************/

draw = function() {
    background(BACKGROUND);
    system.draw();

    if (running) {
        system.update();
    }
};

/*******************************************************
 * Event handling
********************************************************/

mousePressed = function() {
    system.mousePressed();
};

mouseReleased = function() {
    system.mouseReleased();
};

mouseDragged = function() {
    system.mouseDragged();
};

mouseOut = function() {
    system.mouseReleased();
};

keyPressed = function() {
    if (keyCode === 32) {
        running = !running;
    }
};
