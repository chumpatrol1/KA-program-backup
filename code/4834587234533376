/**************************************************************
 * Representing the Earth and sky using a sphere
**************************************************************/

// Move to centre of screen
translate(200, 200);

// Colours
var BACKGROUND = color(0, 0, 0);
var AXES = color(225, 225, 225);
var SKY = color(120, 180, 250, 200);
var GRASS = color(50, 120, 35);
var GRASS_STROKE = color(35, 80, 20);
var GROUND = color(120, 70, 20);
var GROUND_STROKE = color(80, 40, 10);

// Sizes
var sphereR = 160;
var sphereD = sphereR * 2;

var convertSphericalCoordinatesToCartesian = function(phi, theta) {
    var r = sphereR * sin(theta);
    var x = r * cos(phi - 90);
    var y = r * sin(phi - 90);
    var z = sphereR * cos(theta);
    return [x, y, z];
};

/*******************************************
 * Camera set-up
********************************************/

var _camera = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];

// Return the position of an object at position (x, y)
// given the current camera
var applyCamera = function(x, y, z) {
    return [x * _camera[0][0] + y * _camera[1][0] + z * _camera[2][0],
            x * _camera[0][1] + y * _camera[1][1] + z * _camera[2][1],
            x * _camera[0][2] + y * _camera[1][2] + z * _camera[2][2]];
};

// Return [x', y', z'], the coords of a node [x, y, z] as seen from the _camera
var applyCameraToNode = function(node) {
    return [node[0] * _camera[0][0] + node[1] * _camera[1][0] + node[2] * _camera[2][0],
            node[0] * _camera[0][1] + node[1] * _camera[1][1] + node[2] * _camera[2][1],
            node[0] * _camera[0][2] + node[1] * _camera[1][2] + node[2] * _camera[2][2]];
};

/*******************************************
 * Linear algebra functions
 * All assume vector has 3 dimensions
********************************************/
var addVectors = function(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
};

var subtractVectors = function(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
};

var vectorTimesScalar = function(v, s) {
    return [v[0] * s, v[1] * s, v[2] * s];
};

var vectorLength = function(v) {
    return sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
};

var normaliseVector = function(v) {
    var d = vectorLength(v);
    return [v[0]/d, v[1]/d, v[2]/d];
};

var dotProduct = function(v1, v2) {
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
};

// Given a face, find one of its normals
var normalOfPlane = function(face, nodes) {
    var n1 = nodes[face[0]];
    var n2 = nodes[face[1]];
    var n3 = nodes[face[2]];
    
    var v1 = subtractVectors(n1, n2);
    var v2 = subtractVectors(n1, n3);
    
    var v3 = [[v1[1]*v2[2] - v1[2]*v2[1]],
              [v1[2]*v2[0] - v1[0]*v2[2]],
              [v1[0]*v2[1] - v1[1]*v2[0]]];
              
    return v3;
};

// Given two vectors return a vector representing the normal
var normalOfTwoVectors = function(v1, v2) {
    return [[v1[1] * v2[2] - v1[2] * v2[1]],
            [v1[2] * v2[0] - v1[0] * v2[2]],
            [v1[0] * v2[1] - v1[1] * v2[0]]];
};

/*******************************************
 * Camera transformations
********************************************/

var rotateY3D = function(theta) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;

    for (var i = 0; i < _camera.length; i++) {
        x = _camera[i][0];
        y = _camera[i][1];
        z = _camera[i][2];
        _camera[i] = [ct*x + st*z, y, -st*x + ct*z];
    }
};

var rotateX3D = function(theta) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;
    
    for (var i = 0; i < _camera.length; i++) {
        x = _camera[i][0];
        y = _camera[i][1];
        z = _camera[i][2];
        _camera[i] = [x, ct*y - st*z, st*y + ct*z];
    }
};

/*******************************************
 * Define display objects
********************************************/

var skySphere = function() {
    this.z = -0.001; // Not quite zero to ensure Earth is draw over the top
    
    this.update = function() {
        // The sky is at the center so never changes
    };
    
    this.draw = function() {
        noStroke();
        fill(SKY);
        ellipse(0, 0, sphereD + 2, sphereD + 2);
    };
};

//     A circular disc
// center:      center of the disc
// v1 and v2:   two vector in the plane of the disc
// diameter:    diameter
var Disc = function(center, v1, v2, diameter) {
    this.update = function(){
        this.normal = normalOfTwoVectors(applyCameraToNode(v1), applyCameraToNode(v2));
        var d1 = this.normal[0];
        var d2 = this.normal[1];
        this.minor = diameter * sqrt(1 - d1 * d1 - d2 * d2);
        this.angle = atan2(d2, d1) + 90;
        
        var coords = applyCameraToNode(center);
        this.x = coords[0];
        this.y = coords[1];
        this.z = coords[2];
    };
    this.update();
    
    // Set the drawing style
    this.style = function() {
        strokeWeight(2);
        if (this.normal[2] > 0) {
            fill(GRASS);
            stroke(GRASS_STROKE);
        } else {
            fill(GROUND);
            stroke(GROUND_STROKE);
        }
    };
    
    this.draw = function() {
        this.style();
        pushMatrix();
        translate(this.x, this.y);
        rotate(this.angle);
        ellipse(0, 0, diameter, this.minor);
        popMatrix();
    };
};

// A line and a label representing an axis
var Axis = function(name, v1) {
    var r1 = sphereR + 2;
    var r2 = sphereR + 20;
    var r3 = sphereR + 30;
    
    this.update = function() {
        var coord = applyCameraToNode(v1);
        this.x = coord[0];
        this.y = coord[1];
        this.z = coord[2];
    };
    this.update();
    
    this.draw = function() {
        stroke(AXES);
        strokeWeight(2);
        line(this.x * r1, this.y * r1, this.x * r2, this.y * r2);
        
        fill(250);
        textSize(14);
        textAlign(CENTER, CENTER);
        text(name, this.x * r3, this.y * r3);
    };
};

var Winston = function(center, v1, v2, diameter) {
    this.update = function(){
        this.normal = normalOfTwoVectors(applyCameraToNode(v1), applyCameraToNode(v2));
        var d1 = this.normal[0];
        var d2 = this.normal[1];
        this.minor = diameter * sqrt(1 - d1 * d1 - d2 * d2);
        this.angle = atan2(d2, d1) + 90;
        
        var coords = applyCameraToNode(center);
        this.x = coords[0];
        this.y = coords[1];
        this.z = coords[2];
    };
    this.update();
    
    this.draw = function() {
            // Shadow
            noStroke();
            fill(0, 0, 0, 100);
            //drawDisc([0, -10, 0], [1, 0, 0], [0, 1, 0], 20);
        
        // Face
        pushMatrix();
        translate(this.x, this.y);
        rotate(this.angle);
            strokeWeight(1);
            stroke(255);
            fill(255, 255, 0);
            ellipse(0, 0, diameter, this.minor);
        popMatrix();
        
        // Mouth
        pushMatrix();
        var coords = applyCameraToNode([3, 0, 7]);
        translate(coords[0], coords[1]);
        rotate(this.angle);
            noStroke();
            fill(252, 65, 65);
            ellipse(0, 0, 8, 8 * this.minor / diameter);
        popMatrix();

        // Eyes
        var r = 3 * this.minor / diameter;
        fill(46);
        
        var coords = applyCameraToNode([-1, 0, 14]);
        pushMatrix();
        translate(coords[0], coords[1]);
        rotate(this.angle);
            ellipse(0, 0, 3, r);
        popMatrix();
        
        var coords = applyCameraToNode([6, 0, 14]);
        pushMatrix();
        translate(coords[0], coords[1]);
        rotate(this.angle);
            ellipse(0, 0, 3, r);
        popMatrix();

    };
};

/*******************************************
 * Create objects
********************************************/

var displayObjects = [
    new skySphere(),
    new Disc([0, 0, 0], [1, 0, 0], [0, 1, 0], sphereD), // Ground
    new Axis("N", [0, -1, 0]),
    new Axis("E", [-1, 0, 0]),
    new Axis("S", [0, 1, 0]),
    new Axis("W", [1, 0, 0]),
    new Axis("Zenith", [0, 0, 1]),
    new Axis("Nadir", [0, 0, -1]),
    new Winston([0, 0, 10], [1, 0, 0], [0, 0, 1], 20)
];


/*******************************************
 * Functions for updating display objects
********************************************/

var sortByZ = function(a, b) {
    return a.z - b.z;
};

// After moving the camera, we need to update the coordinates of all displayed object.
// We also resort them by z-coordinate so we can draw them in the correct order.
var updateDisplayObjects = function() {
    for (var i = 0; i < displayObjects.length; i++) {
        displayObjects[i].update();
    }
    displayObjects.sort(sortByZ);
};

/*******************************************
 * Display
********************************************/

// Draw a 180 degree arc between angles a1 and a2, with diameter d
var drawArc = function(v1, v2, a1, a2, d) {
    var normal = normalOfTwoVectors(applyCameraToNode(v1), applyCameraToNode(v2));
    var minor = d * sqrt(1 - normal[0] * normal[0] - normal[1] * normal[1]);
    var angle = atan2(normal[1], normal[0]) + 90;
    
    pushMatrix();
    rotate(angle);
    if (normal[2] < 0) {
        arc(0, 0, d, minor, a1, a2);
    } else {
        arc(0, 0, d, minor, -a2, -a1);
    }
    popMatrix();
};

var drawArcs = function(a1, a2) {
    noFill();
    stroke(AXES);
    strokeWeight(2);
    
    // North-South meridian
    drawArc([0, 1, 0], [0, 0, 1], a1, a2, sphereD);
    // East-West meridian
    drawArc([-1, 0, 0], [0, 0, 1], a1, a2, sphereD);    
};

var draw = function() {
    background(BACKGROUND);
    
    drawArcs(0, 180);
    for (var i = 0; i < displayObjects.length; i++) {
        displayObjects[i].draw();
    }
    drawArcs(-180, 0);
};

// Initial rotation
rotateX3D(60);
rotateY3D(20);
updateDisplayObjects();

/*******************************************
 * Event handling
********************************************/

var mouseDragged = function() {
    var theta1 = -(pmouseX - mouseX) * PI / 10;
    var theta2 = (pmouseY - mouseY) * PI / 10;
    rotateY3D(theta1);
    rotateX3D(theta2);
    updateDisplayObjects();
};

// Spacebar toggles animation
var keyPressed = function() {
    //if (keyCode === 32) { running = !running; }
};