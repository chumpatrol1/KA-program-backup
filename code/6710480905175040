// Colours
var BACKGROUND = color(245, 245, 255);
var SKIN_COL = color(40, 180, 10);
var SKELETON_COL = color(120, 210, 40);
var BACKBONE_COL = color(0, 140, 0);

var BLADE_WIDTH = 10;
var CONTROL_POINT_SIZE = 15;
var SEGMENTS = 4;

var selectedPoint = false;
var buttons, grass;

// Recording variables
var mode = 'Start';
var recordedPoints = [];
var MAX_RECORDED_POINTS = 100;
var MAX_POINTS = MAX_RECORDED_POINTS - 1;   // Makes life easier

var drawMultiple = true;
var bladesOfGrass = 100;
var lawnY = 390;    // Y-coordinate of lawn
var lawnX = 20;    // Start of lawn
var lawnW = 360;    // Width of lawn
var lawnX2 = lawnX + lawnW;
var lawnDX = 12;
var lawnDY = 6;
var lawnDY = 4;

// Base of main blade of grass
var grassX = 200;
var grassY = 320;
var slider;

// Given the end points of two lines (x1, y1) to (x2, y2) and (x3, y3) to (x4, y4),
// return the point where they intersect
// Assume lines do intersect (i.e. are not parallel and are not segments)
var findIntersection = function(x1, y1, x2, y2, x3, y3, x4, y4) {
    var dx1 = (x1 - x2);
    var dx2 = (x3 - x4);
    var dy1 = (y1 - y2);
    var dy2 = (y3 - y4);
    var d = dx1 * dy2 - dy1 * dx2;
    return [(dx2 * (x1 * y2 - y1 * x2) - dx1 * (x3 * y4 - y3 * x4)) / d,
            (dy2 * (x1 * y2 - y1 * x2) - dy1 * (x3 * y4 - y3 * x4)) / d];
};

/*********************************************************************
 * GUI Slider to vary parameters
*********************************************************************/

var Slider = function(x, y, width, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;

    this.draw = function() {
        noStroke();
        fill(200);
        rect(this.x, this.y-1, this.width+2, 3, 4);
        
        strokeWeight(1);
        stroke(60);
        line(this.x + 1, this.y-1, x + this.width, this.y);
    
        fill(180);
        stroke(50);
        rect(this.bx, this.y-8, 10, 16, 3);
        
        for (var i=0; i<3; i++) {
            var y = this.y + i*3 - 3;
            stroke(50);
            line(this.bx + 3, y, this.bx + 7, y); 
            stroke(200);
            line(this.bx + 3, y+1, this.bx + 7, y+1); 
        }
    };
    
    this.selected = function() {
        this.held = mouseX > this.bx - 1 && mouseX < this.bx + 11 && 
                    mouseY > this.y - 9 && mouseY < this.y + 9;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + round((x - this.x) * this.scale);
            return true;
        }
    };
  
    // This is used if you want to update the value in a way other
    // than using the slider (but want the slider to update).
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

/********************************************************
 *  GUI Button
*********************************************************/

var Button = function(x, y, w, h, name, clickF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(80, 120, 250);
    this.disableCol = color(120, 120, 120);
    this.highlightCol = color(150, 200, 250);
    this.showing = true;
    this.disabled = false;
    
    this.mouseover = function() {
        return (mouseX >= this.x && mouseX <= this.x + this.w &&
                mouseY >= this.y && mouseY <= this.y + this.h);
    };
    
    this.click = function() {
        if (!this.disabled && this.mouseover()) {
            this.selected = true;
            mode = this.name;
            if (this.name === 'Play') {
                this.name = 'Pause';
            } else if (this.name === 'Pause') {
                this.name = 'Play';
            }
        } else {
            this.selected = false;
        }
    };
    
    this.draw = function() {
        if (!this.showing) { return; }
        
        noStroke();
        if (this.disabled) {
            fill(this.disableCol);
        } else if (this.mouseover()) {
            fill(this.highlightCol);
        } else {
            fill(this.defaultCol);
        }
        if (this.name === 'Record' && mode === 'Recording') {
            fill(220, 40, 40);
        }
        rect(this.x, this.y, this.w, this.h, 8);
        
        fill(10);
        textAlign(CENTER, CENTER);
        text(this.name, this.x + this.w/2, this.y + this.h/2);
    };
};

/*********************************************************************
 * Control points are circles that can be dragged
*********************************************************************/

var ControlPoint = function(x, y) {
    this.x = x;
    this.y = y;
    this.r = CONTROL_POINT_SIZE;
};

ControlPoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r / 2;
};

ControlPoint.prototype.draw = function() {
    noStroke();
    
    if (this.mouseover()) {
        strokeWeight(2);
        stroke(100, 100, 200);
        fill(200, 200, 200, 230);
    } else {
        noStroke();
        fill(160, 160, 200, 100);
    }
    
    ellipse(this.x, this.y, this.r, this.r);
};

/*********************************************************************
 * A curve fixed at point (x1, y2) and curving towards (x2, y2)
 * The degree of curve depends on the length to the third control point
*********************************************************************/

var Curve = function(x1, y1, x2, y2, length) {
    this.length = length;
    this.p1 = new ControlPoint(x1, y1);     // Base
    this.p2 = new ControlPoint(x2, y2);     // Tip
    this.p3 = new ControlPoint(0, 0);       // Apex
    this.controlPoints = [this.p2, this.p3];
    
    this.directAngle = 0;   // Angle between ends p1 and p2
    this.apexAngle = 0;     // Angle between base, p1, and apex, p3
    
    this.splinePoints = [];
    this.outlinePoints = [];
    
    // Find the angle from p1 to p3 relative to the line between p1 and p2
    this.findApexPoint = function() {
        this.directAngle = atan2(this.p2.y - this.p1.y, this.p2.x - this.p1.x);
        var midLength = dist(this.p1.x, this.p1.y, this.p2.x, this.p2.y) * 0.5;
        var midX = (this.p1.x + this.p2.x) * 0.5;
        var midY = (this.p1.y + this.p2.y) * 0.5;
        
        // Points stretched in a line
        if (midLength > this.length) { this.length = midLength; }
        var d = sqrt(this.length * this.length - midLength * midLength);
        var angle = this.apexAngle < 0 ? this.directAngle - 90 : this.directAngle + 90;
        
        this.p3.x = midX + d * cos(angle);
        this.p3.y = midY + d * sin(angle);
        this.apexAngle = atan2(this.p3.y - this.p1.y, this.p3.x - this.p1.x) - this.directAngle;
    };
    this.findApexPoint();
    
    // Fill splinePoints array with points along the curve
    this.createSpline = function() {
        var n = SEGMENTS;
        var x1 = this.p1.x;
        var y1 = this.p1.y;
        var x2 = this.p2.x + this.length * n / (n + 1) * this.ca2;
        var y2 = this.p2.y + this.length * n / (n + 1) * this.sa2;
        var l = this.length / (n + 1);
        
        this.splinePoints = [];
        for (var i = 1; i <= n; i++) {
            var len1 = l * i;
            var len2 = l * (n - i);
            var x3 = this.p1.x + len1 * this.ca1;
            var y3 = this.p1.y + len1 * this.sa1;
            var x4 = this.p2.x + len2 * this.ca2;
            var y4 = this.p2.y + len2 * this.sa2;
            var coord = findIntersection(x1, y1, x2, y2, x3, y3, x4, y4);
            
            x1 = coord[0];
            y1 = coord[1];
            x2 = x4;
            y2 = y4;
            this.splinePoints.push([x1, y1]);
        }
        this.splinePoints.push([x2, y2]);
        this.findOutline();
    };
    
    this.findOutline = function() {
        this.leftSide = [[this.p1.x - BLADE_WIDTH, this.p1.y]];
        this.rightSide = [[this.p1.x + BLADE_WIDTH, this.p1.y]];
        
        for (var i = 0; i < this.splinePoints.length - 1; i++) {
            var p1 = this.splinePoints[i];
            var p2 = this.splinePoints[i + 1];
            var angle = atan2(p1[1] - p2[1], p1[0] - p2[0]) + 90;
            var vertebrae = BLADE_WIDTH;
            var dx = vertebrae * cos(angle);
            var dy = vertebrae * sin(angle);
            this.leftSide.push([p1[0] + dx, p1[1] + dy]);
            this.rightSide.push([p1[0] - dx, p1[1] - dy]);
        }
        
        // Add tip
        this.leftSide.push([this.p2.x, this.p2.y]);
        this.outlinePoints = this.leftSide.concat(this.rightSide.reverse());
        
        debug(this.outlinePoints);
        
        if (mode === 'Recording') {
            recordedPoints.push(this.outlinePoints);
            if (recordedPoints.length === MAX_RECORDED_POINTS) {
                mode = 'Pause';
                buttons[0].selected = false;
                buttons[1].disabled = false;
            }
        }
    };
    
    // Move tip
    this.updatePoint = function() {
        this.p2.x += mouseX - pmouseX;
        this.p2.y += mouseY - pmouseY;
        
        this.directAngle = atan2(this.p2.y - this.p1.y, this.p2.x - this.p1.x);
        var midLength = dist(this.p1.x, this.p1.y, this.p2.x, this.p2.y) * 0.5;
        
        // Points stretched in a line
        if (midLength >= this.length) {
            this.p2.x = this.p1.x + (2 * this.length - 1)* cos(this.directAngle);
            this.p2.y = this.p1.y + (2 * this.length - 1) * sin(this.directAngle);
        }
        
        this.findApexPoint();
    };
    
    // Find angle between the end points and the apex point
    this.update = function() {
        // Set position p3
        this.p3.x = this.p1.x + this.length * cos(this.apexAngle + this.directAngle);
        this.p3.y = this.p1.y + this.length * sin(this.apexAngle + this.directAngle);
        
        // Angle from p1 to p3
        this.ca1 = cos(this.apexAngle + this.directAngle);
        this.sa1 = sin(this.apexAngle + this.directAngle);
        
        // Angle from p2 to p3
        var angle = atan2(this.p3.y - this.p2.y, this.p3.x - this.p2.x);
        this.ca2 = cos(angle);
        this.sa2 = sin(angle);
        this.createSpline();
    };
    
    this.update();
};

// Draw an outline connecting an array of points
Curve.prototype.drawOutline = function(points) {
    beginShape();
        for (var i = 0; i < points.length; i++) {
            var p = points[i];
            vertex(p[0], p[1]);
        }
    endShape();
};

// Draw a line connecting an array of points
Curve.prototype.drawConnectedPoints = function(points) {
    var x1 = this.p1.x;
    var y1 = this.p1.y;
    
    for (var i = 0; i < points.length; i++) {
        var x2 = points[i][0];
        var y2 = points[i][1];
        line(x1, y1, x2, y2);
        x1 = x2;
        y1 = y2;
    }
};

// Given two arrays of points of the same length,
// draw a line consisting of the interpolation of the ith point in each array
// p is the weighting to the first array (1-p) is the weighting to the second
Curve.prototype.drawInterpolatedPoints = function(points1, points2, p) {
    var x1 = this.p1.x;
    var y1 = this.p1.y;
    var q  = 1 - p;
    
    for (var i = 0; i < points1.length; i++) {
        var x2 = points1[i][0] * p + points2[i][0] * q;
        var y2 = points1[i][1] * p + points2[i][1] * q;
        line(x1, y1, x2, y2);
        x1 = x2;
        y1 = y2;
    }
};

Curve.prototype.drawInterpolatedOutline = function(points1, points2, p) {
    var q  = 1 - p;
    
    beginShape();
        for (var i = 0; i < points1.length; i++) {
            vertex(points1[i][0] * p + points2[i][0] * q, points1[i][1] * p + points2[i][1] * q);
        }
    endShape();
};

// Map an integer into the range 0 to MAX_RECORDED_POINTS - 1
// in such a way that numbers go up from 0 to max, then max to 0 and so on.
// Means that the recorded loop goes forwards then backwards to avoid jumping.
var getPointInLoop = function(t) {
    var x = (MAX_RECORDED_POINTS + t) % (2 * MAX_POINTS);
    return MAX_POINTS - abs(x - MAX_POINTS);
};

Curve.prototype.drawManyBlades = function(useRecorded) {
    var _scale = 0.15;
    strokeWeight(1);
    //strokeWeight(5);
    stroke(100, 250, 100);
    
    for (var i = 0; i < grass.length; i++) {
        var g = grass[i];
        
        translate(g.x, g.y);
        scale(_scale, _scale);
        translate(-this.p1.x, -this.p1.y);
        
        //stroke(g.c);
        fill(g.c);
        
        if (useRecorded) {
            // Offset by frame count, slider value and position
            var n = frameCount + i * slider.val / 25;
            
            // Get two sets of points
            var p1 = getPointInLoop(n);
            var p2 = getPointInLoop(n + 1);
            var proportion = floor(p1) - p1 + 1;
            var points1 = recordedPoints[floor(p1)];
            var points2 = recordedPoints[floor(p2)];
            
            // Draw interpolation
            this.drawInterpolatedOutline(points1, points2, proportion);
            
            // var n = getPointInLoop(frameCount + i * slider.val);
            //this.drawConnectedPoints(recordedPoints[n]);
        } else {
            //this.drawConnectedPoints(this.splinePoints);
            this.drawOutline(this.outlinePoints);
        }
        resetMatrix();
    }
};

Curve.prototype.drawMainBlade = function(outlinePoints, splinePoints) {
    noStroke();
    fill(SKIN_COL);
    this.drawOutline(outlinePoints);
    
    if (splinePoints) {
        stroke(BACKBONE_COL);
        strokeWeight(4);
        this.drawConnectedPoints(splinePoints);
    }
};

// Main Curve draw function
Curve.prototype.draw = function() {
    if (mode !== 'Play') {
        this.drawMainBlade(this.outlinePoints, this.splinePoints);
        for (var i = 0; i < this.controlPoints.length; i++) {
            this.controlPoints[i].draw();
        }  
        if (drawMultiple) {
            this.drawManyBlades();
        } 
    } else {
        if (recordedPoints.length !== 0) {
            var t = getPointInLoop(frameCount);
            this.drawMainBlade(recordedPoints[t]);
            
            if (drawMultiple) {
                this.drawManyBlades(true);
            }
        } else {
            buttons[1].selected = false;
            mode = 'Pause';
        }
    }
};

Curve.prototype.selectPoint = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseover()) {
            selectedPoint = i;
        }
    }
};

Curve.prototype.mouseDrag = function() {
    if (selectedPoint !== false) {
        if (mode === 'Record') {
            mode = 'Recording';
            recordedPoints = [];
        }
        
        if (selectedPoint === 0) {
            this.updatePoint();
        } else {
            this.apexAngle = atan2(mouseY - this.p1.y, mouseX - this.p1.x) - this.directAngle;
            var d = 2 * this.length * cos(this.apexAngle);
            this.p2.x = this.p1.x + d * cos(this.directAngle);
            this.p2.y = this.p1.y + d * sin(this.directAngle);
        }
        this.update();
    }
};

/*********************************************************************
 * Creation of objects
*********************************************************************/

var createGrassParameters = function() {
    var grass = [];
    var rows = lawnDY / 2 - 1;
    var bladePerRow = bladesOfGrass / rows;
    var dx = (lawnW - 15) / bladePerRow;
    var grad = lawnDX / lawnDY;
    
    for (var y = 1; y <= rows; y++) {
        for (var i = 0; i < bladePerRow; i++) {
            grass.push({
                x: lawnX + i * dx + grad * 2 * (rows - y) + random(0, dx) + 5,
                y: lawnY - lawnDY + y * 2 + 1,
                c: color(random(0, 40), random(60, 160), 10)
            });
        }
    }
    return grass;
};

grass = createGrassParameters();
buttons = [
    new Button(5, 5, 60, 20, "Record"),
    new Button(70, 5, 60, 20, "Play")
];
buttons[1].disabled = true;
slider = new Slider(240, 16, 101, -50, 50, 1);

var myCurve = new Curve(grassX, grassY, grassX + 20, grassY - 220, 130);

/*********************************************************************
 * Draw functions
*********************************************************************/

var drawTooltip = function() {
    textAlign(LEFT, TOP);
    textSize(12);
    var tx = buttons[0].x;
    var ty = buttons[0].y + buttons[0].h + 8;
    
    var txt;
    var n = 0;
    switch(mode) {
        case 'Start':
            txt = "Press Record to save 100 frames of movement.";
            break;
        case 'Record':
            buttons[1].name = 'Play';
            txt = "Recording will start when you first move the grass.";
            break;
        case 'Recording':
            txt = "Recorded " + recordedPoints.length + " frames.";
            break;
        case 'Pause':
            n = 1;
            txt = "Press Play to show the recorded movement.";
            break;
    }
    
    if (txt) {
        fill(255);
        strokeWeight(1);
        stroke(200);
        rect(tx, ty, textWidth(txt) + 10, 18, 8);
        
        var tx2 = buttons[n].x + buttons[n].w * 0.5;
        noStroke();
        triangle(tx2, ty - 8, tx2 - 4, ty + 1, tx2 + 4, ty + 1);
        stroke(200);
        line(tx2, ty - 8, tx2 - 4, ty);
        line(tx2, ty - 8, tx2 + 4, ty);
        
        fill(20);
        text(txt, tx + 5, ty + 2);
    }

};

var drawGUI = function() {
    fill(10);
    textSize(14);
    
    for (var b = 0; b < buttons.length; b++) {
        buttons[b].draw();
    }
    
    slider.draw();
    fill(20);
    textSize(12);
    textAlign(RIGHT, CENTER);
    text("Waves: " + slider.val, slider.x - 4, slider.y);
};

var drawLawn = function() {
    /*
    noStroke();
    fill(184, 103, 50);

    var lawnY2 = lawnY - lawnDY;
    quad(lawnX - 5, lawnY + 1, lawnX2, lawnY + 1,
         lawnX2 + lawnDX, lawnY2, lawnX + lawnDX - 5, lawnY2);
    fill(145, 80, 40);
    rect(lawnX - 5, lawnY + 1, lawnW + 5, 5);
    fill(230, 151, 106);
    quad(lawnX2, lawnY + 1, lawnX2 + lawnDX, lawnY2,
         lawnX2 + lawnDX, lawnY2 + 5, lawnX2, lawnY + 5);
    */
    
    stroke(184, 103, 50);
    strokeWeight(8);
    line(lawnX + 4, lawnY, lawnX + lawnW, lawnY);
};

var draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    drawLawn();
    drawGUI();
    drawTooltip();
};

/*********************************************************************
 * Event handling
*********************************************************************/

var mousePressed = function() {
    myCurve.selectPoint();
    slider.selected();
};

var mouseReleased = function() {
    selectedPoint = false;
    slider.held = false;
    for (var b = 0; b < buttons.length; b++) {
        buttons[b].click();
    }
};

var mouseDragged = function() {
    slider.drag();
    myCurve.mouseDrag();
};