/****************************************
 * Parabolic interpolation with one
 * control point
*****************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 240);

var CONTROL_POINT_SIZE = 12;
var RESOLUTION = 20;


/*********************************************************************
 *      Draggable point
*********************************************************************/

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

draggablePoint.prototype.draw = function() {
    if (this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    var r = CONTROL_POINT_SIZE + this.animation;
    
    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);    
    ellipse(this.x, this.y, r, r);
};

/****************************************
 *      Parabolic line
 * A line made of a series of points
 * Between each point pair of points,
 * a control point is added,
 * which controls the parabola.
****************************************/
var getMidpoint = function(p1, p2) {
    return { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };
};

var parabolicLine = function(points, color) {
    this.vertices = [];
    this.controls = [];
    this.color = color || GREEN;
    this.selected = false;
    
    // Add vertices;
    for (var i = 0; i < points.length; i += 2) {
        this.vertices.push(new draggablePoint(points[i], points[i + 1]));
    }
    
    // Add control points as midpoints
    for (var i = 0; i < this.vertices.length - 1; i++) {
        var p1 = this.vertices[i];
        var p2 = this.vertices[i + 1];
        var midPoint = getMidpoint(p1, p2);
        this.controls.push(new draggablePoint(midPoint.x, midPoint.y, PINK));
    }
    
    this.points = this.vertices.concat(this.controls);
    
};

parabolicLine.prototype.draw = function() {
    noFill();
    
    for (var i = 0; i < this.controls.length; i++) {
        var p1 = this.controls[i];
        var p2 = this.vertices[i];
        var p3 = this.vertices[i + 1];
        
        // Draw control lines
        strokeWeight(2);
        stroke(BLUE);
        line(p1.x, p1.y, p2.x, p2.y);
        line(p1.x, p1.y, p3.x, p3.y);
        
        // Draw curve
        strokeWeight(4);
        stroke(this.color);
        beginShape();
        for (var j = 0; j <= RESOLUTION; j++) {
            var p = j / RESOLUTION;
            var rx = lerp(p2.x, p1.x, p);
            var ry = lerp(p2.y, p1.y, p);
            var sx = lerp(p1.x, p3.x, p);
            var sy = lerp(p1.y, p3.y, p);
            vertex(lerp(rx, sx, p), lerp(ry, sy, p));
        }
        endShape();
    }
    
    // Vertex points
    for (var i = 0; i < this.vertices.length; i++) {
        this.vertices[i].draw();
    }
    
    // Control points
    for (var i = 0; i < this.controls.length; i++) {
        this.controls[i].draw();
    }
};


parabolicLine.prototype.mousePressed = function() {
    for (var i = 0; i < this.points.length; i++) {
        if (this.points[i].mouseover()) {
            this.selected = this.points[i];
        }
    }
};

parabolicLine.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move();
    }
};

parabolicLine.prototype.mouseReleased = function() {
    this.selected = false;
};

var myLine = new parabolicLine([40, 250, 160, 120, 360, 300]);

/****************************************
 *      Display functions
****************************************/

/*
var drawArc = function() {
    strokeWeight(4);
    stroke(GREEN);
    noFill();
    
    beginShape();
    var p1, p2, p3;
    for (var j = 0; j < selectables.length - 2; j++) {
        p2 = selectables[j + 1];
        p1 = j > 0 ? getMidpoint(selectables[j], p2) : selectables[j];
        p3 = j < selectables.length - 3 ? getMidpoint(selectables[j + 2], p2) : selectables[j + 2];
    
        for (var i = 0; i <= RESOLUTION; i++) {
            var p = i / RESOLUTION;
            var q = 1 - p;
            var rx = q * p1.x + p * p2.x;
            var ry = q * p1.y + p * p2.y;
            var sx = q * p2.x + p * p3.x;
            var sy = q * p2.y + p * p3.y;
            vertex(q * rx + p * sx, q * ry + p * sy);
        }    
    }
    endShape();
};
*/
/****************************************
 *      Main loop
****************************************/

draw = function() {
    background(BACKGROUND);

    myLine.draw();

};

/****************************************
 *      Event handling
****************************************/

mousePressed = function() {
    myLine.mousePressed();
};

mouseReleased = function() {
    myLine.mouseReleased();
};

mouseDragged = function() {
    myLine.mouseDragged();
};
