/************************************************
 * Rays of light passing through a lens made or
 * two circular arcs.
*************************************************/

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0); 
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var CONTROL_POINT_SIZE = 12;

var showing = {};
angleMode = "degrees";

/**************************************
 *  Helper functions
***************************************/

var forEach = function(arr, func) {
    arr.forEach(function(el) {
        el[func]();
    });
};

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

var normalise = function(v) {
    var m = mag(v.x, v.y);
    return { x: v.x / m, y: v.y / m }; 
};

/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.dependents = [];
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
    this.dependents.forEach(function(p) {
        p.move(dx, dy);
    });
};
}
/**************************************
 *      Scene object
 *  Wraps the other objects
**************************************/
{
var Scene = function() {
    this.selected = false;
    
    this.lensTop = new DraggablePoint(width - 250, 120);
    this.lensBase = new DraggablePoint(width - 250, 280);
    this.lensHandle = new DraggablePoint(width - 300, 140);
    this.sourceX = new DraggablePoint(width - 50, 200);
    this.sourceY = new DraggablePoint(width - 50, 150);
    
    this.lensBase.dependents.push(this.lensTop, this.lensHandle);
    
    this.points = [
        this.lensTop,
        this.lensBase,
        this.lensHandle,
        this.sourceX,
        this.sourceY,
    ];

    this.lensRi = 1.2;
    this.rays = [];
    
    this.update();
};

Scene.prototype.draw = function() {
    this.drawLight();
    this.drawLens();
    forEach(this.points, 'draw');
};

Scene.prototype.drawLight = function() {
    strokeWeight(2);
    stroke(220, 220, 0, 100);
    this.rays.forEach(function(ray) {
        line(ray.x1, ray.y1, ray.x2, ray.y2);
    });
};

Scene.prototype.drawLens = function() {
    // Midline
    noFill();
    stroke(200);
    strokeWeight(2);
    line(this.lensBase.x, this.lensBase.y,
         this.lensBase.x, this.lensTop.y);
    
    var dx = abs(this.lensBase.x - this.lensTop.x);
    var x1 = this.lensBase.x - dx;
    var x2 = this.lensBase.x + dx;
    
    // Lens
    stroke(BLUE);

    // Left arc
    var d = this.lensR * 2;
    //arc(this.lensX1, this.lensY, d, d, 180 - this.angle, 180 + this.angle);
    
    //println(this.lensX1 + this.cx1);
    
    // Right arc
   // arc(this.lensX2, this.lensY, d, d, - this.angle, this.angle);

    // Beziers mimicing arcs so we don't have a problem with only having integer angles
    bezier(
        this.lensTop.x, this.lensTop.y,
        this.c1x, this.c1y,
        this.c1x, this.c2y,
        this.lensBase.x, this.lensBase.y
    );
    
    bezier(
        this.lensTop.x, this.lensTop.y,
        this.c2x, this.c1y,
        this.c2x, this.c2y,
        this.lensBase.x, this.lensBase.y
    );

    // Center of lens arc
    //ellipse(this.lensX, this.lensY, 5, 5);

    // Handle
    stroke(PINK + (200 << 24));
    line(this.lensTop.x, this.lensTop.y,
         this.lensHandle.x, this.lensHandle.y);
};

Scene.prototype.update = function() {
    // Constraints
    this.lensTop.x = this.lensBase.x;
    this.lensHandle.x = min(this.lensHandle.x, this.lensBase.x - 1);
    this.lensHandle.y = max(this.lensHandle.y, this.lensTop.y + 1);
    
    this.sourceY.x = this.sourceX.x;
    
    // Get lens dimensions
    this.lensY = (this.lensTop.y + this.lensBase.y) * 0.5;
    
    // Half height of lens
    var h2 = (this.lensBase.y - this.lensTop.y) * 0.5;
    
    // Vector for handle
    var hx = this.lensHandle.x - this.lensTop.x;
    var hy = this.lensHandle.y - this.lensTop.y;
    
    var dx = h2 * hy / hx;
    this.lensX1 = this.lensBase.x - dx;
    this.lensX2 = this.lensBase.x + dx;
    
    // Radius of curvature
    this.lensR = dist(this.lensTop.x, this.lensTop.y, this.lensX1, this.lensY);
    this.lensR2 = this.lensR * this.lensR;
    
    // Angle from arc edge to center of lens
    this.angle = atan2(this.lensY - this.lensTop.y, this.lensX1 - this.lensTop.x);
    
    // Get control points for bezier that mimics arc
    var ca = cos(this.angle);
    var sa = sin(this.angle);
    var cx = this.lensR * (4 - ca) / 3;
    var cy = this.lensR * sa - (cx - this.lensR * ca) / sa * ca;
    
    this.c1x = this.lensX1 - cx;
    this.c2x = this.lensX2 + cx;
    this.c1y = this.lensY - cy;
    this.c2y = this.lensY + cy;
    
    this.getRays();
};

Scene.prototype.rayIntersectionWithLens = function(ray, internal) {
    // Ray as a vector
    var dx = ray.x2 - ray.x1;
    var dy = ray.y2 - ray.y1;
    
    // Circle center
    var cx = internal ? this.lensX1 : this.lensX2;
    var cy = this.lensY;
    
    var d2 = dx * dx + dy * dy;
    var det = (ray.x1 - cx) * (ray.y2 - cy) - 
              (ray.x2 - cx) * (ray.y1 - cy);
    var determinant = this.lensR2 * d2 - det * det;
    
    if (determinant > 0) {
        var determinant = sqrt(determinant);
        var dx2 = dy < 0 ? -dx : dx;
    
        // Intersection point
        var x, y;
        var x1 = (det * dy + dx2 * determinant) / d2;
        var x2 = (det * dy - dx2 * determinant) / d2;
        
        if (internal) {
            if (x1 < x2) {
                x = x1;
                y = (-det * dx + abs(dy) * determinant) / d2;
            } else {
                x = x2;
                y = (-det * dx - abs(dy) * determinant) / d2;
            }
        } else {
            x = x2;
            y = (-det * dx - abs(dy) * determinant) / d2;
        }
        
        // Check whether ray misses lens
        var h = (this.lensBase.y - this.lensTop.y) * 0.5;
        if (abs(y) > h) {
            return [ray];
        }
        
        // Ray hits lens at (ix, iy)
        var ray1 = {
            x1: ray.x1,
            y1: ray.y1,
            x2: cx + x,
            y2: cy + y,
        };
        
        // Refract ray
        var normal = normalise({ x: x, y: y });
    
        // Ray from source to intersection point
        var incidence = normalise({ x: dx, y: dy });
        
        // Calculate refraction
        var c1 = dotProduct(incidence, normal);
        if (!internal) { c1 *= -1; }
        
        var Ri = internal ? this.lensR1 : 1 / this.lensRi;
        Ri = 1 / this.lensRi;
        var c2 = 1 - Ri * Ri * (1 - c1 * c1);

        if (c2 > 0) {
            c2 = Ri * c1 - sqrt(c2);

            // Return refracted ray
            return [ray1, {
                x1: ray1.x2,
                y1: ray1.y2,
                x2: ray1.x2 + 2000 * (Ri * incidence.x + c2 * normal.x),
                y2: ray1.y2 + 2000 * (Ri * incidence.y + c2 * normal.y)
            }];
        } else {
            // Reflection? So return ray up to intersection
            return [ray1];
        }
    } else {
        // Ray misses lens, so return the original ray
        return [ray];
    }
};

Scene.prototype.getRays = function() {
    var h = abs(this.sourceY.y - this.sourceX.y);
    var numRays = 2 * floor(h / 20) + 1;
    
    var y, dy;
    if (numRays > 1) {
        y = this.sourceX.y - h;
        dy = 2 * h / (numRays - 1);
    } else {
        y = this.sourceX.y;
    }

    this.rays = [];
    
    for (var t = 0; t < numRays; t++) {
        // Create initial ray from source
        var rays = this.rayIntersectionWithLens({
            x1: this.sourceX.x,
            y1: y,
            x2: 0, 
            y2: y, 
        });

        if (rays.length > 1) {
            var internalRay = rays.pop();
            var rays2 = this.rayIntersectionWithLens(internalRay, true);
            rays = rays.concat(rays2);
        }

        this.rays = this.rays.concat(rays);
        y += dy;
    }
    
    //println(this.rays.length);
};

Scene.prototype.mousePressed = function() {
    for (var i = 0; i < this.points.length; i++) {
        if (this.points[i].mouseOver()) {
            this.selected = this.points[i];
            break;
        }
    }
};

Scene.prototype.mouseReleased = function() {
    this.selected = false;
};

Scene.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
        this.update();
    }
};
}
/**************************************
 * Creation of objects
***************************************/

var scene = new Scene();

var toolbar; //= new Toolbar(width * 0.01, width * 0.01, toolbarWidth);


/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    
    scene.draw();
    //toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    scene.mousePressed();
    //toolbar.mousePressed();
};

mouseDragged = function() {
    scene.mouseDragged();
    //toolbar.mouseDragged();
};

mouseReleased = function() {
    scene.mouseReleased();
   // toolbar.mouseReleased();
};

mouseOut = function() {
    //toolbar.mouseReleased();
};
