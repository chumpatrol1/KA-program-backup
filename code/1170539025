/***************************************************
 * Adenine base paired to thymine
 * 
 * Red: Oxygen atoms
 * Blue: Nitrogen atoms
 * Dark Grey: Carbon atoms
 * 
 * Base pair hydrogen bonds in orange
 * Need to add double bonds
 * 
 * Coordinates from:
 * http://oca.weizmann.ac.il/oca-bin/send-pdb?id=1bna
 * 
 * Use the mouse or keyboard to rotate the molecule
 ***************************************************/

var atomSize = 6;
var bondThickness = 4;
var scaleValue = 20;
var bondColour = color(64, 61, 64, 160);
var hydrogenBondColour = color(255, 162, 0, 80);
var hydrogenBondThickness = 2;
var backgroundColour = color(250, 250, 255);

var Atom = function(element, x, y, z) {
    this.element = element;
    this.x = x;
    this.y = y;
    this.z = z;
    
    if (element === "H") {
        this.colour = color(180, 180, 180, 220);
        this.size = atomSize * 1.2;
    } else if (element === "C") {
        this.colour = color(64, 61, 64, 220);
        this.size = atomSize * 1.7;
    } else if (element === "N") {
        this.colour = color(68, 75, 219, 220);
        this.size = atomSize * 1.55;
    } else if (element === "O") {
        this.colour = color(250, 15, 15, 220);
        this.size = atomSize * 1.52;
    } else if (element === "P") {
        this.colour = color(237, 107, 7, 220);
        this.size = atomSize * 1.8;
    }
    
    this.draw = function() {
        var fade = 1 - (this.z + 300) / 600;
    //fill(lerpColor(this.colour, backgroundColour, fade));
        fill(this.colour);
        ellipse(this.x, this.y, this.size, this.size);
    };
};

// Coordinates for molecule from http://www.rcsb.org/pdb
var atoms = [
new Atom("O", 1.440, 67.674, 10.147),
    new Atom("C", 0.178, 67.371, 9.545),
    new Atom("C", 0.390, 67.200, 8.054),
    new Atom("O", 1.355, 66.152, 7.837),
    new Atom("C", -0.824, 66.777, 7.247),
    new Atom("O", -0.814, 67.518, 6.036),
    new Atom("C", -0.685, 65.302, 7.011),
    new Atom("C", 0.814, 65.128, 7.001),
    new Atom("N", 1.340, 63.917, 7.611),
    new Atom("C", 0.990, 63.338, 8.795),
    new Atom("N", 1.649, 62.259, 9.061),
    new Atom("C", 2.508, 62.125, 7.951),
    new Atom("C", 3.496, 61.159, 7.609),
    new Atom("N", 3.709, 60.156, 8.444),
    new Atom("N", 4.141, 61.350, 6.444),
    new Atom("C", 3.838, 62.403, 5.682),
    new Atom("N", 2.945, 63.394, 5.855),
    new Atom("C", 2.332, 63.138, 7.051),
    new Atom("P", -1.908, 67.112, 4.930),
    new Atom("O", -2.236, 68.343, 4.176),
    new Atom("O", -2.953, 66.275, 5.562),
    new Atom("O", -1.078, 66.144, 3.953),
    
    new Atom("O", 8.123, 53.063, 1.560),
    new Atom("P", 9.564, 53.711, 1.352),
    new Atom("O", 9.983, 53.353, -0.038),
    new Atom("O", 10.441, 53.419, 2.503),
    new Atom("O", 9.263, 55.281, 1.362),
    new Atom("C", 8.598, 55.903, 0.257),
    new Atom("C", 8.329, 57.333, 0.629),
    new Atom("O", 7.406, 57.383, 1.751),
    new Atom("C", 9.501, 58.158, 1.143),
    new Atom("O", 10.226, 58.659, 0.034),
    new Atom("C", 8.873, 59.241, 1.976),
    new Atom("C", 7.482, 58.712, 2.274),
    new Atom("N", 7.124, 58.580, 3.698),
    new Atom("C", 6.259, 59.542, 4.216),
    new Atom("O", 5.870, 60.404, 3.465),
    new Atom("N", 5.963, 59.365, 5.546),
    new Atom("C", 6.395, 58.401, 6.398),
    new Atom("O", 6.065, 58.339, 7.578),
    new Atom("C", 7.304, 57.418, 5.794),
    new Atom("C", 7.802, 56.345, 6.685),
    new Atom("C", 7.590, 57.592, 4.496)
];

var Bond = function(a, b) {
    this.atom1 = atoms[a];
    this.atom2 = atoms[b];
    
    this.draw = function() {
        var atom1 = this.atom1;
        var atom2 = this.atom2;
                
        var dx = atom1.x - atom2.x;
        var dy = atom1.y - atom2.y;
        var theta = atan2(dx, dy);

        var x1 = atom1.x - 0.5 * atom1.size * sin(theta);
        var y1 = atom1.y - 0.5 * atom1.size * cos(theta);
        var x2 = atom2.x + 0.5 * atom2.size * sin(theta);
        var y2 = atom2.y + 0.5 * atom2.size * cos(theta);
        line(x1, y1, x2, y2);
    };
};

var addGroup = function(bonds, group, n) {
    for (var i=0; i<group.length; i++){
        bonds.push(new Bond (n + group[i][0], n + group[i][1]));
    }
    return bonds;
};

// Nucleoside bonds
var phosphate = [[0,1], [0,2], [0,3]];

var ribose = [[0, 1], [1, 2], [2, 3], [2, 4],
              [4, 5], [4, 6], [6, 7], [7, 3]];

var adenine = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6],
               [5, 7], [7, 8], [8, 9], [9, 10], [10, 1], [10, 4]];
               
var guanine = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [5, 7],
                [7, 8], [8, 9], [8, 10], [11, 4], [10, 11], [11,1]];
               
var cytosine = [[0, 1], [1, 2], [2, 3], [2, 4], [4, 5],
                [5, 6], [5, 7], [7, 8], [8, 1]];

var thymine = [[0, 1], [1, 2], [2, 3], [2, 4], [4, 5],
               [5, 6], [5, 7], [7, 8], [7, 9], [9, 1]];

var createSequence =function(seq) {
    var bonds = [];
    var baseBonds;
    var n = 0;
    
    for (var base=1; base <= 2; base++) {
         // Ribose
        bonds = addGroup(bonds, ribose, n);
        n += 7;
        
        // Base
        if (base === 1) {
            bonds = addGroup(bonds, adenine, n);
            baseBonds = 11;
            
            // Phosphate
            bonds.push(new Bond (n - 2, n + baseBonds));
            n += baseBonds;
            bonds = addGroup(bonds, phosphate, n);
        } else {
            bonds = addGroup(bonds, thymine, n);
            baseBonds = -10;
            n += baseBonds;
            bonds = addGroup(bonds, phosphate, n);
            bonds.push(new Bond (n, n -1));
        }
        n += 8;   
    }

    return bonds;
};
// List of bond joining atoms by index.
var bonds = createSequence("A");
var hydrogenBonds = [new Bond(13, 39), new Bond(14, 37)];

var currentX = false;
var currentY = false;

var moveObjectToCentre = function(atoms) {
    // Scale and shift everything
    var dims = ['x', 'y', 'z'];
    var i;
    
    for (var d = 0; d<3; d++) {
        // Find mean values for each dimension
        var meanValue = 0;
        var dimension = dims[d];
        for (i=0; i<atoms.length; i++) {
            meanValue += atoms[i][dimension];
        }
        meanValue /= atoms.length;
        
        for (i=0; i<atoms.length; i++) {
            atoms[i][dimension] = scaleValue * (atoms[i][dimension] - meanValue);
        }
    }
};

moveObjectToCentre(atoms);

var rotateY3D = function(theta) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, z;

    for (var i = 0; i < atoms.length; i+=1) {
        x = atoms[i].x;
        z = atoms[i].z;
        atoms[i].x = ct*x + st*z;
        atoms[i].z = -st*x + ct*z;
    }
};

var rotateX3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var y, z;
    
    for (var i = 0; i < atoms.length; i+=1) {
        y = atoms[i].y;
        z = atoms[i].z;
        atoms[i].y = ct*y - st*z;
        atoms[i].z = st*y + ct*z;
    }
};

// Return the difference of the z-coordinate
var sortByZ = function(a, b) {
    return a.z - b.z;
};

// Move to centre of screen
translate(200, 200);

var draw = function() {
    var i;
    atoms.sort(sortByZ);
    background(backgroundColour);

    // Draw bonds
    stroke(bondColour);
    strokeWeight(bondThickness);
    for (i = 0; i < bonds.length; i+=1) {
        bonds[i].draw();
    }
    
    // Draw hydrogen bonds
    stroke(hydrogenBondColour);
    strokeWeight(hydrogenBondThickness);
    for (i = 0; i < hydrogenBonds.length; i+=1) {
        hydrogenBonds[i].draw();
    }
    
    // Draw atoms
    noStroke();
    for (i = 0; i < atoms.length; i+=1) {
        atoms[i].draw();
    }

    if (mouseIsPressed) {
        if (currentX !== false) {
            rotateY3D(-(currentX - mouseX)*PI/10);
            rotateX3D((currentY - mouseY)*PI/10);
        }
        currentX = mouseX;
        currentY = mouseY;
    } else {
        currentX = false;
    }  
};

var keyPressed = function() { 
    if (keyCode === LEFT) {
        rotateY3D(-3);
    } else if (keyCode === RIGHT) {
        rotateY3D(3);
    } else if (keyCode === UP) {
        rotateX3D(-3);
    } else if (keyCode === DOWN) {
        rotateX3D(3);
    }
};

// Let go when mouse leaves canvas
var mouseOut = function(){
    mouseIsPressed = false;
};

// Initial rotations
rotateY3D(90);