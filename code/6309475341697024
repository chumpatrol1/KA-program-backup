//Here's the deal. I'm making a good looking tardis, but I can't solely use flat colors. I need someone to make me a good wood pattern. 
//Reference picture: https://www.drupal.org/files/project-images/TARDIS2.png 
//From the reference picture, you can see why I need a good wood texture. 

var textureQuad = function(col, x1, y1, x2, y2, x3, y3, x4, y4) {
    loadPixels();
    var pix = imageData.data;
    
    var r = red(col);
    var g = green(col);
    var b = blue(col);
    
    var minX = Math.min(x1, x2, x3, x4);
    var maxX = Math.max(x1, x2, x3, x4);
    var minY = Math.min(y1, y2, y3, y4);
    var maxY = Math.max(y1, y2, y3, y4);
    
    // Vectors for edge in clockwise direction
    var dx1 = x2 - x1;
    var dy1 = y2 - y1;
    var dx2 = x3 - x2;
    var dy2 = y3 - y2;
    var dx3 = x4 - x3;
    var dy3 = y4 - y3;
    var dx4 = x1 - x4;
    var dy4 = y1 - y4;
    
    var vx = dx1 + dx3;
    var vy = dy1 + dy3;
    
    var x, y, x0, y0, A, B, C, D, u, v, w, n, m, index;
    
    // Shift noise by a random amount so we don't get the same pattern
    var nx = random(10);
    var ny = random(10);
    
    for (x = minX; x <= maxX; x++) {
        x0 = x - x1;
        
        for (y = minY; y <= maxY; y++) {
            y0 = y - y1;
            
            // Check that point is within the edges
            if (dx1 * y0 - dy1 * x0 >= 0 &&
                dx2 * (y - y2) - dy2 * (x - x2) >= 0 &&
                dx3 * (y - y3) - dy3 * (x - x3) >= 0 &&
                dx4 * (y - y4) - dy4 * (x - x4) >= 0) {
                    
                    // Find where point x is in terms of proportions
                    // along horizontal (v) and vertical (u) vectors
                    
                    A = dy4 * vx - dx4 * vy;
                    B = y0 * vx - x0 * vy + dx4 * dy1 - dy4 * dx1;
                    C = x0 * dy1 - y0 * dx1;
                    
                    if (A) {
                        D = B * B - 4 * A * C;  // determinant
                        
                        if (D >= 0) {
                            D = sqrt(D);
                            u = (-B + D) / (2 * A);
                        } else {
                            continue;
                        }
                    } else {
                        u = -C / B;
                    }
                    
                    w = dx1 - u * vx;
                    if (w) {
                        v = (x0 + u * dx4) / w;
                    } else {
                        v = (y0 - u * dy4) / (dy1 - u * vy);
                    }
                    
                    u *= 100;
                    v *= 100;
                        
                    // Shading
                    // Wooden texture based on 
                    // https://www.khanacademy.org/computer-programming/wip/6211859819659264
                    noiseDetail(4, 0.5);
                    n = noise(u * 0.012 + nx, v * 0.002 + ny) * 20;
                    n = (1 - (n - floor(n))) * 0.5;
                    n += noise(u * 0.2, v * 0.2) + 0.5;
                    
                    noiseDetail(1, 1);
                    m = noise(u * 0.9, v * 0.02) * 1.2;
                    n -= m * m * m * m;
                    n = (n * 0.5 + 1.7) * 0.5;
                    
                    index = x + y * width << 2;
                    pix[index++] = n * r;
                    pix[index++] = n * g;
                    pix[index] = n * b;
            }
        }
    }
    
    updatePixels();
    
    noFill();
    stroke(lerpColor(col, color(0), 0.15));
    quad(x1, y1, x2, y2, x3, y3, x4, y4);
};

background(255, 0, 0);
noStroke();
fill(44, 0, 125);
//quad(237,378, 300,349, 161,332, 100,359);
fill(0, 10, 51);
//quad(238,385, 299,356, 299,349, 238,377);
//quad(99,366, 100,359, 238,377, 238,385);

textureQuad(color(5, 29, 92), 106,357, 103,122, 239,122, 239,374);
textureQuad(color(5, 29, 92), 107,112, 236,112, 236,122, 107,122);

/*
fill(9, 9, 112);
//quad(116,101, 116,112, 226,112, 226,101);
fill(1, 9, 51);
quad(226,101, 226,112, 280,112, 280,101);
quad(236,112, 236,122, 285,122, 285,112);
quad(289,353, 290,122, 239,122, 239,375);
quad(281,101, 164,100, 117,101, 225,101);
fill(0, 7, 84);
quad(227,147, 227,122, 112,122, 112,147);

fill(0, 0, 0);
quad(223,143, 223,125, 116,125, 116,143);

noFill();
stroke(143, 143, 143);
arc(187,61,100,53,70,93);
arc(187,68,100,53,70,93);
strokeWeight(2);
stroke(10, 10, 145);
line(183,98,183,82);
line(195,99,195,82);
line(205,99,205,82);
fill(255, 255, 255);
textSize(9);
text("POLICE           BOX",124,137);
textAlign(CENTER);
textSize(4);
text("PUBLIC\nCALL",172,133);	
*/	

	