/******************************************************
 * 
*******************************************************/

frameRate(24);

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var TREE_IMAGE = getImage("cute/TreeTall");
var BUZZ_IMAGE = getImage("pixar/buzz");

var showing = {};
angleMode = "degrees";

// GUI functions
{
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, {name: name});
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}
/*******************************************************
 *      GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 14);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 * GUI Label
********************************************************/
var Label = function(x, y, w, h, name) {
    this.x = x + w / 2;
    this.x1 = x + 8;
    this.x2 = x + w - 8;
    this.y = y + h + 1;
    this.y2 = y + h / 2 + 3;
    this.name = name;
};

Label.prototype.draw = function() {
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y2);
    
    strokeWeight(1);
    stroke(20);
    line(this.x1, this.y, this.x2, this.y);
};
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
    this.labels = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
    this.labels.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addLabel = function(name) {
    var h = 20;
    this.labels.push(new Label(this.x, this.y + this.h, this.w, h, name));
    this.h += h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.addRadioButtons = function(options, trigger, defaultOption) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var radioButtons = [];
    
    var triggerFunction = function() {
        if (!this.marked) {
            this.marked = true;
            
            // Deselected other buttons
            for (var i = 0; i < radioButtons.length; i++) {
                if (radioButtons[i] !== this) {
                    radioButtons[i].marked = false;
                }
            }
        }
        if (trigger) { trigger(this.name); }
    };
    
    for (var i = 0; i < options.length; i++) {
        var button = new RadioButton(x, y, w, 22, options[i], triggerFunction);
        radioButtons.push(button);
        y += 27;
        this.h += 27;
    }
    
    radioButtons[defaultOption || 0].trigger();
    
    this.components = this.components.concat(radioButtons);
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
}

/**************************************
 *     Scene object
 * A collection of elements in focus
***************************************/

// Scene elements
// worldHeight = height of element in pixel when camera 
// at 45 degree angle 
var Element = function(image, x, z, worldHeight, offset) {
    this.x = x;
    this.z = z;
    this.image = image;
    this.worldHeight = height;
    this.height = worldHeight;
    this.width = this.image.width * worldHeight / this.image.height;
    
    // Where the base of the image actually is
    this.offset = this.height * (offset || 0);
    
};

var scene = [
    new Element(TREE_IMAGE, -230, -400, 250, 0.08),
    new Element(TREE_IMAGE, -350, 800, 300, 0.08),
    new Element(TREE_IMAGE, -180, 200, 200, 0.08),
    new Element(TREE_IMAGE, -160, 800, 240, 0.08),
    new Element(TREE_IMAGE, -50, 400, 220, 0.08),
    new Element(TREE_IMAGE, 25, 1200, 200, 0.08),
    new Element(TREE_IMAGE, 110, 1600, 240, 0.08),
    new Element(TREE_IMAGE, 120, 0, 220, 0.08),
    new Element(TREE_IMAGE, 280, 1200, 260, 0.08),
    new Element(TREE_IMAGE, 440, 2000, 250, 0.08),
    new Element(TREE_IMAGE, 300, 400, 200, 0.08),
    new Element(TREE_IMAGE, 520, 1200, 220, 0.08),
    new Element(BUZZ_IMAGE, 0, 200, 100),
];

scene = scene.sort(function(a, b) { return b.z - a.z; });

/**************************************
 *      Camera object
 * Captures image of the scene
***************************************/

var Camera = {
    y: 230,         // Height above ground
    z: 0,           // Distance from scene
    angle: 90,      // Angle for field of view
    maxFrames: 24,  // Number of frames for capture
    
    mode: 'start',
    start: { z: 0, angle: 90 },
    final: { z: 0, angle: 90 },
    
    // Dimensions of screen
    width: 390,
    height: 390,
    image: null,
    
    // Draw the view from the camera
    draw: function(x, y) {
        if (this.mode === 'record') {
            if (this.frames-- === 0) { this.setMode('final'); }
            else {
                var p = 1 - this.frames / this.maxFrames;
                this.z = lerp(this.start.z, this.final.z, p);
                this.angle = lerp(this.start.angle, this.final.angle, p);
                this.captureImage();
            }
        }
        
        image(this.image, x + 5, y + 5, this.width, this.height);
        
        // Frame
        noFill();
        strokeWeight(5);
        stroke(10, 10, 20);
        rect(x + 2, y + 2, this.width + 5, this.height + 5, 5);
        
        // Mode
        fill(10, 10, 40);
        textSize(18);
        textAlign(LEFT, TOP);
        text(this.mode + " image", x + 10, y + 8);
    },
    
    setMode: function(mode) {
        this.mode = mode;
        var data = this[mode];
        for (var d in data) {
            this[d] = data[d];
        }
    },
    
    captureImage: function() {
        if (!this.image) {
            this.image = createGraphics(this.width, this.height, JAVA2D);
        }
        
        var image = this.image;
        var midH = this.height / 2;
        var tanAngle = tan(this.angle / 2);
        
        // Sky
        image.background(160, 185, 240);
        // Grass
        image.fill(120, 190, 55);
        image.noStroke();
        image.rect(0, midH, this.width, midH);
        
        image.pushMatrix();
        image.translate(this.width / 2, midH);
        //image.imageMode(CENTER);
        
    //    image.rectMode(CENTER);
        image.noFill();
        image.stroke(255, 0, 0);
        
        // Draw items in scene
        for (var i = 0; i < scene.length; i++) {
            var item = scene[i];
            
            // Width that can camera can view at given z position
            var fieldWidth = (item.z + this.z) * tanAngle;
            var _scale = 1000 / fieldWidth;
            var imageWidth = item.width * _scale;
            var imageHeight = item.height * _scale;
            var x = item.x * _scale - imageWidth / 2;
            var y = this.height * this.y / fieldWidth - imageHeight + _scale * item.offset;
            
            image.image(item.image, x, y, imageWidth, imageHeight);
            //image.rect(x, y, imageWidth, imageHeight);
        }
        image.popMatrix();
    }
};

/**************************************
 * Creation of objects
***************************************/

var toolbar = new Toolbar(20, 15, 160);
toolbar.add(Slider, {
    name: "Camera height",
    min: 50,
    now: 230,
    max: 400,
    trigger: function() {
        if (this.val !== Camera.y) {
            Camera.y = this.val;
            Camera.captureImage();
        }
    }
});

toolbar.add(Slider, {
    name: "Starting distance",
    min: 0,
    now: 160,
    max: 200,
    trigger: function() {
        var val = this.val * 10;
        if (val !== Camera.start.z) {
            Camera.start.z = val;
            Camera.setMode('start');
            Camera.captureImage();
        }
    }
});
toolbar.add(Slider, {
    name: "Starting angle",
    min: 5,
    now: 90,
    max: 120,
    trigger: function() {
        if (this.val !== Camera.start.angle) {
            Camera.start.angle = this.val;
            Camera.setMode('start');
            Camera.captureImage();
        }
    }
});

toolbar.add(Slider, {
    name: "Final distance",
    min: 0,
    now: 160,
    max: 200,
    trigger: function() {
        var val = this.val * 10;
        if (val !== Camera.final.z) {
            Camera.final.z = val;
            Camera.setMode('final');
            Camera.captureImage();
        }
    }
});
toolbar.add(Slider, {
    name: "Final angle",
    min: 5,
    now: 90,
    max: 120,
    trigger: function() {
        if (this.val !== Camera.final.angle) {
            Camera.final.angle = this.val;
            Camera.setMode('final');
            Camera.captureImage();
        }
    }
});

toolbar.add(Button, {
    name: 'Action',
    filled: true,
    highlightCol: CS_GREEN,
    trigger: function() {
        Camera.mode = 'record';
        Camera.frames = Camera.maxFrames;
    }
});

Camera.setMode('start');
Camera.captureImage();

//  Main loop
draw = function() {
    background(BACKGROUND);
    Camera.draw(200, 0, 400, 400);
    toolbar.draw();
};

//  Event handling
{
mousePressed = function() {
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
};

mouseReleased = function() {
    toolbar.mouseReleased();
};

mouseOut = mouseReleased;
}
