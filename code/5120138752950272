/************************************************************
 * Given a shape defined as asterisks in an array of strings,
 * find the outline of that shape.
 * Draw the outline with curves and an optional wiggle.
************************************************************/

var wiggle1 = 0.08;
var wiggle2 = 0.4;
var wiggle3 = 0.8;

var myShape = [
    "*****.*****.*****.*****.*****...",
    "*...*.*.......*...*.....*...*..",
    "*...*.*.......*...*.....*...*..",
    "*****.****....*...****..*****..",
    "*.....*.......*...*.....***....",
    "*.....*.......*...*.....*.**...",
    "*.....*.......*...*.....*..**...",
    "*.....*****...*...*****.*...*..."
];

var Block = function(x, y) {
    this.x = x;
    this.y = y;
    
    // In order, left, top, right, bottom
    this.neighbours = ["edge", "edge", "edge", "edge"];
};

// Add outline positions of this block starting with position startPosition
Block.prototype.getOutlineCoords = function(outline, startPosition) {
    var offsets = [[0, 1], [0, 0], [1, 0], [1, 1]];
    var position = startPosition;
    
    for (var i = 0; i <= 4; i++) {
        var offset = offsets[position];
        var neighbour = this.neighbours[position];
        
        if (neighbour === "edge") {
            // Create edge
            outline.push([this.x + offset[0], this.y + offset[1]]);
            this.neighbours[position] = "drawn";
            //println("P " + position);
        } else if (neighbour === "drawn") {
            break;
        } else {
            outline.push([this.x + offset[0], this.y + offset[1]]);
            var oldPosition = (position + 3) % 4;
            
            if (neighbour.neighbours[oldPosition] !== "drawn") {
                neighbour.getOutlineCoords(outline, oldPosition);
            }
            break;
        }
        
        position = ++position % 4;
    }
};

Block.prototype.getOutlineCoordsRounded = function(outline, startPosition) {
    // Degree of corner curve
    var d = 0.3;
    var offsets = [[0, 1 - d, 0, d], [d, 0, 1 - d, 0], [1, d, 1, 1 - d], [1 - d, 1, d, 1]];
    var position = startPosition;
    
    //println("Block " + this.n);
    
    for (var i = 0; i < 4; i++) {
        var offset = offsets[position];
        var neighbour = this.neighbours[position];
        
        if (neighbour === "edge") {
            // Create edge
            outline.push([this.x + offset[0], this.y + offset[1]]);
            outline.push([this.x + offset[2], this.y + offset[3]]);
            this.neighbours[position] = "drawn";
            //println("P " + position);
        } else if (neighbour === "drawn") {
            break;
        } else {
            var oldPosition = (position + 3) % 4;
            
            if (neighbour.neighbours[oldPosition] !== "drawn") {
                neighbour.getOutlineCoordsRounded(outline, oldPosition);
            }
            break;
        }
        
        position = ++position % 4;
    }
};

/*******************************************************
 *  Various draw functions
*******************************************************/

var drawCurveOutline = function(outline, startX, startY, d, wiggle) {
    beginShape();
    curveVertex(startX + outline[0][0] * d, startY + outline[0][1] * d);
    for (var i = 0; i < outline.length; i++) {
        var coord = outline[i];
        var x = coord[0] + random(-1, 1) * wiggle;
        var y = coord[1] + random(-1, 1) * wiggle;
        curveVertex(startX + x * d, startY + y * d);
    }
    curveVertex(startX + outline[0][0] * d, startY + outline[0][1] * d);
    endShape(CLOSE);
};

var drawOutline = function(outline, startX, startY, d) {
    beginShape();
    for (var i = 0; i < outline.length; i++) {
        var coord = outline[i];
        vertex(startX + coord[0] * d, startY + coord[1] * d);
    }
    endShape(CLOSE);
};

/*******************************************************
 *  Main algorithm
*******************************************************/

var findOutline = function(world, rounded) {
    var height = myShape.length;
    var width = myShape[0].length;
    
    // Create a 2D array full of 0s with the same dimensions as the world
    var grid = [];
    for (var y = 0; y < height; y++) {
        grid.push(new Array(width));
    }
    
    // Create Block objects and add to array as well as a 2D array for each look up.
    var blocks = [];
    
    for (var y = 0; y < world.length; y++) {
        var row = world[y];
        for (var x = 0; x < row.length; x++) {
            if (row[x] === "*") {
                var newBlock = new Block(x, y);
                grid[y][x] = newBlock;
                blocks.push(newBlock);
            }
        }
    }
    
    // Find neighbours of Blocks
    for (var i = 0; i < blocks.length; i++) {
        var block = blocks[i];
        var x = block.x;
        var y = block.y;
        
        // Check for neighbours to the right
        var block2 = grid[y][x + 1];
        if (block2) {
            block.neighbours[2] = block2;
            block2.neighbours[0] = block;
        }
        
        // Check for neighbours below
        block2 = (y + 1 < height) && grid[y + 1][x];
        if (block2) {
            block.neighbours[3] = block2;
            block2.neighbours[1] = block;
        }
    }
    
    // Find coordinates of outlines
    var outlines = [];
    var func = rounded ? "getOutlineCoordsRounded" : "getOutlineCoords";
    
    // Loop through block finding those with edges not yet added
    for (var i = 0; i < blocks.length; i++) {
        var startBlock = blocks[i];
        if (startBlock.neighbours[0] === "edge") {
            var outline = [];
            startBlock[func](outline, 0);
            outlines.push(outline);
        }
    }
    
    return outlines;
};

var outlines = findOutline(myShape, true);

frameRate(10);
noFill();

var bezierVertexWiggle = function(points, wiggle) {

    for (var i = 0; i < points.length; i++) {
        points[i] = points[i] + random(-1, 1) * wiggle;
    }

    bezierVertex(points[0], points[1], points[2], points[3], points[4], points[5]);
};

var drawCircle = function(x, y, r, wiggle) {
    var d = r * 0.5;
    
    stroke(255, 0, 0);
    beginShape();
    vertex(x, y - r);
    bezierVertexWiggle([x + d, y - r, x + r, y - d, x + r, y], wiggle);
    bezierVertexWiggle([x + r, y + d, x + d, y + r, x, y + r], wiggle);
    bezierVertexWiggle([x - d, y + r, x - r, y + d, x - r, y], wiggle);
    bezierVertexWiggle([x - r, y - d, x - d, y - r, x, y - r], wiggle);
    endShape();
};

var draw = function() {
    background(255);
    
    for (var i = 0; i < outlines.length; i++) {
        strokeWeight(2);
        stroke(20, 40, 100);
        drawCurveOutline(outlines[i], 20, 80, 12, wiggle1);
        
        strokeWeight(1);
        stroke(100);
        drawCurveOutline(outlines[i], 20, 220, 12, wiggle2);
    }
    
    drawCircle(200, 350, 10, wiggle3);
};
