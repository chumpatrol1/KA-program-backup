/************************************************
 * Demonstrate the path of a ray from an object,
 * through a lens at the origin to a image.
 * The object and the focal point of the lens
 * can be dragged.
 * 
 * TODO:
 *  Make x-constraints depend on width
 *  Allow point on Buzz to move
 *  Warning when rays don't converge?
*************************************************/

var BACKGROUND = color(250, 250, 250);
var GRIDGREY = color(230, 240, 230);
var PINK = color(255, 0, 175);
var BLUE = color(64, 95, 237);
var GREY = color(100, 100, 100);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

var RAY_COLOR = BLUE;

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var showing = {
    Grid: true,
    'Medial ray': true,
    'Parallel ray': true,
    'Lower ray': false,
    Image: true,
    Measures: true,
    Numbers: false,
};

// Approximate an arc with a bezier curve
var bezierArc = function(x, y, r, angle) {
    var ca = cos(angle);
    var sa = sin(angle);
    
    // Control points
    var cx = r * (4 - ca) / 3;
    var cy = r * sa - (cx - r * ca) / sa * ca;

    // Start and end points
    var x1 = x + r * ca;
    var y1 = y + r * sa;
    var y2 = y - r * sa;
    var x2 = x + cx;

    bezier(x1, y1, x2, y + cy, x2, y - cy, x1, y2);
    
    x2 = x1 * 2 - x - cx;
    bezier(x1, y1, x2, y + cy, x2, y - cy, x1, y2);
};

var getCroppedImage = function(URL, x, y, w, h) {
    var canvas = createGraphics(w, h, JAVA2D);
    canvas.background(0, 0, 0, 0);
    canvas.image(getImage(URL), -x, -y);
    return canvas;
};

/************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
*************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/************************************************
 *  GUI Button
*************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = color(230, 230, 230, 200);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(20);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}
/************************************************
 * GUI Slider
*************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = 12;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};

var ColorSlider = function(x, y, w, h, params) {
    Slider.call(this, x, y, w, h, params);
    this.saturation = params.saturation || 200;
    this.brightness = params.brightness || 180;
    this.setColor();
};
ColorSlider.prototype = Object.create(Slider.prototype);

ColorSlider.prototype.setColor = function() {
    colorMode(HSB);
    this.color = color(this.val, this.saturation, this.brightness);
    colorMode(RGB);
    this.R = red(this.color);
    this.G = green(this.color);
    this.B = blue(this.color);
};

ColorSlider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(this.color);
    strokeWeight(4);
    stroke(this.stroke);
    line(this.x, this.y, this.x2, this.y);
    stroke(250);
    strokeWeight(1);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
};

ColorSlider.prototype.trigger = function() {
    this.setColor();
};

}
/************************************************
 * GUI Label
*************************************************/
var Label = function(x, y, w, h, name) {
    this.x = x + w / 2;
    this.x1 = x + 8;
    this.x2 = x + w - 8;
    this.y = y + h - 2;
    this.y2 = y + h / 2;
    this.name = name;
};

Label.prototype.draw = function() {
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y2);
    
    strokeWeight(1);
    stroke(20);
    line(this.x1, this.y, this.x2, this.y);
};
/************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for
 * adding components like buttons and sliders.
*************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 5;
    this.components = [];
    this.labels = [];
};

Toolbar.prototype.draw = function() {
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
    this.labels.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 3;
};

Toolbar.prototype.addLabel = function(name) {
    var h = 20;
    this.labels.push(new Label(this.x, this.y + this.h, this.w, h, name));
    this.h += h + 8;
};

Toolbar.prototype.addRadioButtons = function(options, trigger, defaultOption) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var radioButtons = [];
    
    var triggerFunction = function() {
        if (!this.marked) {
            this.marked = true;
            
            // Deselected other buttons
            for (var i = 0; i < radioButtons.length; i++) {
                if (radioButtons[i] !== this) {
                    radioButtons[i].marked = false;
                }
            }
        }
        if (trigger) { trigger(this.name); }
    };
    
    for (var i = 0; i < options.length; i++) {
        var button = new RadioButton(x, y, w, 22, options[i], triggerFunction);
        radioButtons.push(button);
        y += 27;
        this.h += 27;
    }
    
    radioButtons[defaultOption || 0].trigger();
    
    this.components = this.components.concat(radioButtons);
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
/************************************************
 *      DraggablePoint
 *  A point that can be dragged
*************************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.r = 6;
    this.color = color || ORANGE;
    this.animation = 0;
    this.dependents = [];
};

DraggablePoint.prototype.draw = function() {
    if (this.selected || (!this.selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
        cursor(MOVE);
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = this.r * 2 + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

DraggablePoint.prototype.constrainX = function(x) {
    // Empty for overwriting
    return x;
};

DraggablePoint.prototype.constrainY = function(y) {
    // Empty for overwriting
    return y;
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r + 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    var x = this.constrainX(this.x + dx);
    var y = this.constrainY(this.y + dy);
    
    dx = this.x - x;
    dy = this.y - y;
    
    this.x = x;
    this.y = y;
    
    for (var i = 0; i < this.dependents.length; i++) {
        this.dependents[i].move(dx, dy);
    }
};
}
/************************************************
 *      Grid object
 *  A Cartesian grid and with methods to
 * convert between pixels and grid coordinates.
*************************************************/
{
var Grid = function(x, y, tickSize) {
    this.origin = { x: x, y: y };
    this.tickSize = tickSize;
    
    this.minX = this.origin.x % this.tickSize;
    this.minY = this.origin.y % this.tickSize;
    this.snapSize = tickSize * 0.5;
    
    this.objects = [];
    this.selected = false;
    
    this.objectImage = getImage("pixar/buzz");
    this.objectImage = getCroppedImage('insideout/shot1_layer3blur0', 55, 25, 160, 280);
    this.init();
};

Grid.prototype.init = function() {
    this.lens = {
        x: this.origin.x,
        y: this.origin.y,
        w: 80,
        h: 12 * this.tickSize
    };
    
    // Point where the lens focuses
    this.focus = new DraggablePoint(
        this.gridToPixelX(-4),
        this.origin.y
    );

    this.focus.constrainX = function(x) {
        return constrain(x,
            this.gridToPixelX(-17),
            this.gridToPixelX(-3));
    }.bind(this);
    
    this.focus.constrainY = function(y) {
        return this.origin.y;
    }.bind(this);
    
    // Point where object is located
    this.obj = new DraggablePoint(
        this.gridToPixelX(8),
        this.origin.y
    );
    
    // Set size of object
    this.obj.h = this.lens.h * 0.5;
    this.obj.w = this.obj.h * this.objectImage.width / this.objectImage.height;
    
    this.obj.constrainX = function(x) {
        return constrain(x,
            this.gridToPixelX(4),
            this.gridToPixelX(16));
    }.bind(this);
    
    this.obj.constrainY = function(y) {
        return this.origin.y;
    }.bind(this);
    
    // Set point on object
    this.obj2 = new DraggablePoint(
        this.obj.x,
        this.origin.y - this.obj.h
    );
    
    this.obj2.constrainX = function(x) {
        return constrain(x,
            this.obj.x - this.obj.w * 0.3,
            this.obj.x + this.obj.w * 0.3);
    }.bind(this);
    
    this.obj2.constrainX = function(x) {
        return this.obj.x;
    }.bind(this);
    
    this.obj2.constrainY = function(y) {
        return constrain(y,
            this.origin.y - this.obj.h,
            this.origin.y);
    }.bind(this);
    
    this.obj.dependents.push(this.obj2);
    
    // Image of the object
    this.img = { x: 0, y: 0 };
    
    //this.ray = new Ray(this.source, this.lens);
    //this.ray.update(this.imagePlane.x);
    
    this.objects = [
        this.obj2,
        this.obj,
        this.focus
    ];
    
    this.update();
};

Grid.prototype.draw = function() {
    background(BACKGROUND);
    
    this.drawGrid();
    this.drawLens();
    if (showing.Measures) {
        this.drawArrows();
    }
    
    if (this.converges) {
        this.drawImage();
    }
    this.drawObject();
    
    this.drawRays();
    
    for (var i = 0; i < this.objects.length; i++) {
        this.objects[i].draw();
    }
    
    // Labels
    fill(20);
    textFont(serifFont, 16);
    
    textAlign(LEFT, BASELINE);
    //text("(12, 6)", this.obj2.x + 4, this.obj2.y - 4);
    textAlign(LEFT, TOP);
    //text("(x1, y1)", this.img.x + 4, this.img.y - 2);
};

Grid.prototype.getCoordinate = function(p) {
    var x = round(this.pixelToGridX(p.x) * 100) / 100;
    var y = round(this.pixelToGridY(p.y) * 100) / 100;
    return "(" + x + ", " + y + ")";
};

Grid.prototype.getCoordinateLabel = function(n) {
    return "(x" + n + ", y" + n + ")";
};

Grid.prototype.drawGrid = function() {
    if (showing.Grid) {
        // Grid lines
        stroke(GRIDGREY);
        strokeWeight(1);
        
        for (var x = this.minX; x < width; x += this.tickSize) {
            line(x, 0, x, height);
        }
        
        for (var y = this.minY; y < height; y += this.tickSize) {
            line(0, y, width, y);
        }
    }
    
    // Axes
    stroke(128);
    strokeWeight(1);
    line(this.origin.x, 0, this.origin.x, height);
    line(0, this.origin.y, width, this.origin.y);
};

Grid.prototype.drawLens = function() {
    strokeWeight(1);
    stroke(160, 205, 230);
    fill(160, 205, 230, 80);
    
    //var w = this.lens.h * 40 / (this.lens.x - this.focus.x);
    
    //ellipse(this.lens.x, this.lens.y, w, this.lens.h);
    
    // Center lens circle on focal point
    
    var cx = this.lens.x - 4 * (this.lens.x - this.focus.x);
    var cy = this.lens.y;
    var lx = this.lens.x;
    var ly = this.lens.y - this.lens.h * 0.5;
    
    var r = dist(cx, cy, lx, ly);
    var angle = atan2(ly - cy, lx - cx);
    
    bezierArc(cx, this.lens.y, r, angle);
};

Grid.prototype.drawArrows = function() {
    // Line to focal point
    this.drawArrow(
        this.focus,
        this.origin,
        this.gridToPixelY(6),
        'f'
    );
    
    // Line to object
    this.drawArrow(
        this.origin,
        this.obj,
        this.gridToPixelY(-9),
        'o', false, true
    );
    
    // Line to image
    if (showing.Image && this.converges) {
        this.drawArrow(
            this.img,
            this.origin,
            this.gridToPixelY(-9),
            'i', this.img.y + 2
        );
    }
};

Grid.prototype.drawArrow = function(p1, p2, y, name, y2, noNumber) {
    strokeWeight(1);
    stroke(20);
    var x1 = p1.x + 1;
    var x2 = p2.x - 1;
    
    line(x1, y, x2, y);
    line(x1 + 1, y, x1 + 7, y - 3);
    line(x1 + 1, y + 1, x1 + 7, y + 4);
    line(x2 - 1, y, x2 - 7, y - 3);
    line(x2 - 1, y + 1, x2 - 7, y + 4);
    
    y2 = y2 || this.origin.y;
    stroke(160);
    if (p1.x === this.origin.x) {
        line(p2.x, y, p2.x, y2);
    } else {
        line(p1.x, y, p1.x, y2);
    }
    
    fill(20);
    textAlign(CENTER, BASELINE);
    textFont(serifFont, 16);
    
    var txt = name;
    if (showing.Numbers && !noNumber) {
        txt += " = " + round(100 * (p2.x - p1.x) / this.tickSize) / 100;
    }
    
    var x = max(5 + textWidth(txt) / 2, (x1 + x2) / 2);
    text(txt, x, y - 4);
};

Grid.prototype.drawObject = function() {
    var x = this.obj.x - this.obj.w / 2;
    var y = this.obj.y - this.obj.h;
    image(this.objectImage, x, y, this.obj.w, this.obj.h);
};

Grid.prototype.drawImage = function() {
    if (showing.Image) {
        pushMatrix();
        translate(this.img.x, this.img.y);
        scale(-this.img.scale, -this.img.scale);
        image(this.objectImage,
              -this.obj.w / 2, 0,
              this.obj.w, this.obj.h);
        popMatrix();
    }
};

Grid.prototype.drawRays = function() {
    strokeWeight(2);
    stroke(RAY_COLOR);
    
    // Top of lens
    var d = 10;
    var y1 = this.obj2.y;
    var y2 = y1 + (this.obj.y - this.obj2.y) * d;
    var dx = (this.obj2.x - this.obj.x);
    
    if (showing['Medial ray']) {
        line(this.obj2.x, y1,
             this.obj2.x - (this.obj.d + dx) * d, y2);
    }
    
    if (showing['Parallel ray']) {
        line(this.obj2.x, y1, this.lens.x, y1);
        line(this.lens.x, y1,
             this.lens.x - this.focus.d * d, y2);
    }
    
    // Bottom of lens
    if (showing['Lower ray']) {
        var y3 = this.obj.y + this.obj.h;

        line(this.obj.x, y1, this.lens.x, y3);
        var d2 = (y3 - (this.lens.y + (this.lens.y - this.obj2.y) * this.img.scale)) * d;
        
        if (this.img.y > 0) {
            line(this.lens.x, y3,
                 this.lens.x - this.img.d * d,
                 y3 - d2);
        } else {
            line(this.lens.x, y3,
                 this.lens.x + this.img.d * d,
                 y3 + d2);
        }
    }

};

Grid.prototype.update = function() {
    this.obj.d = this.obj.x - this.lens.x;
    var oi = 1 / this.obj.d;
    
    this.focus.d = this.lens.x - this.focus.x;
    var fi = 1 / this.focus.d;
    
    if (fi !== oi) {
        this.img.d = 1 / (fi - oi);
        this.img.x = this.lens.x - this.img.d;
        this.img.scale = this.img.d / this.obj.d;
        this.img.h = this.obj.h * this.img.scale;
        this.img.y = this.lens.y + this.img.h;
    }

    this.converges = this.focus.d < this.obj.d;
};

Grid.prototype.snapTo = function(n, origin) {
    origin = origin || 0;
    n = origin - n;
    n = round(n / this.snapSize) * this.snapSize;
    return origin - n;
};

Grid.prototype.pixelToGridX = function(x) {
    return (x - this.origin.x) / this.tickSize;
};

Grid.prototype.pixelToGridY = function(y) {
    return (this.origin.y - y) / this.tickSize;
};

Grid.prototype.gridToPixelX = function(x) {
    return x * this.tickSize + this.origin.x;
};

Grid.prototype.gridToPixelY = function(y) {
    return this.origin.y - y * this.tickSize;
};

Grid.prototype.gridToPixel = function(x, y) {
    return {
        x: this.gridToPixelX(x),
        y: this.gridToPixelY(y)
    };
};

Grid.prototype.mousePressed = function() {
    for (var i = 0; i < this.objects.length; i++) {
        var selectable = this.objects[i];
        if (selectable.mouseOver()) {
            this.selected = selectable;
            this.selected.selected = true;
            this.dragX = selectable.x - mouseX;
            this.dragY = selectable.y - mouseY;
            break;
        }
    }
};

Grid.prototype.mouseReleased = function() {
    this.selected.selected = false;
    this.selected = false;
};

Grid.prototype.mouseDragged = function() {
    if (this.selected) {
        var x = this.snapTo(mouseX + this.dragX, this.origin.x);
        var y = this.snapTo(mouseY + this.dragY, this.origin.y);
        
        this.selected.move(
            x - this.selected.x,
            y - this.selected.y
        );
        
        this.update();
    }
};

}
/**************************************
 *  Create objects
***************************************/

var grid = new Grid(width / 2, height / 2, 20);

var toolbar = new Toolbar(5, 5, 125);
toolbar.addOptions(showing);

/*********************************************
 *      Main loop
**********************************************/

draw = function() {
    cursor("default");
    grid.draw();
    toolbar.draw();
};

/*********************************************
 *      Event handling
**********************************************/
{
mousePressed = function() {
    grid.mousePressed();
    toolbar.mousePressed();
};

mouseReleased = function() {
    grid.mouseReleased();
    toolbar.mouseReleased();
};

mouseDragged = function() {
    grid.mouseDragged();
    toolbar.mouseDragged();
};

mouseOut = mouseReleased;
}
