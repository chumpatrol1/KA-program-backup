  /*********************************************************
 * The red dot represents your position on the Earth.
 * It's on the equator and assumes the Earth's axis is 
 * perpendicular to its orbit with the sun and moon.
 * 
 * The top of the screen shows what you see as you look
 * into the sky.
 * 
 * I'm assuming the camera is looking down on the Earth
 * and tracking with the earth's rotation about the sun.
**********************************************************/
 
var speed = 0.8;
var moonSpeed = speed * 0.1;
var earthSpeed = speed * 2.8;
var running = true;
var selected = false;

var earth = {
    x: 270,
    y: 250,
    r: 32,
    angle: 0,
    col1: color(40, 150, 255, 255),
    col2: color(40, 150, 255, 0)
};

var moon = {
    angle: 0,
    dist: 80,
    x: earth.x + this.dist * cos(this.angle),
    y: earth.y + this.dist * sin(this.angle),
    r: 14,
    col1: color(180, 180, 180)
};

var drawMoonFlag = false;

var nightColour = color(4, 4, 10);
var dayColour = color(90, 190, 255);
var moonColour = color(230, 230, 230, 255);
var moonColourT = color(230, 230, 230, 0);

var skyY = 100;
var pauseX = width - 24;
var pauseY = height - 20;
var pauseR = 27;
var personX, personY;
var personR = 8;

// Shade sphere
var drawCresent = function(cx, cy, r, theta, col, colT) {
    var r2 = r*r;
    var s = 90 /r;
    
    for (var y = -r; y <= r; y++) {
        var d = sqrt(r2 - y*y);
        var rd = round(d);
        var light1 = cos(s * y);
        var w = 90 / d;
        
        for (var x = -rd-1; x <= rd+1; x++) {
            var p = light1 * cos(theta + (x / d) * 90);
            if (p >= 0 && p <= 1) {
                if (x < -rd || x > rd) {
                    p *= d + 0.5 - rd;
                } 
                var c = lerpColor(colT, col, p);
                stroke(c);
                point(cx + r + x + 1, cy + r + y + 1);   
            }
        }
    }
};

var drawBody = function(body) {
    noStroke();
    fill(body.col1);
    ellipse(body.x, body.y, body.r * 2, body.r * 2);
    
    noStroke();
    fill(0, 0, 0, 200);
    arc(body.x, body.y, body.r * 2 + 2, body.r * 2 + 2, -89, 90);
};

var drawEarth = function() {
    var person = personR;
    drawBody(earth);
    
    // Person
    personX = earth.x + (earth.r - 1) * cos(earth.angle);
    personY = earth.y - (earth.r - 1) * sin(earth.angle);
    
    if (selected === earth || dist(mouseX, mouseY, personX, personY) <= personR) {
        person += 4;
        strokeWeight(2);
    } else {
        strokeWeight(1);
    }
    
    fill(255, 0, 0);
    stroke(250);
    ellipse(personX, personY, person, person);
};

var drawMoon = function() {
    moon.x = earth.x + round(moon.dist * cos(moon.angle));
    moon.y = earth.y - round(moon.dist * sin(moon.angle));
    drawBody(moon);

    // Highlight   
    if (selected === moon || dist(mouseX, mouseY, moon.x, moon.y) <= moon.r) {
        strokeWeight(3);
        stroke(240);
        noFill();
        ellipse(moon.x, moon.y, moon.r * 2, moon.r * 2);
    }
};

var drawSun = function() {
    noStroke();
    fill(255, 204, 0);
    ellipse(-208, earth.y, 500, 500);
};

var getSphereImage = function(r, theta, col, colT) {
    var img = createGraphics(r*2+2, r*2+2, JAVA2D);
    img.beginDraw();
    img.background(0, 0, 0, 0);
    
    var r2 = r*r;
    var s = 90 /r;
    
    for (var y = -r; y <= r; y++) {
        var d = sqrt(r2 - y*y);
        var rd = round(d);
        var light1 = cos(s * y);
        var w = 90 / d;
        
        for (var x = -rd-1; x <= rd+1; x++) {
            var p = light1 * cos(theta + (x / d) * 90);
            if (p >= 0 && p <= 1) {
                if (x < -rd || x > rd) {
                    p *= d + 0.5 - rd;
                } 
                var c = lerpColor(colT, col, p);
                img.stroke(c);
                img.point(r+x+1, r+y+1);   
            }
        }
    }
    
    drawMoonFlag = false;
    return img;
};

var getMoonType = function() {
    var moonName;
    if (moon.angle < 20 || moon.angle > 340) {
        moonName = "Full moon";
    } else if (moon.angle > 160 && moon.angle < 200) {
        moonName = "New" + " moon";
    } else if (moon.angle > 70 && moon.angle < 110) {
        moonName = "Last quarter";
    } else if (moon.angle > 250 && moon.angle < 290) {
        moonName = "First quarter";
    } else {
        if (moon.angle >=20 && moon.angle <= 160) {
            moonName = "Waning";
        } else {
            moonName = "Waxing";
        }
        if (moon.angle > 90 && moon.angle < 270) {
            moonName += " crescent";
        } else {
            moonName += " gibbous";
        }
    }
    return moonName;
};

var drawSky = function() {
    strokeWeight(1);
    stroke(250);
    var skyColour;
    
    if (earth.angle > 90 && earth.angle < 270) {
        var light = sin(earth.angle - 90);
        skyColour = lerpColor(nightColour, dayColour, light);
    } else {
        skyColour = nightColour;
    }
    fill(skyColour);
    
    // Sky
    rect(-1, -1, 402, skyY);
    fill(255);
    textAlign(LEFT, CENTER);
    text("Day " + round(moon.angle * 28 / 360), 5, 12);
    text(floor(earth.angle / 15) + ":00", 5, 34);
    textAlign(CENTER, CENTER);
    text(getMoonType(), 200, 12);
    
    // Sun position
    var sunAngle = (earth.angle + 270) % 360;
    var sunInSkyX = sunAngle * 440/180 - 20;
    var sunInSkyY = 80 - 40 * sin(sunAngle);
    noStroke();
    fill(255, 204, 0);
    ellipse(sunInSkyX, sunInSkyY, 40, 40);
    
    // Moon position
    var moonInSkyAngle = (450 + moon.angle - earth.angle) % 360;
    var moonInSkyX = 420 - moonInSkyAngle * 440/180;
    var moonInSkyY = 80 - 40 * sin(moonInSkyAngle);
    
    fill(lerpColor(moonColour, skyColour, 0.9));
    ellipse(moonInSkyX, moonInSkyY, 40, 40);
    drawCresent(moonInSkyX - 21, moonInSkyY - 21 , 20, moon.angle, moonColour, moonColourT);
    //image(moonImage, moonInSkyX-21, moonInSkyY-21);
};

/*
moonImage = getSphereImage(20, moonAngle, moonColour, moonColourT);
moonImageSmall = getSphereImage(14, 70, moonColour, moonColourT);
earthImage = getSphereImage(earthR, 70, earthColour, earthColourT);
*/

var drawBackground = function() {
    background(10);
    
    fill(240);
    textSize(14);
    textAlign(LEFT, BASELINE);
    text("Not to scale", 10, height - 5);
    
    textAlign(RIGHT, TOP);
    text("Try dragging the moon or red point", width - 5, skyY + 2);
    
    fill(0);
    noStroke();
    rect(earth.x, earth.y - earth.r, width - earth.x, earth.r * 2);
    rect(moon.x, moon.y - moon.r, width - moon.x, moon.r * 2);
};

var drawPlayButton = function(x, y) {
    // Play / Pause
    var c = (dist(mouseX, mouseY, x, y) <= pauseR/2 + 4) ? 250: 160;
    
    noFill();
    stroke(c);
    strokeWeight(2);
    ellipse(x, y, pauseR, pauseR);
    
    noStroke();
    fill(c);
    if (running) {
        rect(x - 5, y - 6, 3, 12, 5);
        rect(x + 1, y - 6, 3, 12, 5);
    } else {
        triangle(x - 4, y - 6, x - 4, y + 6, x + 8, y);
    }
};

var draw = function() {
    drawBackground();
    drawSun();
    drawEarth();
    drawMoon();
    drawSky();
    
    // Update
    if (running) {
        moon.angle = (moon.angle + moonSpeed) % 360;
        earth.angle = (earth.angle + earthSpeed) % 360;
        if (earth.angle > 360) {
            earth.angle -= 360;
            drawMoonFlag = true;
        } else if (drawMoonFlag && abs(moon.angle - earth.angle) > 180) {
            /*moonImage = getSphereImage(20, moonAngle, moonColour, moonColourT);*/
        }
    }
    
    drawPlayButton(pauseX, pauseY);
};

var mouseClicked = function() {
    if (dist(mouseX, mouseY, pauseX, pauseY) <= pauseR/2 + 4) {
        running = !running;
    }
};

var mousePressed = function() {
    if (dist(mouseX, mouseY, moon.x, moon.y) <= moon.r) {
        selected = moon;
        running = false;
    } else if (dist(mouseX, mouseY, personX, personY) <= personR) {
        selected = earth;
        running = false;
    }
};

var mouseReleased = function() {
    selected = false;
};

var mouseDragged = function() {
    if (selected) {
        var angle = atan2(earth.y - mouseY, mouseX - earth.x);
        if (angle < 0) {
            angle += 360;
        }
        selected.angle = angle;
    }
};