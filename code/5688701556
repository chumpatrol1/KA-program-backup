
var BACKGROUND = (0);

var showParticles = true;

// Particle properties
var numParticles = 20;
var waterSize = 18;
var waterSize2 = waterSize * 2;
var waterSizeS = sq(waterSize2);
var initialSpeed = 0.4;

// Physical variables to play with
var gravity = 0.02; // Force due to gravity
var elasticity = 0.9; // Energy lost on collision

// Variable for controlling drawing the surface
var thresholdR = waterSize + 2;
var thresholdRa = thresholdR + 1.2;
var thresholdR2 = ceil(thresholdR * 2.7);
var thresold = 1 / (thresholdR * thresholdR);
var thresolda = 1 / (thresholdRa * thresholdRa);
var thresholdd = 1 / (thresold - thresolda);
var selected = false;

rectMode(CENTER);

var callForEach = function(arr, func) {
    for (var i = 0; i < arr.length; i++) {
        arr[i][func]();
    }
};

/*******************************************************
 *      Particle object
********************************************************/
// Particles have a position, speed, colour and masss
var Particle = function(x, y) {
    // Position
    this.x = x;
    this.y = y;
    
    // Velocity
    var speed = initialSpeed * random() / waterSize;
    var angle = 360 * random();
    this.dx = speed * cos(angle);
    this.dy = speed * sin(angle);
};

Particle.prototype.collide = function(that) {
    
    var dx = this.x - that.x;
    if (dx > waterSize2) { return; }
    
    var dy = this.y - that.y;
    if (dy > waterSize2) { return; }
    
    var d = dx * dx + dy * dy;
    
    if (d < waterSizeS) {
        // Particles collide
        var collisionDist = sqrt(d + 0.1);
        var collisionDistI = 1 / sqrt(d + 0.1);
        
        // Find unit vector in direction of collision
        var collisionVi = dx * collisionDistI;
        var collisionVj = dy * collisionDistI;
        
        // Find velocity of particle projected on to collision vector
        var collisionV1 = (this.dx * dx + this.dy * dy) * collisionDistI;
        var collisionV2 = (that.dx * dx + that.dy * dy) * collisionDistI;
        
        // Find velocity of particle perpendicular to collision vector
        var perpV1 = (this.dy * dx - this.dx * dy) * collisionDistI;
        var perpV2 = (that.dy * dx - that.dx * dy) * collisionDistI;
        
        // Find movement in direction of collision
        var v1p = collisionV2 * elasticity;
        var v2p = collisionV1 * elasticity;
        
        // Update velocities
        this.dx = v1p * collisionVi - perpV1 * collisionVj;
        this.dy = v1p * collisionVj + perpV1 * collisionVi;
        that.dx = v2p * collisionVi - perpV2 * collisionVj;
        that.dy = v2p * collisionVj + perpV2 * collisionVi;
        
        // Move to avoid overlap
        var overlap = (waterSize2 - collisionDist + 0.5) * 0.5;
        this.x += collisionVi * overlap;
        this.y += collisionVj * overlap;
        that.x -= collisionVi * overlap;
        that.y -= collisionVj * overlap;
    }
};

Particle.prototype.mouseOver = function() {
    return (mouseX - this.x) * (mouseX - this.x) +
           (mouseY - this.y) * (mouseY - this.y) <= waterSize2;
};

/*******************************************************
 *      Making particles
********************************************************/
var particles = [];

for (var i = 0; i < numParticles; i++) {
    particles.push(new Particle(random(20, width - 20), random(20, height - 20)));
}

/*************************************************
 *      Calculation
**************************************************/

var drawMetaBalls = function() {
    // First draw a circle where every particle is
    
    stroke(64, 150, 250);
    strokeWeight(thresholdR * 2);
    
    var i, x, y, pi;
    for (var i = numParticles; i--;) {
        point(particles[i].x, particles[i].y);
    }
    
    loadPixels();
    
    var p = imageData.data;
    if (!p) { return; }
    
    var px1, px2, py1, py2; 
    
    // Only test points that are within a square of the particles.
    for (i = 0; i < numParticles; i++) {
        pi = particles[i];
        px1 = round(pi.x) - thresholdR2;
        px2 = round(pi.x) + thresholdR2;
        py1 = round(pi.y) - thresholdR2;
        py2 = round(pi.y) + thresholdR2;
        
        if (px1 < 0) { px1 = 0; }
        else if (px2 >= width) { px2 = width - 1; }
        if (py1 < 0) { py1 = 0; }
        else if (py2 >= height) { py2 = height - 1; }
        
        for (x = px1; x <= px2; x++) {
            for (y = py1; y <= py2; y++) {
                p[(x + y * width << 2) + 3] = 254;
            }
        }
    }

    var t, a, d, dx, dy, ps, pn;
    var index = -4;
    
    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            
            index += 4;
            
            // If the point is already coloured
            // or point not with a rect around a particle, move on
            if (p[index] === 64 || p[index + 3] !== 254) { continue; }
            
            t = 0;
            for (i = 0; i < numParticles; i++) {
                pi = particles[i];
                
                dx = x - pi.x;
                dy = y - pi.y;
                
                t += 1 / (1 + dx * dx + dy * dy);
                if (t > thresold) { break; }
            }
            
            if (t > thresolda) {
                // Anti-alias
                a = thresold - t;
                if (a > 0) {
                    a = 1 - a * thresholdd;
                } else {
                    a = 1;
                }
                
                p[index] = 64 * a;
                p[index + 1] = 150 * a;
                p[index + 2] = 250 * a;
            }
        }
    }

    updatePixels();
};

var update = function(n) {
    var p, i, j, dy, dx;
    
    for (var t = n; t--;) {
        // Calculate acceleration
        for (i = numParticles; i--;) {
            p = particles[i];
            p.dy += gravity;
            
            for (j = i + 1; j < numParticles; j++) {
                p.collide(particles[j]);
            }
        }
        
        for (i = numParticles; i--;) {
            p = particles[i];
            if (p !== selected) {
                p.x += p.dx;
                p.y += p.dy;
            }
            
            if (p.y > height - waterSize) {
                p.y = 2 * (height - waterSize) - p.y;
                p.dy *= -0.9;
            }
            
            if (p.x < waterSize) {
                p.x = 2 * waterSize - p.x;
                p.dx *= -1;
            } else if (p.x > width - waterSize) {
                p.x = 2 * (width - waterSize) - p.x;
                p.dx *= -1;
            }
        }
    }
};

/*************************************************
 *      Main loop
**************************************************/

draw = function() {
    background(BACKGROUND);
    var m1 = millis();
    update(20);
    var m2 = millis();
    drawMetaBalls();
    
    fill(255);
    text(m2 - m1, 5, 32);
    text(millis() - m2, 5, 44);
    
    // Draw actual particles
    if (showParticles) {
        noFill();
        stroke(255);
        strokeWeight(2);
        for (var i = numParticles; i--;) {
            ellipse(particles[i].x, particles[i].y, waterSize2, waterSize2);
            rect(particles[i].x, particles[i].y, thresholdR2 * 2, thresholdR2 * 2);
        }
    }
};

/*********************************************
 *      Event handling
**********************************************/
{
mousePressed = function() {
    for (var i = particles.length; i--;) {
        if (particles[i].mouseOver()) {
            selected = particles[i];
            break;
        }
    }
};

mouseReleased = function() {
    selected = false;
};

mouseDragged = function() {
    if (selected) {
        selected.x += mouseX - pmouseX;
        selected.y += mouseY - pmouseY;
    }
};

mouseOut = mouseReleased;
}
