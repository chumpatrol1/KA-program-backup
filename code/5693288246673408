/************************************************
 * Find if and where two lines intersect.
 * Click and drag the end points to move the lines.
*************************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var PURPLE = color(157, 56, 189);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var CONTROL_POINT_SIZE = 12;

var dragX, dragY;
var points, point1, point2, point3, point4, point5;

var selected = false;

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

var crossProduct2D = function(v1, v2) {
    return v1.x * v2.y - v2.x * v1.y;
};

var subtractVectors = function(v1, v2) {
    return { x: v1.x - v2.x, y: v1.y - v2.y };
};

/****************************************
 *  Draggable point object
****************************************/

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    var oldX = this.x;
    var oldY = this.y;
    this.x = mouseX + dragX;
    this.y = mouseY + dragY;
    
    // Check points don't overlap
    if (point1.x === point2.x && point1.y === point2.y) {
        this.x = oldX;
        this.y = oldY;
    }
};

draggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

/****************************************
 *  Draggable line object
****************************************/

var draggableLine = function(p1, p2, color) {
    this.p1 = p1;
    this.p2 = p2;
    this.color = color || BLUE;
};

draggableLine.prototype.draw = function() {
    stroke(this.color);
    strokeWeight(3);
    line(this.p1.x, this.p1.y, this.p2.x, this.p2.y);
    
    this.p1.draw();
    this.p2.draw();
};

/****************************************
 *      Create objects
****************************************/

point1 = new draggablePoint(width * 0.4, height * 0.1, ORANGE, "A");
point2 = new draggablePoint(width * 0.25, height * 0.9, ORANGE, "B");
point3 = new draggablePoint(width * 0.8, height * 0.8, ORANGE, "C");
point4 = new draggablePoint(width * 0.9, height * 0.4, ORANGE, "D");

var line1 = new draggableLine(point1, point2, GREEN);
var line2 = new draggableLine(point3, point4, GREEN);

var selectables = [point1, point2, point3, point4];

/****************************************
 *      Intersection test
****************************************/

// http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect
var lineLineIntersection = function(line1, line2) {
    var r = subtractVectors(line1.p2, line1.p1);
    var s = subtractVectors(line2.p2, line2.p1);
    
    var rs = crossProduct2D(r, s);
    var qp = subtractVectors(line2.p1, line1.p1);
    var qpr = crossProduct2D(qp, r);
    
    if (rs !== 0) {
        var t = crossProduct2D(qp, s) / rs;
        var u = qpr / rs;
        if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {
            return {
                x: line1.p1.x + t * r.x,
                y: line1.p1.y + t * r.y,
            };
        }
    } else if (qpr === 0) {
        // Aligned
        if (qpr <= dotProduct(r, r)) {
            return {
                x: line2.p1.x,
                y: line1.p1.y
            };
        }
        if (crossProduct2D(qp, s) <= dotProduct(s, s)) {
            return {
                x: line2.p1.x,
                y: line1.p1.y
            };
        }
    }
};

/****************************************
 *      Main loop
****************************************/

var draw = function() {
    background(BACKGROUND);
    
    var hit = lineLineIntersection(line1, line2);
    
    if (hit) {
        line1.color = BLUE;
        line2.color = BLUE;
    } else {
        line1.color = GREEN;
        line2.color = GREEN;
    }
    
    line1.draw();
    line2.draw();
    
    if (hit) {
        noStroke();
        fill(PINK);
        ellipse(hit.x, hit.y, 10, 10);
    }
};

/****************************************
 *      Event handling
****************************************/

mousePressed = function() {
    for (var i = 0; i < selectables.length; i++) {
        if (selectables[i].mouseover()) {
            selected = selectables[i];
            dragX = selected.x - mouseX;
            dragY = selected.y - mouseY;
        }
    }
};

mouseReleased = function() {
    selected = false;
};

mouseOut = function() {
    mouseReleased();
};

mouseDragged = function() {
    if (selected) {
        selected.move();
    }
};