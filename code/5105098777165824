var nodeSize = 0;

// Move to centre of screen
translate(200.5, 200.5);

var BLACK = color(0, 0, 0);
var faceColor = color(100, 120, 255);

var backgroundLight = 0.1;
var light = new PVector(0.5, -0.2, -2);
light.normalize();

// Create a cuboid centred on (x, y, z),
// with width, w, height, h and depth, d
var createCuboid = function(x, y, z, w, h, d) {
    var nodes = [
        new PVector(x, y, z),
        new PVector(x, y, z + d),
        new PVector(x, y + h, z),
        new PVector(x, y + h, z + d),
        new PVector(x + w, y, z),
        new PVector(x + w, y, z + d),
        new PVector(x + w, y + h, z),
        new PVector(x + w, y + h, z + d)
    ];

    var faces= [[0, 1, 3, 2], [1, 0, 4, 5],
                [0, 2, 6, 4], [3, 1, 5, 7],
                [5, 4, 6, 7], [2, 3, 7, 6]];

    return { 'nodes': nodes, 'faces': faces };
};

// For each face, create a new node
// in the center of the face
// and halfway along each edge.
// Create new faces using these nodes.
var splitFaces = function(obj) {
    var nodes = obj.nodes.slice();
    var faces = [];
    var newEdges = { };
    
    for (var f = 0; f < obj.faces.length; f++) {
        var face = obj.faces[f];
        var centerNode = new PVector(0, 0, 0);
        var faceNodeCount = face.length;
        var edgesNodes = [];
        
        // Loop through nodes around this face
        for (var i = 0; i < faceNodeCount; i++) {
            // Get index of this node and the next (which form an edge)
            var n1 = face[i];
            var n2 = face[(i + 1) % faceNodeCount];
            
            // Get position of node1
            var node1 = obj.nodes[n1];
            
            // Add value of this node to center node
            centerNode.add(PVector.div(node1, faceNodeCount));

            // Create an identifer for this edge
            var minN = min(n1, n2);
            var maxN = max(n1, n2);
            var edgeID = minN + "," + maxN;
            
            // Check whether this edge has been split already
            if (!newEdges[edgeID]) {
                // Positions for the other node in the edge
                var node2 = obj.nodes[n2];
                
                // Create a new node which is the average
                // of the two nodes in the edge
                var edgeNode = PVector.mult(node1, 0.5);
                edgeNode.add(PVector.mult(node2, 0.5));
                
                // Add the new node
                nodes.push(edgeNode);
                
                // Record the index of the new node
                newEdges[edgeID] = nodes.length - 1;
            }
            
            // Record the index of the nodes added on this edge
            edgesNodes.push(newEdges[edgeID]);
        }
        
        // Add node to center of each face
        nodes.push(centerNode);
        var centerNode = nodes.length - 1;
        
        // Create faces using the center and egde nodes
        faces.push([face[0], edgesNodes[3], centerNode, edgesNodes[0]]);
        faces.push([face[1], edgesNodes[0], centerNode, edgesNodes[1]]);
        faces.push([face[2], edgesNodes[1], centerNode, edgesNodes[2]]);
        faces.push([face[3], edgesNodes[2], centerNode, edgesNodes[3]]);
    }
    
    return { 'nodes': nodes, 'faces': faces };
};

var averageNodes = function(obj) {
    // Create an array for each node
    var edgesOfNode = [];
    for (var n = 0; n < obj.nodes.length; n++) {
        edgesOfNode.push([]);
    }
    
    // For each face, go through the nodes,
    // adding the neighbouring nodes
    for (var f = 0; f < obj.faces.length; f++) {
        var face = obj.faces[f];
        var faceNodeCount = face.length;
        
        for (var n = 0; n < faceNodeCount; n++) {
            var n1 = face[n];
            var n2 = face[(n + 1) % faceNodeCount];
            
            if (edgesOfNode[n1].indexOf(n2) === -1) {
                edgesOfNode[n1].push(n2);
            }
            
            if (edgesOfNode[n2].indexOf(n1) === -1) {
                edgesOfNode[n2].push(n1);
            }
        }
    }

    // Each node is averaged with itself and its neighbours
    var newNodes = [];
    
    for (var n = 0; n < edgesOfNode.length; n++) {
        var nodeCount = edgesOfNode[n].length + 1;
        var newNode = PVector.div(obj.nodes[n], nodeCount);
        
        for (var i = 0; i < edgesOfNode[n].length; i++) {
            var n2 = edgesOfNode[n][i];
            newNode.add(PVector.div(obj.nodes[n2], nodeCount));
        }
        
        newNodes.push(newNode);
    }
    
    return { 'nodes': newNodes, 'faces': obj.faces };
};

var subdivideCube = function(cube) {
    cube = splitFaces(cube);
    cube = averageNodes(cube);
    return cube;
};

var cube = createCuboid(-100, -100, -100, 200, 200, 200);
cube = subdivideCube(cube);
cube = subdivideCube(cube);

var objects = [cube];

/**************************************************
 * 
 *      Linear algebra
 * 
**************************************************/

var normalOfPlane = function(face, nodes) {
    var n1 = nodes[face[0]];
    var n2 = nodes[face[1]];
    var n3 = nodes[face[2]];
    
    var v1 = PVector.sub(n1, n2);
    var v2 = PVector.sub(n1, n3);
    
    var v3 = new PVector(
        v1.y * v2.z - v1.z * v2.y,
        v1.z * v2.x - v1.x * v2.z,
        v1.x * v2.y - v1.y * v2.x
    );
    
    v3.normalize();
    v2.cross(v1);
    v2.normalize();
    
    return v3;
};

/**************************************************
 * 
 *      Main loop
 * 
**************************************************/

// Declare variables
var o, n, f, obj, nodes, face;

draw = function() {
    background(0);

    for (o = 0; o < objects.length; o++) {
        obj = objects[o];
        nodes = obj.nodes;
        
        if ('faces' in obj) {
            for (f = 0; f < obj.faces.length; f++) {
                face = obj.faces[f];
                var fnorm = normalOfPlane(face, nodes);
                
                if (fnorm.z < 0) {
                    var lv = PVector.get(light);
                    
                    //fnorm.normalize();
                    var l = max(0, lv.dot(fnorm));

                    l = backgroundLight + (1 - backgroundLight) * l;
                    var c = lerpColor(BLACK, faceColor, l);
                    
                    fill(c);
                    stroke(10);
                    
                    if (face.length === 3) {
                        triangle(nodes[face[0]].x, nodes[face[0]].y,
                                 nodes[face[1]].x, nodes[face[1]].y,
                                 nodes[face[2]].x, nodes[face[2]].y);
                    } else {
                        quad(nodes[face[0]].x, nodes[face[0]].y,
                             nodes[face[1]].x, nodes[face[1]].y,
                             nodes[face[2]].x, nodes[face[2]].y,
                             nodes[face[3]].x, nodes[face[3]].y);
                    }
                    
                }
                
            }
        }
        
        if (nodeSize && 'nodes' in obj) {
            fill(255, 0, 0);
            noStroke();
            
            for (n = 0; n < nodes.length; n++) {
                ellipse(nodes[n].x, nodes[n].y, nodeSize, nodeSize);
            }  
        }
    }
};

/**************************************************
 * 
 *      Transformations
 * 
**************************************************/

var rotateY3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;

    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i].x;
        y = nodes[i].y;
        z = nodes[i].z;
        nodes[i] = new PVector(ct*x + st*z, y, -st*x + ct*z);
    }
};

var rotateX3D = function(theta, nodes){
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;
    
    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i].x;
        y = nodes[i].y;
        z = nodes[i].z;
        nodes[i] = new PVector(x, ct*y - st*z, st*y + ct*z);
    }
};

/**************************************************
 * 
 *      Event handling
 * 
**************************************************/

mouseDragged = function() {
    var dx = -0.5 * (mouseX - pmouseX);
    var dy = 0.5 * (mouseY - pmouseY);
    
    for (o = 0; o < objects.length; o++) {
        nodes = objects[o].nodes;
        if (dx) { rotateY3D(dx, nodes); }
        if (dy) { rotateX3D(dy, nodes); }
    }
};