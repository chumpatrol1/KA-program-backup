/*************************************************************
*  Modelling the atoms of an ionic solid like a salt crystal.
* 
* Increase the temperature and watch the effect on mean
* kinetic energy.
* If you put the temperature to 6, watch how the energy 
* stays constant for some time as the solid melts, before
* increasing significantly.
* 
* Kinetic energy = histogram of energies for all atoms
**********************************************************/

/******************************************************
 * Physical and chemical constants
*******************************************************/

// Force due to gravity
var GRAVITY = 0.008;

// Energy lost when a bond forms
var BONDING_ENERGY = 0.998;

// Optimum distance between bonded atoms
var BOND_LENGTH = 25;

// Force of interaction between atoms
var IONIC_BOND_STRENGTH = 0.1;

// Maximum extent of an interaction between atoms
var BOND_LIMIT = 32;

// How close to the optimum length a bond must be for it to be drawn.
var BOND_TOLERANCE = 6;

/******************************************************
 * Simulation variables
*******************************************************/

// Speed of atoms in the walls
var wallTemp = 1.1;
var numAtoms = 105;
var atomSize = 3;
var meanEnergy = [];

// Atom object with a position, velocity and charge
var Atom = function(x, y, r, charge) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.charge = charge;
    
    this.dx = wallTemp * (random() - 0.5);
    this.dy = wallTemp * (random() - 0.5);
    
    // Move atom based on its velocity
    this.move = function() {
        this.x += this.dx;
        this.y += this.dy;
    };
    
    // Calculate the kinetic energy of an atom
    this.temp = function() {
        return sqrt(this.dx * this.dx + this.dy * this.dy);
    };
    
    // Bounce off walls
    this.bounce = function() {
        var temp = sqrt((this.dx*this.dx)+(this.dy*this.dy));
        var dtemp = (temp + wallTemp) / (2 * temp) ;
        if (this.x < this.r) {
            this.x = this.r;
            this.dx *= -dtemp;
        }
        if (this.x > 400 - this.r){
            this.x = 400 - this.r;
            this.dx *= -dtemp;
        }
        if (this.y < this.r) {
            this.y = this.r;
            this.dy *= -dtemp;
        }
        if (this.y > 400 - this.r){
            this.y = 400 - this.r;
            this.dy *= -dtemp;
        }
    };
    
    this.interact = function(that) {
        var dx = this.x - that.x;
        var dy = this.y - that.y;
        var charge_product = this.charge * that.charge;
        
        var dist = sqrt(dx * dx + dy * dy);
        if (dist < BOND_LIMIT) {
            var force;
            if (charge_product === 1) {
                // Repel
                force = IONIC_BOND_STRENGTH * (BOND_LIMIT - dist);
            } else {
                // Form an ionic bond
                force = IONIC_BOND_STRENGTH * (BOND_LENGTH - dist); 
            }

            var theta = atan2(dy, dx);
            this.dx = BONDING_ENERGY * (this.dx + force * cos(theta));
            that.dx = BONDING_ENERGY * (that.dx - force * cos(theta));
            this.dy = BONDING_ENERGY * (this.dy + force * sin(theta));
            that.dy = BONDING_ENERGY * (that.dy - force * sin(theta));
        }
        
        // Draw bond
        stroke(180, 180, 200, 250);
        if (abs(dist - BOND_LENGTH) < BOND_TOLERANCE) {
            if (charge_product !== 1) {
                line(this.x, this.y, that.x, that.y);
            }
        }
    };
};

// Initialise atoms
var atoms = [];
var y = height - atomSize - 2;
var x = atomSize + 2;
for (var a = 0; a < numAtoms; a++) {
    var charge = (a % 2) * 2 -1;
    atoms.push(new Atom(x + random(), y + random(), atomSize, charge));
    x += BOND_LENGTH + 2;
    if (x > width - atomSize) {
        x = atomSize + 2;
        y -= BOND_LENGTH;
    }
}

var UIBoxX = 8;
var UIBoxY = 8;
var UIBoxW = 140;
var UIBoxH = 40;
var UIBoxX2 = 160;
var UIBoxW2 = 225;
var UIBoxH2 = 60;
var ballX = UIBoxX + 14 + 7 * round(wallTemp*2);
var ballY = UIBoxY + 26;
var myFont = createFont("Times", 15);

// Draw a information display box
var drawBox = function(x, y, w, h, heading) {
    noStroke();
    fill(50, 50, 50, 50);
    rect(x+2, y+2, w, h, 8);
    fill(255, 255, 255, 230);
    rect(x, y, w, h, 8);
    textFont(myFont, 15);
    fill(10, 10, 10);
    text(heading, x+10, y+16);
};

// Box with slider to control temperature of containter
var drawExternalTemp = function() {
    var heading = "Temperature: " + round(2 * wallTemp - 0.2) / 2;
    drawBox(UIBoxX, UIBoxY, UIBoxW, UIBoxH, heading);
    
    // Draw slider
    fill(50, 50, 50, 220);
    rect(UIBoxX+10, UIBoxY+25, UIBoxW-20, 6, 6);
    fill(160, 160, 180);
    stroke(10, 10, 10);
    ellipse(ballX, UIBoxY+28, 13, 13);
};

var drawInternalTemp = function() {
    var energy = round(10 * meanEnergy[meanEnergy.length - 1]) / 10;
    var title = "Mean Kinetic Energy: " + energy;
    drawBox(UIBoxX2, UIBoxY, UIBoxW2, UIBoxH2, title);
    
    var axisY = UIBoxY + UIBoxH2 - 8;
    var x = UIBoxX2 + 16;
    var y = axisY - 5 * meanEnergy[0];
    
    stroke(255, 0, 0);
    var newX, newY;
    for (var e = 1; e < meanEnergy.length; e++) {
        newX = x + 1;
        newY = axisY - 5 * meanEnergy[e];
        line(x, y, newX, newY);
        x = newX;
        y = newY;
    }
    
    // Axes
    stroke(10,10,10);
    line(UIBoxX2 + 16, axisY,
         UIBoxX2 + 216, axisY);
    line(UIBoxX2 + 16, axisY,
         UIBoxX2 + 16, axisY - 25);
};

var i, j, atom;
var running = true;

var draw = function() {
    // Clear everything
    background(242, 243, 250);

    var n = atoms.length;

    // Run simulation
    if (running) {
        // Calculate interaction
        for (i = 0; i < n; i++) {
            atoms[i].dy += GRAVITY;
            for (j = i + 1; j < n; j++) {
                atoms[i].interact(atoms[j]);
            }
        }

        var totalEnergy = 0;
        for (i = 0; i < atoms.length; i++) {
            atom = atoms[i];
            atom.move();
            atom.bounce();
            totalEnergy += atom.temp();
        }
        meanEnergy.push(totalEnergy / numAtoms);
        if (meanEnergy.length >= 200) {
            meanEnergy.shift();
        }
    }
    
    // Draw atoms
    noStroke();
    for (i = 0; i < atoms.length; i++) {
        atom = atoms[i];
        if (atom.charge === 1) {
            fill(245, 54, 54);
        } else if (atom.charge === -1) {
            fill(10, 89, 18);
        } else {
            fill(47, 54, 181);
        }
        ellipse(atom.x, atom.y, atom.r*2, atom.r*2);
    }
    
    // Info boxes
    drawExternalTemp();
    drawInternalTemp();
    
    // Handle mouse events
    if (mouseIsPressed) {
        // Drag ball for the temperature UI
        if (mouseX > UIBoxX+14 && mouseX < UIBoxX + UIBoxW - 14 &&
            mouseY > UIBoxY+14 && mouseY < UIBoxY + UIBoxH) {
            var x = round((mouseX - UIBoxX - 14) / 7) / 2;
            wallTemp = x + 0.1;
            ballX = x * 14 + UIBoxX + 12;
        }
    }
};

var keyReleased = function() {
    println(keyCode);
    
    if (keyCode === 32) {
        // Spacebar toogles pausing 
        if(running) { running = false; }
        else { running = true;  }
    } else if (keyCode === 67) {
        // 'c' freezes all the atoms;
        for (i = 0; i < numAtoms; i++) {
            atoms[i].dx = 0;
            atoms[i].dy = 0;
        }
    }
};

// Let go when mouse leaves canvas
var mouseOut = function() { mouseIsPressed = false; };