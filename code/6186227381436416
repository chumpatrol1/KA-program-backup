// Based on http://iamtrask.github.io/2015/07/12/basic-python-network/

/**
X = np.array([ [0,0,1],[0,1,1],[1,0,1],[1,1,1] ])
y = np.array([[0,1,1,0]]).T
syn0 = 2*np.random.random((3,4)) - 1
syn1 = 2*np.random.random((4,1)) - 1
for j in xrange(60000):
    l1 = 1/(1+np.exp(-(np.dot(X,syn0))))
    l2 = 1/(1+np.exp(-(np.dot(l1,syn1))))
    l2_delta = (y - l2)*(l2*(1-l2))
    l1_delta = l2_delta.dot(syn1.T) * (l1 * (1-l1))
    syn1 += l1.T.dot(l2_delta)
    syn0 += X.T.dot(l1_delta)
**/

/*********************************************
 * Training data
**********************************************/

// 4 x 3 matrix of input values
var input = [
    [0,0,1],
    [1,1,1],
    [1,0,1],
    [0,1,1]
];

// 4 x 1 column vector of output values
var output = [
    [0],
    [1],
    [1],
    [0]
];

/*********************************************
 * Matrix functions
**********************************************/

var drawMatrix = function(m, x, y, d, name) {
    if (!m) { return; }
    
    d = d || 20;
    var h = m.length * 20;
    var w = m[0].length * d;

    fill(20);
    textAlign(CENTER, CENTER);
    for (var i = 0; i < m.length; i++) {
        var row = m[i];
        
        for (var j = 0; j < row.length; j++) {
            var n = "" + round(row[j] * 10000) / 10000;
            var w = max(w, textWidth(n) + 5);
            text(n, x + (j + 0.5) * d, y + (i + 0.5) * 20);
        }
    }
    
    x -= (w - m[0].length * d) / 2;
    
    if (name) {
        text(name, x + w / 2, y - 10);
    }
    
    stroke(20);
    line(x, y, x, y + h);
    line(x, y, x + 5, y);
    line(x, y + h, x + 5, y + h);
    line(x + w, y, x + w, y + h);
    line(x + w, y, x + w - 5, y);
    line(x + w, y + h, x + w - 5, y + h);
};

var multiplyMatrices = function(m1, m2) {
    var newMatrix = [];
    
    var n1 = m1.length;
    var n2 = m1[0].length;
    var n3 = m2.length;
    var n4 = m2[0].length;
    
    if (n2 !== n3) {
        println("Dimensions don't match");
        return;
    }

    for (var i = 0; i < n1; i++) {
        var row = [];
        
        for (var j = 0; j < n4; j++) {
            var v = 0;
            
            for (var k = 0; k < n3; k++) {
                v += m1[i][k] * m2[k][j];
            }
            
            row.push(v);
        }
        
        newMatrix.push(row);
    }
    
    return newMatrix;
};

// Return a new matrix mapping each value of a given matrix with function f
var matrixMap = function(m, f) {
    var newMatrix = [];
    
    var n1 = m.length;
    var n2 = m[0].length;
    
    for (var i = 0; i < n1; i++) {
        var row = [];
        
        for (var j = 0; j < n2; j++) {
            row.push(f(m[i][j]));
        }
        newMatrix.push(row);
    }
    
    return newMatrix;
};

// Combine the elements of two equal-sized arrays with an operation
// Add add, subtract or multiply matrices
var elementwiseOperation = function(op, m1, m2) {
    var f;
    
    if (op === '+') {
        f = function(a, b) { return a + b; };
    } else if (op === '-') {
        f = function(a, b) { return a - b; };
    } else if (op === '*') {
        f = function(a, b) { return a * b; };
    } else {
        println("Operation " + op + " is not defined");
        return;
    }
    
    var newMatrix = [];
    
    var n1 = m1.length;
    var n2 = m1[0].length;
    var n3 = m2.length;
    var n4 = m2[0].length;
    
    if (n1 !== n3 || n2 !== n4) {
        println("Dimensions don't match");
        return;
    }
    
    for (var i = 0; i < n1; i++) {
        var row = [];
        
        for (var j = 0; j < n2; j++) {
            row.push(f(m1[i][j], m2[i][j]));
        }
        newMatrix.push(row);
    }
    
    return newMatrix;
};

var transpose = function(m) {
    var newMatrix = [];
    
    var n1 = m.length;
    var n2 = m[0].length;
    
    for (var i = 0; i < n2; i++) {
        var row = [];
        
        for (var j = 0; j < n1; j++) {
            row.push(m[j][i]);
        }
        newMatrix.push(row);
    }
    
    return newMatrix;
};

/*********************************************
 * Network functions
**********************************************/

// Sigmoid function
var sigmoid = function(x){
    return 1 / (1 + exp(-x));
};

var sigmoidSlope = function(x){
    return x * (1 - x);
};

// Return an n * 1 vector of random numbers between -1 and 1
var initialiseWeights = function(n) {
    var arr = [];
    for (var i = 0; i < n; i++) {
        arr.push([random(-1, 1)]);
    }
    return arr;
};

/************************************************
 * Set-up
*************************************************/

var weights = initialiseWeights(input[0].length);
var layer1 = input;
var layer1T = transpose(input);

/************************************************
 *  Run network backpropagation
*************************************************/

var updateNetwork = function(weights, n) {
    for (var i = 0; i < n; i++) {
        var layer2 = multiplyMatrices(layer1, weights);
        var layer2_nonlin = matrixMap(layer2, sigmoid);
        var layer2_error = elementwiseOperation("-", output, layer2_nonlin);
        var layer2_delta = elementwiseOperation("*", matrixMap(layer2_nonlin, sigmoidSlope), layer2_error);
        var update = multiplyMatrices(layer1T, layer2_delta);
        weights = elementwiseOperation("+", weights, update);
    }
    return weights;
};

var draw = function() {
    background(255);
    
    var layer2 = multiplyMatrices(layer1, weights);
    var layer2_nonlin = matrixMap(layer2, sigmoid);
    var layer2_error = elementwiseOperation("-", output, layer2_nonlin);
    var layer2_delta = elementwiseOperation("*", matrixMap(layer2_nonlin, sigmoidSlope), layer2_error);
    var update = multiplyMatrices(layer1T, layer2_delta);
    weights = elementwiseOperation("+", weights, update);
    
    // Update multiple times per draw loop
    weights = updateNetwork(weights, 40);
    
    drawMatrix(input, 20, 40, 20, "Input");
    drawMatrix(output, 100, 40, 20, "Output");
    drawMatrix(weights, 160, 50, 50, "Weights");
    drawMatrix(layer2_nonlin, 250, 40, 50, "Test output");
    drawMatrix(layer2_error, 325, 40, 50, "Error");
    
    /*
    drawMatrix(layer2, 20, 180, 50, "Test output");
    drawMatrix(layer2_nonlin, 100, 180, 50, "Nonlin output");
    drawMatrix(layer2_error, 179, 180, 50, "Error");
    */
};