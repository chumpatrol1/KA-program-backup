/********************************************************************
 * Work in progress
 * 
 * To Do
 *  - Mouseover
 *  - Show maths
 *  - Mouseover sleepers to show size as proportion of field of view.
 *  - Draggable ball
 *  - Ability to change person's view and position
********************************************************************/

// Colours
var BACKGROUND = color(0, 0, 0);
var SKY = color(120, 160, 240);
var WHITE = color(240, 240, 240);
var GRASS_FILL = color(70, 140, 40);
var GRASS_STROKE = color(0, 120, 20);
var RAIL_FILL = color(80, 80, 80);
var RAIL_STROKE = color(40, 40, 40);

var railN = 7;
var railDX = 60;
var railWidth = 40;
var railR = 9;

var viewAngle = 50;
var eyeHeight = 25;
var tanAngle = tan(viewAngle / 2);
// Closest point to person that they can see
var viewGround = eyeHeight / tanAngle;

var drawBox = function(x, y, w, h) {
    strokeWeight(1);
    stroke(220);
    fill(SKY);
    rect(x, y, w, h);
    
    /*
    stroke(180);
    line(x + w, y, x + w, y + h);
    line(x, y, x + w, y);
    stroke(100);
    line(x, y, x, y + h);
    line(x, y + h, x + w, y + h);
    */
};

var drawSideView = function(x, y, w, h) {
    drawBox(x, y, w, h);
    
    // Ground
    var gy =  y + h - 9;
    noStroke();
    fill(GRASS_FILL);
    rect(x + 1, gy + 1, w - 2, 8);
    
    strokeWeight(1);
    stroke(GRASS_STROKE);
    line(x + 1, gy, x + w - 2, gy);
    
    // Person
    var px = x + 20;
    var py = gy - eyeHeight / 2;
    var r = 8;
    stroke(WHITE);
    strokeWeight(2);
    noFill();
    line(px, py, px - 4, gy - 1);
    line(px, py, px + 4, gy - 1);
    line(px, py, px, gy - eyeHeight + r/2);
    line(px, py - eyeHeight / 2 + r/2 + 2, px + 4, py - 1);
    ellipse (px, gy - eyeHeight, r, r);
    
    // Rails
    strokeWeight(1);
    fill(RAIL_FILL);
    stroke(RAIL_STROKE);
    var railX = px + railDX;
    while (railX < width - 10) {
        ellipse(railX, y + h - 10 - railR/2, railR, railR);
        railX += railDX;
    }
    
    // View
    var d2 = (h - 10 - eyeHeight) / tanAngle;
    strokeWeight(1);
    stroke(200, 200, 200, 200);
    line(px + r/2, gy - eyeHeight, px + r/2 + viewGround, gy);
    line(px + r/2, gy - eyeHeight, px + r/2 + d2, y + 2);
    
    stroke(200, 200, 200, 120);
    for (var ly = px + r/2; ly <= y + w; ly += 8) {
        line(ly, gy - eyeHeight, ly + 3, gy - eyeHeight);
    }
    
    
    // Label
    textSize(14);
    textAlign(LEFT, TOP);
    fill(0);
    text("Side view", x + 4, y + 2);
};

var drawTopView = function(x, y, w, h) {
    drawBox(x, y, w, h);
    
    // Ground
    noStroke();
    fill(GRASS_FILL);
    rect(x + 1, y + 1, w-1, h-1);
    
    // Person
    var px = x + 20;
    var py = y + h / 2;
    var r = 8;
    strokeWeight(2);
    stroke(WHITE);
    noFill();
    ellipse (px, py, r, r);
    
    // Rails
    strokeWeight(1);
    fill(RAIL_FILL);
    stroke(RAIL_STROKE);
    var railX = px + railDX;
    while (railX < width - 10) {
        rect(railX - railR/2, y + (h - railWidth) /2, railR, railWidth);
        railX += railDX;
    }
    
    // View
    var d = (h - 4) / (2 * tan(viewAngle / 2));
    noStroke();
    fill(200, 200, 200, 50);
    triangle(px + r/2, py, px + r/2 + d, y + 2, px + r/2 + d, y + h - 2);
    rect(px + r/2 + d, y + 2, w - d - r/2 - 21, h - 3);
    
    strokeWeight(1);
    stroke(200, 200, 200, 200);
    line(px + r/2, py, px + r/2 + d, y + 2);
    line(px + r/2, py, px + r/2 + d, y + h - 2);
    
    stroke(200, 200, 200, 120);
    for (var ly = px + r/2; ly <= y + w; ly += 8) {
        line(ly, py, ly + 3, py);
    }
    
    // Label
    textSize(14);
    textAlign(LEFT, TOP);
    fill(0);
    text("Top view", x + 4, y + 2);
};

var drawPersonsView = function(x, y, w, h) {
    drawBox(x, y, w, h);
    
    // Ground
    noStroke();
    fill(GRASS_FILL);
    rect(x + 1, y + h/2, w - 1, h/2);
    stroke(GRASS_STROKE);
    line(x + 1, y + h/2, x + w, y + h/2);
    
    // Rails
    strokeWeight(1);
    fill(RAIL_FILL);
    stroke(RAIL_STROKE);
    
    var mx = x + w/2;
    var my = y + h/2;
    for (var i = railN - 1; i >= 0; i--) {
        var distance = (i + 1) * railDX;
        var field = distance * 2 * tanAngle;
        var rw = min(w - 2, w * railWidth / field);
        var ry = h * eyeHeight / field;
        var rh = railR * eyeHeight / field;
        rect(mx - rw / 2, my + ry, rw, rh);
    }
    // Label
    textSize(14);
    textAlign(LEFT, TOP);
    fill(0);
    text("Person's view", x + 4, y + 2);
};

var drawMaths = function(x, y) {
    var dy = 16;
    textSize(12);
    textAlign(LEFT, TOP);
    fill(WHITE);
    text("Field of view: " + viewAngle + "°", x, y);
    text("Slope of view: tan(½ angle) = " + round(tanAngle*1000) / 1000, x, y + dy);
    text("Distance to object: " + railDX, x, y + dy * 2);
    text("Width of view at object: " + round(10 * railDX * tanAngle * 2) / 10, x, y + dy * 3);
    text("Width to object: " + railWidth, x, y + dy * 4);
    text("Proportion of view: " + round(1000 * railWidth / (railDX * tanAngle * 2)) / 1000, x, y + dy * 5);
};

var draw = function() {
    background(BACKGROUND);
    drawSideView(-1, -1, 402, 100);
    drawTopView(-1, 102, 402, 100);
    drawPersonsView(-1, 205, 195, 200);
    drawMaths(202, 210);
};