/*****************************************
 * TODO:
 *  Calcualte intersections
 * 
 * 
******************************************/

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var CONTROL_POINT_SIZE = 12;

var showing = {};
angleMode = "radians";

/**************************************
 *  Helper functions
***************************************/

var forEach = function(arr, func) {
    arr.forEach(function(el) {
        el[func]();
    });
};

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

var normalise = function(v) {
    var m = mag(v.x, v.y);
    return { x: v.x / m, y: v.y / m }; 
};

// https://www.particleincell.com/2013/cubic-line-intersection/
var cubicRoots = function(p1, p2, p3, p4) {
    var A = p2 / p1;
    var B = p3 / p1;
    var C = p4 / p1;
 
    var A3 = A / 3;
    var Q = B / 3 - A3 * A3;
    var Q3 = Q * Q * Q;
    var R = - A3 * A3 * A3 + (A3 * B - C) / 2;
    var D = Q3 + R * R;    // polynomial discriminant
 
    var t = [];
 
    if (D >= 0) {
        // Complex or duplicate roots
        var D2 = sqrt(D);
        var S = pow(R + D2, 1 / 3);
        var T = pow(R - D2, 1 / 3);
        t.push(-A3 + (S + T));               // real root
    } else {
        // Distinct real roots
        var th = acos(R / sqrt(-Q3));
        var Q2 = 2 * sqrt(-Q);
 
        t[0] = Q2 * cos(th / 3) - A3;
        t[1] = Q2 * cos((th + 2 * PI) / 3) - A3;
        t[2] = Q2 * cos((th + 4 * PI) / 3) - A3;
    }
 
    // Discard out of spec roots
    t = t.filter(function(el) {
        return el >= 0 && el <= 1;
    });
 
    return t;
};

var bezierCoeffients = function(a, b, c, d) {
	return [
        -a + 3 * b - 3 * c + d, 
        3 * a - 6 * b + 3 * c,
        -3 * a + 3 * b,
        a
	];
};

// Intersection between a line from l1 to l2 and bezier defined by p1 - p4
// https://www.particleincell.com/2013/cubic-line-intersection/
var findIntersection = function(bx, by, l1, dx, dy) {
    var C = l1.x * -dy + l1.y * -dx;
    var p1 = dy * bx[0] + dx * by[0];		// t^3
    var p2 = dy * bx[1] + dx * by[1];		// t^2
    var p3 = dy * bx[2] + dx * by[2];		// t
    var p4 = dy * bx[3] + dx * by[3] + C;	// 1
 
    var roots = cubicRoots(p1, p2, p3, p4);
 
    // Return the first point (there should only be 1)
    var points = [];
    for (var i = 0; i < roots.length; i++) {
        var t = roots[i];
        var t2 = t * t;
        var t3 = t * t2;
     
        // Intersection point along a ray
        return {
            t: t,
            x: bx[0] * t3 + bx[1] * t2 + bx[2] * t + bx[3],
            y: by[0] * t3 + by[1] * t2 + by[2] * t + by[3]
        };
    }
};

/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.dependents = [];
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
    this.dependents.forEach(function(p) {
        p.move(dx, dy);
    });
};
}
/**************************************
 *      Scene object
 *  Wraps the other objects
**************************************/
{
var Scene = function() {
    this.selected = false;
    
    this.lensTop = new DraggablePoint(300, 120);
    this.lensBase = new DraggablePoint(300, 280);
    this.lensHandle = new DraggablePoint(350, 140);
    this.source = new DraggablePoint(100, 200);
    
    this.lensBase.dependents.push(this.lensTop, this.lensHandle);
    
    this.points = [
        this.lensTop,
        this.lensBase,
        this.lensHandle,
        this.source
    ];
    
    this.handles = [];
    this.coefficientsX = [];
    this.coefficientsY = [];
    this.getHandles();
    
    this.numRays = 10;
    this.rays = [];
    this.getRays();
};

Scene.prototype.draw = function() {
    this.drawLight();
    this.drawLens();
    forEach(this.points, 'draw');
};

Scene.prototype.drawLight = function() {
    var s = this.source;

    strokeWeight(2);
    stroke(220, 220, 0, 100);
    this.rays.forEach(function(ray) {
        line(s.x, s.y, ray.x, ray.y);
        /*
        line(ray.x + 20 * ray.normal.x,
             ray.y + 20 * ray.normal.y,
             ray.x - 20 * ray.normal.x,
             ray.y - 20 * ray.normal.y);
        */
        if (ray.transmitted) {
            line(ray.x, ray.y,
                 ray.x + 500 * ray.transmitted.x,
                 ray.y + 500 * ray.transmitted.y);
        }
    });
};

Scene.prototype.drawLens = function() {
    var p1 = this.lensTop;
    var p2 = this.lensBase;
    var h = this.handles;
    
    strokeWeight(2);
    stroke(BLUE);
    noFill();
    bezier(p1.x, p1.y, h[0].x, h[0].y,
           h[1].x, h[1].y, p2.x, p2.y);
    
    bezier(p1.x, p1.y, h[2].x, h[2].y,
           h[3].x, h[3].y, p2.x, p2.y);

    stroke(PINK + (200 << 24));
    line(p1.x, p1.y, h[0].x, h[0].y);
};

Scene.prototype.update = function() {
    this.getHandles();
    this.getRays();
};

// Find hidden handles for lens controls
// Their positions are determined by the visible control
Scene.prototype.getHandles = function() {
    var x = 2 * this.lensTop.x - this.lensHandle.x;
    var y = this.lensBase.y - this.lensHandle.y + this.lensTop.y;
    
    this.handles = [
        this.lensHandle,
        { x: this.lensHandle.x, y: y},
        { x: x, y: this.lensHandle.y},
        { x: x, y: y},
    ];
    
    this.coefficientsX = bezierCoeffients(
        this.lensTop.x, x, x, this.lensBase.x);
    this.coefficientsY = bezierCoeffients(
        this.lensTop.y, this.lensHandle.y, y, this.lensBase.y);
};

Scene.prototype.getRays = function() {
    var s = this.source;
    var p1 = this.lensTop;
    var p2 = this.lensBase;
    var h1 = this.handles[2];
    var h2 = this.handles[3];
    
    // Find angle from source to top and bottom of lens
    var a1 = atan2(p1.y - s.y, p1.x - s.x);
    var a2 = atan2(p2.y - s.y, p2.x - s.x);
    
    // Order the angle
    var a3 = min(a1, a2);  
    var a4 = max(a1, a2);
    
    // Split angles into 10
    var da = (a4 - a3) / this.numRays;

    var Ri = 1 / 1.5;

    this.rays = [];
    for (var theta = a3 + da / 2; theta < a4; theta += da) {
        var p = findIntersection(
            this.coefficientsX, this.coefficientsY,
            s, cos(theta), -sin(theta));
        
        if (p) {
            // Find refraction
            var t = p.t;
            var tx = bezierTangent(p1.x, h1.x, h2.x, p2.x, t);
            var ty = bezierTangent(p1.y, h1.y, h2.y, p2.y, t);
            var normal = normalise({x: -ty, y: tx});
            p.normal = normal;
            
            var incidence = normalise({
                x: p.x - s.x,
                y: p.y - s.y
            });
            
            var c1 = -dotProduct(incidence, normal);
            var c2 = 1 - Ri * Ri * (1 - c1 * c1);
            
            if (c2 > 0) {
                c2 = Ri * c1 - sqrt(c2);
                p.transmitted = {
                    x: Ri * incidence.x + c2 * normal.x,
                    y: Ri * incidence.y + c2 * normal.y
                };
            }
            
            this.rays.push(p);
        }
    }
};

Scene.prototype.mousePressed = function() {
    for (var i = 0; i < this.points.length; i++) {
        if (this.points[i].mouseOver()) {
            this.selected = this.points[i];
            break;
        }
    }
};

Scene.prototype.mouseReleased = function() {
    this.selected = false;
};

Scene.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
        this.update();
    }
};
}
/**************************************
 * Creation of objects
***************************************/

var scene = new Scene();

var toolbar; //= new Toolbar(width * 0.01, width * 0.01, toolbarWidth);


/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    
    scene.draw();
    //toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    scene.mousePressed();
    //toolbar.mousePressed();
};

mouseDragged = function() {
    scene.mouseDragged();
    //toolbar.mouseDragged();
};

mouseReleased = function() {
    scene.mouseReleased();
   // toolbar.mouseReleased();
};

mouseOut = function() {
    //toolbar.mouseReleased();
};
