/*********************************************************    
    Made for these videos:
http://www.khanacademy.org/math/calculus/integral-calculus/v/solid-of-revolution--part-1

https://www.khanacademy.org/math/calculus/solid_revolution_topic/disc-method/v/disk-method-around-x-axis

    Draws a line object representing a line rotated about the y-axis
    You can rotate it about the centre of the screen
    using the arrow keys or by holding the mouse down.

*********************************************************/

// Cross-section function y = f(x)
var crossSection = function(x) {
    var y = pow(x, 2);
    return y;
};

var rangeX = [0, 2];
var rangeY = [0, 4];
var resolution = 40;

var x, y, z;
var axisX = -100;
var axisY = 30;
var axisZ = 0;
var axisWidth = 200;
var axisHeight = 170;
var surfaceColor = color(5,5,150);
var colourLight = color(150, 189, 255);
var colourDark = color(7, 16, 31);
var lightVector = [1,-0.8,-2];

var createRotatedShape = function(f, rangeX, rangeY) {
    var maxX = rangeX[1] - rangeX[0];
    var maxY = rangeY[1] - rangeY[0];
    var dx = maxX / resolution;
    var dy = maxY / resolution;
    var scaleX = axisWidth / maxX;
    var scaleY = axisHeight / maxY;
    
    var nodes = [];
    var edges = [];
    var faces = [];
    var i, j;
    
    for (j=0; j<resolution; j++) {
        var c = cos(j * 360 / resolution);
        var s = sin(j * 360 / resolution);
        
        for (i=0; i<resolution; i++) {
            var x = rangeX[0] + dx * i;
            var y = f(x) * scaleY;
            nodes.push([axisX + x * scaleX,
                        axisY - c * y,
                        axisZ + s *y]);
            if (i>0) {
                edges.push([j * resolution + i - 1,
                            j * resolution + i]);
            }
        }
    }
    
    for (j=0; j<resolution; j++) {
        for (i=0; i<resolution; i++) {
            edges.push([j * resolution + i,
                        ((j+1) % resolution) * resolution + i]);
        }
    }
    
    //faces.push([14,11,12,13]);
    
    var grid = {nodes: nodes,
                edges: edges,
                faces: faces,
                stroke: surfaceColor,
                stroke_width: 1
    };
    return grid;
};

var surface = createRotatedShape(crossSection, rangeX, rangeY);

// Coordinates for object
var axis = {
    stroke: color(5,5,5),
    stroke_width: 2,
    nodes: [[axisX, axisY, axisZ],
            [axisX + axisWidth, axisY, axisZ],
            [axisX, axisY - axisWidth, axisZ],
            [axisX - 3, axisY - axisWidth - 8, axisZ],
            [axisX + axisWidth + 8, axisY + 3, axisZ]],
    edges: [[0,1],[0,2]]
};

var my_objects = [axis, surface];

var rotateAngle = 2;
var currentX = false;
var currentY = false;

var subtractVectors = function(v1, v2){
    return [[v1[0] - v2[0]],
            [v1[1] - v2[1]],
            [v1[2] - v2[2]]];
};

var normaliseVector = function(v) {
    var d = sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
    return [v[0]/d, v[1]/d, v[2]/d];
};

var normalOfPlane = function(face, nodes) {
    var n1 = nodes[face[0]];
    var n2 = nodes[face[1]];
    var n3 = nodes[face[2]];
    
    var v1 = subtractVectors(n1, n2);
    var v2 = subtractVectors(n1, n3);
    
    var v3 = [[v1[1]*v2[2] - v1[2]*v2[1]],
              [v1[2]*v2[0] - v1[0]*v2[2]],
              [v1[0]*v2[1] - v1[1]*v2[0]]];
              
    return v3;
};

var dotProduct = function(v1, v2){
    // Assume everything has 3 dimensions
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
};

var rotateY3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var x, z;
    
    for (var obj in my_objects) {
            var nodes = my_objects[obj].nodes;
        for (var i = 0; i < nodes.length; i+=1) {
            x = nodes[i][0];
            z = nodes[i][2];
            nodes[i] = [ct*x + st*z, nodes[i][1], -st*x + ct*z];
        }
    }
};

var rotateX3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var y, z;
    
    for (var obj in my_objects) {
        var nodes = my_objects[obj].nodes;
        for (var i = 0; i < nodes.length; i+=1) {
            y = nodes[i][1];
            z = nodes[i][2];
            nodes[i] = [nodes[i][0], ct*y - st*z, st*y + ct*z];
        }
    }
};

// Function for sorting faces
var sortFunction = function(a, b) { return a[0] - b[0]; };

var draw = function() {
    var i, node1, node2;
    background(255, 255, 255);
    
    fill(3, 3, 3);
    text("y", axis.nodes[3][0], axis.nodes[3][1]);
    text("x", axis.nodes[4][0], axis.nodes[4][1]);

    for (var obj in my_objects) {
        stroke(my_objects[obj].stroke);
        strokeWeight(my_objects[obj].stroke_width);
        
        var edges = my_objects[obj].edges;
        var nodes = my_objects[obj].nodes;
        var faces = [];
        var face, f;
        
        if ('faces' in my_objects[obj]) {
            for (f in my_objects[obj].faces) {
                face = my_objects[obj].faces[f];
                var fnorm = normalOfPlane(face, nodes);
                
                if (fnorm[2] < 0) {
                    // Find order in which to draw faces
                    // by finding where it intersects the z-axis
                    var pos = dotProduct(fnorm, nodes[face[0]]);
                    
                    var fnodes;
                    if (face.length === 3) {
                        fnodes = [nodes[face[0]], nodes[face[1]],
                                  nodes[face[2]]];
                    } else {
                        fnodes = [nodes[face[0]], nodes[face[1]],
                                  nodes[face[2]], nodes[face[3]]];
                    }
                    
                    faces.push([pos / fnorm[2], fnorm, fnodes]);
                }
            }
        }
        
        faces.sort(sortFunction);
    
        for (f in faces) {            
            face = faces[f];
            nodes = face[2];
            var l = dotProduct(lightVector, normaliseVector(face[1]));
            if (l < 0) { l =0; }
            fill(lerpColor(colourLight, colourDark, l));
            
            if (face[2].length === 3) {
                triangle(nodes[0][0], nodes[0][1],
                         nodes[1][0], nodes[1][1],
                         nodes[2][0], nodes[2][1]);
            } else {
                quad(nodes[0][0], nodes[0][1],
                     nodes[1][0], nodes[1][1],
                     nodes[2][0], nodes[2][1],
                     nodes[3][0], nodes[3][1]);
          }
        }
        
        // draw edges
        for (i = 0; i < edges.length; i+=1) {
            node1 = nodes[edges[i][0]];
            node2 = nodes[edges[i][1]];
            line(node1[0], node1[1], node2[0], node2[1]);
        }
    }
    
    // Rotate with mouse
    if (mouseIsPressed) {
        if (currentX !== false) {
            rotateY3D(-(currentX - mouseX)*PI/10);
            rotateX3D((currentY - mouseY)*PI/10);
        }
        currentX = mouseX;
        currentY = mouseY;
    } else {
        currentX = false;
    }  
};

var keyPressed = function() { 
    if (keyCode === LEFT) { rotateY3D(rotateAngle); }
    else if (keyCode === RIGHT) { rotateY3D(-rotateAngle); }
    else if (keyCode === UP) { rotateX3D(-rotateAngle); }
    else if (keyCode === DOWN) { rotateX3D(rotateAngle); }
};

// Move to centre of screen and tilt
translate(200, 200);  
//rotateX3D(250);
//rotateY3D(40);