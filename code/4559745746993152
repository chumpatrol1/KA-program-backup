var neuronCols = 24;
var neuronRows = 16;
var border = 20;

var EXCITE_COL = color(255, 0, 0);
var RELAX_COL = color(0, 0, 255);

var minConnections = 1;
var maxConnections = 8;
var refractoryPeriod = 5;

/******************************************
 *  Neuron object
*******************************************/

var Neuron = function(x, y, s) {
    this.x = x;
    this.y = y;
    this.s = s;
    this.excitation = 0;
    this.threshold = random(10, 160);
    this.connections = [];
    this.refractory = 0;
};

Neuron.prototype.draw = function() {
    if (this.mouseOver()) {
        strokeWeight(1);
        stroke(255);
        
        textAlign(LEFT, TOP);
        fill(255);
        text("Excitation: " + round(this.excitation), 8, 5);
    } else {
        noStroke();
    }
    
    var p = norm(min(this.excitation, 200), 0, 200);
    fill(lerpColor(RELAX_COL, EXCITE_COL, p));
    rect(this.x, this.y, this.s - 1, this.s - 1);
};

Neuron.prototype.update = function() {
    if (mouseIsPressed && this.mouseOver()) {
        this.simulate(5);
    }
    
    if (this.excitation > this.threshold) {
        this.fire();
    }
    
    this.excitation *= 0.99;
    
    if (this.refractory) {
        this.refractory--;
    }
};

Neuron.prototype.simulate = function(amount) {
    if (!this.refractory) {
        this.excitation += amount;
    }  
};

Neuron.prototype.fire = function() {
    for (var i = 0; i < this.connections.length; i++) {
        var neuron2 = this.connections[i][0];
        var weight = this.connections[i][1];
        neuron2.simulate(weight);
    }
    
    this.excitation = 0;
    this.refractory = refractoryPeriod;
};

Neuron.prototype.mouseOver = function() {
    return mouseX > this.x && mouseX < this.x + this.s &&
           mouseY > this.y && mouseY < this.y + this.s;
};

/******************************************
 *  Set-up objects
*******************************************/

// Calculate grid size
var neuronSize = floor(min(
    (width - border * 2) / neuronCols,
    (height - border * 2) / neuronRows));
var nx = (width - neuronSize * neuronCols) * 0.5;
var ny = (height - neuronSize * neuronRows) * 0.5;

// Create neurons
var neurons = [];
for (var i = 0; i < neuronCols; i++) {
    for (var j = 0; j < neuronRows; j++) {
        var x = nx + i * neuronSize;
        var y = ny + j * neuronSize;
        neurons.push(new Neuron(x, y, neuronSize));
    }
}

// Create connections
for (var i = 0; i < neurons.length; i++) {
    var neuron = neurons[i];
    var connections = floor(random(minConnections, maxConnections + 1));
    
    for (var j = 0; j < connections; j++) {
        var neuron2 = neurons[floor(random(neurons.length))];
        var weight = random(10, 80);
        neuron.connections.push([neuron2, weight]);
    }
}

/******************************************
 *  Event handling
*******************************************/

mousePressed = function() {
    // TODO: replace loop by calculation
    /*
    for (var i = 0; i < neurons.length; i++) {
        if (neurons[i].mouseOver()) {
            neurons[i].excitation += 10;
            break;
        }
    }
    */
};

/******************************************
 *  Main loop
*******************************************/

draw = function() {
    background(0);
  
    for (var i = 0; i < neurons.length; i++) {
        neurons[i].update();
        neurons[i].draw();
    }
};
