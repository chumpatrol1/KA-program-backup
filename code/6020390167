/**************************************
 * Demonstration of a weighted average.
 * (For subdivision tutorial)
 * 
 * Positive weights only
***************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var serifFont = createFont("Times", 22);
var sansFont = createFont("sans", 15);

var CONTROL_POINT_SIZE = 12;

var gridSize = 20;
var snapSize = 10;

var labels = ["A", "B", "C"];
var weights = [5, 5, 5];
var colours = [BLUE, PINK, GREEN];

var dragX, dragY;
var points = [];
var point1, point2, point3;
var averagePoint;

var selected = false;

var showing = {
    Preencher: true,
    "Equação/Ecuación": true
};

/**************************************
 * GUI Slider to vary parameters
***************************************/

var Slider = function(x, y, width, min_v, max_v, current_v, name, updateF) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    this.name = name;
    this.updateF = updateF;
    
    this.ballD = 16;
    this.ballR = this.ballD / 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;
};

Slider.prototype.draw = function(c) {
    if (this.name) {
        textAlign(CENTER, CENTER);
        fill(c || 10);
        textFont(sansFont);
        text(this.name + ": " + this.val ,  this.x + this.width / 2, this.y - 18);
    }
    
    noStroke();
    fill(180);
    rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);
};

Slider.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.drag = function() {
    if (this.held) {
        var x = constrain(mouseX, this.x, this.x + this.width);
        this.bx = x;
        this.val = this.min + round((x - this.x) * this.scale);
        this.update();
        return true;
    }
};

Slider.prototype.update = function() {
    if (this.updateF) {
        this.updateF(this.val);
    }
};

/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
    this.transition = 0;
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(200);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/**************************************
 *      Toolbar
 *  Contains other GUI elements
***************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.buttons.length; i++) {
        this.buttons[i].draw();
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].draw(colours[i]);
    }
};

Toolbar.prototype.addButton = function(name, func) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    
    this.buttons.push(new Button(x, y, w, h, name, func));
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = name ? 24 : 10;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    
    this.sliders.push(new Slider(x, y, w, minX, maxX, nowX, name, updateF));
    
    this.h += h + 16;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        this.buttons.push(new CheckBox(x, y, w, h, opt));
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseOver()) {
            this.buttons[i].selected = true;
        }
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].selected();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        var button = this.buttons[i];
        if (!button.deactivated && button.selected && button.mouseOver()) {
            button.click();
        }
        button.selected = false;
    }
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].held = false;
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].drag()) {
            return true;
        }
    }
};
}
/**************************************
 *      Draggable Point
***************************************/

var snap = function(n) {
    return round(n / snapSize) * snapSize;
};

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    var oldX = this.x;
    var oldY = this.y;
    this.x = snap(mouseX + dragX);
    this.y = snap(mouseY + dragY);
    
    // Check points don't overlap
    if (point1.x === point2.x && point1.y === point2.y) {
        this.x = oldX;
        this.y = oldY;
    }
};

draggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else if (this.animation) {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = CONTROL_POINT_SIZE + (this.animation || 0);
    ellipse(this.x, this.y, pr, pr);
};

var constrainedPoint = function(color, name) {
    this.name = name;
    this.color = ORANGE;
    
    this.update();
    //this.setColor();
    
};
constrainedPoint.prototype = Object.create(draggablePoint.prototype);

constrainedPoint.prototype.update = function() {
    this.x = 0;
    this.y = 0;
    var totalWeight = 0;
    
    for (var i = 0; i < weights.length; i++) {
        totalWeight += weights[i];
    }
    
    if (totalWeight === 0) { return; }
    
    for (var i = 0; i < points.length; i++) {
        var p = points[i];
        var w = weights[i] / totalWeight;
        
        this.x += p.x * w;
        this.y += p.y * w;
    }
};

constrainedPoint.prototype.move = function() {
    if (this.p1.x === this.p2.x && this.p1.y === this.p2.y) {
        return;
    }
    
    // Project (mouseX, mouseY) onto line
    var lx = this.p1.x - this.p2.x;
    var ly = this.p1.y - this.p2.y;
    var mx = mouseX - this.p2.x;
    var my = mouseY - this.p2.y;
    
    var w = (mx * lx + my * ly ) / (lx * lx + ly * ly);
    this.w = constrain(round(w * 20) / 20, 0, 1);
    //this.setColor();
    
};

constrainedPoint.prototype.setColor = function() {
    if (this.w === 0.5) {
        this.color = GREY;
    } else if (this.w < 0.5) {
        this.color = lerpColor(this.p2.color, GREY, this.w * 2);
    } else {
        this.color = lerpColor(GREY, this.p1.color, this.w * 2 - 1);
    }
    
    this.color = lerpColor(this.p2.color, this.p1.color, this.w);
};

/**************************************
 *      Create Objects
**************************************/

point1 = new draggablePoint(width * 0.5, height * 0.1, BLUE, "A");
point2 = new draggablePoint(width * 0.35, height * 0.75, PINK, "B");
point3 = new draggablePoint(width * 0.9, height * 0.4, GREEN, "C");
averagePoint = new constrainedPoint(ORANGE, "M");

var points = [point1, point2, point3];
var selectables = [point1, point2, point3, averagePoint];

/**************************************
 *      Create GUI
**************************************/

var toolbar = new Toolbar(width * 0.01, width * 0.01, 160);

var getUpdateWeightFunc = function(i) {
    return function(v) {
        weights[i] = v;
    };
};

for (var i = 0; i < labels.length; i++) {
    toolbar.addSlider(0, 10, weights[i], "Peso para " + labels[i], getUpdateWeightFunc(i));
}

toolbar.addOptions(showing);

/**************************************
 *      Display functions
**************************************/

var drawGrid = function() {
    stroke(GRIDGREY);
    strokeWeight(1);
    
    for (var x = 1; x < width / gridSize; x++) {
        line(x * gridSize, 0, x * gridSize, height);
    }
    for (var y = 1; y < height / gridSize; y++) {
        line(0, y * gridSize, width, y * gridSize);
    }
};

var drawTriangle = function() {
    var n = points.length;
    
    // Filled triangles
    if (showing.Preencher && averagePoint.x > 0 && averagePoint.y > 0) {
        noStroke();
        for (var i = 0; i < n; i++) {
            var p2 = points[(i + n - 1) % n];
            var p3 = points[(i + 1) % n];
            fill(points[i].color + (100 << 24));
            triangle(p2.x, p2.y, p3.x, p3.y, averagePoint.x, averagePoint.y);
        }   
    }
    
    // Labels
    textFont(serifFont, 18);
    textAlign(CENTER, CENTER);
    strokeWeight(2);
    
    for (var i = 0; i < n; i++) {
        var p1 = points[i];
        var p2 = points[(i + n - 1) % n];
        var p3 = points[(i + 1) % n];

        stroke(points[i].color);
        line(p2.x, p2.y, p3.x, p3.y);
        
        // Get label position
        var dx = p2.x + p3.x - 2 * p1.x;
        var dy = p2.y + p3.y - 2 * p1.y;
        var d = sqrt(dx * dx + dy * dy);
        var tx = p1.x - dx / d * 16;
        var ty = p1.y - dy / d * 16;

        fill(points[i].color);    
        text(selectables[i].name, tx, ty);
    }
    
    for (var i = 0; i < n; i++) {
        points[i].draw();
    }
    
    averagePoint.update();
    
    // Draw the average unless all the weights are 0
    if (averagePoint.x > 0 && averagePoint.y > 0) {
        averagePoint.draw();
        fill(0);
        text(averagePoint.name, averagePoint.x, averagePoint.y - CONTROL_POINT_SIZE / 2 - 8);   
    }
};

var colorText = function(txtArr, x, y) {
    for (var i = 0; i < txtArr.length; i++) {
        fill(txtArr[i][1]);
        var txt = txtArr[i][0];
        text(txt, x, y);
        x += textWidth(txt);
    }
    return x;
};

var drawEquation = function() {
    var w1 = weights[0];
    var w2 = weights[1];
    var w3 = weights[2];
    
    textAlign(LEFT, CENTER);
    textFont(serifFont, 16);
    var txt = "M = " + w1 + "A + " + w2 + "B + " + w2 + "C";
    
    var h = 58;
    var y = height - 8;
    noStroke();
    fill(240, 240, 240, 200);
    //rect(toolbarX, y - h, textWidth(txt) + 15, h, 8);

    var tx = 10;
    var ty = y - h / 2;
    var txt = "M";
    
    var tx = colorText([
        ["M", ORANGE],
        [" = ", TEXTCOL]
    ], 10, ty);
    
    textAlign(LEFT, BASELINE);
    var tx2 = colorText([
        [w1 + "A", BLUE],
        [" + ", TEXTCOL],
        [w2 + "B", PINK],
        [" + ", TEXTCOL],
        [w3 + "C", GREEN],
    ], tx, ty - 3);
    
    var dx = textWidth("ABC");
    
    textAlign(LEFT, TOP);
    colorText([
        [w1, BLUE],
        [" + ", TEXTCOL],
        [w2, PINK],
        [" + ", TEXTCOL],
        [w3, GREEN],
    ], tx + dx / 2, ty);
    
    strokeWeight(1);
    stroke(20);
    line(tx - 2, ty, tx2 + 2, ty);
};

/**************************************
 *      Main loop
**************************************/

var draw = function() {
    background(BACKGROUND);
    
    drawGrid();
    drawTriangle();
    
    toolbar.draw();
    
    if (showing["Equação/Ecuación"]) {
        drawEquation();
    }
};

/**************************************
 *      Event handling
**************************************/

mousePressed = function() {
    for (var i = 0; i < selectables.length; i++) {
        if (selectables[i].mouseover()) {
            selected = selectables[i];
            dragX = selected.x - mouseX;
            dragY = selected.y - mouseY;
        }
    }
    
    toolbar.mousePressed();
};

mouseReleased = function() {
    selected = false;
    toolbar.mouseReleased();
};

mouseOut = function() {
    toolbar.mouseReleased();
};

mouseDragged = function() {
    if (selected) {
        selected.move();
    }
    toolbar.mouseDragged();
};