/***************************************************
 * Use the magnet to rotate a magnet in 3D space
 * 
 * If the magnet doesn't move, press Restart.
***************************************************/

// Move to centre of screen
translate(200.5, 200.5);

var magnetStrength = 100;
var needleSize = 10;
var lightVector =[-0.5, -3, 1];

/*******************************************
 * Magnet object
********************************************/

var magWidth = 120;
var magHeight = 50;
var magDepth = 30;

var RED = color(200, 20, 20);
var BLUE = color(20, 20, 200);
var BLACK = color(0, 0, 0);

var magnet = {
    faces: [[0,2,6,4], [1,0,4,5], [5,4,6,7], [2,3,7,6], [3,1,5,7],
            [2,0,8,10],[0,1,9,8],[8,9,11,10],[3,2,10,11],[1,3,11,9]],
    colours:[RED, RED, RED, RED, RED, 
             BLUE, BLUE, BLUE, BLUE, BLUE],
    nodes: [[          0, -magHeight/2,  magDepth/2],
            [          0,  magHeight/2,  magDepth/2],
            [          0, -magHeight/2, -magDepth/2],
            [          0,  magHeight/2, -magDepth/2],
            [-magWidth/2, -magHeight/2,  magDepth/2],
            [-magWidth/2,  magHeight/2,  magDepth/2],
            [-magWidth/2, -magHeight/2, -magDepth/2],
            [-magWidth/2,  magHeight/2, -magDepth/2],
            [ magWidth/2, -magHeight/2,  magDepth/2],
            [ magWidth/2,  magHeight/2,  magDepth/2],
            [ magWidth/2, -magHeight/2, -magDepth/2],
            [ magWidth/2,  magHeight/2, -magDepth/2],
            [-magWidth/2, 0, 0], [magWidth/2, 0, 0]] // poles
};

var objects = [magnet];

/*******************************************
 * Linear algebra functions
 * All assume vector has 3 dimensions
********************************************/
var addVectors = function(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
};

var subtractVectors = function(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
};

var vectorTimesScalar = function(v, s) {
    return [v[0] * s, v[1] * s, v[2] * s];
};

var vectorLength = function(v) {
    return sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
};

var normaliseVector = function(v) {
    var d = vectorLength(v);
    return [v[0]/d, v[1]/d, v[2]/d];
};

var dotProduct = function(v1, v2) {
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
};

var normalOfPlane = function(face, nodes) {
    var n1 = nodes[face[0]];
    var n2 = nodes[face[1]];
    var n3 = nodes[face[2]];
    
    var v1 = subtractVectors(n1, n2);
    var v2 = subtractVectors(n1, n3);
    
    var v3 = [[v1[1]*v2[2] - v1[2]*v2[1]],
              [v1[2]*v2[0] - v1[0]*v2[2]],
              [v1[0]*v2[1] - v1[1]*v2[0]]];
              
    return v3;
};

/*******************************************
 * Magnetism
********************************************/
// Calculat the force at p1 from a magnet at p2
var calculateForce = function(p1, p2) {
    var vector = subtractVectors(p1, p2);
    var dist = vectorLength(vector);
    var force = magnetStrength / (dist * dist);
    return vectorTimesScalar(vector, force);
};

// Calculate the vector of the magnet field at a point (x, y, z)
var calculateField = function(point, pole1, pole2) {    
    var v1 = calculateForce(point, pole1);
    var v2 = calculateForce(pole2, point);    
    var v3 = addVectors(v1, v2);
    return normaliseVector(v3);
};

/*******************************************
 * Needles
********************************************/

var addNeedle = function(position, size, nodes, edges) {
    var p1 = magnet.nodes[12];
    var p2 = magnet.nodes[13];
    var v = calculateField(position, p1, p2);
    var d = vectorTimesScalar(v, size/2);
    
    var n1 = addVectors(position, d);
    var n2 = subtractVectors(position, d);
    
    nodes.push(n1);
    nodes.push(n2);
    var e = nodes.length;
    edges.push([e-2, e-1]);
};

// Randomly add n needles
var createNeedleField = function(n) {
    var nodes = [];
    var edges = [];
    
    for (var i=0; i<n; i++) {
        var x = random() * 400 - 200;
        var y = random() * 400 - 200;
        var z = random() * 400 - 200;
        addNeedle([x, y, z], needleSize, nodes, edges);
    }
    return {nodes: nodes, edges: edges};
};

var needles = createNeedleField(500);
objects.push(needles);

/*******************************************
 * Transformations
********************************************/

var translate3D = function(x, y, z, nodes) {
    for (var i = 0; i < nodes.length; i+=1) {
        nodes[i] = [nodes[i][0]+x, nodes[i][1]+y, nodes[i][2]+z];
    }
};

var rotateY3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;

    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [ct*x + st*z, y, -st*x + ct*z];
    }
};

var rotateX3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;
    
    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [x, ct*y - st*z, st*y + ct*z];
    }
};

/*******************************************
 * Display
********************************************/
lightVector = normaliseVector(lightVector);

var drawEdges = function(obj) {
    var nodes = obj.nodes;
    var edges = obj.edges;
    
    for (var i = 0; i < edges.length; i+=1) {
        var node1 = nodes[edges[i][0]];
        var node2 = nodes[edges[i][1]];
        var d = 255 * (0.5 * (node1[2] + node2[2]) + 300) / 600;
        stroke(0, 0, 0, d);
        line(node1[0], node1[1], node2[0], node2[1]);
    }
};

var drawFaces = function(obj) {
    var nodes = obj.nodes;
    var faces = obj.faces;
    var colours = obj.colours;
    
    for (var f in faces) {
        var face = faces[f];
        var fnorm = normalOfPlane(face, nodes);
        
        if (fnorm[2] < 0) {
            // Shading
            var l = dotProduct(lightVector, normaliseVector(fnorm));
            // Some background light
            l = max(0, 0.1 + 0.9*l);
            var c = lerpColor(colours[f], BLACK, l);
            fill(c);
              
            if (face.length === 3) {
                triangle(nodes[face[0]][0], nodes[face[0]][1],
                         nodes[face[1]][0], nodes[face[1]][1],
                         nodes[face[2]][0], nodes[face[2]][1]);
              } else {
                quad(nodes[face[0]][0], nodes[face[0]][1],
                     nodes[face[1]][0], nodes[face[1]][1],
                     nodes[face[2]][0], nodes[face[2]][1],
                     nodes[face[3]][0], nodes[face[3]][1]);
              }
        }
    }
};

// Find the point in an object that's closest to the screen
var findMaxZ = function(nodes) {
    var maxZ = nodes[0][2];
    for (var i=1; i<nodes.length; i++) {
        if (nodes[i][2] > maxZ) {
            maxZ = nodes[i][2];
        }
    }
    return maxZ;
};

// Split needles into those in front of and those behind
// a given z representing the magnet
var splitEdgesByZ = function(shape, targetZ) {
    var inFront = { nodes: [], edges: [] };
    var behind = { nodes: [], edges: [] };
    
    for (var e=0; e<shape.edges.length; e++) {
        var edge = shape.edges[e];
        var n1 = shape.nodes[edge[0]];
        var n2 = shape.nodes[edge[1]];
        var z = 0.5 * (n1[2] + n2[2]);
        
        var target;
        if (z > targetZ) { target =  inFront;}
        else { target =  behind;}
        
        target.nodes.push(n1);
        target.nodes.push(n2);
        var n = target.nodes.length;
        target.edges.push([n-2, n-1]);
    }
    return [inFront, behind];
};

var draw = function() {
    for (var o in objects) {
        var nodes = objects[o].nodes;
        rotateY3D(1, nodes);
    }
    background(255, 255, 255);
    
    var magnetZ = findMaxZ(magnet.nodes);
    var needleGroups = splitEdgesByZ(needles, magnetZ);
    
    strokeWeight(2);
    drawEdges(needleGroups[1]);
    
    strokeWeight(1);
    stroke(162, 169, 189);
    drawFaces(magnet);
    
    strokeWeight(2);
    drawEdges(needleGroups[0]);
};

/*******************************************
 * Event handling
********************************************/

var mouseDragged = function() {
    var theta1 = -(pmouseX - mouseX) * PI / 10;
    var theta2 = (pmouseY - mouseY) * PI / 10;
    
    for (var o in objects) {
        var nodes = objects[o].nodes;
        rotateY3D(theta1, nodes);
        rotateX3D(theta2, nodes);    
    }
};

var keyControls = {
    37: [rotateY3D, 2],
    38: [rotateX3D, -2],
    39: [rotateY3D, -2],
    40: [rotateX3D, 2]
};

// Not working
var keyPressed = function() {
    if (keyControls[keyCode]) {
        var f = keyControls[keyCode];
        for (var obj in objects) {
            f[0](f[1], objects[obj].nodes); 
        }
    }
};