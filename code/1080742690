/*
    Draws a shaded object, so long as it is convex.
    You can rotate it about the centre of the screen
    using the arrow keys or by holding the mouse down.
*/

// Move to centre of screen
translate(200.5, 200.5);

var faceColor = [80, 80, 250];
var lightVector =[0.5,-0.2,-2];

var box1 = {faces: [[0,1,2],[2,3,0],[7,6,5],[5,4,7],
                    [0,3,7],[7,4,0],[2,1,5],[5,6,2],
                    [3,2,6],[6,7,3],[1,0,4],[4,5,1]],
    nodes: [[-100,-100, 100],  [-100, 100, 100],
            [ 100, 100, 100],  [ 100,-100, 100],
            [-100,-100, -100], [-100, 100, -100],
            [ 100, 100, -100], [ 100,-100, -100]]
};

var subtractVectors = function(v1, v2){
    return [[v1[0] - v2[0]],
            [v1[1] - v2[1]],
            [v1[2] - v2[2]]];
};

var normaliseVector = function(v) {
    var d = sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
    return [v[0]/d, v[1]/d, v[2]/d];
};

var normalOfPlane = function(face, nodes) {
    var n1 = nodes[face[0]];
    var n2 = nodes[face[1]];
    var n3 = nodes[face[2]];
    
    var v1 = subtractVectors(n1, n2);
    var v2 = subtractVectors(n1, n3);
    
    var v3 = [[v1[1]*v2[2] - v1[2]*v2[1]],
              [v1[2]*v2[0] - v1[0]*v2[2]],
              [v1[0]*v2[1] - v1[1]*v2[0]]];
              
    return v3;
};

var dotProduct = function(v1, v2){
    // Assume everything has 3 dimensions
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
};

var currentX = false;
var currentY = false;
var selectedNode = false;

var translate3D = function(x, y, z, nodes) {
    for (var i = 0; i < nodes.length; i+=1) {
        nodes[i] = [nodes[i][0]+x, nodes[i][1]+y, nodes[i][2]+z];
    }
};

var rotateY3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;

    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [ct*x + st*z, y, -st*x + ct*z];
    }
};

var rotateX3D = function(theta, nodes){
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;
    
    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [x, ct*y - st*z, st*y + ct*z];
    }
};

lightVector = normaliseVector(lightVector);

var draw = function() {
    var i, o;
    var face;
    var nodes;
    var node1;
    var node2;
    
    background(255, 255, 255);
    nodes = box1.nodes;
    stroke(162, 169, 189);
        
    if ('edges' in box1) {
        var edges = box1.edges;
        for (i = 0; i < edges.length; i+=1) {
            node1 = nodes[edges[i][0]];
            node2 = nodes[edges[i][1]];
            line(node1[0], node1[1], node2[0], node2[1]);
        }     
    }
        
    if ('faces' in box1) {
      for (var f in box1.faces) {
        face = box1.faces[f];
        var fnorm = normalOfPlane(face, nodes);
        if (fnorm[2] < 0) {
          var l = dotProduct(lightVector, normaliseVector(fnorm));
          fill(l*faceColor[0], l*faceColor[1], l*faceColor[2]);
          
          if (face.length === 3) {
            triangle(nodes[face[0]][0], nodes[face[0]][1],
                     nodes[face[1]][0], nodes[face[1]][1],
                     nodes[face[2]][0], nodes[face[2]][1]);
          } else {
            quad(nodes[face[0]][0], nodes[face[0]][1],
                 nodes[face[1]][0], nodes[face[1]][1],
                 nodes[face[2]][0], nodes[face[2]][1],
                 nodes[face[3]][0], nodes[face[3]][1]);
          }
        }
      }
    }

    if (selectedNode) {
        stroke(255, 0, 0);
        noFill();
        ellipse(selectedNode[0], selectedNode[1], 10, 10);
    }

    if (mouseIsPressed) {
        if (selectedNode) { // Move node
            selectedNode[0] = mouseX - 200;
            selectedNode[1] = mouseY - 200;
        } else if (currentX !== false) {
            var theta1 = -(currentX - mouseX) * PI / 10;
            var theta2 = (currentY - mouseY) * PI / 10;
            rotateY3D(theta1, box1.nodes);
            rotateX3D(theta2, box1.nodes);
        }
        currentX = mouseX;
        currentY = mouseY;
    } else {    // Mouse not pressed
        currentX = false;
        for (i=0; i<box1.nodes.length; i++) {
            selectedNode = false;
            if (abs(mouseX - 200 - box1.nodes[i][0]) < 10 &&
                abs(mouseY - 200 - box1.nodes[i][1]) < 10) {
                    selectedNode = box1.nodes[i];
                    break;
            }
        }
    }
};

var mouseOut = function() { mouseIsPressed = false; };

var keyPressed = function() {
    if (keyCode === LEFT) {
        rotateY3D(2, box1.nodes);
    } else if (keyCode === RIGHT) {
        rotateY3D(-2, box1.nodes);
    } else if (keyCode === UP) {
        rotateX3D(-2, box1.nodes);
    } else if (keyCode === DOWN) {
        rotateX3D(2, box1.nodes);
    }
};

rotateX3D(-45, box1.nodes);
rotateY3D(-45, box1.nodes);