/********************************************************
 * Drag the bar magnet near the compass.
 * Change the angle of the bar magnet by using the
 * left and right arrow keys or the right mouse button.
 * 
 * Try to balance the influence of the magnet with the 
 * Earth's magnetic field.
 * 
 * TO DO:
 *   Click compass to spin it
 *   Slider to change magnet strength
*********************************************************/

var temperature = 0.02;
var friction = 0.01;
var barForce = 2;

// Determines how responsive the compass is to magnets
var strengthConstant = 100;
var earthMagAngle = 0;
var earthMagStrength = 1;

var sign = 0;

var BarMagnet = function(x, y, width, height, angle) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.angle = angle;
    this.strength = barForce;
    
    this.draw = function() {
        var w = this.width/2;
        var h = this.height/2;
        
        translate(this.x, this.y);
        rotate(this.angle);
        
        noStroke();
        fill(0, 0, 0, 120);
        rect(-w-2, 2-h, this.width, this.height);
        
        noStroke();
        fill(200, 20, 20);
        rect(-w, -h, this.width, h);
        fill(20, 20, 200);
        rect(-w, 0, this.width, h);
        
        textSize(22);
        textAlign(CENTER, CENTER);
        
        fill(255, 255, 255);
        text("N", 0, -this.height/4);
        text("S", 0, this.height/4);
        
        resetMatrix();
    };
    
    this.updatePolePositions = function() {
        var s = (this.height / 2) * sin(this.angle);
        var c = (this.height / 2) * cos(this.angle);

        this.x1 = this.x + s;
        this.x2 = this.x - s;
        this.y1 = this.y - c;
        this.y2 = this.y + c;
    };
    
    this.rotate = function(angle) {
        this.angle += angle;
        this.updatePolePositions();
    };
    
    // Set up x1, y1, x2, y2
    this.updatePolePositions();
};

var Needle = function(x, y, r, theta) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.rotation = 0;
    this.angle = theta;
    this.influences = [];
    
    var compassPoints = {
        0: 'N',
        45: 'NE',
        90: 'E',
        135: 'SE',
        180: 'S',
        225: 'SW',
        270: 'W',
        315: 'NW'
    };
    
    this.draw = function() {
        var width = 10;
            
        noStroke();
        fill(0, 0, 0, 120);
        ellipse(this.x+2, this.y+2, this.r*2+21, this.r*2+21);
            
        strokeWeight(1);
        fill(255, 255, 255);
        stroke(60, 60, 60);
        ellipse(this.x, this.y, this.r*2+21, this.r*2+21);

        // Compass angles
        stroke(160, 160, 160);
        fill(20, 20, 20);
        textAlign(CENTER, BASELINE);
        var s, c, x1, y1, x2, y2;
        var r1 = this.r - 5;
        
        for (var i=0; i<360; i+=5) {
            s = sin(i);
            c = cos(i);
            
            // Text
            if (i % 20 === 0) {
                textSize(8);
                x1 = this.x + s * (this.r+2);
                y1 = this.y - c * (this.r+2);
                translate(x1, y1);
                rotate(i);
                text(i, 0, 0);
                resetMatrix();
            }
            
            if (compassPoints[i]) {
                if (i % 90 === 0) {
                    textSize(13);
                    x2 = this.x + s * (this.r/2+13);
                    y2 = this.y - c * (this.r/2+13);
                } else {
                    textSize(10);
                    x2 = this.x + s * (this.r/2+10);
                    y2 = this.y - c * (this.r/2+10);
                }
                x1 = this.x + s * (this.r/2+1);
                y1 = this.y - c * (this.r/2+1);
                translate(x1, y1);
                rotate(i);
                text(compassPoints[i], 0, 0);
                resetMatrix();
                x1 = this.x + s * (this.r/2-1);
                y1 = this.y - c * (this.r/2-1);
                line(this.x, this.y, x1, y1);
                x1 = this.x + s * r1;
                y1 = this.y - c * r1;
                line(x1, y1, x2, y2);
            }
            
            if (i % 20 === 10) {
                r = this.r + 8;
            } else {
                r = this.r;
            }
            x1 = this.x + s * r1;
            x2 = this.x + s * r;
            y1 = this.y - c * r1;
            y2 = this.y - c * r;
            
            line(x1, y1, x2, y2);
        }
        
        // Needle
        s = sin(this.angle);
        c = cos(this.angle);
        
        x1 = this.x + s * r;
        y1 = this.y - c * r;
        x2 = this.x - s * r;
        y2 = this.y + c * r;
        var midX1 = this.x - c * width/2;
        var midY1 = this.y - s * width/2;
        var midX2 = this.x + c * width/2;
        var midY2 = this.y + s * width/2;
        
        stroke(0, 0, 0);
        fill(220, 20, 20);
        triangle(midX1, midY1, x1, y1, midX2, midY2);
        fill(250, 250, 250);
        triangle(midX1, midY1, x2, y2, midX2, midY2);
        fill(190, 190, 190);
        ellipse(this.x, this.y, width, width);
    };
    
    this.fieldInfluence = function() {
        var totalInfl = strengthConstant;
        
        for (var i=0; i<this.influences.length; i++) {
            totalInfl += this.influences[i][1];
        }
        
        this.rotation *= strengthConstant / totalInfl;
        
        for (var j=0; j<this.influences.length; j++) {
            var dAngle = this.influences[j][0] - this.angle;
            if (dAngle > 180) { dAngle -= 360; }
            if (dAngle < -180) { dAngle += 360; }
            var s = this.influences[j][1] / totalInfl;
            this.rotation += s * dAngle;    
        }
        
        this.influences = [];
    };
    
    this.move = function() {
        this.influences.push([earthMagAngle, earthMagStrength]);
        this.fieldInfluence();
        this.rotation += (random() - 0.5) * temperature;        
        this.angle += this.rotation;
        
        if (this.angle > 360) {
            this.angle -= 360;
        } else if (this.angle < 0) {
            this.angle += 360;
        }
        
        this.rotation *= (1 - friction);
    };
    
    this.barInteraction = function(magnet) {        
        var dx = this.x - magnet.x1;
        var dy = this.y - magnet.y1;
        var d = (dx*dx + dy*dy) / 10000;
        var theta1 = atan2(dy, dx) + 90;
        var f1 = magnet.strength / d;
        
        dx = this.x - magnet.x2;
        dy = this.y - magnet.y2;
        d = (dx*dx + dy*dy) / 10000;
        var theta2 = atan2(dy, dx) - 90;
        var f2 = magnet.strength / d;
        
        var mx = f1 * cos(theta1) + f2 * cos(theta2);
        var my = f1 * sin(theta1) + f2 * sin(theta2);

        this.influences.push([atan2(my, mx), f2]);
    };
};

var barMagnet = new BarMagnet(80, 200, 30, 75, 270);
var needle = new Needle(320, 200, 50, 0);
needle.rotation = 5;

var drawMeasurements = function() {
    // Measurements
    strokeWeight(1);
    stroke(180, 180, 180);
    
    var lineY = 284;
    line(barMagnet.x, lineY, needle.x, lineY);
    line(barMagnet.x, lineY-4, barMagnet.x, lineY+4);
    line(needle.x, lineY-4, needle.x, lineY+4);

    fill(10, 10, 20);
    textSize(16);
    textAlign(CENTER, BASELINE);
    var angle = -needle.angle;
    if (angle < -180) { angle = angle + 360; }
    text(round(angle) + "Â°", needle.x, needle.y-needle.r-30);
    
    var dx = barMagnet.x - needle.x;
    var dy = barMagnet.y - needle.y;
    var dist = round(sqrt(dx*dx + dy*dy));
    text(dist, (barMagnet.x + needle.x)/2, lineY+16);
    
    if (round(angle) === 45) {
        sign = min(255, sign + 4);
    } else {
        sign = max(0, sign - 4);
    }
    
    fill(0, 0, 0, sign);
    textAlign(RIGHT, BASELINE);
    text("Forces balanced",
         needle.x - needle.r - 18, needle.y - needle.r - 18);

    stroke(255, 0, 0, sign);
    strokeWeight(2);
    line(needle.x - needle.r, needle.y - needle.r,
         needle.x - needle.r - 16, needle.y - needle.r - 16);
    fill(255, 0, 0, sign);
    triangle(needle.x - needle.r, needle.y - needle.r,
             needle.x - needle.r - 8, needle.y - needle.r - 4,
             needle.x - needle.r - 4, needle.y - needle.r - 8);
};

// DISPLAY
var draw = function() {
    background(230, 240, 250);

    drawMeasurements();
    needle.move();
    needle.draw();
    barMagnet.draw();

    needle.barInteraction(barMagnet);
};

// USER INTERACTION
var mouseDragged = function() {
    if (mouseButton === LEFT) {
        barMagnet.x = mouseX;
        barMagnet.y = mouseY;
    } else {
        barMagnet.rotate(mouseY - pmouseY);
    }
    
    // Update
    barMagnet.updatePolePositions();
};

var keyPressed = function() {
    // Rotate magnet
    if (keyCode === 37) {
        barMagnet.rotate(-5);
    } else if (keyCode === 39) {
        barMagnet.rotate(5);
    }
};

// Error message
if (friction < 0 || friction > 1) {
    throw {
        message: "Friction must be between 0 and 1",
        lineno: 10
    };
}