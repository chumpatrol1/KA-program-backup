
var prismX = 145;
var prismY = 336;
var prismSize = 60;
var prismHeight = prismSize * sqrt(3) / 2;

var lightAngle = 15;
var incidence1 = 30 + lightAngle;
var refraction1 = 30 - incidence1 / 1.5;
var spread = 50;

// Size and position of container for gases
var bagX = 60;
var bagY = 300;
var bagW = 40;
var bagH = 120;

// Position of the gas bag
var gasX = bagX - bagW / 2;
var gasY = bagY - bagH / 2 - 50;
var gasW = 85;

// Position of menu
var barX = width - 70;
var barW = 40;

var elements = {
    hydrogen: {
        amount: 1,
        absorption: [410.2, 434, 486.1, 656.3]
    },
    carbon: {
        amount: 0,
        absorption: [477.1, 493.2, 505.2, 538, 600.1, 600.6, 600.7, 601.1, 601.3, 601.5, 658.8, 711.3, 711.5, 711.7]
    },
    oxygen: {
        amount: 0,
        absorption:[423.3, 436.8, 532.9, 533, 533.1, 543.5, 543.6, 557.7, 595.8, 595.9, 604.6, 615.6, 615.7, 615.8, 645.4, 645.6, 700.2, 715.7, 725.5]
    },
    nitrogen: {
        amount: 0,
        absorption: [410, 411, 491.5, 493.5, 528.1, 575.3, 599.9, 600.8, 641.2, 642.1, 642.3, 644.1, 648.2, 648.3, 648.4, 648.5, 649.1, 649.9, 650.6, 662.2, 663.7, 664.5, 664.7, 665.3, 665.7, 672.3, 740.6, 742.4, 744.2, 746.8]
    },
    sulfur: {
        amount: 0,
        absorption: [390.2, 393.3, 412.1, 414.2, 414.5, 415.3, 416.3, 469.4, 469.5, 469.6, 471.6, 481.6, 492.4, 492.5, 499.4, 542.9, 543.3, 545.4, 547.4, 551, 556.5, 560.6, 564, 564.7, 566, 566.5, 570.6, 581.9, 605.3, 628.6, 628.7, 630.6, 631.3, 638.5, 639.7, 639.8, 641.4, 674.4, 674.9, 675.7, 757.9]
    },
    sodium : {
        amount: 0,
        absorption: [371.1, 411.4, 412.3, 423.3, 424.1, 429.2, 429.3, 430.9, 432.1, 433.7, 434.4, 436.9, 437.5, 438.7, 439.3, 440.5, 444.7, 445.5, 445.7, 447.5, 447.9, 448.2, 449, 449.1, 450, 450.7, 451.9, 452.5, 453.3, 455.2, 459.1, 466.5, 466.9, 466.9, 472.2, 473.1, 474.2, 476.9, 497.9, 498.3, 568.3, 568.8, 589, 589.6, 615.4, 616.1, 653.1, 654.4, 654.6]
    }
};

var findMissingBands = function() {
    var gapList = [];
    for (var e in elements) {
        var element = elements[e];
        if (element.amount > 0) {
            var gaps = element.absorption;
            for (var i in gaps) {
                gapList.push(gaps[i]);
            }   
        }
    }
    gapList.sort();
    return gapList;
};

var gaps = findMissingBands();
var elementCount = 0;
for (var e in elements) { elementCount++; }

// Given a wavelength in nm return a reasonably accurate colour
// Colours will also depend on your monitor

var wavelengthToColour = function(wavelength, alpha) {
    var alpha = alpha || 255;
    
    // Black to violet (380 nm - 400 nm)
    if (wavelength < 400) {
        var p = max(0, 255 * (wavelength - 360) / 40);
        return color(p, 0,  p, alpha);
    }
    
    // Violet to blue  (400 nm - 450 nm)
    if (wavelength < 450) {
        var p = 255 * (wavelength - 400) / 50;
        return color(255 - p, 0,  255, alpha);
    }

    // Blue to cyan (450 nm - 480 nm)
    if (wavelength < 480) {
        var p = 255 * (wavelength - 450) / 30;
        return color(0, p,  255, alpha);
    }

    // Cyan to green (480 nm - 540 nm)
    if (wavelength < 540) {
        var p = 255 * (wavelength - 480) / 60;
        return color(0, 255,  255-p, alpha);
    }

    // Green to yellow (540 nm - 580 nm)
    if (wavelength < 580) {
        var p = 255 * (wavelength - 540) / 40;
        return color(p, 255, 0, alpha);
    }

    // Yellow to red (580 nm - 700 nm)
    if (wavelength < 700) {
        var p = 255 * (wavelength - 580) / 120;
        return color(255, 255-p, 0, alpha);
    }

    // Black to red (700 nm - 760 nm)
    if (wavelength < 750) {
        var p = 255 * (wavelength - 700) / 60;
        return color(255-p, 0, 0, alpha);
    }

    return color(0, 0, 0, alpha);
};

var drawPrism = function() {
    noFill();
    strokeWeight(3);
    stroke(160, 230, 255, 160);
    triangle(prismX - prismSize/2, prismY - prismHeight/2,
             prismX + prismSize/2, prismY - prismHeight/2,
             prismX, prismY + prismHeight/2);
    
    strokeWeight(1);
    stroke(230, 240, 255);
    triangle(prismX - prismSize/2, prismY - prismHeight/2,
             prismX + prismSize/2, prismY - prismHeight/2,
             prismX, prismY + prismHeight/2);
};

var drawAtmosphereChamber = function() {
    // Inner lower arc
    noFill();
    stroke(50);
    arc(bagX, bagY + bagH/2, bagW, 11, 180, 360);
    
    // Column
    noStroke();
    fill(200, 200, 255, 40);
    rect(bagX - bagW/2, bagY - bagH/2, bagW, bagH);
    rect(bagX - bagW/2 + 6, bagY - bagH/2 + 1, bagW/4, bagH + 5, 6);
    
    stroke(180);
    strokeWeight(1);
    line(bagX - bagW/2, bagY - bagH/2, bagX - bagW/2, bagY + bagH/2);
    line(bagX + bagW/2, bagY - bagH/2, bagX + bagW/2, bagY + bagH/2);
    
    // Outer lower arc
    stroke(240);
    arc(bagX + 1, bagY + bagH/2, bagW - 1, 11, 0, 180);
    
    // Top ellipse
    stroke(240);
    fill(50, 50, 64);
    ellipse(bagX + 1, bagY - bagH/2, bagW - 1, 11);
    
    // Pipe
    noStroke();
    fill(200, 200, 255, 40);
    rect(bagX - 2, gasY, 5, bagY - bagH/2 - gasY);
    stroke(180);
    line(bagX - 2, bagY - bagH/2 - 1, bagX - 2, gasY);
    line(bagX + 3, bagY - bagH/2-1, bagX + 3, gasY);
    arc(bagX+1, bagY - bagH/2, 4, 2, 0, 180);
    //ellipse(x, y + 3, 3, 5);
    
    var h = 20 * elementCount + 9;
    var y = gasY - h;
    fill(200, 200, 255, 20);
    rect(gasX, y, gasW, h, 8);
    
    noStroke();
    textSize(14);
    textAlign(LEFT, TOP);
    fill(255);
    text("Click on a gas to add or remove it", gasX, y - 22);
    
    textAlign(LEFT, TOP);
    for (var element in elements) {
        fill(60);
        if (mouseX >= gasX && mouseX <= gasX + 70 &&
            mouseY <= y + 24 && mouseY >= y + 5)  {
            fill(100);
            rect(gasX + 5, y + 5, gasW-10, 19, 5);
            fill(250);
        }
        if (elements[element].amount > 0) {
            fill(250);
            ellipse(gasX + 10, y + 14, 3, 3);
        }
        text(element, gasX + 14, y + 6);
        y += 20;
    }
};

var drawSpectrum = function(x, y, angle, spread) {
    var bands = (barX - x) * tan(spread);
    var deltaAngle = spread/bands;
    
    angle += spread/2;
    var dNM = 370 / bands; // change in nms per line
    var gapCount = 0;
    
    fill(240);
    strokeWeight(1);
    
    for (var i = 0; i<bands; i++) {
        var nm = 360 + i * dNM;
        var x2;
        var y2 = i - bands;
        
        stroke(wavelengthToColour(nm, 200));
        if (gapCount < gaps.length &&
            (abs(gaps[gapCount] - nm) < dNM/2 ||
             nm - gaps[gapCount] > dNM/2)) {
                // Gap
                gapCount++;
                /*
                x2 = bagX + bagW / 2;
                y2 = (bands - i) * (bagX + bagW / 2 - x) / (barX - x);
                line(x, y, x2, y - y2);*/
        } else {
            // No Gap
            x2 = barX;
            line(barX, y + y2, barX + barW, y + y2);
            line(x, y, x2, y + y2);
        }
        
    }
    
    // Outer box and ruler
    noFill();
    stroke(220);
    rect(barX, y, barW, -bands-1);
    
    textSize(13);
    textAlign(CENTER, BASELINE);
    text("Spectrum (nm)", barX + barW/2, y - bands - 7);
    
    textSize(11);
    textAlign(LEFT, CENTER);
    var d;
    for (var i = 360; i<740; i+=10) {
        var y2 = y - bands + (i - 360)/ dNM;
        if (i % 50 === 0) {
            d = 4;
            text(i, barX + barW + 7, y2); 
        } else {
            d = 2;
        }
        line(barX + barW, y2, barX + barW + d, y2);
    }
};

var draw = function() {
    background(0);
    
    // Light
    strokeWeight(2);
    stroke(255);
    var dy = 30;
    var x1 = prismX - prismSize/2 + dy * tan(30);
    var y1 = prismY - prismHeight/2 + dy;
    line(0, y1 - x1 * tan(lightAngle), x1, y1);
    
    // Refraction 1
    var l = 24;
    var x2 = x1 + l * cos(refraction1);
    var y2 = y1 + l * sin(refraction1);
    triangle(x1, y1, x2, y2, x2-1, y2+2);
    
    // Labels
    textSize(12);
    textAlign(LEFT, TOP);
    fill(255);
    text("Pure white light", 7, prismY + prismHeight/2 + 12);
    text("Atmosphere", bagX + bagW/2 + 6, bagY - bagH/2 + 12);
    
    strokeWeight(1);
    stroke(120);
    line(4, y1 - x1 * tan(lightAngle) + 5,
         22, prismY + prismHeight/2 + 12);
    
    var angle = 17;
    drawSpectrum(x2 + 2, y2+2, -angle, spread);
    drawPrism();
    drawAtmosphereChamber();
};

var mouseClicked = function() {
    if (mouseX >= gasX && mouseX <= gasX + 70) {
        var y = gasY - elementCount * 20 -6;
        for (var element in elements) {
            if (mouseY <= y + 19  && mouseY >= y)  {
                if (elements[element].amount > 0) {
                    elements[element].amount = 0;
                } else {
                    elements[element].amount = 1;
                }
                gaps = findMissingBands();
                break;
            }
            y += 20;
        }
    }
    
    
};