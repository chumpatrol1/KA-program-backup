var noiseScale = 0.02;

noiseDetail(3, 0.6);
noStroke();

var marbleEffect = function(tileSize) {
    // Based on http://lodev.org/cgtutor/randomnoise.html
    
    var xPeriod = 6;
    var yPeriod = 12;
    var turbPower = 1600;
    
    var c2 = color(240);
    var c1 = color(201, 193, 193);
    
    var x, y, z, pixelIndex;
    var bigSize = tileSize * 2;
    
    //loadPixels();
    
    for (y = 0; y < bigSize; y++) {
        for (x = 0; x < bigSize; x++) {
            z = abs(sin(x * xPeriod + y * yPeriod + turbPower * noise(x * noiseScale, y * noiseScale)));
            stroke(lerpColor(c1, c2, z));
            point(x, y);
        }
    }
    
    //updatePixels();
    
    bigSize -= tileSize;
    var halfSize = tileSize / 2;
    var tiles = [];
    
    for (x = 0; x < bigSize; x += halfSize) {
        for (y = 0; y < bigSize; y += halfSize) {
            tiles.push(get(x, y, tileSize, tileSize));
        }
    }
    
    return tiles;
};

var tileSize = 20;
var tiles = marbleEffect(tileSize * 2, tileSize);
var n = tiles.length;

var drawTile = function(x, y, s, t) {
    pushMatrix();
    translate(x + s / 2, y + s / 2);
    rotate(floor(random(90)) * 90);
    image(tiles[floor(random(n))], -s / 2, -s / 2, s, s);
    popMatrix();
    
    var r = random(0, 80);
    var q = random(0, r);
    fill(255 - q, 255 - q, 255 - r, 40);
    rect(x, y, s, s);
    
    // Shadow
    noStroke();
    fill(0, 0, 0, 40);
    beginShape();
    vertex(x, y);
    vertex(x + s, y);
    vertex(x + s - t, y + t);
    vertex(x + t, y + t);
    vertex(x + t, y + s - t);
    vertex(x, y + s);
    endShape(CLOSE);
    
    noStroke();
    fill(255, 255, 255, 128);
    beginShape();
    vertex(x + s, y + s);
    vertex(x + s, y);
    vertex(x + s - t, y + t);
    vertex(x + s - t, y + s - t);
    vertex(x + t, y + s - t);
    vertex(x, y + s);
    endShape(CLOSE);
};

var drawCircles = function(circles, x, y, r) {
    for (var i = 0; i < circles.length; i++) {
        var p = circles[i];
        ellipse(x + (p[0] + 0.5) * tileSize,
                y + (p[1] + 0.5) * tileSize,
                r, r);
        }
};

background(0);

var draw13by13 = function() {
    var startX = (width - 13 * tileSize) / 2;
    var startY = (height - 13 * tileSize) / 2;

    for (var y = 0; y < 13; y++) {
        for (var x = 0; x < 13; x++) {
            var tileX = startX + x * tileSize;
            var tileY = startY + y * tileSize;
            var distFromCenter = dist(x, y, 6, 6);
            //var distFromCenter = abs(6 - x) + abs(6 - y);
            
            var q = sqrt(29);
            //var q = sqrt(41);
            //q = 5;
            
            if ((y % 2 === 0) || (x % 2 === 0)) {
                // Center and edge
                if ((x === 6 && y === 6) || x % 12 === 0 || y % 12 === 0) {
                    drawTile(tileX, tileY, tileSize, 3);
                } else if (distFromCenter !== 3 && distFromCenter !== q) {
                    drawTile(tileX, tileY, tileSize, 3);
                }
            }
        }
    }
    
    // Draw exits
    var exits = [[-1, 3], [-1, 9], [13, 3], [13, 9],
                 [3, -1], [9, -1], [3, 13], [9, 13]];
                 
    noStroke();
    fill(80, 200, 80);
    drawCircles(exits, startX, startY, tileSize * 0.8);
    
    // Draw players
    stroke(255);
    fill(50, 120, 200);
    drawCircles([[0, 6], [6, 0], [12, 6], [6, 12]], startX, startY, tileSize * 0.75);
    
    fill(200, 0, 0);
    drawCircles([[6, 6]], startX, startY, tileSize * 0.75);
};

var draw17by17 = function(n) {
    var startX = (width - 17 * tileSize) / 2;
    var startY = (height - 17 * tileSize) / 2;
    var mid = floor(n / 2);
    
    var blocks = ["3,0", "5,2", "7,0", "7,4", "2,3", "0,5", "4,5", "2,7", "6,7"];
    
    for (var y = 0; y < n; y++) {
        for (var x = 0; x < n; x++) {
            var tileX = startX + x * tileSize;
            var tileY = startY + y * tileSize;
            var id = abs(mid - x) + ',' + abs(mid - y);

            if ((y % 2 === 0) || (x % 2 === 0)) {
                if (blocks.indexOf(id) === -1) {
                    drawTile(tileX, tileY, tileSize, 3);
                }
            }
        }
    }
    
    // Draw exits
    var exits = [[-1, 4], [-1, 12], [17, 4], [17, 12],
                 [4, -1], [12, -1], [4, 17], [12, 17]];
    for (var i = 0; i < exits.length; i++) {
        var p = exits[i];
        drawTile(startX  + p[0] * tileSize, startY + p[1] * tileSize, tileSize, 3);
    }
    
    // Draw players
    stroke(255);
    fill(50, 120, 200);
    drawCircles([[0, mid], [mid, 0], [n - 1, mid], [mid, n - 1]], startX, startY, tileSize * 0.75);
    
    fill(200, 0, 0);
    drawCircles([[mid, mid]], startX, startY, tileSize * 0.75);
};

var init = true;

draw = function() {
    /*
    if (init) {
        var p = imageData;
        if (p) {
            init = false;
            tiles = marbleEffect(p.data, tileSize * 2, tileSize);
            n = tiles.length;
        }
        return;
    }
    */
    
    draw17by17(17);
    noLoop();
};
