/*******************************************************
    WIP
 Card game to make fractions
 
 TODO:
  Card selection
  Test for make whole
  Calculate points
  Allow for discarding
  Make multiplayer
********************************************************/

var BACKGROUND = color(4, 114, 0);
var RED = color(232, 0, 0);
var BLUE = color(6, 18, 108);
var GREEN = color(6, 114, 0);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

/*******************************************************
    Handy functions
********************************************************/

var valueStringToArray = function(str) {
    return str.split('/');
};

var valueArrayToString = function(arr) {
    return arr.join('/');
};

var calculateCardSum = function(cards) {
    var sum = 0;
    for (var i = 0; i < cards.length; i++) {
        sum += cards[i].twelfths;
    }
    return sum;
};

var shuffle = function(arr) {
    for (var top = arr.length; top > 0; top--) {
        var newEnd = floor(random() * top);
        var tmp = arr[newEnd];
        arr[newEnd] = arr[top - 1];
        arr[top - 1] = tmp;
    }
    return arr;
};

var callFunctionForEach = function(arr, func, params) {
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        item[func].apply(item, params || []);
    }
};

/*******************************************************
    Card object
********************************************************/

var Card = function(valueStr, suit) {
    this.name = valueStr;
    this.suit = suit;
    this.color = suit === 'circle' ? RED : BLUE;
    this.drawShape = suit === 'circle' ? this.drawCircle : this.drawSquare;
    
    this.value = valueStringToArray(valueStr);
    this.decimal = this.value[0] / this.value[1];
    
    // 12 is the common denominator so find numerator in terms of 12ths
    this.twelfths = this.value[0] * 12 / this.value[1];
};

Card.prototype.toString = function() {
    return this.name + " " + this.suit; 
};

Card.prototype.draw = function(x, y, s) {
    var w = s;
    var h = s * 7 / 5;
    
    var mouseOver = (mouseX >= x && mouseX <= x + w && mouseY >= y && mouseY <= y + h);
    
    // Shadow
    fill(0, 0, 0, 60);
    noStroke();
    rect(x + 3, y + 3, w, h, s * 0.1);
    
    // Background
    fill(255);
    if (mouseOver) {
        strokeWeight(2);
        stroke(GREEN);
    } else {
        strokeWeight(1);
        stroke(20);
    }
    rect(x, y, w, h, s * 0.1);
    
    // Fraction text
    strokeWeight(1);
    fill(this.color);
    textAlign(CENTER, TOP);
    textFont(serifFont, s * 0.15);
    
    var th = textAscent() + textDescent();
    var d = s * 0.03;
    var d2 = d + th + 3;
    
    this.drawFraction(x, y, d, d2);
    
    pushMatrix();
    translate(x + w, y + h);
    rotate(180);
    this.drawFraction(0, 0, d, d2);
    popMatrix();
    
    this.drawShape(x, y, w, h);
};

Card.prototype.drawFraction = function(x, y, d, d2) {
    text(this.value[0], x + d * 3.5, y + d);
    text(this.value[1], x + d * 3.5, y + d2);
    stroke(this.color);
    line(x + d * 1.5, y + d2, x + d * 5.5, y + d2);
};

Card.prototype.drawShape = function(x, y, s) {};

Card.prototype.drawCircle = function(x, y, w, h) {
    x += w / 2;
    y += h / 2;
    var d = w * 0.66;
    
    strokeWeight(2);
    stroke(this.color);
    noFill();
    ellipse(x, y, d, d);
    
    fill(this.color);
    arc(x, y, d, d, -179, -180 + 360 * this.decimal);
};

Card.prototype.drawSquare = function(x, y, w, h) {
    var d = w * 0.6;
    x += (w - d) / 2;
    y += (h - d) / 2;
    
    strokeWeight(2);
    stroke(this.color);
    noFill();
    rect(x, y, d, d);
    
    fill(this.color);
    var h = d * this.decimal;
    rect(x, y + d - h, d, h);
    
};

/*******************************************************
    Player object
********************************************************/

var Player = function() {
    this.hand = [];
    this.points = 0;
};

Player.prototype.takeCard = function(deck) {
    this.hand.push(deck.pop());
};

Player.prototype.takeCards = function(deck, n) {
    this.hand = this.hand.concat(deck.splice(0, n));
};

Player.prototype.drawCards = function(deck, n) {
    this.hand = this.hand.concat(deck.splice(0, n));
};

Player.prototype.printHand = function() {
    println(this.hand.join("\n"));
};

Player.prototype.drawHand = function(x, y, s) {
    var startX = x;
    for (var i = 0; i < this.hand.length; i++) {
        this.hand[i].draw(x, y, s);
        x += s * 1.15;
        if (x > width - s) {
            x = startX;
            y += s;
        }
    }
};

/*******************************************************
 *  GUI Button
********************************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;

    this.defaultCol = color(0, 0, 0, 1);
    this.highlightCol = color(6, 114, 0);
    this.transition = 0;
    
    this.showing = true;
    this.selected = false;
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 15));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 15));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(15, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

Button.prototype.mouseReleased = function() {
    if (this.selected && this.showing && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

Button.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};
}
/*******************************************************
    Setup game
********************************************************/

var createDeck = function(values, suits) {
    var deck = [];
    for (var i = 0; i < suits.length; i++) {
        for (var value in values) {
            for (var j = 0; j < values[value]; j++) {
                deck.push(new Card(value, suits[i]));
            }
        }
    }
    return deck;
};

var createPlayers = function(n) {
    var players = [];
    for (var i = 0; i < n; i++) {
        players.push(new Player());
    }
    return players;
};

// Count of number of cards with each value
var values = {
    '1/1' : 1,
    '1/2' : 2, '2/4' : 1, '3/6' : 2, '6/12' : 1,
    '1/3' : 3, '2/6' : 2, '4/12' : 2,
    '1/4' : 4, '3/12' : 2,
    '1/6' : 6, '2/12' : 2, '5/6' : 1, '10/12' : 2,
    '1/12' : 10, '11/12' : 1,
    '2/3' : 1, '4/6' : 2, '8/12' : 2,
    '3/4' : 1, '9/12' : 2,
    '5/12' : 1, '7/12' : 1,
};

// Create deck
var deck = createDeck(values, ['circle', 'square']);
shuffle(deck);

// Create 4 player
//var players = createPlayers(4);
var player = new Player();

// Each player draws 4 cards
player.takeCards(deck, 4);

var playerDrawsCard = function() {
    player.takeCard(deck);
};

var buttons = [
    new Button(10, 30, 108, 24, "Make Whole"),
    new Button(122, 30, 108, 24, "Draw card", playerDrawsCard)
];

draw = function() {
    background(255);
    
    // Temporary display
    player.drawHand(20, 70, 80);
    
    fill(0);
    textAlign(LEFT, TOP);
    textSize(15);
    text(deck.length + " cards remaining", 10, 4);
    text(player.points + " points", 160, 4);
    
    callFunctionForEach(buttons, 'draw');
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    callFunctionForEach(buttons, 'mousePressed');
};

mouseDragged = function() {
};

mouseReleased = function() {
    callFunctionForEach(buttons, 'mouseReleased');
};

mouseOut = function() {
};

