/************************************************
 * Drag the vertices of polygons to change their shape
 * Drag the center of polyons to move them
*************************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

var polygons;

/*************************************************
 *      DraggablePoint
**************************************************/
{
var DraggablePoint = function(x, y) {
    this.x = x;
    this.y = y;
    this.r = 8;
    this.color = ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function(n) {
    if (this.selected || (!this.selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
        cursor(MOVE);
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = this.r * 2 + this.animation;
    ellipse(this.x, this.y, pr, pr);
    
    if (n !== undefined) {
        fill(0);
        textSize(10);
        textAlign(CENTER, CENTER);
        text(n, this.x, this.y);
    }
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r + 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};
}
/*************************************************
 *      Polygon
**************************************************/
{
var Polygon = function(points) {
    this.points = points.map(function(p) {
        return new DraggablePoint(p[0], p[1]);
    });
};

Polygon.prototype.draw = function() {
    strokeWeight(3);
    stroke(BLUE);
    
    var alpha = this.mouseOver() ? 120: 60;
    fill(BLUE + (alpha << 24));
    
    beginShape();
    for (var i = this.points.length; i--;) {
        vertex(this.points[i].x, this.points[i].y);
    }
    endShape(CLOSE);
    
    this.points.forEach(function(p, i) {
        p.draw(i);
    });
};

Polygon.prototype.getEdgeVectors = function() {
    var edges = [];
    var n = this.points.length;
    var p2, p1 = this.points[0];
    
    for (var i = 1; i <= n; i++) {
        p2 = this.points[i % n];
        edges.push({ x: p2.x - p1.x, y: p2.y - p1.y, intersections: [] });
        p1 = p2;
    }
    
    return edges;
};

// Move all the edge points, assume the center has already moved
Polygon.prototype.translatePoints = function(dx, dy) {
    for (var i = this.points.length; i--;) {
        this.points[i].x += dx;
        this.points[i].y += dy;
    }
};

Polygon.prototype.pointInside = function(x, y) {
    var inside = false;
    var n = this.points.length;
    var p1, p2 = this.points[n - 1];
    
    for (var i = 0; i < n; i++) {
        p1 = this.points[i];
        
        if (((p1.y > y) !== (p2.y > y)) &&
             (x < (p2.x - p1.x) * (y - p1.y) / (p2.y - p1.y) + p1.x)) {
           inside = !inside;
        }
        p2 = p1;
    }
    return inside;
};

Polygon.prototype.mouseOver = function() {
    return this.pointInside(mouseX, mouseY);
};

Polygon.prototype.mousePressed = function() {
    for (var i = this.points.length; i--;) {
        if (this.points[i].mouseOver()) {
            this.selectedVertex = this.points[i];
            this.selectedShape = false;
            return;
        }
    }
    
    // If no vertex selected, then check shape
    if (this.mouseOver()) {
        this.selectedShape = true;
    }
};

Polygon.prototype.mouseDragged = function() {
    var dx = mouseX - pmouseX;
    var dy = mouseY - pmouseY;
    if (this.selectedVertex) {
        this.selectedVertex.move(dx, dy);
    } else if (this.selectedShape) {
        this.translatePoints(dx, dy);
    }
};

Polygon.prototype.mouseReleased = function() {
    this.selectedVertex = false;
    this.selectedShape = false;
};
}
/*************************************************
 *      Combination functions
**************************************************/
var intersections = [];

var newPoints = [];
var currentShape = 0;
var currentPoint = 0;
var inside, shapes, points, edges;

var findIntersections = function(shape1, shape2) {
    // First get array of edges as vectors
    var edges1 = shape1.getEdgeVectors();
    var edges2 = shape2.getEdgeVectors();
    var points1 = shape1.points;
    var points2 = shape2.points;
    var intersectionCount = 0;
    var i, j, p1, p2, edge1, edge2, s, t, ix, iy, intersection;
    
    // Test each line with with each other line
    // TODO: figure out what happens if a vertex is on the line
    for (i = edges1.length; i--;) {
        edge1 = edges1[i];
        p1 = points1[i];
        
        for (j = edges2.length; j--;) {
            edge2 = edges2[j];
            s = edge2.x * edge1.y - edge2.y * edge1.x;
            
            // Check line aren't parallel
            if (abs(s) > 1e-5) {
                p2 = points2[j];
                s = (edge1.x * (p2.y - p1.y) - edge1.y * (p2.x - p1.x)) / s;
                
                // Check point is on edge 2
                if (s > 0 && s <= 1) {
                    t = edge1[0] !== 0 ?
                        (p2.x - p1.x + edge2.x * s) / edge1.x :
                        (p2.y - p1.y + edge2.y * s) / edge1.y;
                        
                    // Check point is on line 1
                    if (t > 0 && t <= 1) {
                        // Calculate intersection
                        ix = p1.x + edge1.x * t;
                        iy = p1.y + edge1.y * t;
                        
                        // Store intersection position and index of opposite edge
                        // Need to store opposite intersection value
                        intersection = {
                            x: ix,
                            y: iy,
                            t: t,
                            edge: j
                        };
                        
                        edge1.intersections.push({
                            x: ix,
                            y: iy,
                            t: t,
                            edge: j
                        });
                        edge2.intersections.push({
                            x: ix,
                            y: iy,
                            t: s,
                            edge: i
                        });
                        intersectionCount++;
                        intersections.push({x: ix, y: iy});
                    }
                }
            }
            
        }
    }
    
    // If no intersections then quit now
    if (!intersectionCount) { return; }
    
    shapes = [shape1, shape2];
    points = [points1, points2];
    edges = [edges1, edges2];
    
    var sortByT = function(a, b) { return a.t - b.t; };
    
    // Sort intersections so they are in order along the length of edges
    for (var i = edges.length; i--;) {
        var e = edges[i];
        for (var j = e.length; j--;) {
            if (e[j].intersections.length > 1) {
                e[j].intersections.sort(sortByT);
            }
        }
    }
    
    newPoints = [];
    currentShape = 0;
    currentPoint = 0;
    
    // Only need to test whether the first point is inside the other shape
    // Infer the rest based on whether edges intersect
    inside = shapes[1].pointInside(points[0][0].x, points[0][0].y);
    
    println(points[0][0].x + " " + points[0][0].y);
    println(inside);
    
    /*
    var newPoints = [];
    var currentShape = 0;
    var currentPoint = 0;
    
    // Only need to test first point to see whether it's inside
    // Infer the rest based on whether edges intersect
    var inside = shapes[0].pointInside(points[0].x, points[0].y);
    
    // If all points inside, then A subsumed by B

    while (newPoints.length === 0 || currentShape || currentPoint) {
        println("Shape " + currentShape + "; point " + currentPoint);
        
        if (!inside) {
            var p = points[currentShape][currentPoint];
            newPoints.push([p.x, p.y]);
        }
        
        // Check edge for intersection
        var intersection = edges[currentShape][currentPoint].intersections;
        if (!intersection.length) {
            currentPoint++;
            if (currentPoint >= shapes[currentShape].points.length) {
                currentPoint = 0;
            }
        } else {
            if (inside) {
                inside = false;
            } else {
                // Add the intersection point
                newPoints.push([intersection[0].x, intersection[0].y]);
    
                // Swap shape
                currentShape = 1 - currentShape;
                
                // Set the new edge number
                currentPoint = intersection[0].edge;
                
                // TODO: check for another intersection
                currentPoint++;
                if (currentPoint >= shapes[currentShape].points.length) {
                    currentPoint = 0;
                }
            }
        }
    }
    
    for (var i = 0; i < newPoints.length; i++) {
        //println(newPoints);
    }
    
    // Remove old shapes
    polygons.splice(polygons.indexOf(shape1), 1);
    polygons.splice(polygons.indexOf(shape2), 1);
    
    // Add new shape
    polygons.push(new Polygon(newPoints));
    */
};


var getShape = function() {
    println("Shape " + currentShape + "; point " + currentPoint);
    if (!inside) {
        var p = points[currentShape][currentPoint];
        newPoints.push([p.x, p.y]);
    }
    
    // Check edge for intersection
    var intersection = edges[currentShape][currentPoint].intersections;
    
    if (intersection.length) {
        if (inside) {
            inside = false;
        } else {
            // Add the intersection point
            newPoints.push([intersection[0].x, intersection[0].y]);

            // Swap shape
            currentShape = 1 - currentShape;
            
            // Set the new edge number
            currentPoint = intersection[0].edge;
            
            // TODO: check for another intersection
        }
    }
    
    currentPoint++;
    if (currentPoint >= shapes[currentShape].points.length) {
        currentPoint = 0;
    }
};

/****************************************
 *      Create objects
****************************************/

var selectables = [];

polygons = [
    new Polygon([[110, 80], [170, 85], [190, 160], [140, 190], [80, 130]]),
    new Polygon([[200, 220], [250, 210], [300, 260], [280, 300], [220, 320], [180, 280]])
];

polygons = [
    new Polygon([[100, 80], [300, 80], [300, 120], [100, 120]]),
    new Polygon([[100, 200], [130, 200], [130, 340], [170, 340], [170, 200], [200, 200], [200, 380], [100, 380]])
];

/****************************************
 *      Main loop
****************************************/

var draw = function() {
    background(BACKGROUND);
    cursor('default');
    
    polygons.forEach(function(p) { p.draw(); });
    
    stroke(GREEN);
    strokeWeight(6);
    intersections.forEach(function(p) { point(p.x, p.y); });
    
    stroke(200, 0, 0);
    strokeWeight(1);
    noFill();
    newPoints.forEach(function(p) { ellipse(p[0], p[1], 12, 12); });
    
    if (points) {
        var p = points[currentShape][currentPoint];
        strokeWeight(3);
        ellipse(p.x, p.y, 16, 16);
        
        fill(0);
        textSize(13);
        text(currentShape, 10, 10);
    }
    
};

/****************************************
 *      Event handling
****************************************/
{
keyPressed = function() {
    if (key.toString() === 'u') {
        findIntersections(polygons[0], polygons[1]);
    }
    if (key.toString() === 'n') {
        getShape();
    }
};
    
mousePressed = function() {
    polygons.forEach(function(p) { p.mousePressed(); });
};

mouseDragged = function() {
    polygons.forEach(function(p) { p.mouseDragged(); });
};

mouseReleased = function() {
    polygons.forEach(function(p) { p.mouseReleased(); });
};

mouseOut = mouseReleased;
}
