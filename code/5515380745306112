var CONTROL_POINT_SIZE = 16;
var BACKGROUND = color(250, 250, 250);
var PARABOLA_COL = color(64, 95, 237);

var selectedPoint = false;
var mySlider;

var yAxis = 125;

// Given the end points of two lines (x1, y1) to (x2, y2) and (x3, y3) to (x4, y4),
// return the point where they intersect
// Assume lines do intersect (i.e. are not parallel and are not segments)
var findIntersection = function(x1, y1, x2, y2, x3, y3, x4, y4) {
    var dx1 = (x1 - x2);
    var dx2 = (x3 - x4);
    var dy1 = (y1 - y2);
    var dy2 = (y3 - y4);
    var d = dx1 * dy2 - dy1 * dx2;
    return [(dx2 * (x1 * y2 - y1 * x2) - dx1 * (x3 * y4 - y3 * x4)) / d,
            (dy2 * (x1 * y2 - y1 * x2) - dy1 * (x3 * y4 - y3 * x4)) / d];
};

var Slider = function(x, y, width, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;

    this.draw = function() {
        noStroke();
        fill(200);
        rect(this.x, this.y-1, this.width+2, 3, 4);
        
        strokeWeight(1);
        stroke(60);
        line(this.x + 1, this.y-1, x + this.width, this.y);
    
        fill(180);
        stroke(50);
        rect(this.bx, this.y-8, 10, 16, 3);
        
        for (var i=0; i<3; i++) {
            var y = this.y + i*3 - 3;
            stroke(50);
            line(this.bx + 3, y, this.bx + 7, y); 
            stroke(200);
            line(this.bx + 3, y+1, this.bx + 7, y+1); 
        }
    };
    
    this.selected = function() {
        this.held = mouseX > this.bx - 1 && mouseX < this.bx + 11 && 
                    mouseY > this.y - 9 && mouseY < this.y + 9;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + round((x - this.x) * this.scale);
        }
    };
  
    // This is used if you want to update the value in a way other
    // than using the slider (but want the slider to update).
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

// Control points are circles that can be dragged
var ControlPoint = function(x, y) {
    this.x = x;
    this.y = y;
    this.r = CONTROL_POINT_SIZE;
};

ControlPoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r / 2;
};

ControlPoint.prototype.draw = function() {
    noStroke();
    
    if (this.mouseover()) {
        strokeWeight(2);
        stroke(100, 100, 200);
        fill(200, 200, 200, 230);
    } else {
        noStroke();
        fill(160, 160, 200, 140);
    }
    
    ellipse(this.x, this.y, this.r, this.r);
};

// Curve defined by two points at (x1, y1) and (x2, y2).
// They are joined by a third point, l pixels away
var Curve = function(x1, y1, x2, y2, length) {
    this.length = length;
    this.p1 = new ControlPoint(x1, y1);
    this.p2 = new ControlPoint(x2, y2);
    this.p3 = new ControlPoint(0, 0);
    this.controlPoints = [this.p1, this.p2, this.p3];
    this.angle1 = 0;
    this.angle2 = 0;
    
    // Find point between the two end points
    this.findApexPoint = function() {
        var angle = atan2(this.p1.y - this.p2.y, this.p1.x - this.p2.x) + 90;
        var midLength = dist(this.p1.x, this.p1.y, this.p2.x, this.p2.y) * 0.5;
        var midX = (this.p1.x + this.p2.x) * 0.5;
        var midY = (this.p1.y + this.p2.y) * 0.5;
        
        // Points stretched in a line
        if (midLength >= this.length) {
            this.length = midLength;
        }
        
        var d = sqrt(this.length * this.length - midLength * midLength);
        this.p3.x = midX + d * cos(angle);
        this.p3.y = midY - d * sin(angle);
        
        var angle1 = atan2(this.p3.y - this.p1.y, this.p3.x - this.p1.x);
        var angle2 = atan2(this.p3.y - this.p2.y, this.p3.x - this.p2.x);
        this.ca1 = cos(angle1);
        this.ca2 = cos(angle2);
        this.sa1 = sin(angle1);
        this.sa2 = sin(angle2);
    };
    this.findApexPoint();
};

Curve.prototype.draw = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        this.controlPoints[i].draw();
    }
    
    strokeWeight(1);
    stroke(160);
    var n = mySlider.val;
    for (var i = 0; i <= n; i++) {
        var len1 = this.length * i / (n + 1);
        var len2 = this.length * (n - i) / (n + 1);
        var x1 = this.p1.x + len1 * this.ca1;
        var y1 = this.p1.y + len1 * this.sa1;
        var x2 = this.p2.x + len2 * this.ca2;
        var y2 = this.p2.y + len2 * this.sa2;
        line(x1, y1, x2, y2);
    }
    
    strokeWeight(2);
    stroke(20, 20, 20);
    line(this.p1.x, this.p1.y, this.p3.x, this.p3.y);
    line(this.p2.x, this.p2.y, this.p3.x, this.p3.y);
    
    // Draw parabola
    strokeWeight(4);
    stroke(PARABOLA_COL);
    var x1 = this.p1.x;
    var y1 = this.p1.y;
    var x2 = this.p2.x + this.length * n / (n + 1) * this.ca2;
    var y2 = this.p2.y + this.length * n / (n + 1) * this.sa2;
    
    this.approxLength = 0;
    for (var i = 1; i <= n; i++) {
        var len1 = this.length * i / (n + 1);
        var len2 = this.length * (n - i) / (n + 1);
        var x3 = this.p1.x + len1 * this.ca1;
        var y3 = this.p1.y + len1 * this.sa1;
        var x4 = this.p2.x + len2 * this.ca2;
        var y4 = this.p2.y + len2 * this.sa2;
        var coord = findIntersection(x1, y1, x2, y2, x3, y3, x4, y4);
        
        line(x1, y1, coord[0], coord[1]);
        this.approxLength += dist(x1, y1, coord[0], coord[1]);
        
        x1 = coord[0];
        y1 = coord[1];
        x2 = x4;
        y2 = y4;
    }

    line(x1, y1, this.p2.x, this.p2.y);
    this.approxLength += dist(x1, y1, this.p2.x, this.p2.y);
};

Curve.prototype.selectPoint = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseover()) {
            selectedPoint = i;
        }
    }
};

Curve.prototype.mouseDrag = function() {
    if (selectedPoint !== false) {
        if (selectedPoint < 2) {
            // End point
            this.controlPoints[selectedPoint].x += mouseX - pmouseX;
            this.controlPoints[1 - selectedPoint].x -= mouseX - pmouseX;
        } else {
            // Move mid point along line to center of two end points
            // Need to fix for when swapping angle
            var d1 = dist(this.p1.x, this.p1.y, mouseX, mouseY);
            var d2 = dist(this.p2.x, this.p2.y, mouseX, mouseY);
            this.length = (d1 + d2) * 0.5;
        }
        this.findApexPoint();
    }
};

var myCurve = new Curve(50, yAxis, 350, yAxis, 280);
mySlider = new Slider(95, 14, 200, 0, 49, 9);

var drawAxis = function() {
    strokeWeight(1);
    stroke(40);
    fill(40);
    
    line(0, yAxis, 400, yAxis);
    line(200, 80, 200, 400);
};

// Draw the real parabola
var drawParabola = function() {
    var b = myCurve.p1.x - 200;
    var x1 = -abs(b);
    var y1 = yAxis;
    var n = 40;
    var dx = -x1 * 2 / n;
    
    var minY = (myCurve.p1.y + myCurve.p3.y) * 0.5 - yAxis;
    var a = minY / (b * b);
    
    // Draw parabola
    stroke(255, 0, 0);
    strokeWeight(1);
    for (var i = 0; i < n; i++) {
        var x2 = x1 + dx;
        var y2 = -(x2 - b) * (x2 + b) * a + yAxis;
        line(x1 + 200, y1, x2 + 200, y2);
        x1 = x2;
        y1 = y2;
    }
};

var drawLabel = function() {
    strokeWeight(1);
    stroke(40);
    fill(40);
    textAlign(LEFT, BASELINE);
    text("(0, 0)", 202, yAxis - 4);
    
    var b = abs(myCurve.p1.x - 200);
    textAlign(CENTER, BASELINE);
    text("(-" + b + ", 0)", 200 - b, yAxis - CONTROL_POINT_SIZE/2 - 3);
    text("(" + b + ", 0)", 200 + b, yAxis - CONTROL_POINT_SIZE/2 - 3);
    
    var c = myCurve.p3.y;
    textAlign(LEFT, CENTER);
    text("(0, " + (-round(c - yAxis)) + ")", 202 + CONTROL_POINT_SIZE/2, c);
    
    var minY = (myCurve.p1.y + myCurve.p3.y) * 0.5 - yAxis;
    line(200, minY + yAxis, 210 + b/2, minY + yAxis);
    text("(0, " + (-round(minY)) + ")", 212 + b/2, minY + yAxis);
    
    // Write equations
    textAlign(LEFT, BASELINE);
    fill(10);
    var a = minY / (b * b);
    var tx = 8;
    var ty = 40;
    var dy = 16;
    text("y = (x - " + abs(b) + ")( x + " + abs(b) + ") / " + round(1 / a), tx, ty);
    
    var txt = "y = x";
    tx += textWidth(txt);
    ty += dy;
    text(txt, 8, ty);
    textSize(8);
    txt = "2";
    text(txt, tx, ty - 5);
    tx += textWidth(txt);
    textSize(13);
    text(" / " + round(1 / a) + " - " + round(b * b * a), tx, ty);
    
    b *= a;
    ty += dy;
    var s = sqrt(1 + 4 * b * b);
    var l = b * s + 0.5 * log(2 * b + s);
    text("Parabola length: " + round(l / a), 8, ty);
    
    ty += dy;
    text("Length of approximation: " + round(myCurve.approxLength), 8, ty);
};

var draw = function() {
    background(BACKGROUND);
    
    drawAxis();
    myCurve.draw();
    //drawParabola();
    drawLabel();
    
    fill(10);
    textSize(13);
    textAlign(LEFT, BASELINE);
    text("Segments: " + (mySlider.val + 1), 5, 18);
    mySlider.draw();
};

var mousePressed = function() {
    myCurve.selectPoint();
    mySlider.selected();
};

var mouseReleased = function() {
    selectedPoint = false;
    mySlider.held = false;
};

var mouseDragged = function() {
    myCurve.mouseDrag();
    mySlider.drag();
};