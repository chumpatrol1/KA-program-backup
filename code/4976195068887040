/*******************************************************
    ~ Fraction card game ~
 
 Drag cards from the main deck onto one of the other piles.
 When the top card in each pile (not including the main deck)
 sum to 1, press Make Whole.
 (Empty piles are ignored.)
 If the cards sum to 1, then they are removed from the game.
 You get points based on how complex the sum is.
 You get bonus points if all the cards are the same suit.
 You can click a holding pile to see the cards in contains.
 Keep going until all the cards in the main deck are used.
 A total of 40 wholes can be made.

HIGH SCORES:
    Me  30 Wholes, 3744 points
    Me  36 Wholes, 3710 points
    Me  34 Wholes, 3650 points
    Me  30 Wholes, 3548 points
    Me  36 Wholes, 3404 points
    Me  32 Wholes, 3360 points
    Me  26 Wholes, 3248 points
 
 TODO:
    Main Menu: Game, Help, Puzzles, Tutorial
    Add puzzle menu
    Create well-organised interface
    Nicer scoring menu
    Nicer Help menu/tutorial
    Undo (before pressing Make Whole)?
********************************************************/

var BACKGROUND = color(4, 114, 0);
var BACKGROUND = color(250);
var RED = color(232, 0, 0);
var BLUE = color(6, 18, 108);
var GREEN = color(6, 114, 0);

var CARD_WIDTH = 90;
var CARD_HEIGHT = CARD_WIDTH * 7 / 5;

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

// Count of number of cards with each value
var CARD_VALUES = {
    '1/1' : 1,
    '1/2' : 2, '2/4' : 1, '3/6' : 2, '6/12' : 1,
    '1/3' : 3, '2/6' : 2, '4/12' : 2,
    '1/4' : 4, '3/12' : 2,
    '1/6' : 6, '2/12' : 2, '5/6' : 1, '10/12' : 2,
    '1/12' : 10, '11/12' : 1,
    '2/3' : 1, '4/6' : 2, '8/12' : 2,
    '3/4' : 1, '9/12' : 2,
    '5/12' : 1, '7/12' : 1,
};

var showWindow = false;
var showCardsInPile = false;
var selectedCard = false;

/*******************************************************
    Handy functions
********************************************************/

var valueStringToArray = function(str) {
    return str.split('/');
};

var valueArrayToString = function(arr) {
    return arr.join('/');
};

var calculateCardSum = function(cards) {
    var sum = 0;
    for (var i = 0; i < cards.length; i++) {
        sum += cards[i].twelfths;
    }
    return sum;
};

var shuffle = function(arr) {
    for (var top = arr.length; top > 0; top--) {
        var newEnd = floor(random() * top);
        var tmp = arr[newEnd];
        arr[newEnd] = arr[top - 1];
        arr[top - 1] = tmp;
    }
    return arr;
};

var forEach = function(arr, func, params) {
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        item[func].apply(item, params || []);
    }
};

var getGCD = function(arr) {
    if (arr.length > 2) {
        return getGCD(arr[0], getGCD(arr.slice(1)));
    } else {
        var a = arr[0];
        var b = arr[1];

        while (b) {
            var mod = a % b;
            a = b;
            b = mod;
        }

        return a;
    }
};

var getLCM = function(arr) {
    if (arr.length === 1) {
        return arr[0];
    } else if (arr.length ===  2) {
        var a = arr[0];
        var b = arr[1];
        return a * b / getGCD([a, b]);
    } else {
        return getLCM([arr[0], getLCM(arr.slice(1))]);
    }
};

var writeFraction = function(x, y, value) {
    var w = max(textWidth(value[0]), textWidth(value[1])) / 2 + 2;
    textAlign(CENTER, BASELINE);
    text(value[0], x + w / 2, y - 4);
    textAlign(CENTER, TOP);
    text(value[1], x + w / 2, y + 1);
    line(x, y, x + w, y);
    return x + w;
};

/*******************************************************
 *  GUI Button
********************************************************/
{
var Button = function(x, y, w, h, name, params) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    params = params || {};
    
    if (params.trigger) {
        this.trigger = params.trigger.bind(this);
    }
    
    this.defaultCol = color(230, 230, 230);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    this.textSize = params.textSize || 15;
    this.textFont = createFont('sans', this.textSize);
    
    if (params.filled) {
        this.makeFilled();
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(250);
};

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(20);
    }
    
    textFont(this.textFont);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    var p = this.transition / 10;
    
    fill(lerpColor(this.defaultCol, this.highlightCol, p));
    strokeWeight(1);
    stroke(255);
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    fill(lerpColor(this.highlightCol, color(255, 255, 255), p));
    textFont(this.textFont);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.fade = function() {
    if ((!mouseIsPressed && this.mouseOver()) || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

Button.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

Button.prototype.trigger = function() {
    // To be over-written
};

}
/*******************************************************
    Window object
 To display text over the main screen.
********************************************************/
{
var Window = function(y, w, h, title, _fill, _stroke) {
    this.x = (width - w) / 2;
    this.y = y;
    this.w = w;
    this.h = h;
    this.c = 10;
    this.title = title;
    
    this.fill = _fill || color(255);
    this.stroke = _stroke || color(180);
    this.transition = 0;
    
    // Close button
    this.cr = 10;
    this.cx = this.x + this.w - this.cr - 6;
    this.cy = this.y + this.cr + 6;
};

Window.prototype.draw = function() {
    noStroke();
    fill(0, 0, 0, 160);
    rect(0, 0, width, height);
    
    // Shadow
    noStroke();
    fill(0, 0, 0, 50);
    rect(this.x + 4, this.y + 4, this.w, this.h, this.c);
    
    // Background
    fill(this.fill);
    stroke(this.stroke);
    strokeWeight(3);
    rect(this.x, this.y, this.w, this.h, this.c);
    
    // Close button
    this.fade();
    var c = color(200, 0, 0);
    fill(lerpColor(this.fill, c, this.transition / 10));
    stroke(c);
    strokeWeight(2);
    ellipse(this.cx, this.cy, this.cr * 2, this.cr * 2);
    
    stroke(lerpColor(c, this.fill, this.transition / 10));
    var d = this.cr * 0.4;
    line(this.cx - d, this.cy - d, this.cx + d, this.cy + d);
    line(this.cx - d, this.cy + d, this.cx + d, this.cy - d);
    
    // Title
    fill(20, 20, 40);

    textAlign(CENTER, TOP);
    textSize(24);
    text(this.title, this.x + this.w / 2, this.y + 5);
    
    this.drawContents(this.x, this.y, this.w);
};

Window.prototype.drawContents = function(x, y, w) {
    // To be overwritten
};

Window.prototype.drawText = function(x, y, w, title, txt) {
    x += 8;
    y += 40;
    textAlign(LEFT, TOP);
    textSize(14);
    txt.forEach(function(t) {
        text(t, x, y);
        y += 20;
    });
};

Window.prototype.fade = function() {
    if (this.mouseOverClose() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

Window.prototype.mouseOverClose = function() {
    return dist(mouseX, mouseY, this.cx, this.cy) <= this.cr;
};

Window.prototype.mousePressed = function() {
    this.selected = this.mouseOverClose();
};

Window.prototype.mouseReleased = function() {
    if (this.selected) {
        this.selected = false;
        return this.mouseOverClose();
    }
};
}
/*******************************************************
    Card object
********************************************************/
{
var Card = function(valueStr, suit) {
    this.name = valueStr;
    this.suit = suit;
    this.color = suit === 'circle' ? RED : BLUE;
    this.drawShape = suit === 'circle' ? this.drawCircle : this.drawSquare;
    
    this.value = valueStringToArray(valueStr);
    this.decimal = this.value[0] / this.value[1];
    
    // 12 is the common denominator so find numerator in terms of 12ths
    this.twelfths = this.value[0] * 12 / this.value[1];
};

Card.prototype.toString = function() {
    return this.name + " " + this.suit; 
};

Card.prototype.draw = function(x, y, s) {
    var mouseOver;
    var x = x || this.x;
    var y = y || this.y;
    var w = s || CARD_WIDTH;
    var h = w * 7 / 5;
    var curve = w * 0.1;
    
    if (this.animation) {
        mouseOver = false;
        var t = cos(90 * this.animation / this.animationMax);
        x = lerp(this.x, this.targetX, t);
        y = lerp(this.y, this.targetY, t);
        this.animation--;
        if (!this.animation) {
            // End animation
            this.x = this.targetX;
            this.y = this.targetY;
            this.targetPile.cards.push(this);
            selectedCard = false;
        }
    } else {
        mouseOver = this.mouseOver();
    }
    
    // Shadow
    fill(0, 0, 0, 40);
    noStroke();
    rect(x + 3, y + 3, w, h, curve);
    
    // Background
    fill(250);
    if (mouseOver) {
        strokeWeight(3);
        stroke(250);
    } else {
        strokeWeight(1);
        stroke(20);
    }
    rect(x, y, w, h, curve);
    
    // Fraction text
    strokeWeight(1);
    fill(this.color);
    textAlign(CENTER, TOP);
    textFont(serifFont, w * 0.15);
    
    var th = textAscent() + textDescent();
    var d = CARD_WIDTH * 0.025;
    var d2 = d + th + 3;
    
    this.drawFraction(x, y, d, d2);
    
    pushMatrix();
    translate(x + w, y + h);
    rotate(180);
    this.drawFraction(0, 0, d, d2);
    popMatrix();
    
    this.drawShape(x, y, w, h);
};

Card.prototype.drawFraction = function(x, y, d, d2) {
    text(this.value[0], x + d * 3.5, y + d);
    text(this.value[1], x + d * 3.5, y + d2);
    stroke(this.color);
    line(x + d * 1.5, y + d2, x + d * 5.5, y + d2);
};

Card.prototype.drawShape = function(x, y) {};

Card.prototype.drawCircle = function(x, y, w, h) {
    x += w / 2;
    y += h / 2;
    var d = w * 0.66;
    
    strokeWeight(2);
    stroke(this.color);
    noFill();
    ellipse(x, y, d, d);
    
    fill(this.color);
    arc(x, y, d, d, -179, -180 + 360 * this.decimal);
};

Card.prototype.drawSquare = function(x, y, w, h) {
    var d = w * 0.6;
    x += (w - d) / 2;
    y += (h - d) / 2;
    
    strokeWeight(2);
    stroke(this.color);
    noFill();
    rect(x, y, d, d);
    
    fill(this.color);
    var h = d * this.decimal;
    rect(x, y + d - h, d, h);
    
};

Card.prototype.addToPileAnimated = function(pile) {
    this.targetX = pile.x;
    this.targetY = pile.y;
    this.targetPile = pile;
    this.animation = max(1, floor(sqrt(dist(this.x, this.y, pile.x, pile.y))));
    this.animationMax = this.animation;
};

Card.prototype.mouseOver = function() {
    return mouseX >= this.x && mouseX <= this.x + CARD_WIDTH &&
           mouseY >= this.y && mouseY <= this.y + CARD_HEIGHT;
};
}
/*******************************************************
    Pile object
********************************************************/
{
var Pile = function(x, y, cards) {
    this.x = x;
    this.y = y;
    this.w = CARD_WIDTH;
    this.h = CARD_HEIGHT;
    
    this.cards = [];
    if (cards) { this.addCards(cards); }
    this.showCardCount = true;
    
    Object.defineProperty(this, 'length', {
        get: function() { return this.cards.length; }
    });
    
    Object.defineProperty(this, 'topCard', {
        get: function() {
            return this.cards[this.length - 1];
        }
    });
};

Pile.prototype.draw = function() {
    if (!this.length) {
        // Empty pile
        strokeWeight(2);
        stroke(200);
        fill(250, 250, 250, this.mouseOver() ? 200 : 50);
        rect(this.x, this.y, this.w, this.h, this.w  *0.1);
    } else {
        // Draw top card face up
        this.topCard.draw();
    }
    
    if (this.showCardCount) {
        fill(255);
        textAlign(CENTER, TOP);
        textSize(15);
        text(this.length + " cards", this.x + this.w / 2, this.y + this.h + 3);
    }
};

Pile.prototype.addCards = function(cards) {
    cards.forEach(function(card) {
        if (typeof card === 'string') {
            card = card.split('#');
            card = new Card(card[0], card[1] || 'circle');
        }
        card.x = this.x;
        card.y = this.y;
        this.cards.push(card);
    }.bind(this));
};

Pile.prototype.takeCard = function() {
    if (this.cards.length) {
        selectedCard = this.cards.pop();
        selectedCard.x = this.x;
        selectedCard.y = this.y;
    }
};

Pile.prototype.showCards = function() {
    noStroke();
    fill(0, 0, 0, 160);
    rect(0, 0, width, height);
    
    var dx = (width - 10 - CARD_WIDTH) / (this.length + 1);
    var x = dx + 5;
    var y = 120;
    
    this.cards.forEach(function(card) {
        card.draw(x, y);
        x += dx;
    });
};

Pile.prototype.mouseOver = function() {
    return mouseX >= this.x && mouseX <= this.x + this.w &&
           mouseY >= this.y && mouseY <= this.y + this.h;
};

// Create n piles at a given y-coordinate, evenly space across the width
var createPiles = function(cards, y) {
    var piles = [];
    var m = 6;  // Max along width
    var dx = (width - m * CARD_WIDTH) / (m + 1);
    var x = dx + 2 * (CARD_WIDTH + dx);
    
    if (typeof cards === 'number') {
        for (var i = 0; i < cards; i++) {
            piles.push(new Pile(x, y));
            x += CARD_WIDTH + dx;
            if (x + CARD_WIDTH >= width) {
                x = dx;
                y = 212;
            }
        }
    } else {
       for (var i = 0; i < cards.length; i++) {
            piles.push(new Pile(x, y, cards[i]));
            x += CARD_WIDTH + dx;
            if (x + CARD_WIDTH >= width) {
                x = dx;
                y = 212;
            }
        }
    }
    
    return piles;
};
}
/*******************************************************
    Windows for displaying information
********************************************************/

var helpWindow = new Window(45, 366, 285, "Help", fill(255), color(0, 50, 160));
helpWindow.drawContents = function(x, y, w) {
    var txt = [
        "The aim is to make sets of fractions sum to one whole.",
        "Fraction cards start face-up in the main deck (top left).",
        "Drag cards, one-by-one from the main deck to one of",
        "the six holding piles.",
        "Once in a holding pile, cards cannot be moved.",
        "When you think the top card from each holding pile sums to 1,",
        "press the Make Whole button (empty piles are ignored).",
        "If they sum to 1, you get points for how complex your",
        "sum is and if all the cards have the same suit.",
        "The top cards are then removed from each pile.",
        "Otherwise you lose points.",
        "Keep going until there are no more cards in the main deck.",
    ];
    
    this.drawText(x, y, w, "Help", txt);
};

var strategyWindow = new Window(45, 366, 204, "Strategy", fill(255), color(0, 50, 160));
strategyWindow.drawContents = function(x, y, w) {
    var txt = [
        "When you pick up a card, check the one below it.",
        "If all the cards, including the one below sum to more than 1,",
        "see if covering one card could bring the total down to 1.",
        "It's generally best to keep the number of piles small (2-3).",
        "Only make more piles if you see a whole coming up, or the",
        "fractions are very small.",
        "Keep piles after the first small, so you can clear them.",
        "Keep large fraction cards (> 1/2) in the same pile.",
    ];

    this.drawText(x, y, w, "Strategy", txt);
};

var scoreWindow = new Window(45, 366, 180, "Score", fill(255), color(67, 122, 57));
scoreWindow.drawContents = function(x, y, w) {
    var txt = [
        "You made a whole!",
        "",
        "Base score: " + this.values,
        "Trickiness bonus: + " + this.trickinessBonus,
    ];
    
    this.h = 145;
    
    if (this.whole) {
        txt = txt.slice(0, 2);
        txt.push("100 points for claiming the Whole card.");
    } else if (this.suits > 1) {
        txt.push("Same suit bonus: + " + this.suits);
        this.h += 20;
    }
    
    if (this.accumulator > 1) {
        txt.push("Accumulator bonus: × " + this.accumulator);
        this.h += 20;
    }
    txt.push("Final score: " + this.score);

    this.drawText(x, y, w, "Score", txt);
};

var failWindow = new Window(45, 366, 190, "Not a Whole", fill(255), color(0, 50, 160));
failWindow.drawContents = function(x, y, w) {
    var cardWidth = 55;
    var n = this.cards.length;
    var dx = 5;
    var cardX = x + (w - n * (cardWidth + dx)) / 2 + 2;
    
    this.cards.forEach(function(card) {
        card.draw(cardX, y + 40, cardWidth);
        cardX += cardWidth + dx;
    });
    
    var tx = x + 20;
    y += 140;
    textSize(15);
    fill(20, 20, 40);
    stroke(20, 20, 40);
    
    for (var i = 0; i < this.cards.length; i++) {
        if (i) {
            text("+", tx + 12, y - 10);
            textAlign(CENTER, CENTER);
            tx += 24;
        }
        tx = writeFraction(tx, y, this.cards[i].value);
    }
    
    text("=", tx + 12, y - 10);
    textAlign(CENTER, CENTER);
    tx += 24;
    writeFraction(tx, y, [this.sum, 12]);
    
    y += 24;
    textAlign(LEFT, TOP);
    text("The cards to do sum to one! Sorry, you lose " + this.score + " points.", x + 8, y);
};
/*******************************************************
    Game object
 Contains the cards and areas to put them.
********************************************************/
var Game = function(cards, piles) {
    if (cards) {
        this.deck = new Pile(8, 48, cards);
    } else {
        this.deck = new Pile(8, 48, this.getDeck());
    }
    
    this.piles = createPiles(piles || 6, 212);
    
    this.score = 0;
    this.wholes = 0;
    this.accumulator = 0;
};

Game.prototype.draw = function() {
    this.deck.draw();
    forEach(this.piles, 'draw');
};

Game.prototype.getDeck = function() {
    var deck = [];
    var suits = ['circle', 'square'];
    
    for (var i = 0; i < suits.length; i++) {
        for (var value in CARD_VALUES) {
            for (var j = 0; j < CARD_VALUES[value]; j++) {
                deck.push(new Card(value, suits[i]));
            }
        }
    }
    
    shuffle(deck);
    return deck;
};

Game.prototype.scoreCards = function(cards) {
    this.accumulator++;
    var baseScore = 2;
    var numCards = cards.length;
    
    if (numCards === 1) {
        var score = 100 * this.accumulator;
        scoreWindow.whole = true;
        scoreWindow.score = score;
        scoreWindow.accumulator = this.accumulator;
        return score;
    } else {
        scoreWindow.whole = false;
    }
    
    var denominatorList = [];
    var simplifiedDenomList = [];
    var valueList = [];
    
    var uniqueDenominators = 0;
    var uniqueDenominators2 = 0;
    var uniqueValues = 0;
    
    var uniqueSuit = true;
    var suit = cards[0].suit;
    
    for (var i = 0; i < numCards; i++) {
        var numerator = cards[i].value[0];
        var denominator = cards[i].value[1];
        var gcd = getGCD([numerator, denominator]);
        // Value after simplifying
        var simpleNumerator = round(numerator / gcd);
        var simpleDenominator = round(denominator / gcd);
        var value = simpleNumerator + ":" + simpleDenominator;
        
        if (denominatorList.indexOf(denominator) === -1) {
            denominatorList.push(denominator);
            uniqueDenominators++;
        }
        
        if (simplifiedDenomList.indexOf(simpleDenominator) === -1) {
            simplifiedDenomList.push(simpleDenominator);
            uniqueDenominators2++;
        }
        
        if (valueList.indexOf(value) === -1) {
            valueList.push(value);
            uniqueValues++;
        }
        
        if (cards[i].suit !== suit) { uniqueSuit = false; }
    }
    
    var lcm = getLCM(simplifiedDenomList);
    
    // Base score
    var score = baseScore * numCards * uniqueValues;
    scoreWindow.values = score;
    
    var suitBonus = uniqueSuit ? score * numCards : 0;
    score += suitBonus;
    scoreWindow.suits = suitBonus;
    
    var trickinessBonus = baseScore * lcm * uniqueDenominators * uniqueDenominators2;
    score += trickinessBonus;
    scoreWindow.trickinessBonus = trickinessBonus;
    
    score *= this.accumulator;
    scoreWindow.score = score;
    scoreWindow.accumulator = this.accumulator;
    
    return score;
};

Game.prototype.makeWhole = function() {
    // Get the top card in each pile
    var topCards = [];
    
    this.piles.forEach(function(pile) {
        if (pile.length) {
            topCards.push(pile.topCard);
        }
    });
    
    if (!topCards.length) {
        //println("No cards in the the piles");
        return;
    }
    
    // Find the sum of the card values (in twelveths)
    var cardSum = calculateCardSum(topCards);
    
    if (cardSum === 12) {
        // Remove cards
        this.piles.forEach(function(pile) {
            if (pile.length) {
                pile.cards.pop();
            }
        });
        this.score += this.scoreCards(topCards);
        this.wholes++;
        showWindow = scoreWindow;
    } else {
        showWindow = failWindow;
        //println("The piles of cards do not sum to 1!");
        //failWindow.score = 5 * pow(2, 7 - topCards.length);
        failWindow.score = sq(10 - topCards.length) * abs(cardSum - 12);
        failWindow.sum = cardSum;
        this.score -= failWindow.score;
        this.accumulator = 0;
    }
    
    showWindow.cards = topCards;
};

Game.prototype.mousePressed = function() {
    if (!selectedCard && this.deck.mouseOver()) {
        this.deck.takeCard();
    }
    
    this.piles.forEach(function(pile) {
        if (pile.length && pile.mouseOver()) {
            showCardsInPile = pile;
        }
    });
};

Game.prototype.mouseReleased = function() {
    // Released card onto pile
    for (var i = 0; i < this.piles.length; i++) {
        if (this.piles[i].mouseOver()) {
            selectedCard.addToPileAnimated(this.piles[i]);
            this.accumulator = 0;
            return;
        }
    }
    
    selectedCard.addToPileAnimated(this.deck);
};

var testScore = function() {
    var g = new Game();
    var cards = [{ value: [1, 2] }, { value: [1, 2] }];
    var cards = [{ value: [1, 2] }, { value: [3, 6] }];
    var cards = [{ value: [1, 3] }, { value: [2, 3] }];
    var cards = [{ value: [1, 3] }, { value: [4, 6] }];
    var cards = [{ value: [1, 4] }, { value: [3, 4] }];
    var cards = [{ value: [5, 12] }, { value: [7, 12] }];
    var cards = [{ value: [1, 2] }, { value: [1, 3] }, { value: [1, 6] }];
    var cards = [{ value: [1, 2] }, { value: [1, 2] }, { value: [1, 4] }];
    var cards = [{ value: [1, 12] }, { value: [1, 12] }, { value: [5, 6] }];
    var cards = [{ value: [1, 12] }, { value: [3, 12] }, { value: [2, 3] }];
    var cards = [{ value: [1, 6] }, { value: [2, 6] }, { value: [3, 6] }];
    var cards = [{ value: [1, 6] }, { value: [2, 6] }, { value: [1, 2] }];
    var cards = [{ value: [1, 3] }, { value: [1, 4] }, { value: [1, 12] }, { value: [2, 6] }];
    println(g.scoreCards(cards));
};

/*******************************************************
    Setup game
********************************************************/

// Puzzles
var puzzles = [
    {
        desc: "Warm up",
        deck: ['2/4', '6/12'],
        score: 20
    },
    {
        desc: "Simple sum",
        deck: ['1/3', '1/2'],
        piles: [['1/6'], ['1/12'], [], []],
        score: 180
    },
    {
        desc: "Color matching",
        deck: ['1/3#square', '1/3'],
        piles: [['2/3'], ['2/3#square'], []],
        score: 60
    },
    {
        desc: "Speculate to accumulate",
        deck: ['3/4', '3/12'],
        piles: [['1/1'], []],
        score: 240
    },
    {
        desc: "Delayed gratificiation",
        deck: ['2/4#square', '3/6'],
        piles: [['1/2', '3/6#square'], []],
        score: 60
    },
    {
        desc: "Leave your options open",
        deck: ['1/3', '1/2#square', '1/2'],
        piles: [['1/6'], [], []],
        score: 180
    },
    {
        desc: "Dig deeper",
        deck: ['2/3', '5/12'],
        piles: [['1/3', '7/12'], ['2/3', '7/12'], []],
        score: 78
    },
    {
        desc: "Stepping stone",
        deck: ['1/4', '1/3'],
        piles: [['2/3'], ['1/3', '5/12'], []],
        score: 348
    },
    {
        desc: "Avoid the obvious",
        deck: ['1/4', '1/12'],
        piles: [['5/12', '1/2'], ['1/3', '1/6'], ['3/12'], []],
        score: 976
    },
    {
        desc: "Avoid left overs",
        deck: ['7/12', '1/12'],
        piles: [['4/6', '1/4'], ['4/12', '1/3'], ['5/12', '2/6'], [], [], []],
        score: 852
    },
    {
        desc: "Domino effect",
        deck: ['1/6', '1/12'],
        piles: [['3/4', '1/4', '1/3'], ['2/3', '1/6'], ['1/4'], ['1/3'], [], []],
        score: 800
    },
    {
        desc: "Double up",
        deck: ['1/12', '1/12'],
        piles: [['1/4', '1/3'], ['1/2', '5/12'], ['2/12', '1/6'], ['1/6'], [], []],
        score: 920
    }
];

var puzzle = puzzles[4];
var game = new Game(puzzle.deck, puzzle.piles);
//var game = new Game(['2/4', '6/12'], [['1/6', '1/12'], []]);

var game = new Game();

/*******************************************************
    Setup interface
********************************************************/
{
var makeWholeButton = new Button(
    (width - 130) / 2, height - 32, 130, 25, "Make Whole", {
        trigger: game.makeWhole.bind(game),
        filled: true,
        highlightCol: color(67, 122, 57),
        textSize: 20
    });

var helpButton = new Button(
    width - 55, 5, 50, 18, "Help", {
        filled: true,
        highlightCol: color(0, 50, 160),
        trigger: function() { showWindow = helpWindow; }
    });
    
var strategyButton = new Button(
    width - 130, 5, 70, 18, "Strategy", {
        filled: true,
        highlightCol: color(0, 50, 160),
        trigger: function() { showWindow = strategyWindow; }
    });

var buttons = [makeWholeButton, helpButton, strategyButton];
}
/**************************************
 *  Draw functions
***************************************/

var drawBackground = function() {
    background(0);
    noStroke();
    fill(30, 180, 70, 9);
    var r;
    for (var i = 0; i < 80; i++) {
        r = 20 + i * 10;
        ellipse(width / 2, height / 2, r, r);
    }
};

var createBackground = function() {
    drawBackground();
    filter(BLUR, 2);
    return get(0, 0, width, height);
};
var backgroundImage;// = createBackground();

var drawIntro = function() {
    var x = width / 2;
    var y = 110;
    fill(255);
    textFont(serifFont, 80);

    var txt = "Game";
    var w = textWidth(txt);
    textAlign(CENTER, TOP);
    text(txt, x, y);
    
    strokeWeight(3);
    stroke(255);
    line(x - w / 2 - 2, y + 12, x + w / 2 + 2, y + 12);
    
    textAlign(LEFT, BASELINE);
    pushMatrix();
    translate(x - w / 2, y);
    rotate(-5);
    text("Fraction", w - textWidth("Fraction"), 5);
    popMatrix();

};

var drawInfo = function() {
    fill(0);
    strokeWeight(1);
    stroke(250);
    rect(-1, -1, width + 1, 31);
    
    fill(255);
    textAlign(LEFT, TOP);
    textFont(serifFont, 18);
    text(game.wholes + " wholes", 10, 5);
    text(game.score + " points", 100, 5);
    
};

var mode = 'game';
//var mode = 'intro';

/**************************************
 *  Main loop
***************************************/

draw = function() {
    if (backgroundImage) {
        image(backgroundImage, 0, 0);
    } else {
        drawBackground();
    }

    switch(mode) {
        case 'intro':
            drawIntro();
            break;
        case 'game':
            drawInfo();
            forEach(buttons, 'draw');
            game.draw();
            
            // TODO: put all this in the game.draw function?
            if (selectedCard) {
                selectedCard.draw(selectedCard.x, selectedCard.y);
            }
            
            if (showWindow) {
                showWindow.draw();
            } else if (showCardsInPile) {
                showCardsInPile.showCards();
            }
            
            break;
    }
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    if (showWindow) {
        showWindow.mousePressed();
    } else {
        forEach(buttons, 'mousePressed');
        game.mousePressed();
    }
};

mouseDragged = function() {
    if (selectedCard) {
        selectedCard.x += mouseX - pmouseX;
        selectedCard.y += mouseY - pmouseY;
    }
};

mouseReleased = function() {
    if (showCardsInPile) {
        showCardsInPile = false;
    } else if (showWindow) {
        // Check for closing
        if (showWindow.mouseReleased()) {
            showWindow = false;
        }
    } else if (selectedCard) {
        game.mouseReleased();
    } else {
        forEach(buttons, 'mouseReleased');
    }
};

mouseOut = function() {
};

