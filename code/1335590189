/**********************************************************
 * Select a bag containing a mixture of coins.
 * One of these coins is picked at random.
 * Your task is to guess which coin was picked in
 * the fewest number of coin flips.
 * 
 * Based on this video:
 * https://www.khanacademy.org/math/applied-math/random%20algorithms,%20probability/v/bayes-theorem-visualized
***********************************************************/

var bags = [
    { points: 3, locked: false, unlockPoints: 0,
      coins: {"Two heads": 1, "Fair": 1}},
    { points: 5, locked: true, unlockPoints: 12,
      coins: {"Two heads": 1, "Fair": 1, "Two tails": 1}},
    { points: 8, locked: true, unlockPoints: 20,
      coins: {"Two heads": 1, "Heads bias": 1, "Fair": 1}},
    { points: 12, locked: true, unlockPoints: 30,
      coins: {"Tails bias": 1, "Heads bias": 1, "Fair": 1}},
    { points: 15, locked: true, unlockPoints: 50,
      coins: {"Tails bias": 1, "Heads bias": 1, "Fair": 2}},
    { points: 15, locked: true, unlockPoints: 75,
      coins: {"Two tails": 1, "Tails bias": 1,  "Fair": 1,
              "Heads bias": 1, "Two heads": 1}},
    { points: 20, locked: true, unlockPoints: 100,
      coins: {"Two tails": 1, "Tails bias": 2,  "Fair": 3,
              "Heads bias": 2, "Two heads": 1}}
];

// Probability of getting head with the different coins
var pHead = {"Two heads": 1, "Heads bias": 0.75, "Fair": 0.5,
             "Tails bias": 0.25, "Two tails": 0 };

// Initial properties
var playerPoints = 10;
var drawMode = "Pick bag";

var outcomes = [];  // Result of coins flips
var selectedBag = bags[0];
var selectedCoin = false;
var selectedPoints;
var selectedSign = false;

var flipTimer = 0;
var flipTime = 40;

// Initialising other variables
var coins, mysteryCoin, probabilities, coinPositions;

// Fonts and colours
var IMPACT = createFont("impact", 20);
var SERIF = createFont("Serif", 20);
var SANS = createFont("Sans", 20);

var BLACK = color(0, 0, 0);
var WHITE = color(255, 255, 255);
var YELLOW = color(250, 250, 50);
var BACKGROUND = color(50, 50, 55);
var POINTSCOL = color(0, 89, 135);
var COINCOL = { Heads: color(40, 180, 20),
                Tails: color(220, 30, 30),
                Mid:color(160, 160, 160) };
                
// Bar chart dimensions
var barWidth = 28;
var barHeight = 235;
var buttonY = 350;
var bagR = 70;
var coinR = 11;

var Coin = function(name, pHeads) {
    this.name = name;
    this.pHeads = pHeads;
    if (pHeads < 0.5) {
        this.colour = lerpColor(COINCOL.Tails, COINCOL.Mid, 2*pHeads);
    } else {
        this.colour = lerpColor(COINCOL.Mid, COINCOL.Heads, 2*(pHeads-0.5));
    }
    
    this.flip = function() {
        if (random() < pHeads) { return "Heads"; }
        else { return "Tails"; }
    };
};

var Button = function(label) {
    this.text = label;
    
    this.w = label.length*15;
    this.h = 33;
    
    this.draw = function(x, y) {
        this.x = x - this.w/2;
        this.y = y;

        var col, txtcol;
        if (this.mouseOver()) {
            col = color(80, 80, 80);
            txtcol = YELLOW;
        } else {
            col = color(200, 200, 200);
            txtcol = BLACK;
        }
        
        fill(col);
        strokeWeight(2);
        stroke(250, 250, 250);
        rect(this.x, this.y, this.w, this.h, 7);

        fill(txtcol);
        textFont(IMPACT, 26);
        textAlign(CENTER, CENTER);
        text(this.text, this.x + this.w/2, this.y + this.h/2);

    };
    
    this.mouseOver = function() {
        return mouseX >= this.x && mouseX <= this.x+this.w &&
               mouseY >= this.y && mouseY <= this.y+this.h;
    };
};

var buildCoins = function() {
    // Convert list of hashes into a list of objects
    var coins = {};
    for (var name in pHead) {
        coins[name] = new Coin(name, pHead[name]);
    }
    return coins;
};

var getNumberOfCoins = function(bag) {
    var n = 0;
    for (var coin in bag.coins) { n += bag.coins[coin]; }
    return n;
};

var initialiseProbabilties = function(bag) {
    // Create a hash of the probability of each coin in bag
    var probabilities = {};
    var nCoins = getNumberOfCoins(bag);
    for (var name in bag.coins) {
        probabilities[name] = [bag.coins[name] / nCoins];
    }
    return probabilities;
};

var getCoinPositions = function(bag) {
    // Create randomish x,y coords for bag diagram
    var positions = [];
    
    var nCoins = getNumberOfCoins(bag);
    var dTheta = 360 / nCoins;
    var theta = -dTheta/3;
    var innerR = (bagR - coinR)/2 - 3;
    
    for (var i=0; i<nCoins; i++) {
        var cx = (0.4 + random() * 0.6) * innerR * sin(theta);
        var cy = (0.4 + random() * 0.6) * (innerR+3) * cos(theta);
        positions.push({x: cx, y: cy});
        theta += dTheta;
    }
    return positions;
};

var pickRandomCoin = function(bag) {
    // Pick a random coin from a bag
    var r = floor(random() * getNumberOfCoins(bag));
    var counter = 0;
    for (var name in bag.coins) {
        counter += bag.coins[name];
        if (r < counter) {
            return coins[name];
        }
    }
};

var flipCoin = function() {
    var result = mysteryCoin.flip();
    outcomes.push(result);
    flipTimer = flipTime;
    playerPoints--;
    
    // Update coin probabilities
    var norm = 0;
    var n = outcomes.length - 1;
    var name, p;
    
    for (name in probabilities) {
        var prior = probabilities[name][n];
        if (result === "Heads") { p = coins[name].pHeads; }
        else { p = 1 - coins[name].pHeads; }
        p *= prior;
        probabilities[name].push(p);
        norm += p;
    }
    
    // Normalise
    for (name in probabilities) {
        probabilities[name][n+1] /= norm;
    }
};
var selectBag = function(n) {
    selectedBag = n;
    probabilities = initialiseProbabilties(n);
    coinPositions = getCoinPositions(n);
};

var restartGame = function() {
    drawMode = "Pick bag";
    selectedCoin = false;
    selectedSign = false;
    outcomes = [];

    for (var i=0; i<bags.length; i++){
        var bag = bags[i];
        if (bag.locked && playerPoints >= bag.unlockPoints) {
            bag.locked = false;
        }
        if (!bag.locked) { selectedBag = bag; }
    }
    selectBag(selectedBag);
};

coins = buildCoins();
restartGame();

var playButton = new Button("PLAY");
var flipButton = new Button("FLIP");
var guessButton = new Button("GUESS");
var submitButton = new Button("SUBMIT");
var restartButton = new Button("PLAY AGAIN");

/***************************************************
 * Drawing function
****************************************************/

var displayPoints = function(x, y, points) {
    var s = points + " point";
    if (points !== 1) { s += "s"; }
    textAlign(LEFT, CENTER);

    textFont(SANS, 12);
    var width = textWidth(s) + 10;
    var height = 20;
    
    fill(POINTSCOL);
    noStroke();
    rect(x-5, y, width, height, 6);
    
    fill(WHITE);
    text(s, x, y+height/2);
};

var displayTitle = function(title) {
    // Shadow
    noStroke();
    fill(0, 0, 0, 80);
    rect(-1, -1, 402, 44);
    
    // Background
    fill(BLACK);
    stroke(160, 160, 160);
    strokeWeight(1);
    rect(-1, -1, 402, 41);
    
    // Text
    fill(WHITE);
    textAlign(LEFT, BASELINE);
    textFont(IMPACT, 24);
    text(title, 12, 30);
    displayPoints(330, 10, playerPoints);
};

var drawArrow = function(x1, y1, x2, y2) {
    var theta = atan2(y2 - y1, x2 - x1);
    var size = 10;
    line(x1, y1, x2, y2);
    line(x2, y2, x2-10*cos(theta+20), y2-10*sin(theta+20));
    line(x2, y2, x2-10*cos(theta-20), y2-10*sin(theta-20));
};

var displayCoinQuantities = function(x, y, bagX, bagY) {
    x -= 8;
    var gap = 2;

    for (var name in selectedBag.coins) {
        var p = probabilities[name][0];
        if (p === 0) { continue; }
        
        var coin = coins[name];
        var dy = barHeight * p;
        var y2 = y + dy/2;
        
        textFont(SANS, 14);
        textAlign(RIGHT, BASELINE);
        fill(coins[name].colour);
        text(name, x, y2-gap);
        
        fill(WHITE);
        var t = selectedBag.coins[name] + " x ";
        text(t, x-textWidth(name), y2-gap);
        
        // Arrow
        stroke(coins[name].colour);
        strokeWeight(2);
        var arrowX = x - textWidth(name+t) - 8;
        var arrowY = y2 - gap;
        drawArrow(bagX, bagY, arrowX, arrowY);
        
        textFont(SANS, 11);
        textAlign(RIGHT, TOP);
        t = round(100 * coin.pHeads) + "% heads";
        text(t, x, y2+gap);
        
        y += dy;
    }
    
};

var writeCoinProb = function(x, y, coin) {
    fill(coin.colour);
    textFont(SANS, 11);
    textAlign(LEFT, CENTER);
    var n = outcomes.length;
    var t = round(100 * probabilities[coin.name][n]) + "%";
    text(t, x, y);
};

var displayCoinProbBar = function(x, y, w, p, label) {
    // Draw bar showing the relative probabilties of coins
    
    var sideH;
    for (var name in selectedBag.coins) {
        var coinH = round(barHeight * probabilities[name][p]) - 1;
        var coin = coins[name];
        
        textAlign(CENTER, CENTER);
        textFont(SANS, 10);
        strokeWeight(1);
        
        if (probabilities[name][p] > 0.001)  {
            fill(coin.colour);
            if (name === selectedCoin) {
                stroke(WHITE);
                rect(x-1, y, w+2, coinH);
            } else {
                 noStroke();
                 rect(x, y, w+1, coinH);
            }
            
            fill(BLACK);
            sideH = coinH * coin.pHeads;
            if (coin.pHeads) {
                if (sideH > 10) {
                    text("H", x + w/2, y + sideH/2);   
                }
            }
            if (coin.pHeads < 1) {
                if (coinH - sideH > 10) {
                    text("T", x + w/2, y + (coinH+sideH)/2);
                }
            }
            if (coin.pHeads && coin.pHeads < 1) {
                stroke(BLACK);
                line(x, y + sideH, x + w, y + sideH);
            }
        }
        if (label !== undefined) {
            label(x + w + 5, y + coinH/2, coin);
        }
        y += coinH + 1;
    }
};

var drawBag = function(x, y) {
    var r = bagR/2;
    
    fill(BACKGROUND);
    stroke(225, 225, 225);
    strokeWeight(2);
    
    beginShape();
    curveVertex(x - r,  y - r - 24);
    curveVertex(x - 16,  y - r - 14);
    curveVertex(x - 4,  y - r - 4);
    curveVertex(x - r + 5,  y - 14);
    curveVertex(x - r + 8,  y + r - 2);
    curveVertex(x,  y + r - 2);
    curveVertex(x + r - 8,  y + r - 2);
    curveVertex(x + r - 5,  y - 14);
    curveVertex(x + 4,  y - r -4);
    curveVertex(x + 16,  y - r - 14);
    curveVertex(x + r,  y - r - 24);
    endShape();
    
    stroke(245, 223, 135);
    strokeWeight(1);
    fill(235, 189, 7);
    for (var i=0; i<coinPositions.length; i++){
        var coin = coinPositions[i];
        ellipse(x + coin.x, y + coin.y, coinR, coinR);
    }
};

var pickBagDisplay = function() {
    var n = bags.length;
    var x = 24;
    var y = 65;
    
    var tabX = 80;
    var tabW = 80;
    var tabH = 26;
    var barY = 88;
    
    // List of bags
    textFont(SANS, 14);
    textAlign(LEFT, CENTER);
    
    for (var i=0; i<n; i++) {
        if (selectedBag === bags[i]) {
            fill(BACKGROUND);
            strokeWeight(1);
            stroke(160, 160, 160);
            rect(x - 8, y-tabH/2, tabW, tabH, 4);
        } else if (mouseIsPressed && mouseX <= tabX &&
            mouseY <= y + tabH/2 && mouseY >= y - tabH/2) {
                // Select bag if it is different
                selectBag(bags[i]);
        }
        
        if (bags[i].locked) { fill(100, 100, 105); }
        else { fill(WHITE); }
        text("Bag " + (i+1), x, y);
        y += tabH;
    }
    
    // Background
    var bagIndex = bags.indexOf(selectedBag);
    noStroke();
    fill(BACKGROUND);
    rect(tabX, 0, 402-tabX, 401);
    strokeWeight(1);
    stroke(160, 160, 160);
    line(tabX, 0, tabX, 65 + (bagIndex - 0.5) * tabH);
    line(tabX, 401, tabX, 65 + (bagIndex + 0.5) * tabH);
    
    // Information about selected bag
    fill(255, 255, 255);
    textFont(SANS, 14);
    textAlign(LEFT, CENTER);
    
    x = tabX + 16;
    y = 60;
    var t, pX;
    
    if (selectedBag.locked) {
        text('This bag is locked!', x, y);
        t = 'You need ';
        text(t, x, y + 25);
        x += textWidth(t);
        pX = x + 8;
        x += 75;
        text("to unlock it.", x, y + 25);
        displayPoints(pX, y+15, selectedBag.unlockPoints);
    } else {
        var nCoins = getNumberOfCoins(selectedBag);
        t = 'This bag contains ' + nCoins + ' coins:';
        text(t, x, y);
        
        t = 'this bag to win up to ';
        text(t, tabX + 88, buttonY + 20);
        pX = tabX + 95 + textWidth(t);
        displayPoints(pX, buttonY+10, selectedBag.points);
        
        var bagX = tabX + 60;
        var bagY = barY + barHeight/2;
        displayCoinQuantities(330, barY, bagX, bagY);
        drawBag(bagX, bagY);
        displayCoinProbBar(330, barY, barWidth, 0);
        playButton.draw(tabX + 48, buttonY);
    }
    displayTitle("Pick a bag of coins");
};

var displayFlipOutcomes = function(x, y, w, dir) {
    var nHeads = 0;
    var t;
    
    var x2 = x + w;
    for (var i=1; i<=outcomes.length; i++) {
        textFont(IMPACT, 20);
        textAlign(CENTER, TOP);
        fill(COINCOL[outcomes[i-1]]);
        
        t = outcomes[i-1][0];
        text(t, x2 + w/2, y + barHeight+4);   
        if (t === "H" ) { nHeads++; }
        x2 += w;
    }
    
    fill(WHITE);
    textFont(SANS, 13);
    t = "(" + round(100*nHeads/outcomes.length) + "% heads)";
    if (dir === 'left') {
        textAlign(RIGHT, TOP);
        t = "Results " + t + ":";
        x -= 8;
    } else {
        textAlign(LEFT, TOP); 
        x = x2 + w/2;
    }
    text(t, x, y + barHeight + 7);  
};

var animatedFlipResult = function (x, y, result) {
    flipTimer -= 2;
    textAlign(CENTER, CENTER);
    textFont(IMPACT, flipTime - flipTimer);
    fill(COINCOL[result]);
    text(result, x, y);
};

var flipCoinButton = function(x, y) {
    // Display Spend 1 point to FLIP again text
    
    fill(WHITE);
    textFont(SANS, 14);
    textAlign(LEFT, BASELINE);
    
    var t = "Spend";
    text(t, x, y);
    displayPoints(x + textWidth(t) + 10, y - 16, 1);
    
    fill(WHITE);
    textFont(SANS, 14);
    textAlign(LEFT, BASELINE);
    y += 36;
    t = "to ";
    text(t, x, y);
    
    x += textWidth(t) + flipButton.w/2 + 2;
    flipButton.draw(x, y - flipButton.h + 8);
    x += flipButton.w/2 + 6;
    
    fill(WHITE);
    textFont(SANS, 14);
    textAlign(LEFT, BASELINE);
    if (outcomes.length > 0) {
        text("again.", x, y);
    } else {
        text("it.", x, y);
    }
};

var guessCoinButton = function (x, y) {
    x += guessButton.w/2;
    guessButton.draw(x, y);
    x += guessButton.w/2 + 8;
    
    fill(WHITE);
    textFont(SANS, 14);
    textAlign(LEFT, CENTER);
    text("which coin you have picked.", x, y+20);
};

var displayProbabilityGraph = function(x, y, w) {
    var y1, y2, h1, h2;
    for (var i=0; i<outcomes.length; i++) {
        y1 = y;
        y2 = y;
        
        for (var name in selectedBag.coins) {
            var coin = coins[name];
            h1 = round(barHeight * probabilities[name][i]);
            h2 = round(barHeight * probabilities[name][i+1]);
            
            fill(coin.colour);
            quad(x, y1, x, y1 + h1, x + w-1, y2 + h2, x + w-1, y2);
            y1 += h1;
            y2 += h2;
        }
        x += w;
    }
};

var displayPossibleCoinNames = function(x, y) {
    fill(WHITE);
    textFont(SANS, 13);
    textAlign(LEFT, BASELINE);
    
    var t = "Coins: ";
    text(t, x, y);
    
    var comma = false;
    for (var name in selectedBag.coins) {
        if (comma) {
                fill(WHITE);
            x += textWidth(t);
            t = ", ";
            text(t, x, y);   
        }
        
        fill(coins[name].colour);
        x += textWidth(t);
        t = name;
        text(t, x, y);
        comma = true;
    }
};

var flipCoinDisplay = function() {
    var y = 75;
    var x = 160;
    var n = outcomes.length + 1;
    var maxWidth = 355;
    var w = min(barWidth, round((maxWidth - x) / n));

    displayPossibleCoinNames(15, 60);
    displayProbabilityGraph(x, y, w);
    displayCoinProbBar(x + w*(n-1) + 1 , y, w, n-1, writeCoinProb);
    if (outcomes.length > 0) {
        displayFlipOutcomes(x, y, w, 'left');   
    } else {
        fill(WHITE);
        textAlign(LEFT, TOP);
        textFont(SANS, 14);
        text("You haven't flipped the coin yet.",
             16, y + barHeight + 5);
        text("You pick a random\ncoin from the bag.", 12, 75);
    }
    
    // Fix uneven bars
    fill(20, 20, 25);
    noStroke();
    rect(x-2, y + barHeight-1, n*w + 5, 2);
    y += barHeight/2;
    
    if (flipTimer > 0) {
        // Animating the result of the flip
        animatedFlipResult(80, y, outcomes[n - 2]);
    } else {
        // Buttons shown not during animation
        if (playerPoints > 1) { flipCoinButton(16, y - 10); }
        guessCoinButton(20, buttonY);
    }
    
    displayTitle('Flip a random coin');
};

var circleButton = function(x, y, sign) {
    var size = 22;
    
    var col1, col2;
    if (dist(mouseX, mouseY, x, y) <= size/2) {
        selectedSign = sign;
        col1 = color(80, 80, 80);
        col2 = YELLOW;
    } else {
        col1 = color(200, 200, 200);
        col2 = BLACK;
    }
    
    fill(col1);
    strokeWeight(2);
    stroke(250, 250, 250);
    ellipse(x, y, size, size);
    
    fill(col2);
    noStroke();
    rect(x - size/2 + 5, y-2, size-10, 4);
    if (sign === 1) { rect(x-2, y-size/2+5, 4, size-10); }
};

var writeCoinNameSelection = function(x, y) {
    var name;
    var n = outcomes.length;
    var dy = 40;
    var width = 107;
    var circleR = 12;
    var selectCol = color(43, 170, 255);  
    
    var nCoins = 0;
    for (name in selectedBag.coins) { nCoins++; }
    fill(BACKGROUND);
    strokeWeight(1);
    stroke(WHITE);
    rect(x-8, y, width, nCoins*dy + 20, 5);
        
    fill(WHITE);
    textFont(SANS, 14);
    textAlign(LEFT, TOP);
    text("Select a coin", x, y+3);  
    
    x += 5;
    y += 22;
    textAlign(LEFT, TOP);
    strokeWeight(2);
    stroke(WHITE);
    
    for (name in selectedBag.coins) {
        textFont(SANS, 14);
        if (!selectedCoin) { selectedCoin = name; }
        
        noFill();
        if (mouseY >=y && mouseY <= y+28 &&
            mouseX > x-circleR) {
            if (mouseIsPressed) { selectedCoin = name; }
            fill(selectCol);
        }
        
        if (selectedCoin === name) { fill(selectCol ); }
        
        ellipse(x, y + circleR + 4, circleR, circleR);
        fill(coins[name].colour);
        text(name, x + circleR/2 + 5, y + 2);
        
        textFont(SANS, 11);
        var p = round(100 * probabilities[name][n]) + "%";
        text(p, x + circleR/2 + 5, y + 18);
        
        y += dy;
    }  
};

var guessCoinDisplay = function() {
    var y = 75;
    var x = 15;
    var n = outcomes.length + 1;
    var maxWidth = 275;
    var w = min(barWidth-1, round((maxWidth - x) / n));
    selectedSign = false;
    
    if (outcomes.length > 0) {
        displayProbabilityGraph(x, y, w);
        displayFlipOutcomes(x, y, w, 'right');
        // Fix uneven bars
        fill(20, 20, 25);
        noStroke();
        rect(x-2, y + barHeight-1, n*w + 5, 2);
    }
    
    x += w * (n-1) + 1;
    displayCoinProbBar(x, y, w, n-1);
    x += w + 15;
    writeCoinNameSelection(x, y); 
    
    x = 164;    
    y = 365;
    fill(WHITE);
    textFont(SANS, 14);
    textAlign(LEFT, BASELINE); 
    text("How much \nwill you risk?", 20, y);
    
    displayPoints(x, y-6, selectedPoints);
    circleButton(x-25, y+4, -1);
    circleButton(x+80, y+4, 1);
    submitButton.draw(335, buttonY);
    
    displayTitle("Which coin was flipped?");
};

var resultPageDisplay = function() {
    fill(WHITE);
    textAlign(CENTER, TOP);
    textFont(IMPACT, 72);
    
    if (selectedCoin === mysteryCoin.name) {
        text("Correct!", 200, 20);
    } else {
        text("Incorrect!", 200, 20);  
    }
    
    textAlign(LEFT, BASELINE);
    textFont(SANS, 15);
    var x = 30;
    var y = 125;
    var t = "The coin was ";
    text(t, x, y);
    
    x += textWidth(t);
    t = mysteryCoin.name;
    textFont(IMPACT, 16);
    text(t, x, y);
    
    x += textWidth(t);
    var p = probabilities[mysteryCoin.name][outcomes.length];
    t = " (" + round(p * 100) + "% chance)";
    textFont(SANS, 15);
    text(t, x, y);
    
    textFont(SANS, 15);
    x = 30;
    y += 30;
    t = "You now have ";
    text(t, x, y);
    x += textWidth(t) + 10;
    displayPoints(x, y-18, playerPoints);
    
    if (playerPoints > 1 ) {
        restartButton.draw(200, 200);   
    } else {
        fill(WHITE);
        textAlign(CENTER, TOP);
        textFont(IMPACT, 72);
        text("GAME OVER!", 200, 210);
        
        textFont(SANS, 15);
        text("You don't have enough points to play.", 200, 300);
    }
};

var draw = function() {
    background(20, 20, 25);
    switch(drawMode) {
        case "Pick bag":
            pickBagDisplay();
            break;
        case "Flip coin":
            flipCoinDisplay();
            break;
        case "Guess coin":
            guessCoinDisplay();
            break;
        case "Results page":
            resultPageDisplay();
            break;
    }
};

var mouseReleased = function() {
    if (drawMode === "Pick bag" && playButton.mouseOver()) {
        mysteryCoin = pickRandomCoin(selectedBag);
        drawMode = "Flip coin";
    } else if (drawMode === "Flip coin") {
        if (flipButton.mouseOver() && playerPoints > 1) {
            flipCoin();
        } else if (guessButton.mouseOver()) {
            drawMode = "Guess coin";
            selectedPoints = min(playerPoints, selectedBag.points);
        }
    } else if (drawMode === "Guess coin") {
        if (selectedSign) {
            selectedPoints = constrain(selectedPoints + selectedSign , 1, min(playerPoints, selectedBag.points));
        } else if (submitButton.mouseOver()) {
            drawMode = "Results page";
            if (selectedCoin === mysteryCoin.name) {
                playerPoints += selectedPoints;
            } else {
                playerPoints -= selectedPoints;
            }
        }
    }
    if (drawMode === "Results page" && playerPoints > 1 &&
        restartButton.mouseOver()) {
        restartGame();
    }
};