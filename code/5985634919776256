/*********************************************************
 *       Potential game
 *
 * TODO:
 *  * Get moving units to work
 *  Moving food
 *  Attacking
 *  (Allow switching between players)
 *  Show / Hide options
 *  Show territories
 *  Improve graphics
 *  Convert map
 *  Mining
 *  ...AI
 *
 * Version history
 * {
 * 4/2/16
 *  Display board
 *  Create world and different territories
 *  Mouse-over to show territory information
 * 5/2/16
 *  Add farmers and soldiers
 *  Top toolbar
 *  Grow food
 *  GUI with next turn button
 *  Selecting territory
 *  Create new units
 * 6/2/16
 *  Soldiers eat or starve
 * 7/2/16
 *  Add deserts
 *  Add tile neighbours
 *  Update interface
 *  Add Move Buttons
 * 9/2/16
 *  Disable buttons when not used
 *  Reorganise GUI so tile info only shown when relevant
 * 10/2/16
 *  Much fiddling with the interface to little effect
 * }
*********************************************************/

var FOOD_FOR_FARMER = 8;
var FOOD_FOR_SOLDIER = 8;
var SOLDIERS_EAT = 1;

var PLAYERS = [color(240, 50, 50), color(50, 100, 200)];

var BUTTON_COLOR = color(0, 160, 0);
var BUTTON_HIGHLIGHT = color(60, 200, 60);
var TILE_HIGHLIGHT = color(12, 12, 12);

var territoryTypes = {
    'Desert': {
        color: color(160, 160, 160),
        foodPerFarmer: 0,
        defense: 0
    },
    'Plains': {
        color: color(185, 170, 100),
        foodPerFarmer: 3,
        defense: 0
    },
    'Forest': {
        color: color(60, 120, 40),
        foodPerFarmer: 2,
        defense: 2
    },
    'Mountain': {
        color: color(140, 100, 20),
        foodPerFarmer: 1,
        defense: 5
    },
};

var sansFont = createFont("sans", 15);

/*********************************************************
 *      GUI objects
**********************************************************/
{
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) { this.trigger = updateFunction; }
    
    this.selected = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled() && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

GUI_Component.prototype.disabled = function() {};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);

    for (var param in params) {
        if (params[param] !== undefined) {
            this[param] = params[param];
        }
    }
    
    this.defaultCol = params.defaultCol || BUTTON_COLOR;
    this.highlightCol = params.highlightCol || BUTTON_HIGHLIGHT;
    this.textSize = params.textSize || 16;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled()) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    fill(this.disabled() ? 120 : 255);
    textFont(sansFont, this.textSize);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, {name: name});
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    //showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    /*
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
    */
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}
/*******************************************************
 *      GUI Container
 * Contains and draws GUI elements.
 * Dispatches events to them
********************************************************/
{
var GUI_Container = function(elements, drawFunction) {
    this.elements = elements || [];
    if (drawFunction) {
        this.draw = drawFunction.bind(this);
    }
};

GUI_Container.prototype.draw = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].draw();
    }
};

GUI_Container.prototype.mousePressed = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mousePressed();
    }
};

GUI_Container.prototype.mouseReleased = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mouseReleased();
    }
};

GUI_Container.prototype.mouseDragged = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mouseDragged();
    }
};
}
}
/*********************************************************
 *       Territory Object
 * A tile on the board which can be occupied.
 * Can be a plain, forest or mountain
*********************************************************/
{
var Territory = function(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.mx = this.x + this.size / 2;
    this.my = this.y + this.size / 2;
    this.iconY = this.y + this.size * 0.8;
    this.neighbours = [];
    
    // Maximum number of farmers
    this.capacity = 5;
    
    this.farmers = 0;
    this.soldiers = 0;
    this.food = 0;
};

Territory.prototype.draw = function() {
    strokeWeight(1);
    stroke(this.stroke);
    fill(this.color);
    rect(this.x, this.y, this.size, this.size);
    
    stroke(100);
    if (this.food) {
        fill(0, 200, 0);
        ellipse(this.x + 10, this.iconY, 15, 15);
        fill(255);
        textAlign(CENTER, CENTER);
        textSize(11);
        text(this.food, this.x + 10, this.iconY);
    }
    
    // Draw farmers
    if (this.farmers) {
        fill(this.playerColor);
        ellipse(this.x + 27, this.iconY, 15, 15);
        fill(255);
        textAlign(CENTER, CENTER);
        textSize(11);
        text(this.farmers, this.x + 27, this.iconY);
    }
    
    if (this.canCreateFarmer) {
        fill(0);
        textSize(15);
        text("+", this.x + 27, this.iconY - (this.farmers ? 16 : 0));
    }
    
    // Draw soldiers
    if (this.soldiers) {
        fill(this.playerColor);
        triangle(
            this.x + 42, this.iconY - 8,
            this.x + 34, this.iconY + 7,
            this.x + 50, this.iconY + 7
        );
        fill(255);
        textAlign(CENTER, CENTER);
        textSize(11);
        text(this.soldiers, this.x + 42, this.iconY);
    }
    
    if (this.canCreateSoldier) {
        fill(0);
        textSize(15);
        text("+", this.x + 42, this.iconY - (this.soldiers ? 16 : 0));
    }
};

Territory.prototype.setType = function(n) {
    if (n > 0.8) {
        this.type = 'Mountain';
    } else if (n > 0.7) {
        this.type = 'Desert';
    } else if (n < 0.5) {
        this.type = 'Plains';
    } else {
        this.type = 'Forest';
    }
    
    // Set this territories data
    var data = territoryTypes[this.type];
    for (var key in data) {
        this[key] = data[key];
    }
    
    //this.color = color(n * 255);
    this.stroke = lerpColor(this.color, color(255, 255, 255), 0.6);
};

Territory.prototype.growFood = function() {
    // Farmers grow food
    this.food += this.farmers * this.foodPerFarmer;
};

Territory.prototype.eatFood = function() {
    // Soldiers eat
    this.food -= this.soldiers * SOLDIERS_EAT;
    if (this.food < 0) {
        // Starvation
        this.soldiers += this.food;
        this.food = 0;
    }
};

Territory.prototype.createFarmer = function() {
    if (this.canCreateFarmer) {
        this.farmers++;
        this.food -= FOOD_FOR_FARMER;
    }
};

Territory.prototype.createSoldier = function() {
    if (this.canCreateSoldier) {
        this.farmers--;
        this.soldiers++;
        this.food -= FOOD_FOR_SOLDIER;
    }
};

// Dynamic properties
Object.defineProperty(Territory.prototype, 'playerColor', {
    get: function() {
        return this.player ? PLAYERS[this.player - 1] : null;
    }
});
Object.defineProperty(Territory.prototype, 'canCreateFarmer', {
    get: function() {
        return this.food >= FOOD_FOR_FARMER && this.farmers < this.capacity;
    }
});
Object.defineProperty(Territory.prototype, 'canCreateSoldier', {
    get: function() {
        return this.food >= FOOD_FOR_SOLDIER && this.farmers > 0;
    }
});
Object.defineProperty(Territory.prototype, 'changeInFood', {
    get: function() {
        var d = this.farmers * this.foodPerFarmer - this.soldiers;
        return (d > 0 ? "+" : "") + d; 
    }
});
}
/*********************************************************
 *       World Object
 * Contains all the territories.
 * Deals with event handling
*********************************************************/
{
var World = function(y, size, tilesAcross, tilesDown) {
    this.y = y;
    this.size = size;
    this.tilesAcross = tilesAcross;
    this.tilesDown = tilesDown;
    
    this.width = tilesAcross * size;
    this.x = (width - this.width) / 2;
    
    this.height = tilesDown * size;
    this.x2 = this.x + this.width;
    this.y2 = this.y + this.height;
    
    this.createTerritories();
};

World.prototype.createTerritories = function() {
    this.territories = [];
    
    var minNoise = 1;
    var maxNoise = 0;
    
    // Create territories and find range of noise
    for (var i = 0; i < this.tilesAcross; i++) {
        var x = this.x + i * this.size;
        for (var j = 0; j < this.tilesDown; j++) {
            var y = this.y + j * this.size;
            var territory = new Territory(x, y, this.size);
            
            // Noise for determining territory type
            var n = noise(x * 0.005, y * 0.005);
            territory.noise = n;
            minNoise = min(minNoise, n);
            maxNoise = max(maxNoise, n);
            
            this.territories.push(territory);
        }
    }
    
    // Normalise noise and add neighbours
    for (var i = 0; i < this.territories.length; i++) {
        var territory = this.territories[i];
        territory.setType(norm(territory.noise, minNoise, maxNoise));
        if (i % this.tilesDown > 0) {
            var neighbour = this.territories[i - 1];
            territory.neighbours.push(neighbour);
            neighbour.neighbours.push(territory);
        }
        if (i > this.tilesDown - 1) {
            var neighbour = this.territories[i - this.tilesDown];
            territory.neighbours.push(neighbour);
            neighbour.neighbours.push(territory);
        }
    }
};

World.prototype.initialise = function() {
    // Add random farmers to the map
    var n = this.territories.length;
    
    for (var i = 1; i <= PLAYERS.length; i++) {
        var farmersToAdd = 1;
        while (farmersToAdd) {
            var tile = this.territories[floor(random() * n)];
            if (!tile.player || tile.player === i) {
                tile.player = i;
                tile.farmers++;
                farmersToAdd--;
            }
        }
    }
    
    this.territories[19].player = 1;
    this.territories[19].farmers = 1;
    this.territories[20].player = 2;
    this.territories[20].farmers = 1;
};

World.prototype.draw = function() {
    // Outline
    noStroke();
    fill(30, 60, 120, 80);
    rect(this.x - 2, this.y - 2, this.width + 4, this.height + 4, 2);
    rect(this.x - 3, this.y - 3, this.width + 6, this.height + 6, 3);
    
    for (var i = 0; i < this.territories.length; i++) {
        this.territories[i].draw();
    }
};

World.prototype.highlightTerritory = function(territory) {
    stroke(territory.player ? territory.playerColor : TILE_HIGHLIGHT);
    strokeWeight(3);
    noFill();
    rect(territory.x, territory.y, this.size, this.size, 2);
    
    // Neighbours
    if (territory.player) {
        fill(255, 0, 175, 100);
        noStroke();
        var r = this.size * 0.6;
        for (var i = 0; i < territory.neighbours.length; i++) {
            var neighbour = territory.neighbours[i];
            ellipse(neighbour.mx, neighbour.my, r, r);
        }
    }
};

World.prototype.mouseMoved = function() {
    this.mouseOverTerritory = this.pixelsToTile(mouseX, mouseY);
};

World.prototype.mousePressed = function() {
};

World.prototype.mouseReleased = function() {
    return this.pixelsToTile(mouseX, mouseY);
};

World.prototype.pixelsToTile = function(px, py) {
    if (px > this.x && px < this.x2 &&
        py > this.y && py < this.y2) {
        var mx = floor(map(mouseX, this.x, this.x2, 0, this.tilesAcross));
        var my = floor(map(mouseY, this.y, this.y2, 0, this.tilesDown));
        return this.territories[mx * this.tilesDown + my];
    }
};

World.prototype.nextTurn = function() {
    // Farmers generate food
    for (var i = 0; i < this.territories.length; i++) {
        this.territories[i].growFood();
        this.territories[i].eatFood();
    }
};
}
/*********************************************************
 *      Game object
 * Top level object that controls display and controls
**********************************************************/

var Game = function() {
    var world = new World(40, 52, 8, 6);
    this.world = world;
    this.world.initialise();
    this.selectedTerritory = this.world.territories[0];
    this.turn = 1;
    
    // Array of elements for current view
    this.elements = [];
    
    // Maps mode to elements it contains
    this.modes = {};
    
    this.toolbarY = height - 110;
    this.buildInterface(world);
    
    this.setMode('food');
    //this.setMode('move');
//    this.setMode('moving');
};

Game.prototype.buildInterface = function(world) {
    var self = this;
    var x = 10;
    var y = this.toolbarY + 10;
    var tileSize = 90;
    
    // Next turn button
    var buttonNextTurn = this.getNextPhaseButton(
        'Next turn', self.nextTurn.bind(self)
    );
    
    // Function for drawing tile info
    var drawTileInfo = function() {
        var x = 10;
        var tile = self.selectedTerritory;
        if (!tile) { return; }
        
        // Draw tile
        strokeWeight(3);
        stroke(tile.player ? tile.playerColor : tile.stroke);
        fill(tile.color);
        rect(x, y, tileSize, tileSize, 2);
        
        x += tileSize / 2;
        fill(255);
        textAlign(CENTER, TOP);
        textSize(15);
        text(tile.type, x, y + 2);
        textSize(12);
        text(tile.neighbours.length + " neighbours", x, y + 38);
        
        if (!tile.player) {
            text("Unclaimed", x, y + 23);
            return;
        }
        
        text("Player " + tile.player, x + 1, y + 23);
        fill(PLAYERS[tile.player - 1]);
        text("Player " + tile.player, x, y + 22);
        
        x += tileSize / 2 + 10;
        fill(255);
        textSize(13);
        textAlign(LEFT, CENTER);
        text("Food: " + tile.food + " (" + tile.changeInFood + ")", x, y + 7);
        text("Farmers: " + tile.farmers, x, y + 27);
        text("Soldiers: " + tile.soldiers, x, y + 47);
        
        // Only draw button if land is claimed
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].draw();
        }
    };
    
    x += tileSize + 85;
    
/*****************************************
*   Make mode interface
******************************************/
    
    // Make farmer button
    var buttonMakeFarmer = this.makeButton(x, 400, 'Make',
        function() {
            self.selectedTerritory.createFarmer();
        },
        function() {
            return !self.selectedTerritory.canCreateFarmer;
        }
    );
    
    // Make soldier button
    var buttonMakeSoldier = this.makeButton(x, 422, 'Make',
        function() {
            self.selectedTerritory.createSoldier();
        },
        function() {
            return !self.selectedTerritory.canCreateSoldier;
        }
    );
    
    var makeModeWindow = new GUI_Container(
       [buttonMakeFarmer, buttonMakeSoldier], drawTileInfo
    );
    
    this.modes.food = [buttonNextTurn, makeModeWindow];
    
/*****************************************
*   Select unit to move mode interface
******************************************/
    
    // Move farmer button
    var buttonMoveFarmer = this.makeButton(x, 400, 'Move',
        function() { self.setMode('moving'); }
    );
    
    // Move soldier button
    var buttonMoveSoldier = this.makeButton(x, 422, 'Move',
        function() { self.setMode('moving'); }
    );
    
    var moveModeWindow = new GUI_Container(
       [buttonMoveFarmer, buttonMoveSoldier], drawTileInfo
    );
    
    // Define elements for each window
    this.modes.move = [buttonNextTurn, moveModeWindow];
    
/*****************************************
*   Select a tile to move to
******************************************/
    
    var cancelMoveButton = this.getNextPhaseButton(
        'Cancel',
        function() { self.setMode('move'); }
    );
    
    // Define elements for each window
    this.modes.moving = [cancelMoveButton];
    
};

Game.prototype.makeButton = function(x, y, name, trigger, disableFunc) {
    return new Button(
        x, y, 52, 14, {
            name: name,
            textSize: 13,
            trigger: trigger,
            disabled: disableFunc
        }
    );
};

Game.prototype.getNextPhaseButton = function(name, trigger) {
    return new Button(
        width - 85, height - 30, 80, 20, {
            name: name,
            trigger: trigger
        }
    );
};

Game.prototype.setMode = function(mode) {
    var elements = this.modes[mode];
    if (elements) {
        this.mode = mode;
        this.elements = elements;
    } else {
        println("ERROR: no such mode, " + mode);
    }
};

Game.prototype.nextTurn = function() {
    this.turn++;
    this.world.nextTurn();
    this.setMode('move');
};

Game.prototype.draw = function() {
    background(150, 200, 250);
    
    // Toolbars
    strokeWeight(1);
    stroke(225);
    fill(20, 20, 10);
    rect(-1, -1, width + 1, 24);
    rect(-1, this.toolbarY, width + 1, height - this.toolbarY);
    
    var ty = 11;
    
    textSize(14);
    textAlign(LEFT, CENTER);
    fill(255);
    text("Turn " + this.turn + " " + this.mode + " phase", 10, ty);
    text("Player 1", 200, ty);
    
    this.world.draw();
    this.world.highlightTerritory(this.selectedTerritory);
    
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].draw();
    }
};

Game.prototype.mousePressed = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mousePressed();
    }
};

Game.prototype.mouseReleased = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mouseReleased();
    }
    
    var tile = this.world.mouseReleased();
    switch (this.mode) {
        case 'move':
        case 'food':
            if (tile) {
                this.selectedTerritory = tile;
            }
            break;
        case 'moving':
            
            // Move to position
            break;
    }
    
};

/*********************************************************
 *      Set-up objects
**********************************************************/

var game = new Game();

/*********************************************************
 *      Main loop
*********************************************************/

draw = game.draw.bind(game);
mousePressed = game.mousePressed.bind(game);
mouseReleased = game.mouseReleased.bind(game);

/*
draw = function() {
    background(150, 200, 250);
    drawToolbars();
    world.draw();
    gui.draw();
};
*/

/*********************************************************
 *      Event handling
**********************************************************/
/*
{
mouseMoved = function() {
    //world.mouseMoved();
};

mousePressed = function() {
    gui.mousePressed();
    world.mousePressed();
};

mouseDragged = function() {
    gui.mouseDragged();
};

mouseReleased = function() {
    gui.mouseReleased();
    world.mouseReleased();
};

mouseOut = function() {
    gui.mouseReleased();
};
}
*/
