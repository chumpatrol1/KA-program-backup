/**********************************
 * Based on Slam: http://store.steampowered.com/app/377940
 * 
 * 22/7/15 {
 *  Create Level object
 *  Draw walls and floor
 *  Draw goal
 * }
 * 23/7/15 {
 *  Colour scheme (important!)
 *  Draw toolbar
 *  Draw ball
 * }
 * 25/7/15 {
 *  Restructure how the grid is stored
 *  Add tilt logic
 *  Animate ball movement
 * }
 * 26/7/15 {
 *  Add test for win state
 *  Create Game object to store moves and tilt direction
 *  Draw arrows in direction of tilt
 *  Prevent board tilting while ball in motion
 *  Multiple levels
 *  Multiple sliding objects including obstacles
 *  Restructure how the grid is stored again
 * }
 * 27/7/15 {
 *  Use images to draw map
 * }
 * 15/8/15 {
 *  Completely overhaul look to use hand-drawn effect
 *  Also requires changing how map is stored again
 *  Show par for each level and add more levels
 * }
 * 16/8/15 {
 *  Update physics to be more explicit
 * }
 * 
 * TODO:
 *   Fix: Obstacles
 *   Avoid the need for surrounding walls
 *   Win screen
 *   Tutorial dialogues
 *   Arrow buttons
 *   Restart button
 *   Sound (?)
 * 
 * Lava / hole (destroys ball and obstacles)
 * Buttons (weights open doors)
 * Teleporters
 * Multiple balls and goals
***********************************/

var BACKGROUND = color(250);
var GRIDGREY = color(220, 240, 220);

var WIGGLE = 0.04;
var CURVATURE = 0.25;

var cursiveFont = createFont("cursive", 20);

/*****************************
  Key to the maps:
    . Empty
    O Ball
    X Goal
    * Wall
******************************/

var levels = [
        {
        par: 5,
        map: [
            "*******",
            "*.....*",
            "*.***.*",
            "*.*X*.*",
            "*O*...*",
            "*******"
        ]
    },{
        par: 6,
        map: [
            "***********",
            "*O.**...*.**",
            "*.........X*",
            "*......*..**",
            "*.**......*",
            "*.....*...*",
            "***********"
        ]
    },
    {
        par: 8,
        map: [
            "*********",
            "*O....*X*",
            "*.*.*...*",
            "*...*...*",
            "**....*.*",
            "*....*..*",
            "**.**...*",
            "*......**",
            "******** "
        ]
    },
    {
        par: 7,
        map: [
            "********",
            "*O......*",
            "*..*....*",
            "*.....*.*",
            "*...*...*",
            "*.*.....*",
            "*.....***",
            "*......X*",
            "*....**",
            "******** "
        ]
    },
    {
        par: 6,
        map: [
            "******",
            "*O@..*",
            "****.*",
            "   *.*",
            "  **.*",
            "  *.X*",
            "  ****"
        ]
    },
    {
        par: 6,
        map: [
            "********",
            "*@O....*",
            "***....*",
            "  *....*",
            "  ***.**",
            "    *X*",
            "    ***"
        ]
    },
    {
        par: 6,
        map: [
            "*******",
            "*.!..X*",
            "*.....*",
            "*....@*",
            "**...O*",
            "*******"
        ]
    }
];

/*******************************************************
 *  My drawing functions
*******************************************************/
// Takes an array of coordinates in the form [x, y] and
// draws a closed shape using vertex
var drawShape = function(coords) {
    var n = coords.length;
    var coord, i;
    
    beginShape();
    for (i = 0; i < n; i++) {
        coord = coords[i];
        vertex(coord[0], coord[1]);
    }
    endShape(CLOSE);
};

// Takes an array of coordinates in the form [x, y] and
// draws a closed shape using curveVertex
var drawCurvedShape = function(coords) {
    var n = coords.length;
    var coord, i;
    
    beginShape();
    for (i = 0; i < n + 2; i++) {
        coord = coords[i % n];
        curveVertex(coord[0], coord[1]);
    }
    endShape(CLOSE);
};

// Takes an array of coordinates in the form [x, y] and
// returns the coordinates, scaled by a scalar
var scaleCoordinates = function(coords, size) {
    var n = coords.length;
    var newCoords = [];
    
    for (var i = 0; i < n; i++) {
        newCoords.push([coords[i][0] * size, coords[i][1] * size]);
    }
    
    return newCoords;
};

// Takes an array of coordinates in the form [x, y] and
// returns the coordinates, shifted by the wiggle factor
var wiggleCoordinates = function(coords, wiggle) {
    var n = coords.length;
    var newCoords = [];
    var i, x, y;
    
    for (var i = 0; i < n; i++) {
        x = coords[i][0] + random(-1, 1) * wiggle;
        y = coords[i][1] + random(-1, 1) * wiggle;
        newCoords.push([x, y]);
    }
    
    return newCoords;
};

/*******************************************************
 *  Button object
*******************************************************/

var Button = function(x, y) {
};

/*******************************************************
 *  Find the outline areas for the map
*******************************************************/

var Block = function(x, y) {
    this.x = x;
    this.y = y;
    
    // In order, left, top, right, bottom
    this.neighbours = ["edge", "edge", "edge", "edge"];
    
    this.offsets = [
        [0, 1 - CURVATURE, 0, CURVATURE],
        [CURVATURE, 0, 1 - CURVATURE, 0],
        [1, CURVATURE, 1, 1 - CURVATURE],
        [1 - CURVATURE, 1, CURVATURE, 1]];
};

// Add outline positions of this block starting with position startPosition
Block.prototype.getOutlineCoordsRounded = function(outline, startPosition) {
    var position = startPosition;
    
    for (var i = 0; i < 4; i++) {
        var offset = this.offsets[position];
        var neighbour = this.neighbours[position];
        
        if (neighbour === "edge") {
            // Create edge
            outline.push([this.x + offset[0], this.y + offset[1]]);
            outline.push([this.x + offset[2], this.y + offset[3]]);
            this.neighbours[position] = "drawn";
        } else if (neighbour === "drawn") {
            break;
        } else {
            var oldPosition = (position + 3) % 4;
            
            if (neighbour.neighbours[oldPosition] !== "drawn") {
                neighbour.getOutlineCoordsRounded(outline, oldPosition);
            }
            break;
        }
        
        position = ++position % 4;
    }
};

var findOutline = function(world) {
    var height = world.length;
    var width = world[0].length;
    
    // Create a 2D array full of 0s with the same dimensions as the world
    var grid = [];
    for (var y = 0; y < height; y++) {
        grid.push(new Array(width));
    }
    
    // Create Block objects and add to array as well as a 2D array for each look up.
    var blocks = [];
    var x, y, row, newBlock;
    
    for (y = 0; y < height; y++) {
        row = world[y];
        for (x = 0; x < row.length; x++) {
            if (row[x] !== "*" && row[x] !== " ") {
                newBlock = new Block(x, y);
                grid[y][x] = newBlock;
                blocks.push(newBlock);
            }
        }
    }
    
    // Find neighbours of Blocks
    for (var i = 0; i < blocks.length; i++) {
        var block = blocks[i];
        var x = block.x;
        var y = block.y;
        
        // Check for neighbours to the right
        var block2 = grid[y][x + 1];
        if (block2) {
            block.neighbours[2] = block2;
            block2.neighbours[0] = block;
        }
        
        // Check for neighbours below
        block2 = (y + 1 < height) && grid[y + 1][x];
        if (block2) {
            block.neighbours[3] = block2;
            block2.neighbours[1] = block;
        }
    }
    
    // Find coordinates of outlines
    var outlines = [];
    
    // Loop through block finding those with edges not yet added
    for (var i = 0; i < blocks.length; i++) {
        var startBlock = blocks[i];
        if (startBlock.neighbours[0] === "edge") {
            var outline = [];
            startBlock.getOutlineCoordsRounded(outline, 0);
            outlines.push(outline);
        }
    }
    
    return outlines;
};
 
/**********************************************
 *      Game Elements
***********************************************/

var Goal = function(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size / 2;
    this.type = 'goal';
    
    // Create star coordinates
    this.coords = [];
    var i, r, angle;
    var cx = (x + 0.5) * size; 
    var cy = (y + 0.5) * size; 
    
    for (i = 0; i < 10; i++) {
        r = this.size * (i % 2 ? 0.8 : 0.3);
        angle = 36 * i;
        this.coords.push([
            cx + r * sin(angle),
            cy + r * cos(angle)
        ]);
    }
    
    this.lines = wiggleCoordinates(this.coords, WIGGLE * this.size);
};

Goal.prototype.draw = function() {
    if (frameCount % 6 === 0) {
        this.lines = wiggleCoordinates(this.coords, WIGGLE * this.size);
    }
    
    fill(255, 255, 80);
    stroke(230, 150, 0);
    strokeWeight(2);
    drawShape(this.lines);
};

var Hole = function(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.type = 'hole';
};

Hole.prototype.draw = function() {
    fill(20);
    stroke(120);
    strokeWeight(2);
    rect(this.x * this.size + 1, this.x * this.size + 1, this.size - 1, this.size - 1);
};

/**********************************************
 *      Ball Object
 * A ball that moves when the board is tilted.
 * Ball can be obstacles, which means they do 
 * no enter goals.
***********************************************/

var Ball = function(x, y, grid) {
    this.x = x;
    this.y = y;
    this.grid = grid;

    this.speed = 0;
    this.acceleration = 0.008;
    this.movement = false;
};

Ball.prototype.draw = function(size) {
    noStroke();
    if (this.obstacle) {
        fill(80);
    } else {
        fill(40, 160, 220);
    }
    
    ellipse((this.x + 0.5) * size, (this.y + 0.5) * size, size * 0.8, size * 0.8);
    fill(255, 255, 255, 160);
    ellipse((this.x + 0.4) * size, (this.y + 0.4)* size, size * 0.2, size * 0.2);
    fill(255, 0, 0);
    textAlign(CENTER, CENTER);
    //text(this.x + ", " + this.y, this.x * size, this.y * size);
};

Ball.prototype.move = function() {
    var x2 = round(this.x + this.movement[0]);
    var y2 = round(this.y + this.movement[1]);
    
    // Figure out when to stop
    if (this.grid[y2][x2].blocked) {
        this.x = x2 - this.movement[0];
        this.y = y2 - this.movement[1];
        this.direction = false;
        this.speed = 0;
    } else {
        this.speed += this.acceleration;
        this.x += this.speed * this.movement[0];
        this.y += this.speed * this.movement[1];
    }
};

/****************************************
 *      Level Object
 * Keeping track of where things are.
****************************************/

var Level = function(width, height, params) {
    this.height = params.map.length;
    
    for (var i = 0; i < this.height; i++) {
        this.width = max(this.width || 0, params.map[i].length);
    }
    
    this.size = floor(min(width / (this.width + 2), height / (this.height + 2)));
    this.init(params.map);
};

Level.prototype.init = function(grid) {
    // Convert the map into a 2D array of tile objects
    
    this.grid = [];
    this.moveableElements = [];
    
    // Elements on the map for drawing
    // e.g. goals or holes
    this.gameElements = [];
    
    var x, y, tile, row, newRow;
    
    for (y = 0; y < grid.length; y++) {
        row = grid[y];
        newRow = [];
        
        for (x = 0; x < row.length; x++) {
            switch (row[x]) {
                case ' ':
                    tile = { blocked: true };
                    break;
                case '*':
                    tile = { blocked: true };
                    break;
                case '.':
                    tile = { blocked: false };
                    break;
                case 'X':
                    tile = { blocked: false };
                    this.gameElements.push(new Goal(x, y, this.size));
                    break;
                case '!':
                    tile = { blocked: true };
                    this.gameElements.push(new Hole(x, y, this.size));
                    break;
                case 'O':
                case '@':
                    tile = { blocked: false };
                    var ball = new Ball(x, y, this.grid);
                    
                    if (row[x] === '@') { ball.obstacle = true; }
                    
                    this.moveableElements.push(ball);
                    break;
            }
            newRow.push(tile);
        }
        this.grid.push(newRow);
    }
    
    // Get coordinates for drawing
    this.outlines = findOutline(grid);
    
    // Get them to the right size
    for (var i = 0; i < this.outlines.length; i++) {
        this.outlines[i] = scaleCoordinates(this.outlines[i], this.size);
    }
    
    this.wiggleLines();
};

Level.prototype.wiggleLines = function() {
    this.lines = [];
    
    for (var i = 0; i < this.outlines.length; i++) {
        this.lines.push(wiggleCoordinates(this.outlines[i], this.size * WIGGLE));
    }
};

Level.prototype.draw = function() {
    // Add a wiggle every 6 frames;
    if (frameCount % 6 === 0) {
       this.wiggleLines();
    }
    
    // Draw outline
    noFill();
    strokeWeight(3);
    stroke(20, 40, 100);
    
    for (var i = 0; i < this.lines.length; i++) {
        drawCurvedShape(this.lines[i]);
    }
    
    // Draw game elements
    for (var i = 0; i < this.gameElements.length; i++) {
        this.gameElements[i].draw(this.size);
    }
    
    // Draw moving elements
    for (var i = 0; i < this.moveableElements.length; i++) {
        this.moveableElements[i].draw(this.size);
    }
};

Level.prototype.tilt = function(direction) {
    // Tilt board in the direction
    this.moving = true;
    
    // 0 - 3 represents LEFT, UP, RIGHT, DOWN
    var directions = [[-1, 0], [0, -1], [1, 0], [0, 1]];
    
    // Give some direction to each ball
    for (var i = 0; i < this.moveableElements.length; i++) {
        this.moveableElements[i].movement = directions[direction];
    }

};

Level.prototype.update = function() {
    this.moving = false;
    
    for (var i = 0; i < this.moveableElements.length; i++) {
        var ball = this.moveableElements[i];
        
        if (ball.movement) {
            // Check other balls
            
            ball.move();
            this.moving = true;
            
            if (!ball.obstacle && this.testForGoal(ball)) {
                this.win = true;
            }
        }
    }
    
};

Level.prototype.testForGoal = function(ball) {
    var x = ball.x;
    var y = ball.y;
    
    if (x === round(x) && y === round(y)) {
        for (var i = 0; i < this.gameElements.length; i++) {
            var el = this.gameElements[i];
            if (el.x === x && el.y === y) {
                return el.type === 'goal';
            }
        }
    }
};

/*****************************
 *      Game object
******************************/

var Game = function(n) {
    this.levelNumber = n || 0;
    this.toolbarHeight = 30;
    this.startLevel(this.levelNumber);
};

Game.prototype.startLevel = function(n) {
    var levelData = levels[this.levelNumber];
    this.level = new Level(width, height - this.toolbarHeight, levelData);
    
    this.gridSize = this.level.size;
    
    // Where to start drawing the map
    this.startX = (width - this.level.width * this.gridSize) / 2;
    this.startY = (height + this.toolbarHeight - this.level.height * this.gridSize) / 2;
    
    // Where to start drawing the gridlines
    this.gridX = this.startX - this.gridSize * floor(this.startX / this.gridSize);
    this.gridY = this.startY - this.gridSize * floor(this.startY / this.gridSize);
    
    this.win = false;
    this.moveCount = 0;
    this.par = levelData.par || "unknown";
    
    // Direction that the board is tilted
    // -1 means it is not tilted at all
    // Other values are 0 - 3 for LEFT, UP, RIGHT, DOWN
    this.direction = -1;
};

Game.prototype.nextLevel = function(n) {
    if (this.levelNumber < levels.length - 1) {
        this.startLevel(++this.levelNumber);
    }
};

Game.prototype.draw = function() {
    background(BACKGROUND);
    
    // Draw grid
    strokeWeight(1);
    stroke(GRIDGREY);
    
    for (var x = this.gridX; x < width; x += this.gridSize) {
        line(x, 0, x, height);
    }
    
    for (var y = this.gridY; y < width; y += this.gridSize) {
        line(0, y, height, y);
    }
    
    /*
    // Draw arrow
    if (this.direction !== -1) {
        fill(200, 0, 0);
        noStroke();
        pushMatrix();
        translate(200, 200);
        rotate(this.direction * 90);
        triangle(-180, 0, -160, 10, -160, -10);
        popMatrix();
    }
    */
    
    // Draw map as hand-drawn lines
    pushMatrix();
    translate(this.startX, this.startY);
    this.level.draw();
    popMatrix();

    this.drawToolbar();

};

Game.prototype.drawToolbar = function() {
    var h = this.toolbarHeight;
    
    textAlign(LEFT, BASELINE);
    textFont(cursiveFont);
    fill(20, 40, 100);
    
    text("Level: " + (this.levelNumber + 1), 12, h);
    text("Moves: " + this.moveCount, 120, h);
    text("Target: " + this.par, 240, h);
};

Game.prototype.update = function() {
    if (!this.win && this.level.moving) {
        this.level.update();
        this.win = this.level.win;
    }
    
    if (this.win) {
        this.nextLevel();
    }
};

Game.prototype.keyPressed = function() {
    var directions = [LEFT, UP, RIGHT, DOWN];
    
    // Don't allow tilting while the ball is still rolling
    if (this.level.moving) { return; }
    
    for (var i = 0; i < directions.length; i++) {
        if (i !== this.direction && keyCode === directions[i]) {
            this.direction = i;
            this.moveCount++;
            this.level.tilt(i);
            break;
        }
    }
};

var game = new Game(0);

/*****************************
 *      Main loop
******************************/

draw = function() {
    game.draw();
    game.update();
};

/*****************************
 *  Event handling
******************************/
keyPressed = function() {
    game.keyPressed();
};
