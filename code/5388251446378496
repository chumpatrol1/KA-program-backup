/*********************************************
* A shiny red sphere and a matte green one.
* 
* Click and drag the white circle to
* move the light.
**********************************************/

var BACKGROUND = color(0, 0, 0);
var RED = color(255, 40, 40);
var BLUE = color(64, 95, 237);
var BLUE = color(120, 150, 250);
var GREEN = color(0, 200, 0);
var WHITE = color(255, 255, 255);
var LIGHT = color(255, 255, 200);
var ORANGE = color(255, 165, 0);
var TENNIS = color(200, 230, 0);
var TILE1 = color(180, 170, 100);
var TILE2 = color(210, 220, 170);

var CONTROL_POINT_SIZE = 15;

var selected = false;
var lightIntensity = 700000;
var ambientIntensity = lightIntensity / 100;

var showing = {
    ambient: true,
    diffuse: true,
    specular: true,
};

/*********************************************
 *      Linear algebra
**********************************************/
// Assume everything has 3 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
};

// Assume vectors are 3D with attributes, x, y, z
var crossProduct = function(v1, v2) {
    return {
        x: v1.y * v2.z - v1.z * v2.y,
        y: v1.z * v2.x - v1.x * v2.z,
        z: v1.x * v2.y - v1.y * v2.x
    };
};

var vectorLength = function(v) {
    return sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
};

var square = function(v) {
    return v.x * v.x + v.y * v.y + v.z * v.z;
};

var normalise = function(v) {
    var d = vectorLength(v);
    return { x: v.x / d, y: v.y / d, z: v.z / d };
};

var add = function(v1, v2){
    return {
        x: v1.x + v2.x,
        y: v1.y + v2.y,
        z: v1.z + v2.z
    };
};

var subtract = function(v1, v2){
    return {
        x: v1.x - v2.x,
        y: v1.y - v2.y,
        z: v1.z - v2.z
    };
};

var multiplyByScalar = function(v, s) {
    return {
        x: v.x * s,
        y: v.y * s,
        z: v.z * s
    };
};

var normalOfPlane = function(p1, p2, p3) {
    var v1 = subtract(p2, p1);
    var v2 = subtract(p3, p1);
    return crossProduct(v1, v2);
};

var printVector = function(v, label) {
    label = label || "";
    println(label + 
            round(1000 * v.x) / 1000 + " " +
            round(1000 * v.y) / 1000 + " " +
            round(1000 * v.z) / 1000);
};

var Slider = function(x, y, width, min_v, max_v, current_v, name) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    this.name = name;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;
    this.showing = true;

    this.draw = function() {
        if (this.showing) {
            noStroke();
            fill(180);
            rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);
        
            strokeWeight(1);
            stroke(0, 0, 0, 120);
            fill(180, 180, 250);
            ellipse(this.bx, this.y, this.ballD, this.ballD);
            noStroke();
            fill(255, 255, 255, 150);
            ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);   
        }
    };
    
    this.selected = function() {
        if (this.showing) {
            this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;    
        }
    };
    
    this.drag = function() {
        if (this.showing && this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + round((x - this.x) * this.scale);
            return true;
        }
    };
  
    // This is used if you want to update the value in a way other
    // than using the slider (but want the slider to update).
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

/*********************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
**********************************************/

var DraggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name;
};

DraggablePoint.prototype.draw = function() {
    if (selected === this || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
    
    if (this.name) {
        textAlign(CENTER, BASELINE);
        text(this.name, this.x, this.y - r / 2 - 5);
    }
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

/*********************************************
 *      Sphere object
**********************************************/

var Sphere = function(x, y, z, r, col, shine, diffuse, specular) {
    this.center = { x: x, y: y, z: z };
    this.r = r;
    this.r2 = this.r * this.r;
    
    this.color = col || GREEN;
    
    this.shininess = shine;
    this.diffuseFactor = diffuse;
    this.specularFactor = specular;
    this.reflection = 0.4;
};

Sphere.prototype.intersect = function(vOrigin, vDirection) {
    var v = subtract(vOrigin, this.center);
    var v2 = square(v);
    var d = dotProduct(v, vDirection);
    var radicand = d * d - v2 + this.r2;
    if (radicand > 0) {
        return -d - sqrt(radicand);
    }
};

/*********************************************
 *  A triangular Plane defined by three points
**********************************************/

var Plane = function(p1, p2, p3, color, shine, diffuse, specular) {
    this.p1 = p1;
    this.p2 = p2;
    this.p3 = p3;
    this.color = color;
    this.normal = normalise(normalOfPlane(p1, p2, p3));
    
    this.shininess = shine;
    this.diffuseFactor = diffuse;
    this.specularFactor = specular;
};

Plane.prototype.intersect = function(vOrigin, vDirection) {
    var edge1 = subtract(this.p2, this.p1);
    var edge2 = subtract(this.p3, this.p1);
    
    // Begin calculating determinant
    var p = crossProduct(vDirection, edge2);
    var det = dotProduct(edge1, p);
  
    // If determinant is near zero, ray lies in plane of triangle
    if (det > -EPSILON && det < EPSILON) { return 0;}
    var inv_det = 1 / det;
    
    // Calculate distance from V1 to ray origin
    var t = subtract(vOrigin, this.p1);
 
    // Calculate u parameter and test bound
    var u = dotProduct(t, p) * inv_det;
    // The intersection lies outside of the triangle
    if (u < 0 || u > 1) { return 0; }
    
    // Prepare to test v parameter
    var q = crossProduct(t, edge1);
 
    // Calculate v parameter and test bound
    var v = dotProduct(vDirection, q) * inv_det;
    // The intersection lies outside of the triangle
    if (v < 0 || u + v > 1) { return 0; }
 
    var t = dotProduct(edge2, q) * inv_det;
 
    // Ray intersection
    // (length along direction from origin)
    if (t > EPSILON) { return t; }
};

/*********************************************
 *      Camera
**********************************************/

var reflect = function(v, n) {
    // Reflect ray v on a surface with normal, n
    var norm = normalise(n);
    var ray = normalise(v);
    var d = dotProduct(ray, norm);
    return subtract(ray, multiplyByScalar(norm, 2 * d));
};

var Viewer = function(x, y, z, dz, dx, dy, d, light) {
    // Number of pixels along and down
    this.dx = dx;
    this.dy = dy;
    // Size of pixels in display
    this.d = d;
    
    this.origin = { x: x, y: y, z: z - dz };
    this.imageGrid = { x: x - d * dx / 2, y: y - d * dy / 2, z: z };
    
    // Vectors along the edges of image grid
    this.vx = { x: 1, y: 0, z: 0 };
    this.vy = { x: 0, y: 1, z: 0 };
    
    this.light = light;
};

// Cast a ray from the origin to pixel at (x, y) through all the objects
Viewer.prototype.castRay = function(x, y, objects) {
    var px = multiplyByScalar(this.vx, this.d * (x + 0.5));
    var py = multiplyByScalar(this.vy, this.d * (y + 0.5));
    var ray = normalise(subtract(add(this.imageGrid, add(px, py)), this.origin));
    
    var hit = this.rayIntersect(this.origin, ray, objects);
    
    // Calculate colour of the pixel
    if (hit.obj) {
        // Find the position on the object where the ray hits
        var pos = add(this.origin, multiplyByScalar(ray, hit.t));
        var col = this.getColorAtPosition(hit.obj, pos, ray, objects);
        
        // See if there is a reflection
        if (hit.obj.reflection) {
            var normal = hit.obj.normal || normalise(pos);
            var d = dotProduct(ray, normal);
            var reflection = normalise(subtract(ray, multiplyByScalar(normal, 2 * d)));
            
            var hit2 = this.rayIntersect(pos, reflection, objects);
            if (hit2.obj) {
                var pos2 = add(pos, multiplyByScalar(reflection, hit2.t));
                var col2 = this.getColorAtPosition(hit2.obj, pos2, reflection, objects);
                col2 = lerpColor(BACKGROUND, col2, hit.obj.reflection);
                col = blendColor(col, col2, ADD);
            }
        }

        return col;
    }
};

Viewer.prototype.getColorAtPosition = function(obj, pos, ray, objects) {
    var vectorToLight = subtract(this.light, pos);
    var lightNorm = normalise(vectorToLight);
    var toLight = multiplyByScalar(lightNorm, -1);
    var normal = obj.normal || normalise(pos);

    // Ambient light
    var intensity = 0.15;

    // Take into account angle of plane relative to light (diffuse light)
    var diffuse = dotProduct(normal, lightNorm);
    if (diffuse > 0) {
        
        
        // Determine if point is in shadow
        if (this.rayIntersect2(pos, lightNorm, objects)) {
            return lerpColor(BACKGROUND, obj.color, intensity);
        }
        
        // Take into account distance from light
        var fallOff = lightIntensity / (square(vectorToLight) + 360000);
        var di = diffuse * fallOff * (1 -(obj.reflection || 0));
        
        intensity = constrain(intensity + di, 0, 1);
        
        var col = lerpColor(BACKGROUND, obj.color, intensity);

        if (diffuse > 0 && obj.specularFactor) {
            var reflection = normalise(subtract(lightNorm, multiplyByScalar(normal, 2 * diffuse)));
            
            var specularInt = dotProduct(reflection, ray);
            if (specularInt > 0) {
                var si = obj.specularFactor * fallOff * pow(specularInt, obj.shininess);
                var shine = lerpColor(BACKGROUND, WHITE, min(1, si));
                col = blendColor(col, shine, ADD);
            }
        }
        
        return col;
    }
    
    return lerpColor(BACKGROUND, obj.color, intensity);
};

// Find the object hit by the ray first
Viewer.prototype.rayIntersect = function(origin, ray, objects) {
    var minT, obj;
    for (var i = 0; i < objects.length; i++) {
        var t = objects[i].intersect(this.origin, ray);
        if (t > 0 && (!minT || t < minT)) {
            minT = t;
            obj = objects[i];
        }
    }
    return { obj: obj, t: minT };
};

// Return true if the ray intersects with anything
// Used for calculating shadows.
Viewer.prototype.rayIntersect2 = function(origin, ray, objects) {
    for (var i = 0; i < objects.length; i++) {
        var t = objects[i].intersect(this.origin, ray);
        if (t) {
            println(t);
        }
        if (t && t > 0){
            return true;
        }
    }
};

/*********************************************
 *      Create objects
**********************************************/
// Make a n by m grid, where was tile is d x d
// with a chequered pattern of two colours.
// Grid is centred on (x, y, z) and horizontal
var makeGrid = function(x, y, z, n, m, d, color1, color2) {
    var colors = [color1, color2];
    var planes = [];
    var xs = x - n * d / 2;
    var zs = z - m * d / 2;
    
    for (var i = 0; i < n; i++) {
        var x1 = xs + i * d;
        var x2 = xs + (i + 1) * d;
        for (var j = 0; j < m; j++) {
            var z1 = zs + j * d;
            var z2 = zs + (j + 1) * d;
            var p1 = { x: x1, y: y, z: z1 };
            var p2 = { x: x2, y: y, z: z1 };
            var p3 = { x: x1, y: y, z: z2 };
            var p4 = { x: x2, y: y, z: z2 };
            var col = colors[(i + j) % 2];
            planes.push(new Plane(p1, p2, p3, col, 4, 0.8, 0.5));
            planes.push(new Plane(p2, p4, p3, col, 4, 0.8, 0.5));
        }
    }
    
    return planes;
};

var objects = makeGrid(0, 180, 0, 7, 8, 160, TILE1, TILE2);
objects.push(new Sphere(0, 0, 0, 180, BLUE, 40, 0.75, 0.55));

var light = new DraggablePoint(-250, -360, LIGHT);
light.z = -500;

var viewer = new Viewer(0, 104, -400, 150, 240, 240, 1, light);

var selectables = [light];
var sliders = [];

/*********************************************
 *      Main loop
**********************************************/
var sx = (width - viewer.dx) / 2;
var sy = (height - viewer.dy) / 2;

background(BACKGROUND);

noFill();
strokeWeight(1);
stroke(255);
rect(sx - 2, sy - 2, viewer.dx + 3, viewer.dy + 3);
rect(98, 8, 203, 19);

strokeWeight(1);

var y = 0;
var draw = function() {
    if (y < viewer.dy) {
        for (var x = 0; x < viewer.dx; x++) {
            var c = viewer.castRay(x, y, objects);
            if (c) {
                stroke(c);
                point(sx + x, sy + y);
            }
        }
        y++;
    }
    
    fill(GREEN);
    noStroke();
    rect(100, 10, 200 * y / viewer.dy, 16);
};

/*********************************************
 *      Event handling
**********************************************/

mousePressed = function() {
    for (var i = 0; i < selectables.length; i++) {
        if (selectables[i].mouseOver()) {
            selected = selectables[i];
        }
    }
    for (var i = 0; i < sliders.length; i++) {
        sliders[i].selected();
    }
};

mouseDragged = function() {
    if (selected) {
        selected.move();
    }
    
    for (var i = 0; i < sliders.length; i++) {
        if (sliders[i].drag()) {
            //updateLight();
        }
    }
};

mouseReleased = function() {
    selected = false;
    for (var i = 0; i < sliders.length; i++) {
        sliders[i].held = false;
    }
};

mouseOut = function() {
    mouseReleased();
};
