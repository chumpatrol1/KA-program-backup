/********************************************************
 *  
*********************************************************/

var BACKGROUND = color(0, 0, 20);
var SHADE = color(0, 0, 20);
var WHITE = color(255, 255, 255);

var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

var translateX = width / 2;
var translateY = 100;

/********************************************************
 *      Linear algebra
*********************************************************/

var normaliseVector = function(v) {
    var d = sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
    return { x: v.x / d, y: v.y / d, z: v.z / d};
};

var subtractVectors = function(v1, v2){
    return {
        x: v1.x - v2.x,
        y: v1.y - v2.y,
        z: v1.z - v2.z
    };
};

// Assume vectors are 3D with attributes, x, y, z
var crossProduct = function(v1, v2) {
    return {
        x: v1.y * v2.z - v1.z * v2.y,
        y: v1.z * v2.x - v1.x * v2.z,
        z: v1.x * v2.y - v1.y * v2.x
    };
};

// Assume everything has 3 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
};

// Given at least 3 nodes, find the normal to the plane they define
// Only the first 3 nodes are used.
var normalOfPlane = function(nodes) {
    var edge1 = subtractVectors(nodes[0], nodes[1]);
    var edge2 = subtractVectors(nodes[0], nodes[2]);
    return crossProduct(edge1, edge2);
};

// Calculate whether a vector given by an origin and a direction,
// intersects with a triangle, given by 3 nodes/vectors
// From: http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
var triangleIntersection = function(vOrigin, vDirection, t1, t2, t3) {
    var edge1 = subtractVectors(t2, t1);
    var edge2 = subtractVectors(t3, t1);
    
    // Begin calculating determinant
    var p = crossProduct(vDirection, edge2);
    var det = dotProduct(edge1, p);
  
    // If determinant is near zero, ray lies in plane of triangle
    if (det > -EPSILON && det < EPSILON) { return 0;}
    var inv_det = 1 / det;
    
    // Calculate distance from V1 to ray origin
    var t = subtractVectors(vOrigin, t1);
 
    // Calculate u parameter and test bound
    var u = dotProduct(t, p) * inv_det;
    // The intersection lies outside of the triangle
    if (u < 0 || u > 1) { return 0; }
    
    // Prepare to test v parameter
    var q = crossProduct(t, edge1);
 
    // Calculate v parameter and test bound
    var v = dotProduct(vDirection, q) * inv_det;
    // The intersection lies outside of the triangle
    if (v < 0 || u + v > 1) { return 0; }
 
    var t = dotProduct(edge2, q) * inv_det;
 
    // Ray intersection
    if (t > EPSILON) { return t; }
};

/********************************************************
 *      Rotate functions
*********************************************************/

// Rotate shape around the z-axis
var rotateZ3D = function(theta, nodes) {
    var st = sin(theta);
    var ct = cos(theta);
    var x, y;
    
    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i].x;
        y = nodes[i].y;
        nodes[i].x = ct * x - st * y;
        nodes[i].y = ct * y + st * x;
    }
};

var rotateY3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, z;

    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i].x;
        z = nodes[i].z;
        nodes[i].x =  ct * x + st * z;
        nodes[i].z = -st * x + ct * z;
    }
};

var rotateX3D = function(theta, nodes){
    var ct = cos(theta);
    var st = sin(theta);
    var y, z;
    
    for (var i = 0; i < nodes.length; i++) {
        y = nodes[i].y;
        z = nodes[i].z;
        nodes[i].y = ct * y - st * z;
        nodes[i].z = st * y + ct * z;
    }
};

/***************************************************
 *      Create objects
****************************************************/

// Create a horizontal width x depth grid
// centered at position (x, y, z)
var createGrid = function(x, y, z, width, depth) {
    var nodes = [
        { x: x - width / 2, y: y, z: z - depth/2 },
        { x: x - width / 2, y: y, z: z + depth/2 },
        { x: x + width / 2, y: y, z: z + depth/2 },
        { x: x + width / 2, y: y, z: z - depth/2 },
    ];
    
    var faces = [[0, 1, 2, 3]];
    
    return { nodes: nodes, faces: faces };
};

var createTriangle = function(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
    return {
        nodes: [
            { x: x1, y: y1, z: z1 },
            { x: x2, y: y2, z: z2 },
            { x: x3, y: y3, z: z3 }
        ],
        faces: [[0, 1, 2]]
    };
};

var objects = [createTriangle(0, -43, 0, -50, 43, 0, 50, 43, 0)];
rotateY3D(20, objects[0].nodes);
rotateX3D(30, objects[0].nodes);

/***************************************************
 *      Draw functions
****************************************************/

var simpleDraw = function() {
    // Draw faces
    var nodes = objects[0].nodes;
    
    pushMatrix();
    translate(translateX, translateY);
    
    for (var f = 0; f < objects[0].faces.length; f++) {
        var face = objects[0].faces[f];
        
        fill(80, 160, 255);
        stroke(10);
        
        if (face.length === 3) {
            triangle(nodes[face[0]].x, nodes[face[0]].y,
                     nodes[face[1]].x, nodes[face[1]].y,
                     nodes[face[2]].x, nodes[face[2]].y);
        } else {
            quad(nodes[face[0]].x, nodes[face[0]].y,
                 nodes[face[1]].x, nodes[face[1]].y,
                 nodes[face[2]].x, nodes[face[2]].y,
                 nodes[face[3]].x, nodes[face[3]].y);
        }
    }
    
    popMatrix();    
};

// Cast rays with size d by d over a rectangle
// with top left at (x1, y1) and bottom right at (x1 + w, y1 + h)
var simpleRayCast = function(x1, y1, w, h, d) {
    var x, y, o;
    
    var x2 = x1 + w;
    var y2 = y1 + h;
    var ol = objects.length;
    var dy = 180;
    
    strokeWeight(1);
    textAlign(CENTER, CENTER);
    textSize(8);
    
    for (x = x1; x < x2; x += d) {
        for (y = y1; y < y2; y += d) {
            
            var camera = {
                x: x - translateX,
                y: y - translateY,
                z: 100
            };
            var direction = { x: 0, y: 0, z: -1 };
            
            noFill();
            stroke(255, 255, 255, 200);
            ellipse(x, y, d - 2, d - 2);
            noStroke();
            
            // Check for intersection with objects
            for (o = 0; o < ol; o++) {
                var obj = objects[o];
                var nodes = objects[0].nodes;
                var face = objects[0].faces[0];
                
                var n1 = nodes[face[0]];
                var n2 = nodes[face[1]];
                var n3 = nodes[face[2]];
                
                var t = triangleIntersection(camera, direction, n1, n2, n3);
                
                if (t) {
                    fill(255, 255, 255, 200);
                    ellipse(x, y, d * 0.6, d * 0.6);
                    //fill(255);
                    //text(round(t), x, y);
                    
                    // Draw pixel
                    fill(80, 160, 255, 400 - t * 2);
                    rect(x, y + dy, d, d);
                }
            }
        }    
    }
    
    noFill();
    stroke(255, 255, 255, 200);
    rect(x1, y1 + dy, w, h);
};

/***************************************************
 *      Initial setup
****************************************************/

/*
background(BACKGROUND);
simpleDraw();
simpleRayCast(100, 100, 200, 200, 20);
*/

/***************************************************
 *      Main loop
****************************************************/


draw = function() {
    background(BACKGROUND);
    simpleDraw();
    simpleRayCast(120, 30, 160, 160, 12);
};


/********************************************************
 *      Event handling
*********************************************************/

mousePressed = function() {
};

mouseDragged = function() {
    var d = 0.4;
    var dx = d * (mouseX - pmouseX);
    var dy = d * (mouseY - pmouseY);
    
    for (var o = 0; o < objects.length; o++) {
        if (dx) { rotateY3D(dx, objects[o].nodes); }
        if (dy) { rotateX3D(dy, objects[o].nodes); }   
    }
};

mouseReleased = function() {
};

mouseOut = function() {
    mouseReleased();
};

