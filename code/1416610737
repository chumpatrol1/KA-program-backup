/*    
    The hand can be spun by clicking and dragging.
*/

// Move to centre of screen
translate(200, 200);
stroke(43, 148, 48);
var rotateAngle = 2;
var faceColor = [20, 255, 40];
var lightVector = [1,-0.8,-2];
var drawNodes = false;
var nodeSize = 10;

var translate3D = function(x, y, z, nodes) {
  for (var i = 0; i < nodes.length; i+=1) {
    nodes[i] = [nodes[i][0]+x, nodes[i][1]+y, nodes[i][2]+z];
  }
};

var rotateX3D = function(theta, nodes){
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;
    
    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [x, ct*y - st*z, st*y + ct*z];
    }
};

var rotateY3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;

    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [ct*x + st*z, y, -st*x + ct*z];
    }
};

var rotateZ3D = function(theta, nodes){
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;
    
    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [ct*x - st*y, st*x + ct*y, z];
    }
};

var getRing = function(pos, r, resolution, t1, t2) {
    var nodes = [];
    
    for (var n=0; n<360; n+=360/resolution) {
        nodes.push([r * cos(n), r * sin(n), 0]);
    }
    rotateX3D(t1, nodes);
    rotateZ3D(t2, nodes);
    translate3D(pos[0], pos[1], pos[2], nodes);
    
    return nodes;
};

var addSkin = function(nodes, edges, faces,
                       node1, node2, r1, r2, res) {
    
    var n1 = nodes[node1];
    var n2 = nodes[node2];    
    var theta1 = atan2(n2[1]- n1[1], n2[2] - n1[2]);
    var theta2 = atan2(n2[1] - n1[1], n2[0] - n1[0]) - 90;
    var skinNodes1 = getRing(n1, r1, res, theta1, theta2);
    var skinNodes2 = getRing(n2, r2, res, theta1, theta2);
    
    var nEdges = edges.length;
    var nNodes = nodes.length;
    var n;
    for (n=0; n<skinNodes1.length; n++) {
        nodes.push(skinNodes1[n]);
        nodes.push(skinNodes2[n]);
    }
    
    for (n=0; n<skinNodes1.length; n++) {
        var d = (n * 2 + 2) % (2 * skinNodes1.length);
        faces.push([nNodes + n*2, nNodes + d,
                    nNodes + d +1, nNodes + n*2+1]);
    }
    
};

var createHand = function() {
  var nodes = [[232, 262, 0],
  // Thumb
[198,234,0], [165,195,5], [145,155,5], [138,138,0],
  // 1st finger
[215,226,0],[200,140,10],[193,90,16],[188,52,10],[185,32,0],
  // 2nd finger
[234,223,0],[236,132,10],[238,74,16],[238,33,10],[238,10,0],
  // 3rd finger
[250,226,0],[270,140,10],[283,86,16],[292,52,10],[296,34,0],
  // little finger
[264,230,0],[292,160,10],[308,118,16],[318,94,10],[325,78,0]
];
    
    var edges = [
        // Palm
        [0, 1],  [1, 5],   [0, 5], [5, 10],
        [0, 10], [10, 15], [0, 15], [15, 20], [0, 20],
        // Thumb
        [1, 2], [2, 3], [3, 4],
        // 1st finger
        [5, 6], [6, 7], [7, 8], [8, 9],
        // 2nd finger
        [10, 11], [11, 12], [12, 13], [13, 14],
        // 3rd finger
        [15, 16], [16, 17], [17, 18], [18, 19],
        // 3rd finger
        [20, 21], [21, 22], [22, 23], [23, 24]];

    var faces = [];
    
    addSkin(nodes, edges, faces, 4, 3, 8, 10, 10);
    addSkin(nodes, edges, faces, 3, 2, 10, 12, 10);
    addSkin(nodes, edges, faces, 8, 7, 10, 12, 10);
    addSkin(nodes, edges, faces, 7, 6, 12, 14, 10);
    
    // Move to centre
    for (var n=0; n<nodes.length; n++){
        nodes[n] = [nodes[n][0] - 230, nodes[n][1]-160, nodes[n][2]];
    }
    
    return { nodes : nodes, edges: edges, faces: faces };
};

/*******************************************************
*                   Create Hand Here
********************************************************/
var objects = [createHand()];

var subtractVectors = function(v1, v2){
    return [[v1[0] - v2[0]],
            [v1[1] - v2[1]],
            [v1[2] - v2[2]]];
};

var normaliseVector = function(v) {
    var d = sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
    return [v[0]/d, v[1]/d, v[2]/d];
};

var normalOfPlane = function(face, nodes) {
    var n1 = nodes[face[0]];
    var n2 = nodes[face[1]];
    var n3 = nodes[face[2]];
    
    var v1 = subtractVectors(n1, n2);
    var v2 = subtractVectors(n1, n3);
    
    var v3 = [[v1[1]*v2[2] - v1[2]*v2[1]],
              [v1[2]*v2[0] - v1[0]*v2[2]],
              [v1[0]*v2[1] - v1[1]*v2[0]]];
              
    return v3;
};

var dotProduct = function(v1, v2){
    // Assume everything has 3 dimensions
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
};

var currentX = false;
var currentY = false;

var sortFunction = function(a, b) {
    return a[0] - b[0];
};

lightVector = normaliseVector(lightVector);

var draw = function() {
    var i, o, f;
    var face;
    var faces = [];
    var nodes, node1, node2;
    
    background(255, 255, 255);

    for (o in objects) {
        var obj = objects[o];
        nodes = obj.nodes;
        
        if ('faces' in obj) {
            for (f in obj.faces) {
                face = obj.faces[f];
                var fnorm = normalOfPlane(face, nodes);
                
                if (fnorm[2] < 0) {
                    // Find order in which to draw faces
                    // by finding where it intersects the z-axis
                    var pos = dotProduct(fnorm, nodes[face[0]]);
                    
                    var fnodes;
                    if (face.length === 3) {
                        fnodes = [nodes[face[0]], nodes[face[1]],
                                  nodes[face[2]]];
                    } else {
                        fnodes = [nodes[face[0]], nodes[face[1]],
                                  nodes[face[2]], nodes[face[3]]];
                    }
                    
                    faces.push([pos / fnorm[2], fnorm, fnodes]);
                }
            }
        }

        stroke(20, 20, 20, 200);
        strokeWeight(2);
        if ('edges' in obj) {
            var edges = obj.edges;
            for (i = 0; i < edges.length; i+=1) {
                node1 = nodes[edges[i][0]];
                node2 = nodes[edges[i][1]];
                line(node1[0], node1[1], node2[0], node2[1]);
            }     
        }

        if (drawNodes) {
            noStroke();
            fill(35, 35, 219);
            for (i = 0; i < nodes.length; i+=1) {
                ellipse(nodes[i][0], nodes[i][1], nodeSize, nodeSize);
            }
        }
    }
    
    faces.sort(sortFunction);
    
    for (f in faces) {
        face = faces[f];
        nodes = face[2];
        var l = dotProduct(lightVector, normaliseVector(face[1]));   
        fill(l * faceColor[0], l * faceColor[1], l * faceColor[2]);
        
        if (face[2].length === 3) {
            triangle(nodes[0][0], nodes[0][1],
                     nodes[1][0], nodes[1][1],
                     nodes[2][0], nodes[2][1]);
        } else {
            quad(nodes[0][0], nodes[0][1],
                 nodes[1][0], nodes[1][1],
                 nodes[2][0], nodes[2][1],
                 nodes[3][0], nodes[3][1]);
      }
    }

    if (mouseIsPressed) {
        if (currentX !== false) {
            var theta1 = -(currentX - mouseX) * PI / 10;
            var theta2 = (currentY - mouseY) * PI / 10;
            
            for (o in objects) {
                nodes = objects[o].nodes;
                rotateY3D(theta1, nodes);
                rotateX3D(theta2, nodes);    
            }
        }
        currentX = mouseX;
        currentY = mouseY;
    } else {
        currentX = false;
    }
};

var mouseOut = function(){
    mouseIsPressed = false;
};

var keyPressed = function() {
    var f = 0;
    var d = 0;
    if (keyCode === LEFT) {
        f = rotateY3D;
        d = 2;
    } else if (keyCode === RIGHT) {
        f = rotateY3D;
        d = -2;
    } else if (keyCode === UP) {
        f = rotateX3D;
        d = -2;
    } else if (keyCode === DOWN) {
        f = rotateX3D;
        d = 2;
    }
    
    if (f !== 0) {
        for (var obj in objects) {
                f(d, objects[obj].nodes); 
        }
    }
    
};