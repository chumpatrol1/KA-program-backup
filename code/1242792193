/*********************************
*  Balls can be thrown about and 
*  softly bounce off one another 
**********************************/

// Physical variables to play with
var acceleration = 0.05;    // Force of throw
var drag = 0.99;           // Air resistance
var friction = 0.85;        // Wall bounciness
var gravity = 0;            // Force due to gravity

var numBalls = 2;           // Number of balls

var dotProduct = function(ax, ay, bx, by) {
    return ax * bx + ay * by;
};

// Particles have a position, speed, colour and masss
var Particle = function(x, y, r, c, mass) {
    // Position
    this.x = x;
    this.y = y;
    
    // Radius
    this.r = r;
    this.mass = mass || this.r * this.r;
    
    // Colour
    this.c = c;
    
    // Velocity
    this.dx = 10 * (random() - 0.5);
    this.dy = 10 * (random() - 0.5);
};

Particle.prototype.draw = function() {
    fill(this.c);
    ellipse(this.x, this.y, this.r * 2, this.r * 2);
};

// Move ball based on its velocity
Particle.prototype.move = function() {
    this.x += this.dx;
    this.y += this.dy;
};

Particle.prototype.collide = function(that) {
    var dx = this.x - that.x;
    var dy = this.y - that.y;
    var dr = this.r + that.r;
    var d = dx * dx + dy * dy;
    
    if (d < dr * dr) {
        // Particles collide
        var collisionDist = sqrt(d + 1);
        
        // Find unit vector in direction of collision
        var collisionVi = dx / collisionDist;
        var collisionVj = dy / collisionDist;
        
        // Find velocity of particle projected on to collision vector
        var collisionV1 = dotProduct(this.dx, this.dy, dx, dy) / collisionDist;
        var collisionV2 = dotProduct(that.dx, that.dy, dx, dy) / collisionDist;
        
        // Find velocity of particle perpendicular to collision vector
        var perpV1 = dotProduct(this.dx, this.dy, -dy, dx) / collisionDist;
        var perpV2 = dotProduct(that.dx, that.dy, -dy, dx) / collisionDist;
        
        // Find movement in direction of collision
        var sumMass = this.mass + that.mass;
        var diffMass = this.mass - that.mass;
        var v1p = (diffMass * collisionV1 + 2 * that.mass * collisionV2) / sumMass;
        var v2p = (2 * this.mass * collisionV1 - diffMass * collisionV2) / sumMass;
        
        // Update velocities
        this.dx = v1p * collisionVi - perpV1 * collisionVj;
        this.dy = v1p * collisionVj + perpV1 * collisionVi;
        that.dx = v2p * collisionVi - perpV2 * collisionVj;
        that.dy = v2p * collisionVj + perpV2 * collisionVi;
        
        // Move to avoid overlap
        var overlap = 0.5 * (dr + 1 - collisionDist);
        this.x += collisionVi * overlap;
        this.y += collisionVj * overlap;
        that.x -= collisionVi * overlap;
        that.y -= collisionVj * overlap;
    }
};

// Bounce off walls
Particle.prototype.bounce = function() {
    if (this.x < this.r) {
        this.x = this.r;
        this.dx *= -friction;
    }
    if (this.x > width - this.r){
        this.x = width - this.r;
        this.dx *= -friction;
    }
    if (this.y < this.r) {
        this.y = this.r;
        this.dy *= -friction;
    }
    if (this.y > height - this.r){
        this.y = height - this.r;
        this.dy *= -friction;
    }
};

// Test whether mouse is over ball
Particle.prototype.selected = function() {
    return dist(mouseX, mouseY, this.x, this.y) < this.r;
};

var balls = [];
for (var b = 0; b < numBalls; b++) {
    var r = 10 + round(random() * 20);
    var x = r + round(random() * (400 - 2 * r));
    var y = r + round(random() * (400 - 2 * r));
    var m = 500 + round(random() * 750);
    var c = color(40, 60, 160, 200);
    balls.push(new Particle(x, y, r, c, m));
}

/*
balls[0].x = 40;
balls[0].y = 140;
balls[0].dx = 5;
balls[0].dy = 0;

balls[1].x = 240;
balls[1].y = 300;
balls[1].dx = 0;
balls[1].dy = -4;
*/

noStroke();
var selectedBall = false;

var i, j, ball;
var draw = function() {
    background(250, 247, 240);
    
    // Calculate acceleration
    for (i=0; i<numBalls; i++) {
        if (balls[i] !== selectedBall) {
            balls[i].dy += gravity;
        }
        for (j=i+1; j<numBalls; j++){
            balls[i].collide(balls[j]);
        }
    }
    
    // Work out if any ball is dragged
    if (mouseIsPressed) {
        if (!selectedBall) {
            for (i=0; i<numBalls; i++) {
                if (balls[i].selected()) {
                    selectedBall = balls[i];
                    break;
                }
            }
        } else {
            // Throw ball
            selectedBall.dx += (mouseX - selectedBall.x) * acceleration;
            selectedBall.dy += (mouseY - selectedBall.y) * acceleration;
        }
    } else { selectedBall = false; }
    
    // Move balls
    for (i=0; i<numBalls; i++) {
        ball = balls[i];
        ball.move();
        ball.bounce();
        ball.draw();
    }
};

// Let go when mouse leaves canvas
var mouseOut = function(){
    mouseIsPressed = false;
};