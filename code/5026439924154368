/*******************************************************
 *      Heist
 * 
 * 1  Thief
 * 2  ?
 * 4  Guards
 * 8  Exits
 * 16 Million dollars at stake
 * 
 * Works with different canvas sizes
 * 
 * 1. DONE Select agent
 * 2. DONE Move agent
 * 3. DONE Shadow tiles
 * 4. DONE Test for agent collision
 * 5. DONE Calculate distance to thief.
 * 6. DONE Calculate guard movement
 * 
 * TODO
 * Animate movement
 * Game ending screen
 * Test for reaching an exit.
 * Help screen
 * Intro screen
 * Action replay
 * Some sort of complex AI???
 * 
 * Improvements
 *  Agent selection
 *  Guard Icon
 *  Make sure exits are joined to the grid
 *  Guard AI - protect key points ?
 *           - What to do when thief escapes?
 * 
********************************************************/

var DIRECTIONS = ["left", "right", "above", "below"];

var callFunctionForEach = function(arr, func) {
    for (var i = 0; i < arr.length; i++) {
        arr[i][func]();
    }
};

var marbleEffect = function(tileSize) {
    // Based on http://lodev.org/cgtutor/randomnoise.html

    var xPeriod = 12;
    var yPeriod = 12;
    var turbPower = 1600;
    var noiseScale = 0.02;
    noiseDetail(3, 0.6);
    noStroke();
    
    var c2 = color(240);
    var c1 = color(161, 153, 153);
    
    var x, y, z;
    var bigSize = tileSize * 2;
    
    for (y = 0; y < bigSize; y++) {
        for (x = 0; x < bigSize; x++) {
            z = abs(sin(x * xPeriod + y * yPeriod + turbPower * noise(x * noiseScale, y * noiseScale)));
            stroke(lerpColor(c1, c2, z));
            point(x, y);
        }
    }
    
    bigSize -= tileSize;
    var halfSize = tileSize / 2;
    var tiles = [];
    
    for (x = 0; x < bigSize; x += halfSize) {
        for (y = 0; y < bigSize; y += halfSize) {
            tiles.push(get(x, y, tileSize, tileSize));
        }
    }
    
    return tiles;
};

var EXIT_IMG = getImage("cute/Star");

/*******************************************************
 *      Agent Object
 * A living, moving being, either a guard for the thief.
********************************************************/

var Agent = function(tile, type) {
    this.type = type;
    this.tile = tile;
};

Agent.prototype.draw = function(x, y, s) {
    if (this.type === 'guard') {
        fill(50, 25, 200);
        var x1 = x + s * 0.2;
        var x2 = x + s * 0.8;
        var y1 = y + s * 0.2;
        var y2 = y + s * 0.8;
        triangle(x + s * 0.5, y1, x1, y2, x2, y2);
    } else if (this.type === 'thief') {
        fill(240, 10, 0);
        ellipse(x + s / 2, y + s / 2, s * 0.55, s * 0.55);
        fill(0);
        rect(x + s * 0.24, y + s * 0.40, s * 0.52, 3);
        strokeWeight(1);
        stroke(255);
        var x1 = x + s * 0.4 - 2;
        var x2 = x + s * 0.6 - 3;
        var y1 = y + s * 0.40 + 1;
        if (floor((frameCount % 120) / 60)) {
            x1 += 3;
            x2 += 3;
        }
        line(x1, y1, x1 + 1, y1);
        line(x2, y1, x2 + 1, y1);
    }
};

Agent.prototype.move = function(direction) {
    var moveTo = this.tile[direction];
    if (moveTo && !moveTo.agent) {
        // Remove agent from old tile
        this.tile.agent = false;
        // Add to new tile
        moveTo.agent = this;
        this.tile = moveTo;
    }
};

/*******************************************************
 *      Tile Object
 * A marble tile which will link to another tile,
 * up, down, left and/or right of it.
 * It may contain an agent or an exit.
********************************************************/

// Create the tile shadow as an image
var createShadow = function(s) {
    var c = createGraphics(s, s, P2D);
    var t = 3;
    var r = s - t;
    
    c.noStroke();
    c.fill(0, 0, 0, 40);
    c.beginShape();
    c.vertex(0, 0);
    c.vertex(s, 0);
    c.vertex(r, t);
    c.vertex(t, t);
    c.vertex(t, r);
    c.vertex(0, s);
    c.endShape(CLOSE);
    
    c.noStroke();
    c.fill(255, 255, 255, 128);
    c.beginShape();
    c.vertex(s, s);
    c.vertex(s, 0);
    c.vertex(r, t);
    c.vertex(r, r);
    c.vertex(t, r);
    c.vertex(0, s);
    c.endShape(CLOSE);
    
    return c;
};

var Tile = function(x, y, size, img, exit) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.rotation = 90 * floor(random(0, 4));
    this.img = img;
    this.exit = exit;
    this.agent = false;
};

Tile.prototype.draw = function(drawDistance) {
    var x = this.x;
    var y = this.y;
    var s = this.size;
    
    noStroke();
    pushMatrix();
    translate(x + s / 2, y + s / 2);
    rotate(floor(random(90)) * 90);
    fill(200);
    rect(-s / 2, -s / 2, s, s);
    popMatrix();
    
    if (this.img) {
        image(this.img, x, y);
    }
    
    if (this.exit) {
        image(EXIT_IMG, x, y - s * 0.35, s, s * 1.5);
    }
    
    if (this.shadow) {
        noStroke();
        fill(0, 0, 0, 160);
        rect(this.x, this.y, this.size, this.size);
    }
    
    if (this.agent) {
        this.agent.draw(x, y, s);
    }
    
    if (drawDistance && this.distance !== undefined) {
        fill(255);
        textAlign(CENTER, CENTER);
        text(this.distance, x + s / 2, y + s / 2);
    }
    
    if (this.selected) {
        noStroke();
        fill(255, 0, 0, 40);
        rect(this.x, this.y, this.size, this.size);
    }
};

Tile.prototype.lightTile = function(direction) {
    this.shadow = false;
    if (this[direction]) {
        this[direction].lightTile(direction);
    }
};

Tile.prototype.mouseOver = function() {
    return mouseX >= this.x && mouseX < this.x + this.size &&
           mouseY >= this.y && mouseY < this.y + this.size;
};

Tile.prototype.mouseReleased = function() {
    this.selected = this.mouseOver();
    return this.selected;
};

/*******************************************************
 *      Board Object
 * The board is the collection of tiles and players.
********************************************************/

var Board = function(boardSize) {
    var tileSize = min(width, height) / (boardSize + 2);
    tileSize = 2 * floor(tileSize / 2);
    this.tileShadow = createShadow(tileSize);

    // Using a sparse map for a change
    this.tiles = {};
    this.setUpTiles(boardSize, tileSize);
    
    this.guards = [];
    this.selectedTile = false;
};

Board.prototype.setUpTiles = function(boardSize, tileSize) {
    var startX = (width - 17 * tileSize) / 2;
    var startY = (height - 17 * tileSize) / 2;
    var mid = floor(boardSize / 2);
    
    var blocks = ["3,0", "5,2", "7,0", "7,4", "2,3", "0,5", "4,5", "2,7", "6,7"];
    
    var blocks = ["3,0", "7,0", "7,4", "2,3", "0,5", "2,7", "6,7"];
    
    var blocks = ["3,0", "0,3", "2,5", "5,2", "7,0", "0,7", "7,4", "4,7"];
    
    this.tiles = {};
    for (var y = 0; y < boardSize; y++) {
        for (var x = 0; x < boardSize; x++) {
            var tileX = startX + x * tileSize;
            var tileY = startY + y * tileSize;
            var id = abs(mid - x) + ',' + abs(mid - y);

            if ((y % 2 === 0) || (x % 2 === 0)) {
                if (blocks.indexOf(id) === -1) {
                    var tile = new Tile(tileX, tileY, tileSize, this.tileShadow);
                    this.tiles[x + ',' + y] = tile;
                    
                    // Find which tiles are next to one another
                    var tile2 = this.tiles[(x - 1) + ',' + y];
                    if (tile2) {
                        tile.left = tile2;
                        tile2.right = tile;
                    }
                    
                    tile2 = this.tiles[x + ',' + (y - 1)];
                    if (tile2) {
                        tile.above = tile2;
                        tile2.below = tile;
                    }
                }
            }
        }
    }

    // Add exits
    // TODO: make this independent of board size
    var exits = [[-1, 4], [-1, 12], [17, 4], [17, 12],
                 [4, -1], [12, -1], [4, 17], [12, 17]];
    for (var i = 0; i < exits.length; i++) {
        var p = exits[i];
        this.tiles[p.join(',')] = new Tile(
            startX + p[0] * tileSize,
            startY + p[1] * tileSize,
            tileSize, this.tileShadow, true
        );
    }
};

Board.prototype.addAgents = function(agents, type) {
    for (var i = 0; i < agents.length; i++) {
        var tile = this.tiles[agents[i].join(",")];
        if (tile) {
            tile.agent = new Agent(tile, type);
            if (type === 'guard') {
                this.guards.push(tile.agent);
            } else if (type === 'thief') {
                this.thief = tile.agent;
            }
        }
    }
};

Board.prototype.draw = function() {
    background(0);
    for (var tile in this.tiles) {
        this.tiles[tile].draw(this.drawDistance);
    }
};

Board.prototype.updateShadows = function() {
    // Put everything in shadows
    for (var tile in this.tiles) {
        this.tiles[tile].shadow = true;
    }
    
    // Show line of sight for guard
    for (var i = this.guards.length; i--;) {
        var guard = this.guards[i];
        for (var j = DIRECTIONS.length; j--;) {
            guard.tile.lightTile(DIRECTIONS[j]);
        }
    }
    
    if (!this.thief.tile.shadow) {
        this.findDistanceToThief();
    }
};

Board.prototype.findDistanceToThief = function() {
    if (!this.thief) { return; }
    
    for (var tile in this.tiles) {
        this.tiles[tile].distance = 34;
    }
    
    var frontiers = [[this.thief.tile, 0]];
    
    while (frontiers.length) {
        var frontier = frontiers.shift();
        var tile = frontier[0];
        var distance = frontier[1];
        tile.distance = distance++;
        
        for (var j = DIRECTIONS.length; j--;) {
            var newTile = tile[DIRECTIONS[j]];
            if (newTile && distance < newTile.distance) {
                frontiers.push([newTile, distance]);
            }
        }
    }
};

Board.prototype.moveGuards = function() {
    for (var i = 0; i < this.guards.length; i++) {
        var guard = this.guards[i];
        var direction = false;
        var minDistance = guard.tile.distance + random();
        
        for (var j = DIRECTIONS.length; j--;) {
            var newTile = guard.tile[DIRECTIONS[j]];
            if (newTile && !newTile.agent && newTile.distance < minDistance) {
                direction = DIRECTIONS[j];
                minDistance = newTile.distance;
            
            }
        }
        
        if (direction) {
            guard.move(direction);
        }
    }
    
    this.updateShadows();
};

Board.prototype.mouseReleased = function() {
    /*
    for (var tile in this.tiles) {
        if (this.tiles[tile].mouseReleased()) {
            this.selectedTile = this.tiles[tile];
        }
    }
    */
};

// TODO: Make this a lot nicer
Board.prototype.keyPressed = function() {
    var directions = {
        37: "left",
        38: "above",
        39: "right",
        40: "below",
    };
    
    // Move Thief
    var direction = directions[keyCode];
    if (direction) {
        this.thief.move(direction);
        if (!this.thief.tile.shadow) {
            this.findDistanceToThief();
        }
        this.moveGuards();
        //this.moveGuards();
    }
    
    /*
    // Move selected agent
    if (this.selectedTile && this.selectedTile.agent) {
        var direction = directions[keyCode];
        
        if (direction) {
            var newTile = this.selectedTile[direction];
            if (newTile) {
                this.moveAgent(this.selectedTile, newTile);
            }
        }
    }
    */
    
    if (key.toString() === 'd') {
        this.drawDistance = !this.drawDistance;
    } else if (key.toString() === 'g') {
        this.moveGuards();
    }
};

var board = new Board(17);
board.addAgents([[0, 8], [8, 0], [16, 8], [8, 16]], 'guard');
board.addAgents([[8, 8]], 'thief');

board.updateShadows();
board.findDistanceToThief();

//draw = function() {
    board.draw();    
//};


/*******************************************************
 *      Event handling
********************************************************/

mouseReleased = function() {
    board.mouseReleased();
    board.draw();
};

keyPressed = function() {
    board.keyPressed();
    board.draw();
};