/******************************************************
 * This version add intersections at different
 * t values along the lens curve
 * 
 * Fix refraction
*******************************************************/

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var CONTROL_POINT_SIZE = 12;

var showing = {};
angleMode = "degrees";

/**************************************
 *  Helper functions
***************************************/

var forEach = function(arr, func) {
    arr.forEach(function(el) {
        el[func]();
    });
};

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

var normalise = function(v) {
    var m = mag(v.x, v.y);
    return { x: v.x / m, y: v.y / m }; 
};

/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.dependents = [];
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
    this.dependents.forEach(function(p) {
        p.move(dx, dy);
    });
};
}
/**************************************
 *      Scene object
 *  Wraps the other objects
**************************************/
{
var Scene = function() {
    this.selected = false;
    
    this.lensTop = new DraggablePoint(350, 120);
    this.lensBase = new DraggablePoint(350, 280);
    this.lensHandle = new DraggablePoint(300, 140);
    this.source = new DraggablePoint(550, 200);
    
    this.lensBase.dependents.push(this.lensTop, this.lensHandle);
    
    this.points = [
        this.lensTop,
        this.lensBase,
        this.lensHandle,
        this.source
    ];

    this.lensRi = 1.4;
    this.numRays = 7;
    this.rays = [];
    
    this.update();
};

Scene.prototype.draw = function() {
    this.drawLight();
    this.drawLens();
    forEach(this.points, 'draw');
};

Scene.prototype.drawLight = function() {
    strokeWeight(2);
    stroke(220, 220, 0, 100);
    this.rays.forEach(function(ray) {
        line(ray.x1, ray.y1, ray.x2, ray.y2);
    });
};

Scene.prototype.drawLens = function() {
    // Midline
    noFill();
    stroke(200);
    strokeWeight(2);
    line(this.lensBase.x, this.lensBase.y,
         this.lensBase.x, this.lensTop.y);
    
    var dx = abs(this.lensBase.x - this.lensTop.x);
    var x1 = this.lensBase.x - dx;
    var x2 = this.lensBase.x + dx;
    
    // Lens
    stroke(BLUE);
    arc(x2, this.lensY, this.lensW, this.lensH, -90, 90);
    arc(x1, this.lensY, this.lensW, this.lensH, 90, 270);

    line(x1, this.lensTop.y, x2, this.lensTop.y);
    line(x1, this.lensBase.y, x2, this.lensBase.y);

    // Handle
    stroke(PINK + (200 << 24));
    line(this.lensTop.x, this.lensTop.y,
         this.lensHandle.x, this.lensHandle.y);
    //ellipse(h[2].x, h[2].y, 10, 10);
};

Scene.prototype.update = function() {
    // Get lens dimensions
    this.lensX = this.lensBase.x;
    this.lensY = (this.lensTop.y + this.lensBase.y) * 0.5;
    var angle = atan2(this.lensHandle.y - this.lensTop.y,
                      this.lensHandle.x - this.lensTop.x);
    if (angle < 0) { angle += 360; }
    angle = constrain(angle - 90, 1, 90);
    
    this.lensH = this.lensBase.y - this.lensTop.y;
    this.lensW = this.lensH * angle / 90;
    this.lensA = this.lensW * this.lensW / 4;
    this.lensB = this.lensH * this.lensH / 4;
    
    this.getRays();
};

Scene.prototype.rayIntersectionWithLens = function(ray, Ri) {
    // Get ray in form y = mx + b relative to lens center
    var dx = ray.x2 - ray.x1;
    var dy = ray.y2 - ray.y1;
    var m = dy / dx;
    var c = ray.y1 - this.lensY - m * (ray.x1 - this.lensX);
    
    // Coefficient for quadratic equation
    var A = 1 / this.lensA + (m * m) / this.lensB;
    var B = 2 * m * c / this.lensB;
    var C = c * c / this.lensB - 1;

    var det = B * B - 4 * A * C;
    
    if (det) {
        var D = sqrt(det);

        // Insection point relative to lens center
        var ix = (-B + D) / (2 * A);
        
        // Try to get intersection on correct side of lens
        if (ix + this.lensX + 0.01 > ray.x1) {
            ix = (-B - D) / (2 * A);
        }
        
        var iy = m * ix + c;
        
        // Ray hits lens at (ix, iy)
        var ray1 = {
            x1: ray.x1,
            y1: ray.y1,
            x2: this.lensX + ix,
            y2: this.lensY + iy,
        };
        
        // Refract ray
        var normal = normalise({ x: ix, y: iy });
    
        // Ray from source to intersection point
        var incidence = normalise({ x: dx, y: dy });
        
        // Calculate refraction
        var c1 = dotProduct(incidence, normal);
        if (Ri < 1) { c1 *= -1; }
        var c2 = 1 - Ri * Ri * (1 - c1 * c1);

        if (c2 > 0) {
            c2 = Ri * c1 - sqrt(c2);

            // Return refracted ray
            return [ray1, {
                x1: ray1.x2,
                y1: ray1.y2,
                x2: ray1.x2 + 500 * (Ri * incidence.x + c2 * normal.x),
                y2: ray1.y2 + 500 * (Ri * incidence.y + c2 * normal.y)
            }];
        } else {
            // Reflection? So return ray up to intersection
            return [ray1];
        }
    } else {
        // Ray misses lens, so return the original ray
        return [ray];
    }
};

Scene.prototype.getRays = function() {
    var dy = this.lensH * 0.9 / (this.numRays - 1);
    var y = this.lensTop.y + this.lensH * 0.05;
    var Ri = 1 / this.lensRi;

    this.rays = [];
    for (var t = 0; t < this.numRays; t++) {
        // Ray from source
        var rays = this.rayIntersectionWithLens({
            x1: this.source.x,
            y1: y,
            x2: 0, 
            y2: y, 
        }, Ri);

        if (rays.length > 1) {
            var internalRay = rays.pop();
            var rays2 = this.rayIntersectionWithLens(internalRay, 1/Ri);
            rays = rays.concat(rays2);

        }
    
        this.rays = this.rays.concat(rays);
        y += dy;
    }
    
    //println(this.rays.length);
};

Scene.prototype.mousePressed = function() {
    for (var i = 0; i < this.points.length; i++) {
        if (this.points[i].mouseOver()) {
            this.selected = this.points[i];
            break;
        }
    }
};

Scene.prototype.mouseReleased = function() {
    this.selected = false;
};

Scene.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
        this.update();
    }
};
}
/**************************************
 * Creation of objects
***************************************/

var scene = new Scene();

var toolbar; //= new Toolbar(width * 0.01, width * 0.01, toolbarWidth);


/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    
    scene.draw();
    //toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    scene.mousePressed();
    //toolbar.mousePressed();
};

mouseDragged = function() {
    scene.mouseDragged();
    //toolbar.mouseDragged();
};

mouseReleased = function() {
    scene.mouseReleased();
   // toolbar.mouseReleased();
};

mouseOut = function() {
    //toolbar.mouseReleased();
};
