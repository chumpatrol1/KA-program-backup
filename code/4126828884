/************************************************
 * 
 * TODO:
 * 
*************************************************/

var BACKGROUND = color(250, 250, 250);
var PINK = color(255, 0, 175);
var BLUE = color(64, 95, 237);
var GREY = color(100, 100, 100);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var LIGHT = color(255, 255, 200);

var SPEED = 5;
var running = true;

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

/*************************************************
 *      DraggablePoint
 *  A point that can be dragged
**************************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.r = 5;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (this.selected || (!this.selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
        cursor(MOVE);
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = this.r * 2 + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

DraggablePoint.prototype.constrainX = function(x) {
    // Empty for overwriting
    return x;
};

DraggablePoint.prototype.constrainY = function(y) {
    // Empty for overwriting
    return y;
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r + 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x = mouseX + dx;
    this.y = mouseY + dy;
};
}
/*********************************************
 *      Image plane
**********************************************/

var ImagePlane = {
    // Position on the grid
    x: 10,
    y: 20,
    height: height - 40,
    y2: height - 20,
    pixelSize: 10,

    createPixelArray: function() {
        this.pixels = new Array(this.height);
        for (var i = this.height; i--;) {
            this.pixels[i] = 0;
        }
    },

    draw: function() {
        stroke(200);
        strokeWeight(5);
        line(this.x, this.y, this.x, this.y2);
        
        noStroke();
        for (var i = this.height; i--;) {
            if (this.pixels[i]) {
                fill(this.pixels[i]);
                arc(this.x + 3, i + this.y,
                    this.pixelSize, this.pixelSize,
                    -90, 90);
            }
        }
    },
    
    hitByRay: function(ray) {
        var i = floor(ray.y2 - this.y);
        this.pixels[i] = ray.color + (200 << 24);
    }
};

ImagePlane.createPixelArray();

/*************************************************
 *  Ray of light
 * Starts at a point and continues infinitely,
 * fading in and out of view
**************************************************/
var Ray = function(source, angle, col) {
    this.x = source.x;
    this.y = source.y;
    this.color = col;
    
    this.testForIntersection(angle);
    this.t = 255;
};

Ray.prototype.testForIntersection = function(angle) {
    this.dx = 2000 * cos(angle);
    this.dy = 2000 * sin(angle);
    
    if (this.dx < 0) { 
        var dx = this.x - ImagePlane.x;
        var y = this.y + dx * this.dy / this.dx;
        
        if (y > ImagePlane.y + 5 && y < ImagePlane.y2 - 5) {
            this.x2 = ImagePlane.x;
            this.y2 = y;
            ImagePlane.hitByRay(this);
            return;
        }
    }
    
    this.x2 = this.x + this.dx;
    this.y2 = this.y - this.dy;
};

Ray.prototype.draw = function() {
    if (this.t > 1) {
        if (running) { this.t -= 2; }
        strokeWeight(3);
        stroke(this.color + (this.t << 24));
        line(this.x, this.y, this.x2, this.y2);
    }
};

/*************************************************
 *  The object in this program is a simple tree
**************************************************/
var Tree = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.x1 = x - w * 0.5;
    this.x2 = x + w * 0.5;
    this.y1 = y - h * 0.75;
    this.y2 = y + h * 0.25;
    
    this.sideAngle = atan2(h * 0.75, w * 0.5);
    
    // Trunk parameters
    this.tw = w * 0.2;
    this.tx = x - this.tw * 0.5;
    
    // Colours
    this.col1 = color(75, 185, 40);
    this.col2 = color(190, 140, 65);
    
    this.spot = new DraggablePoint(this.x, this.y1);
    this.spot.constrainY = function(y) {
        return constrain(y, this.y1, this.y2);
    }.bind(this);
    this.spot.constrainX = function(x) {
        if (this.spot.y <= this.y) {
            x = this.x - 0.5 * this.w * (this.spot.y - this.y1) / (this.h * 0.75);
        } else {
            x = this.tx;
        }
        return x;
    }.bind(this);
    
    this.t = 0;
    this.rays = [];
    this.addRay();
};

Tree.prototype.addRay = function() {
    var normal, angle, col;
    
    if (this.spot.y <= this.y) {
        // Tree side
        normal = this.sideAngle + 90;
        col = this.col1;
    } else {
        // Trunk
        normal = 180;
        col = this.col2;
    }
    
    var r = random(-1, 1);
    var angle = Math.sign(r) * (r * r * 90) + normal;
    //var angle = 90 * r + normal;
    
    this.rays.push(new Ray(this.spot, angle, col));
};

Tree.prototype.draw = function() {
    if (running && !this.selected) {
        this.t++;
    }
    if (this.t > 60 / SPEED) {
        this.addRay();
        this.t = 0;
    }
    
    strokeWeight(2);

    // Trunk
    stroke(165, 120, 50);
    fill(190, 140, 65);
    rect(this.x - this.w * 0.1, this.y, this.tw, this.h * 0.25);
    
    // Top
    stroke(30, 175, 35);
    fill(this.col1);
    triangle(this.x1, this.y, this.x2, this.y, this.x, this.y1);
    
    for (var i = this.rays.length; i--;) {
        if (this.rays[i].t < 0) {
            this.rays.splice(i, 1);
        } else {
            this.rays[i].draw();
        }
    }
    
    this.spot.draw();
};

Tree.prototype.mousePressed = function() {
    if (this.spot.mouseOver()) {
        this.selected = this.spot;
        this.spot.selected = true;
        this.dragX = this.spot.x - mouseX;
        this.dragY = this.spot.y - mouseY;
    }
};

Tree.prototype.mouseReleased = function() {
    if (this.selected) {
        this.selected.selected = false;
        this.selected = false;
    }
};

Tree.prototype.mouseDragged = function() {
    if (this.selected) {
        var x = mouseX + this.dragX;
        var y = mouseY + this.dragY;
        this.selected.x = this.selected.constrainX(x);
        this.selected.y = this.selected.constrainY(y);
    }
};

var tree = new Tree(width - 100, height / 2 + 40, 80, 160);


/*********************************************
 *      Main loop
**********************************************/

draw = function() {
    cursor('default');
    background(0);
    tree.draw();
    
    // Image plane
    ImagePlane.draw();
};

/*********************************************
 *      Event handling
**********************************************/
{
keyPressed = function() {
    if (keyCode === 32) {
        running = !running;
    }
};
    
mousePressed = function() {
    tree.mousePressed();
};

mouseReleased = function() {
    tree.mouseReleased();
};

mouseDragged = function() {
    tree.mouseDragged();
};

mouseOut = mouseReleased;
}
