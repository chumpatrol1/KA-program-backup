 /****************************************************
 * Based on the video:
   http://www.khanacademy.org/math/algebra/systems-of-eq-and-ineq/v/inconsistent-systems-of-equations
 *****************************************************/

// Try changing the shopping lists
// Values must be greater than 0
var shoppingList1 = {
    apples: 2,
    bananas: 1,
    cost: 6.00
};

var shoppingList2 = {
    apples: 6,
    bananas: 3,
    cost: 15.00
};

// Graph display parameters
var originX = 68;
var originY = 240;
var graphWidth = 280;
var graphHeight = 200;
var dx = 1;
var dy = 1;

// Ensure everything > 0
if (shoppingList1.apples <= 0 ) { shoppingList1.apples = 1;}
if (shoppingList2.apples <= 0 ) { shoppingList2.apples = 1;}
if (shoppingList1.bananas <= 0) { shoppingList1.bananas = 1;}
if (shoppingList2.bananas <= 0 ) { shoppingList2.bananas = 1;}
if (shoppingList1.cost <= 0 ) { shoppingList1.cost = 1;}
if (shoppingList2.cost <= 0 ) { shoppingList2.cost = 1;}

// Calculate intersects
var yIntercept1 = shoppingList1.cost / shoppingList1.apples;
var yIntercept2 = shoppingList2.cost / shoppingList2.apples;
var xIntercept1 = shoppingList1.cost / shoppingList1.bananas;
var xIntercept2 = shoppingList2.cost / shoppingList2.bananas;
var gradient1 = shoppingList1.apples / shoppingList1.bananas;
var gradient2 = shoppingList2.apples / shoppingList2.bananas;

// Make graph based on intercept values
var maxX = 1 + max(xIntercept1, xIntercept2);
var maxY = 1 + max(yIntercept1, yIntercept2);
var scaleX = graphWidth / maxX;
var scaleY = graphHeight / maxY;

var message1;
var message2;
if (gradient1 === gradient2) {
    if (yIntercept1 === yIntercept2) {
        message1 = "The equations are dependent";
        message2 = "There are infinite solutions";
    } else {
        message1 = "The equations are inconsistent";
        message2 = "There is no solution";
    }
} else {
    var x = (shoppingList1.bananas * shoppingList2.cost - shoppingList2.bananas * shoppingList1.cost) / (shoppingList1.bananas * shoppingList2.apples - shoppingList1.apples * shoppingList2.bananas);
    message1 = "Apples cost $" + round(100*x)/100 + " per lb";
    var y = (shoppingList1.cost - x * shoppingList1.apples) / shoppingList1.bananas;
    message2 = "Bananas cost $" + round(100*y)/100 + " per lb";
}

var draw = function() {
    var x, y, x1, y1, x2, y2;
    background(0, 0, 0);
    
    // Vertical gridlines
    stroke(30, 30, 32);
    for (x = 0; x <= maxX; x += dx) {
        x1 = originX + scaleX * x;
        line(x1, originY-graphHeight, x1, originY);
    }
    
    // Horizontal gridlines
    for (y = 0; y <= maxY; y += dy) {
        y1 = originY - scaleY * y;
        line(originX, y1, originX+graphWidth, y1);
    }
    
    // Draw series
    strokeWeight(2);

    // Series 1
    stroke(110, 106, 245);
    line(originX, originY - scaleY * yIntercept1, originX + scaleX * xIntercept1, originY);
    
    // Series 2
    stroke(2, 97, 21);
    line(originX, originY - scaleY * yIntercept2, originX + scaleX * xIntercept2, originY);
    
    // Axes
    stroke(250, 250, 255);
    strokeWeight(1);
    line(originX, originY - graphHeight, originX, originY);
    line(originX, originY, originX + graphWidth, originY);
    
    // Axis units
    textSize(12);
    textAlign(CENTER, 1);
    fill(250, 250, 255);
    
    for (x = 0; x <= maxX; x += dx) {
        x1 = originX + scaleX * x;
        text(x, x1+1, originY + 17);
        line(x1, originY, x1, originY + 4);
    }
    
    textAlign(RIGHT, 1);
    for (y = 0; y <= maxY; y += dy) {
        y1 = originY - scaleY * y;
        text(y, originX - 7, y1 + 4);
        line(originX, y1, originX - 3, y1);
    }
    
    // Axis labels
    fill(193, 199, 30);
    textAlign(CENTER, 1);
    textSize(18);
    text("Bananas", originX + graphWidth/2, originY + 40);
    
    fill(204, 22, 22);
    translate(originX - 32, originY - graphHeight/2);
    rotate(270);
    text("Apples", 0, 0);
    resetMatrix();
    
    // Message
    fill(242, 234, 242);
    text(message1, 200, 320);
    text(message2, 200, 350);
};