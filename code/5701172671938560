var writeProperty = function(prop, depth) {
    depth = depth || 1;
    var s = "";
    
    if (typeof prop === 'string') {
        s += '"' + prop + '"';
    } else if (prop instanceof Array) {
        var contents = prop.map(function(el) { return writeProperty(el, depth); });
        s += "[" + contents.join(", ") + "]";
    } else if (typeof prop  === "function") {
        var txt = prop.toString().split("\n");
        s += txt[0] + "\n";
        var txt = txt.slice(6).join("\n");
        s += txt.replace(/__env__\./g, "");
    } else if (prop instanceof Object) {
        s += "{";
        var indent = "\n" + new Array(depth).join("  ");
        var addComma = false;
        for (var k in prop) {
            if (addComma) { s += ","; }
            s += indent + "  " + k + ": " + writeProperty(prop[k], depth + 1);
            addComma = true;
        }
        s += indent + "}";
    } else if (!isNaN(parseFloat(prop))) {
        s += round(prop * 100) / 100;
    } else {
        s += prop;
    }
    return s;
};

var deformerData = {
    translateX: function(coord, origin, value) {
        coord.x += value;
    },
    translateY: function(coord, origin, value) {
        coord.y -= value;
    },
    scale: function(coord, origin, value) {
        coord.x = (coord.x - origin.x) * value + origin.x;
        coord.y = (coord.y - origin.y) * value + origin.y;
    },
    rotate: function(coord, origin, value) {
        var cosAngle = cos(value);
        var sinAngle = sin(value);
        var x = coord.x - origin.x;
        var y = coord.y - origin.y;
        coord.x = origin.x + x * cosAngle - y * sinAngle;
        coord.y = origin.y + x * sinAngle + y * cosAngle;
    }
};

var t = ["string", 5.2342342, [1, [2, "d"]]];

var t = {
    s: "string",
    'n': 5.2342342,
    array: [1, [2, "d"]],
    o: { a: 1, b: "two"}
};

/*var t = [
    { a : 1 },
    { b : 2 },
    { c : 3 },
    { d : 4 },
];*/

var deformerData = {
    translateX: function(coord, origin, value) {
        coord.x += value;
    },
    translateY: function(coord, origin, value) {
        coord.y -= value;
    },
    scale: function(coord, origin, value) {
        coord.x = (coord.x - origin.x) * value + origin.x;
        coord.y = (coord.y - origin.y) * value + origin.y;
    },
    rotate: function(coord, origin, value) {
        var cosAngle = cos(value);
        var sinAngle = sin(value);
        var x = coord.x - origin.x;
        var y = coord.y - origin.y;
        coord.x = origin.x + x * cosAngle - y * sinAngle;
        coord.y = origin.y + x * sinAngle + y * cosAngle;
    }
};

//var t = [[3,4]];

println(writeProperty(t));

//println(writeProperty(deformerData));
