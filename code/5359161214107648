// Make movement depend on time not frames
// Add timers to avoid program crashing
// Option to hide all tooltips

var DRAG_FACTOR = 0.99;
var PARTICLE_SIZE = 4;
var BACKGROUND = color(10);
var BLUE = color(64, 95, 237);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);
var TEXTCOL = color(20, 20, 20);
var SWATCHSIZE = 128;
var swatch;

var tooltips = [
    "Welcome to Genesis Effect simulation.\nClick this box to continue.",
    "This slider changes the rate at\nwhich the circle of explosions grows.",
    "This slider change the how\noften an explosion is created.",
    "This slider change the how\nclose together explosions are.",
    "This tab lets you control the number,\nspeed, lifetime, and color of particles.",
    "Have fun exploring different kinds of looks you\ncan generate, then move onto the next video.",
];

var createSwatch = function(n, brightness) {
    loadPixels();
    var px = imageData.data;
    
    var ni = 1 / n;
    var x, y, h, s, r, g, b, i, f, p, q, t;
    var index;
    
    //var s = 0.5;          // Saturation
    var v = brightness;     // Brightness
    
    for (x = 0; x < n; x++) {
        h = ni * x;     // Hue along x-axis
        for (y = 0; y < n; y++) {
            s = ni * y; // Saturation along y-axis
            //v = ni * y; // Brightness along y-axis
            i = floor(h * 6);
            f = h * 6 - i;
            p = v * (1 - s);
            q = v * (1 - f * s);
            t = v * (1 - (1 - f) * s);
            switch (i % 6) {
                case 0: r = v; g = t; b = p; break;
                case 1: r = q; g = v; b = p; break;
                case 2: r = p; g = v; b = t; break;
                case 3: r = p; g = q; b = v; break;
                case 4: r = t; g = p; b = v; break;
                case 5: r = v; g = p; b = q; break;
            }
            index = x + (y * width) << 2;
            px[index++] = r * 0xFF | 0;
            px[index++] = g * 0xFF | 0;
            px[index++] = b * 0xFF | 0;
        }
    }
    updatePixels();
    return get(0, 0, n, n);
};

/*************************************************
 *      Generic GUI component
**************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    var y = this.y + this.h;
    fill(20);
    stroke(20);
    strokeWeight(2);
    if (this.mouseOver()) {
        line(this.x + 5, y, this.x + this.w - 5, y);
    }
    
    textFont(sansFont, 14);
    textAlign(CENTER, BASELINE);
    text(this.name, this.x + this.w / 2, y - 2);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*************************************************
 *      GUI Button
**************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = color(230, 230, 230, 200);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    //showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

/*
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
    */
};

// Button to set a colour
var Swatch = function(x, y, w, h, params) {
    params.trigger = function() {
        this.showSwatch = !this.showSwatch;
    };
    
    Button.call(this, x, y, w, h, params);
    this.color = params.color || color(255, 0, 0);
    this.hue = hue(this.color) / 255;
    this.sat = saturation(this.color) / 255;
    this.bri = brightness(this.color) / 255;

    this.defaultCol = color(250);
    this.updateFunction = params.update;
    
    if (this.updateFunction) { this.updateFunction(); }
    
    this.showSwatch = false;
    this.sx = this.x + this.w + 16;
    this.sy = this.y - 4;
    this.sx2 = this.sx + SWATCHSIZE;
    this.sy2 = this.sy + SWATCHSIZE;
};
Swatch.prototype = Object.create(Button.prototype);

Swatch.prototype.draw = function() {
    this.fade();
    
    fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
    noStroke();
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    var my = this.y + this.h / 2;
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    var txt = this.name + ":";
    text(txt, this.x + 3, my + 1);
    
    strokeWeight(1);
    stroke(20);
    fill(this.color);
    rect(this.x + textWidth(txt) + 8, my - 8, 16, 16);
    
    if (!swatch) { swatch = createSwatch(SWATCHSIZE, 0.8); }
    
    // TODO: make a swatch object
    if (this.showSwatch) {
        noStroke();
        fill(0, 0, 0, 50);
        rect(this.sx + 2, this.sy + 2, SWATCHSIZE + 2, SWATCHSIZE + 29);
        fill(0);
        //rect(this.sx, this.sy, SWATCHSIZE, SWATCHSIZE + 30);
        image(swatch, this.sx, this.sy);
        
        noFill();
        strokeWeight(1);
        stroke(255);
        ellipse(this.sx + this.hue * SWATCHSIZE, this.sy + this.sat * SWATCHSIZE, 5, 5);
        
        strokeWeight(2);
        stroke(240);
        rect(this.sx - 1, this.sy - 1, SWATCHSIZE + 2, SWATCHSIZE + 2);
        
        if (this.mouseOverSwatch()) {
            colorMode(HSB);
            var hue = norm(mouseX, this.sx, this.sx2);
            var sat = norm(mouseY, this.sy, this.sy2);
            fill(hue * 255, sat * 255, this.bri * 255);
            rect(this.sx - 1, this.sy2 + 1, SWATCHSIZE + 2, 24);
            colorMode(RGB);
        } else {
            textAlign(CENTER, CENTER);
            fill(0);
            rect(this.sx - 1, this.sy2 + 1, SWATCHSIZE + 2, 24);
            fill(255);
            text("Pick a color", this.sx + SWATCHSIZE / 2, this.sy2 + 12);
        }
    }
};

Swatch.prototype.setColor = function() {
    colorMode(HSB);
    this.color = color(this.hue * 255, this.sat * 255, this.bri * 255);
    colorMode(RGB);
};

Swatch.prototype.findColor = function() {
    this.hue = norm(mouseX, this.sx, this.sx2);
    this.sat = norm(mouseY, this.sy, this.sy2);
};

Swatch.prototype.mouseOverSwatch = function() {
    return mouseX >= this.sx && mouseX <= this.sx2 &&
           mouseY >= this.sy && mouseY <= this.sy2;
};

Swatch.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
    if (this.showSwatch && !this.mouseOverSwatch()) {
        this.showSwatch = false;
    }
};

Swatch.prototype.mouseReleased = function() {
    if (this.selected && this.mouseOver()) {
        this.trigger();
    } else if (this.showSwatch) {
        if (this.mouseOverSwatch()) {
            this.findColor();
            this.setColor();
            if (this.updateFunction) {
                this.updateFunction(this.color);
            }
        } else {
            this.showSwatch = false;
        }
    }
    this.selected = false;
};
}
/*************************************************
 *      GUI Slider
**************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = 12;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 16);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};

var ColorSlider = function(x, y, w, h, params) {
    Slider.call(this, x, y, w, h, params);
    this.saturation = params.saturation || 180;
    this.brightness = params.brightness || 180;
    this.setColor();
};
ColorSlider.prototype = Object.create(Slider.prototype);

ColorSlider.prototype.setColor = function() {
    colorMode(HSB);
    this.color = color(this.val, this.saturation, this.brightness);
    colorMode(RGB);
    this.R = red(this.color);
    this.G = green(this.color);
    this.B = blue(this.color);
};

ColorSlider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(this.color);
    strokeWeight(4);
    stroke(this.stroke);
    line(this.x, this.y, this.x2, this.y);
    stroke(250);
    strokeWeight(1);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
};

ColorSlider.prototype.trigger = function() {
    this.setColor();
};
}
/*************************************************
 *      GUI Label
**************************************************/
{
var Label = function(x, y, w, h, name) {
    this.x = x + w / 2;
    this.x1 = x + 8;
    this.x2 = x + w - 8;
    this.y = y + h - 4;
    this.name = name;
};

Label.prototype.draw = function() {
    fill(40);
    textFont(sansFont, 16);
    textAlign(CENTER, BASELINE);
    text(this.name, this.x, this.y - 2);
    
    strokeWeight(1);
    stroke(40);
    line(this.x1, this.y, this.x2, this.y);
};
}
/*************************************************
 *      Toolbar
**************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
    this.labels = [];
};

Toolbar.prototype.draw = function() {
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
    this.labels.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 24;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addLabel = function(name) {
    var h = 20;
    this.labels.push(new Label(this.x, this.y + this.h, this.w, h, name));
    this.h += h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.addSwatch = function(name, colour, trigger) {
    var h = 20;
    var button = new Swatch(this.x + 5, this.y + this.h, this.w - 10, h, name, colour, trigger);
    this.components.push(button);
    this.h += h + 8;
    return button;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
/*************************************************
 *      Tabbed Toolbar
**************************************************/
{
var TabbedToolbar = function(x, y, w) {
    this.x = x;
    this.tx = x;
    this.y = y;
    this.w = w;
    this.h = 24;
    
    this.toolbars = [];
    this.tabs = [];
    this.currentTab = -1;
    this.components = [];
    this.labels = [];
};

TabbedToolbar.prototype = Object.create(Toolbar.prototype);

TabbedToolbar.prototype.draw = function() {
    // Background
    noStroke();
    fill(250);
    rect(this.x, this.y, this.w, this.h, 8);
    
    // Tab background
    fill(200);
    rect(this.x, this.y, this.w, 24, 8);
    rect(this.x, this.y + 12, this.w, 12);
    
    textFont(sansFont, 13);
    textAlign(LEFT, BASELINE);
    var tx = this.x;
    var ty = this.y + 22;
    
    // Draw tab
    if (this.currentTab !== -1) {
        var tab = this.tabs[this.currentTab];
        fill(250);
        noStroke();
        var x = max(this.x, tab.x - 1);
        rect(x, tab.y, tab.w + 1, 30, 8);
    }

    this.components.forEach(function(p) { p.draw(); });
    this.labels.forEach(function(p) { p.draw(); });
};

TabbedToolbar.prototype.changeTab = function(n) {
    this.currentTab = n;
    this.components = this.tabs.concat(this.toolbars[n].components);
    this.labels = this.toolbars[n].labels;
    this.h = this.toolbars[n].h + 24;
};

TabbedToolbar.prototype.addTab = function(name) {
    textFont(sansFont, 14);
    var w = textWidth(name) + 10;
    var index = this.tabs.length;
    var self = this;
    
    this.tabs.push(
        new GUI_Component(this.tx, this.y + 1, w, 18,
            name, function() {
                self.changeTab(index);
            }
        )
    );
    
    this.toolbars.push(new Toolbar(this.x, this.y + 24, this.w));
    this.tx += w;
};

TabbedToolbar.prototype.addTabs = function(names) {
    for (var i = 0; i < names.length; i++) {
        this.addTab(names[i]);
    }
    this.changeTab(0);
};

TabbedToolbar.prototype.addTo = function(name, element, params) {
    var index = -1;
    
    for (var i = 0; i < this.tabs.length; i++) {
        if (this.tabs[i].name === name) {
            index = i;
            break;
        }
    }
    
    if (index === -1) { return; }
    
    var toolbar = this.toolbars[index];
    toolbar.add(element, params);
    
    this.changeTab(0);
};

}
/*************************************************
 *      Particle object
**************************************************/
var Particle = function(x, y, vx, vy) {
    this.x = x;
    this.y = y;
    this.vx = vx;
    this.vy = vy;
};
/*****************************************************
 * The Exploder is a hidden Particle that explodes into
 * visible particles. Then it acts as a particle
 * system, allowing us to colour and remove all the
 * particles belonging to it at once.
******************************************************/
{
var Exploder = function(system, x, y, vx, vy, time1, time2) {
    this.system = system;
    this.x = x;
    this.y = y;
    this.vx = vx;
    this.vy = vy;

    this.age = 0;
    this.time1 = time1;
    this.time2 = time2;
    this.particles = [];
};

Exploder.prototype.draw = function() {
    fill(lerpColor(
        this.system.startColor1,
        this.system.endColor1, 
        this.age / this.time2
    ));
    
    var i, p;
    for (i = this.particles.length; i--;) {
        p = this.particles[i];
        
        // Update
        p.vx *= DRAG_FACTOR;
        p.vy *= DRAG_FACTOR;
        p.x += p.vx;
        p.y += p.vy;
    
        // Draw
        ellipse(p.x, p.y, PARTICLE_SIZE, PARTICLE_SIZE);
    }
};

Exploder.prototype.update = function() {
    this.age++;
    this.x += this.vx;
    this.y += this.vy;
    
    if (this.particles.length === 0) {
        // Explode
        if (this.age > this.time1) {
            this.explode();
            this.age = 0;
        }
    } else {
        // Draw particles or remove
        if (this.age < this.time2) {
            this.draw();
        } else {
            this.isDead = true;
        }
    }
};

Exploder.prototype.explode = function() {
    var n = this.system.explodingParticles,
        startSpeed = this.system.explosionSpeed,
        variation = this.system.explosionVariation,
        x = this.x,
        y = this.y,
        angle, speed, i;
    
    for (i = n; i--;) {
        angle = random(360);
        speed = startSpeed * (1 - random(variation));
        
        this.particles.push(
            new Particle(
                x, y, speed * cos(angle), speed * sin(angle)
            )
        );
    }
};
}
/*****************************************************
 *  Holds all the particles and controls where they
 * are seeded.
******************************************************/
var ParticleSystem = {
    x: width * 0.5,
    y: height * 0.5,
    particles: [],
    
    spreadRate: 5,
    seedingVariation: 1,
    timeBetweenSeeding: 12,
    particleDensity: 10,
    
    explodingParticles: 10,
    explosionSpeed: 0.5,
    explosionVariation: 1,
    explosionLifetime: 150,
    startColor1: color(200, 0, 0),
    startColor2: color(255, 162, 0),
    endColor1: color(150, 160, 240, 0),
    endColor2: color(60, 200, 240, 0),
    
    init: function() {
        this.r = 1;
        this.t = 0;
        this.particles = [];
    },
    
    update: function() {
        // When do we add new explosion
        if (this.t % this.timeBetweenSeeding === 0) {
            this.addSeeds();
        }
        this.t++;
        
        noStroke();
        var i, p;
        for (i = this.particles.length; i--;) {
            p = this.particles[i];
            p.update();
            
            if (p.isDead) {
                this.particles.splice(i, 1);
            }
        }
        
        // Increase circle radius
        this.r += this.spreadRate;
        
        // If radius off screen then reset
        if (this.r > width * 0.5) {
            this.r = 1;
            this.t = 0;
        }
    },
    
    addSeeds: function() {
        // Calculate the radius at the next update
        var r = this.r + this.spreadRate * this.timeBetweenSeeding;
        
        // How many explosions do we add
        var n = ceil(r * this.particleDensity * 0.01);
        
        if (n > 0) {
            var dAngle = 360 / n;
            var startAngle = random(dAngle);
            var i, angle, x, y;
            var d = this.spreadRate / this.r;
            var t = this.explosionLifetime;
            var r = this.r;
            
            var seedTime = this.timeBetweenSeeding;
            var timeVar = this.seedingVariation;
            
            for (i = 0; i < n; i++) {
                angle = startAngle + i * dAngle;
                x = r * cos(angle);
                y = r * sin(angle);
                
                this.particles.push(
                    new Exploder(
                        this, this.x + x, this.y + y,
                        x * d, y * d,
                        seedTime * (1 - random(timeVar)),
                        t
                    )
                );
            }
        }
    },
};

ParticleSystem.init();

/*************************************************
 *  Create toolbar
**************************************************/
{
var toolbar = new TabbedToolbar(5, 5, 130);
toolbar.addTabs(['Seeds', 'Explosions']);

toolbar.addTo('Seeds', Slider, {
    name: "Growth rate",
    min: 1,
    now: 5,
    max: 50,
    trigger: function() {
        ParticleSystem.spreadRate = this.val * 0.1;
    }
});
toolbar.addTo('Seeds', Slider, {
    name: "Explosion rate",
    min: 1,
    now: 5,
    max: 10,
    trigger: function() {
        ParticleSystem.timeBetweenSeeding = floor(360 / this.val);
    }
});
/*toolbar.addTo('Seeds', Slider, {
    name: "Seeding variation (%)",
    now: 100,
    max: 100,
    trigger: function() {
        ParticleSystem.seedingVariation = this.val * 0.01;
    }
});*/
toolbar.addTo('Seeds', Slider, {
    name: "Explosion density",
    min: 1,
    now: 10,
    max: 20,
    trigger: function() {
        ParticleSystem.particleDensity = this.val;
    }
});
toolbar.addTo('Seeds', Button, {
    name: "Restart",
    trigger: function() {
        ParticleSystem.init();
    }
});

toolbar.addTo('Explosions', Slider, {
    name: "Number of particles",
    min: 1,
    now: 20,
    max: 50,
    trigger: function() {
        ParticleSystem.explodingParticles = this.val;
    }
});
toolbar.addTo('Explosions', Slider, {
    name: "Particle speed",
    min: 1,
    now: 5,
    max: 20,
    decimalPlaces: 1,
    trigger: function() {
        ParticleSystem.explosionSpeed = this.val * 0.1;
    }
});
/*toolbar.addTo('Explosions', Slider, {
    name: "Speed variation (%)",
    min: 0,
    now: 50,
    max: 100,
    trigger: function() {
        ParticleSystem.explosionVariation = this.val * 0.01;
    }
});*/
toolbar.addTo('Explosions', Slider, {
    name: "Particle lifetime",
    min: 10,
    now: 150,
    max: 200,
    trigger: function() {
        ParticleSystem.explosionLifetime = this.val;
    }
});

toolbar.addTo('Explosions', Swatch, {
    name: "Start color",
    color: color(255, 100, 0),
    update: function() {
        ParticleSystem.startColor1 = this.color;
    }
});
/*toolbar.addTo('Explosions', Swatch, {
    name: "Start color 2",
    color: color(255, 162, 0),
    update: function() {
        ParticleSystem.startColor2 = this.color;
    }
});*/
toolbar.addTo('Explosions', Swatch, {
    name: "End color",
    color: color(55, 78, 250),
    update: function() {
        ParticleSystem.endColor1 = this.color + (1 << 24);
    }
});
/*toolbar.addTo('Explosions', Swatch, {
    name: "End color 2",
    color: color(54, 87, 235),
    update: function() {
        ParticleSystem.endColor2 = this.color + (1 << 24);
    }
});*/
}
/*************************************************
 *  Tooltips
**************************************************/

// Where tooltip arrows point
var arrowX = toolbar.x + toolbar.w - 8;
var arrows = [
    false,
    [arrowX, toolbar.toolbars[0].components[0].y - 3],
    [arrowX, toolbar.toolbars[0].components[1].y - 3],
    [arrowX, toolbar.toolbars[0].components[2].y - 3],
    [arrowX + 6, toolbar.y + 13],
];

var Tooltip = {
    index: 0,
    fadeTime: 200,
    
    init: function() {
        this.index = 0;
        this.lineGap = 3;
        
        textFont(sansFont, 15);
        this.lineHeight = textAscent() + textDescent() + this.lineGap;
        
        this.getText();
    },
    
    getText: function() {
        this.txt = tooltips[this.index];
        if (!this.txt) { return; }
        this.lines = this.txt.split('\n');
        
        textFont(sansFont, 15);
        this.width = textWidth(this.txt) + 16;
        this.height = this.lines.length * this.lineHeight + 8;
        
        this.y = 10;
        this.x = width * 0.5;
        this.x1 = this.x - this.width * 0.5;
        this.y1 = this.y + this.height * 0.5;
        
        this.arrow = arrows[this.index];
    },
    
    draw: function() {
        if (!this.txt) { return; }
        
        var alpha = this.getAlpha();
        
        if (alpha <= 0) { return; }
        
        stroke(BLUE + (alpha << 24));
        strokeWeight(3);
        fill(250, 250, 250, alpha);
        rect(this.x1, this.y, this.width, this.height, 8);
        
        fill(20, 20, 20, alpha);
        textAlign(CENTER, TOP);
        textFont(sansFont, 15);
        
        var y = this.y + 4;
        for (var i = 0; i < this.lines.length; i++) {
            text(this.lines[i], this.x, y);
            y += this.lineHeight;
        }
        
        if (this.arrow) {
            noFill();
            stroke(250, 250, 250, alpha);
            strokeWeight(5);
            this.drawArrow();
            
            stroke(BLUE + (alpha << 24));
            strokeWeight(3);
            this.drawArrow();
        }
    },
    
    drawArrow: function() {
        var x = this.arrow[0];
        var y = this.arrow[1];
        var cx1 = this.x1 * 0.6 + x * 0.4;
        var cy1 = this.y1 * 0.9 + y * 0.1;
        var cx2 = this.x1 * 0.4 + x * 0.6;
        var cy2 = this.y1 * 0.1 + y * 0.9;

        bezier(this.x1 + 3, this.y1, cx1, cy1, cx2, cy2, x, y);
        
        var tx = bezierTangent(this.x1, cx1, cx2, x, 0.95);
        var ty = bezierTangent(this.y1, cy1, cy2, y, 0.95);
        var a = atan2(ty, tx);
        
        pushMatrix();
        translate(x, y);
        rotate(a);
        line(2, 0, -10, 5);
        line(1, 0, -10, -5);
        popMatrix();
    },
    
    getAlpha: function() {
        // Handle fading between tooltips
        var alpha = 255;
        if (this.mode) {
            var t = (millis() - this.time) / this.fadeTime;
            if (this.mode === 'fade out') {
                if (t < 1) {
                    alpha = 255 * (1 - t);
                } else {
                    this.nextTooltip();
                    return 0;
                }
            } else {
                if (t < 1) {
                    alpha = 255 * t;
                } else {
                    this.mode = false;
                }
            }
        }
        return alpha;
    },
    
    nextTooltip: function() {
        this.index++;
        this.getText();
        this.selected = false;
        this.mode = 'fade in';
        this.time = millis();
    },
    
    mouseOver: function() {
        return mouseX >= this.x1 && mouseX <= this.x1 + this.width && mouseY >= this.y && mouseY <= this.y + this.height;
    },
    
    mousePressed: function() {
        this.selected = this.mouseOver();
    },
    
    mouseReleased: function() {
        if (this.selected && !this.mode && this.mouseOver()) {
            this.time = millis();
            this.mode = 'fade out';
        }
    }
};

Tooltip.init();

/*************************************************
 *      Main loop
**************************************************/

draw = function() {
    background(BACKGROUND);
    
    var m = millis();
    ParticleSystem.update();

    fill(255);
    textAlign(LEFT, BASELINE);
    //text(ParticleSystem.particles.length, 4, height - 6);
    //text(millis() - m, 4, height - 6);
    
    toolbar.draw();
    Tooltip.draw();
};

/*************************************************
 *      Event handling
**************************************************/
{
keyPressed = function() {
    //running = !running;
};

mousePressed = function() {
    Tooltip.mousePressed();
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
};

mouseReleased = function() {
    Tooltip.mouseReleased();
    toolbar.mouseReleased();
};

mouseOut = mouseReleased;
}
