// http://mathworld.wolfram.com/Circle-LineIntersection.html


var x1 = 50;
var y1 = 100;
var x2 = 350;
var y2 = 150;

var cx = 200;
var cy = 200;
var r = 80;

noFill();
strokeWeight(2);
stroke(255, 0, 0);
line(x1, y1, x2, y2);

stroke(0, 0, 255);
ellipse(cx, cy, r * 2, r * 2);

var dx = x2 - x1;
var dy = y2 - y1;
var dr2 = dx * dx + dy * dy;
var det = (x1 - cx) * (y2 - cy) - (x2 - cx) * (y1 - cy);
var determinant = r * r * dr2 - det * det;

if (determinant > 0) {
    determinant = sqrt(determinant);
    var dx2 = dy < 0 ? -dx : dx;
    
    strokeWeight(8);
    var x = cx + ( det * dy + dx2 * determinant) / dr2;
    var y = cy + (-det * dx + abs(dy) * determinant) / dr2;
    point(x, y);
    
    var x = cx + ( det * dy - dx2 * determinant) / dr2;
    var y = cy + (-det * dx - abs(dy) * determinant) / dr2;
    point(x, y);
}

fill(0);
textAlign(LEFT, TOP);
text(determinant, 10, 10);

var test = function() {
    background(255);
    
    // tree (looking down)
    var tx = 0, ty = 0, tr = 10;
    
    // ray start
    var rx = 490, ry = 15;
    
    // Ray vector
    var rdx = -300;
    
    // ray in aperture
    var rx2 = rx + rdx, ry2 = 0;
    
    var rdy = ry2 - ry;
    
    var rayLength = rdx * rdx + rdy * rdy;
    
    var det = rx * ry2 - ry * rx2;
    var det = tr * tr * rayLength - det * det;
    
    println(det);
    
    pushMatrix();
    translate(380, 200);
    scale(-0.7, 0.7);
    
    noFill();
    stroke(0, 0, 200);
    strokeWeight(2);
    ellipse(tx, ty, tr * 2, tr * 2);
    
    ellipse(rx, ry, 5, 5);
    ellipse(rx2, ry2, 5, 5);

    line(rx, ry, rx + rdx * 2, ry + rdy * 2);

    popMatrix();
    
};

draw = function() {
    test();
    noLoop();
};
