/*************************************************
 * textureQuad(col, x1, y1, x2, y2, x3, y3, x4, y4)
 * 
 * Function for drawing a convex quadrilateral with a wooden texture
 * The first parameter is a colour, the other are the coordinates for the 
 * quadrilateral.
 * 
 * The line from the first point to second point defines the direction of the grain
 * The line from the first point to last point goes across the grain
 * 
 * 
 * imageQuad(img, x1, y1, x2, y2, x3, y3, x4, y4)
 * Works in the same way but takes an image
 * (which must be converted to a surface by getSurface first)
 * 
 * TODO: Anti-alias image
 * 
 * 
 * Credit to jocopa3 (https://www.khanacademy.org/profile/Jocopa3)
 * for the wooden texture, which I've edited somewhat.
 * https://www.khanacademy.org/computer-programming/wip/6211859819659264
 * 
 * Biohazard sign from here:
 * https://www.khanacademy.org/computer-programming/biohazard/5338133020540928
*************************************************/

var textureQuad = function(col, x1, y1, x2, y2, x3, y3, x4, y4) {
    loadPixels();
    var pix = imageData.data;
    
    var r = red(col);
    var g = green(col);
    var b = blue(col);
    
    var minX = Math.min(x1, x2, x3, x4);
    var maxX = Math.max(x1, x2, x3, x4);
    var minY = Math.min(y1, y2, y3, y4);
    var maxY = Math.max(y1, y2, y3, y4);
    
    // Vectors for edge in clockwise direction
    var dx1 = x2 - x1;
    var dy1 = y2 - y1;
    var dx2 = x3 - x2;
    var dy2 = y3 - y2;
    var dx3 = x4 - x3;
    var dy3 = y4 - y3;
    var dx4 = x1 - x4;
    var dy4 = y1 - y4;
    
    var vx = dx1 + dx3;
    var vy = dy1 + dy3;
    
    var x, y, x0, y0, A, B, C, D, u, v, w, n, m, index;
    
    // Shift noise by a random amount so we don't get the same pattern
    var nx = random(10);
    var ny = random(10);
    
    for (x = minX; x <= maxX; x++) {
        x0 = x - x1;
        
        for (y = minY; y <= maxY; y++) {
            y0 = y - y1;
            
            // Check that point is within the edges
            if (dx1 * y0 - dy1 * x0 >= 0 &&
                dx2 * (y - y2) - dy2 * (x - x2) >= 0 &&
                dx3 * (y - y3) - dy3 * (x - x3) >= 0 &&
                dx4 * (y - y4) - dy4 * (x - x4) >= 0) {
                    
                    // Find where point x is in terms of proportions
                    // along horizontal (v) and vertical (u) vectors
                    
                    A = dy4 * vx - dx4 * vy;
                    B = y0 * vx - x0 * vy + dx4 * dy1 - dy4 * dx1;
                    C = x0 * dy1 - y0 * dx1;
                    
                    if (A) {
                        D = B * B - 4 * A * C;  // determinant
                        
                        if (D >= 0) {
                            D = sqrt(D);
                            u = (-B + D) / (2 * A);
                        } else {
                            continue;
                        }
                    } else {
                        u = -C / B;
                    }
                    
                    w = dx1 - u * vx;
                    if (w) {
                        v = (x0 + u * dx4) / w;
                    } else {
                        v = (y0 - u * dy4) / (dy1 - u * vy);
                    }
                    
                    u *= 100;
                    v *= 100;
                        
                    // Shading
                    // Wooden texture based on 
                    // https://www.khanacademy.org/computer-programming/wip/6211859819659264
                    noiseDetail(4, 0.5);
                    n = noise(u * 0.012 + nx, v * 0.002 + ny) * 20;
                    n = (1 - (n - floor(n))) * 0.5;
                    n += noise(u * 0.2, v * 0.2) + 0.5;
                    
                    noiseDetail(1, 1);
                    m = noise(u * 0.9, v * 0.02) * 1.2;
                    n -= m * m * m * m;
                    n = (n * 0.5 + 1.7) * 0.5;
                    
                    index = x + y * width << 2;
                    pix[index++] = n * r;
                    pix[index++] = n * g;
                    pix[index] = n * b;
            }
        }
    }
    
    updatePixels();
    
    noFill();
    stroke(lerpColor(col, color(0), 0.15));
    quad(x1, y1, x2, y2, x3, y3, x4, y4);
};

// Get a surface so wae can use get
var getSurface = function(img) {
    var surf = createGraphics(img.width, img.height, JAVA2D);
    surf.background(255, 255, 255, 0);
    surf.image(img, 0, 0);
    return surf;
};

var imageQuad = function(img, x1, y1, x2, y2, x3, y3, x4, y4) {
    loadPixels();
    var pix = imageData.data;
    
    var minX = Math.min(x1, x2, x3, x4);
    var maxX = Math.max(x1, x2, x3, x4);
    var minY = Math.min(y1, y2, y3, y4);
    var maxY = Math.max(y1, y2, y3, y4);
    
    // Vectors for edge in clockwise direction
    var dx1 = x2 - x1;
    var dy1 = y2 - y1;
    var dx2 = x3 - x2;
    var dy2 = y3 - y2;
    var dx3 = x4 - x3;
    var dy3 = y4 - y3;
    var dx4 = x1 - x4;
    var dy4 = y1 - y4;
    
    var vx = dx1 + dx3;
    var vy = dy1 + dy3;
    
    var x, y, x0, y0, A, B, C, D, u, w, v, n, m, c, a, r, g, b, index;
    
    // Shift noise by a random amount so we don't get the same pattern
    var nx = random(10);
    var ny = random(10);
    
    // Scale for image
    var sx = img.width;
    var sy = img.height;
    
    for (x = minX; x <= maxX; x++) {
        x0 = x - x1;
        
        for (y = minY; y <= maxY; y++) {
            y0 = y - y1;
            
            // Check that point is within the edges by making sure the 
            // point is to the left of each vector using the cross product
            if (dx1 * y0 - dy1 * x0 >= 0 &&
                dx2 * (y - y2) - dy2 * (x - x2) >= 0 &&
                dx3 * (y - y3) - dy3 * (x - x3) >= 0 &&
                dx4 * (y - y4) - dy4 * (x - x4) >= 0) {
                    
                    // Find where point x is in terms of proportions
                    // along horizontal (v) and vertical (u) vectors
                    
                    A = dy4 * vx - dx4 * vy;
                    B = y0 * vx - x0 * vy + dx4 * dy1 - dy4 * dx1;
                    C = x0 * dy1 - y0 * dx1;
                    D = B * B - 4 * A * C;  // determinant
                    
                    if (D >= 0) {
                        D = sqrt(D);
                        u = (-B + D) / (2 * A);
                        v = 1 - (x0 + u * dx4) / (dx1 - u * vx);
                        u *= sx;
                        v *= sy;
                        
                        c = img.get(floor(u), floor(v));
                        a = alpha(c);
                        
                        index = x + y * width << 2;
                        if (a) {
                            pix[index++] = red(c);
                            pix[index++] = green(c);
                            pix[index++] = blue(c);
                        }
                    }
            }
        }
    }
    
    updatePixels();
    
    noFill();
    stroke(0);
    //quad(x1, y1, x2, y2, x3, y3, x4, y4);
};

var img = getImage("avatars/piceratops-ultimate");

var drawBiohazard = function() {
    var s = 100;
    var s2 = s / 2;
    var x = s2;
    var y = s2;
    var h = sqrt(3) * s2;
    var c = s2 / sqrt(3);
    var cy = y + h / 2 - c;
    
    var surf = createGraphics(s, s, JAVA2D);
    surf.background(255, 255, 255, 0);
    
    // Sign
    surf.strokeJoin(ROUND);
    surf.strokeWeight(s * 0.05);
    surf.stroke(0);
    surf.fill(255, 200, 50);
    surf.triangle(x, y - h/2, x - s2, y + h/2, x + s2, y + h/2);
    
    var ca = cos(30);
    var sa = sin(30);
    
    surf.noStroke();
    // Big black arc
    var r = s * 0.35;
    var d = r * 0.38;
    surf.fill(0);
    surf.ellipse(x, cy - d, r, r);
    surf.ellipse(x - d * ca, cy + d * sa, r, r);
    surf.ellipse(x + d * ca, cy + d * sa, r, r);
    
    // Making the arc
    surf.fill(255, 200, 50);
    r = s * 0.24;
    d = r * 0.75;
    surf.ellipse(x, cy - d, r, r);
    surf.ellipse(x - d * ca, cy + d * sa, r, r);
    surf.ellipse(x + d * ca, cy + d * sa, r, r);
    
    // Gaps in arcs
    r = s * 0.05;
    d = s * 0.3;
    surf.ellipse(x, cy - d, r, r);
    surf.ellipse(x - d * ca, cy + d * sa, r, r);
    surf.ellipse(x + d * ca, cy + d * sa, r, r);
    
    // Center circle
    r = s * 0.09;
    surf.ellipse(x, cy, r, r);
    
    // Gaps from center
    surf.strokeWeight(s * 0.02);
    surf.stroke(255, 200, 50);
    d = s * 0.08;
    surf.line(x, cy, x, cy - d);
    surf.line(x, cy, x - d * ca, cy + d * sa);
    surf.line(x, cy, x + d * ca, cy + d * sa);
    
    surf.strokeWeight(s * 0.04);
    surf.stroke(0);
    surf.strokeCap(SQUARE);
    surf.noFill();
    r = s / 4;
    d = 36;
    surf.arc(x, cy, r, r, 270 - d, 270 + d);
    surf.arc(x, cy, r, r, 30 - d, 30 + d);
    surf.arc(x, cy, r, r, 150 - d, 150 + d);
    
    return surf;
};

var display = function() {
    var c0 = color(170, 130, 80);
    //var col = color(5, 29, 92);
    
    var c1 = lerpColor(c0, color(0), 0.2);     // Darker colour
    var c2 = lerpColor(c0, color(255), 0.1);   // Brighter colour
    
    // Defining the points of a cube (I don't use all of these)
    var p1 = [66, 146];
    var p2 = [106, 308];
    var p3 = [274, 325];
    var p4 = [261, 136];
    var p5 = [147, 111];
    var p6 = [168, 234];
    var p7 = [293, 237];
    var p8 = [287, 100];
    /*
    var p1 = [50, 100]; // 50, 101
    var p2 = [50, 250];
    var p3 = [200, 300]; // 201, 300
    var p4 = [200, 150];
    var p5 = [200, 50];
    var p6 = [200, 150];
    var p7 = [350, 250];
    var p8 = [350, 100];
    */
    
    // Draw quad representing three faces of the cube
    
    textureQuad(c0, p2[0],p2[1], p1[0],p1[1], p4[0],p4[1], p3[0],p3[1]);
    textureQuad(c1, p8[0],p8[1], p7[0],p7[1], p3[0],p3[1], p4[0],p4[1]);
    textureQuad(c2, p1[0],p1[1], p5[0],p5[1], p8[0],p8[1], p4[0],p4[1]);
    
    var p1 = [100, 166];
    var p2 = [120, 258];
    var p3 = [216, 265];
    var p4 = [201, 162];
    
    var surf = getSurface(img);
    var surf = drawBiohazard();
    
    imageQuad(surf, p2[0],p2[1], p1[0],p1[1], p4[0],p4[1], p3[0],p3[1]);
    //imageQuad(img, p[0][0],p[0][1], p[4][0],p[4][1], p[7][0],p[7][1], p[3][0],p[3][1]);

};

display();





// Function where I figure out the maths (ignore it)
var testQuad = function(x1, y1, x2, y2, x3, y3, x4, y4) {
    noFill();
    stroke(0);
    quad(x1, y1, x2, y2, x3, y3, x4, y4);
    
    //ellipse(x1, y1, 5, 5);
    //rect(x2, y2, 5, 5);

    // Vector V0 for left vertical axis (Top to bottom)
    var dx1 = x4 - x1;
    var dy1 = y4 - y1;
    
    // Vector V1 for top horizontal axis (L -> R)
    var dx2 = x2 - x1;
    var dy2 = y2 - y1;
    
    // Vector V2 for bottom horizontal axis (L -> R)
    var dx3 = x3 - x4;
    var dy3 = y3 - y4;
    
    // Difference between top and bottom vectors
    var dx4 = dx3 - dx2;
    var dy4 = dy3 - dy2;
    
    println(dx4 + " " + dy4);
    
    var s = 0.4;
    var t = 0.8;
    
    //var x = t * (dx2 + dx1 + s * (dx3 - dx1));
    //var y = t * (dy2 + dy1 + s * (dy3 - dy1));
    
    // Point t along V0
    var x = (1 - t) * x1 + t * x4;
    var y = (1 - t) * y1 + t * y4;
    
    // Average vector from that point
    var adx = (1 - t) * dx2 + t * dx3;
    var ady = (1 - t) * dy2 + t * dy3;
    line(x, y, x + adx, y + ady);
    
    var x = x1 + t * dx1 + s * (t * dx4 + dx2);
    var y = y1 + t * dy1 + s * (t * dy4 + dy2);

    var x0 = x - x1;
    var y0 = y - y1;

    //s = (x0 - t * dx1) / (t * (dx3 - dx2) + dx2);
    //s = (y0 - t * dy1) / (t * (dy3 - dy2) + dy2);
    // (x0 - t * dx1) / (t * (dx3 - dx2) + dx2) =
    // (y0 - t * dy1) / (t * (dy3 - dy2) + dy2)
    
    // (x0 - t * dx1) * (t * dy4 + dy2) = (t * dx4 + dx2) * (y0 - t * dy1)
    // println((x0 - t * dx1) * (t * dy4 + dy2));
    // println((t * dx4 + dx2) * (y0 - t * dy1));
    
    // x0 * dy2 + t * (x0 * dy4 - dx1 * dy2) - t * t * dx1 * dy4 = 
    // y0 * dx2 + t * (y0 * dx4 - dy1 * dx2) - t * t * dy1 * dx4
    // println(x0 * dy2 + t * (x0 * dy4 - dx1 * dy2) - t * t * dx1 * dy4);
    // println(y0 * dx2 + t * (y0 * dx4 - dy1 * dx2) - t * t * dy1 * dx4);
    
    // (dy1 * dx4 - dx1 * dy4) * t * t + (x0 * dy4 - dx1 * dy2 - y0 * dx4 + dy1 * dx2) * t + x0 * dy2 - y0 * dx2 = 0;
    //println((dy1 * dx4 - dx1 * dy4) * t * t + (x0 * dy4 - dx1 * dy2 - y0 * dx4 + dy1 * dx2) * t + x0 * dy2 - y0 * dx2);
    
    // Coefficients for quadratic equation
    var A = dy1 * dx4 - dx1 * dy4;
    var B = x0 * dy4 - y0 * dx4 + dy1 * dx2 - dx1 * dy2;
    var C = x0 * dy2 - y0 * dx2;
    var D = B * B - 4 * A * C;  // determinant
    
    if (D >= 0) {
        D = sqrt(D);
        var t = (-B + D) / (2 * A);
        var s = (x0 - t * dx1) / (t * dx4 + dx2);
        println(t + " " + s);
    }

    ellipse(x, y, 6, 6);
    
};