/*******************************************
 * Expanding a circle to fill a polygon.
 * 
 * Might only work for a Voronoi cell.
 * 
 * There are imperfections due to the
 * fact that arcs only use integer angles.
 * 
 * TODO:
 *  Convert to curved shape
*******************************************/

var showing = {
    Cell: true,
    Circle: false,
    Outline: true
};

var WHITE = color(255, 255, 255);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);

var sansFont = createFont("sans", 15);

var myArc = function(x, y, r, a1, a2) {
    if (a2 < a1) { a2 += 360; }
    if (a2 - a1 > 359) { a2 -= 360; }
    
    if (round(a1) !== round(a2)) {
        arc(x, y, r, r, a1, a2);
    }
    //println(round(a1) + " " + round(a2));
};

// Points halfway between the sites and the unseen sites
var vertices = [
    [100, 160],
    [150, 120],
    [320, 60],
    [360, 280],
    [170, 360],
    [ 70, 270]
];

/**************************************
 *  A edge surrounding a point
***************************************/
var Edge = function(p1, p2, cx, cy) {
    this.x1 = p1[0];
    this.y1 = p1[1];
    this.x2 = p2[0];
    this.y2 = p2[1];
    this.cx = cx;
    this.cy = cy;
    
    // Edge vector
    var dx = this.x2 - this.x1;
    var dy = this.y2 - this.y1;
    var d = dx * dx + dy * dy;
    var len = sqrt(d);
    this.dx = dx / len;
    this.dy = dy / len;
    
    // Vector to center
    var mx = cx - this.x1;
    var my = cy - this.y1;
    
    // Calculate point on edge where the vector to the center
    // is perpendicular to the vector to the site center
    var w = (mx * dx + my * dy) / d;
    
    // Assume 0 >= w >= 1
    this.mx = this.x1 + dx * w;
    this.my = this.y1 + dy * w;
    this.len1 = len * (1 - w);
    this.len2 = len - this.len1;
    
    // Calculate squared distance to center
    this.d2 = (this.mx - cx) * (this.mx - cx) + (this.my - cy) * (this.my - cy);
    
    // Angle from site to edge end
    this.endAngle = atan2(this.y2 - cx, this.x2 - cy);
};

Edge.prototype.draw = function() {
    strokeWeight(1);
    stroke(100);
    line(this.x1, this.y1, this.x2, this.y2);
    
    /*
    line(this.cx, this.cy, this.mx, this.my);
    strokeWeight(6);
    stroke(PINK);
    point(this.mx, this.my);
    */
};

Edge.prototype.findLength = function(r2) {
    if (this.d2 < r2) {
        this.hit = true;
        
        var length = sqrt(r2 - this.d2);
        var len1 = min(this.len1, length);
        var len2 = min(this.len2, length);
        this.corner = length > this.len1;
        
        // Find angle to end points
        this.x3 = this.mx + this.dx * len1;
        this.x4 = this.mx - this.dx * len2;
        this.y3 = this.my + this.dy * len1;
        this.y4 = this.my - this.dy * len2;
        
        this.a1 = atan2(this.y3 - this.cy, this.x3 - this.cx);
        this.a2 = atan2(this.y4 - this.cy, this.x4 - this.cx);
    } else {
        this.hit = false;
        this.corner = false;
        this.a1 = this.endAngle;
    }
};

/**************************************
 *  A site
***************************************/
var Site = function(x, y, vertices, r) {
    this.x = x;
    this.y = y;
    this.color = GREEN;
    this.colorT = lerpColor(this.color, WHITE, 0.75);
    
    this.vertices = vertices;
    this.edges = [];
    var n = this.vertices.length;
    for (var i = 0, j = n - 1; i < n; j = i++) {
        this.edges.push(new Edge(this.vertices[i], this.vertices[j], x, y));
    }
    
    this.setRadius(r);
};

Site.prototype.draw = function() {
    // Cell boundary
    if (showing.Cell) {
        this.edges.forEach(function(edge) {
            edge.draw();
        });
    }
    
    // Full circle
    if (showing.Circle) {
        fill(BLUE + (30 << 24));
        strokeWeight(2);
        noStroke();
        ellipse(this.x, this.y, this.d, this.d);
    }
    
    this.drawBoundary();
    
    // Centre
    stroke(BLUE);
    fill(0);
    strokeWeight(6);
    point(this.x, this.y);
    
    for (var i = 0; i < this.vertices.length; i++) {
        point(this.vertices[i][0], this.vertices[i][1]);
       // text(i + 1, this.vertices[i][0] - 13, this.vertices[i][1]);
    }
};

Site.prototype.drawBoundary = function() {
    // Filled polygon of circle and edges
    strokeWeight(2);
    fill(this.colorT);
    
    var n = this.edges.length;
    var e1, e2;
    var a1 = this.edges[n - 1].a1;
    
    for (var i = 0, j = n - 1; i < n; j = i++) {
        e1 = this.edges[j];
        e2 = this.edges[i];
        
        if (e1.hit) {
            // Arc if corners are not joined
            if (!e1.corner) {
                stroke(showing.Outline ? this.color : this.colorT);
                myArc(this.x, this.y, this.d, a1, e1.a1);
            }
            
            // Triangle along edge
            stroke(this.colorT);
            triangle(this.x, this.y, e1.x3, e1.y3, e1.x4, e1.y4);
            if (showing.Outline) {
                stroke(this.color);
                line(e1.x3, e1.y3, e1.x4, e1.y4);
            }
            
            a1 = e1.a2;
        }
    }
    
    // Final arc
    stroke(showing.Outline ? this.color : this.colorT);
    var a2 = this.edges[n - 1].a1;
    if (this.edgesHit) {
        myArc(this.x, this.y, this.d, a1, a2);
    } else if (!e1.corner) {
        ellipse(this.x, this.y, this.d, this.d);
    }
};

Site.prototype.setRadius = function(r) {
    this.r = r;
    this.d = r * 2;
    var r2 = r * r;
    this.edgesHit = false;
    
    this.edges.forEach(function(edge) {
        edge.findLength(r2);
        if (edge.hit) { this.edgesHit = true; }
    }, this);
};

/**************************************
 *  GUI
***************************************/
{
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = color(180);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(20);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, params) {
    Button.call(this, x, y, w, h, params);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/*******************************************************
 *      GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 14);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled) {
        this.trigger();
    }
    this.selected = false;
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    fill(250, 250, 250, 235);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, {name: opt});
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
}
/**************************************
 *  Create objects
***************************************/

var site = new Site(200, 220, vertices, 120);
var toolbar = new Toolbar(5, 5, 120);
toolbar.add(Slider, {
    name: "Radius",
    min: 2,
    max: 200,
    now: 20,
    trigger: function() {
        site.setRadius(this.val);
    }
});
toolbar.addOptions(showing);

/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(250);
    site.draw();    
    toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
};

mouseReleased = function() {
    toolbar.mouseReleased();
};

mouseOut = function() {
    toolbar.mouseReleased();
};

mouseClicked = function() {

};
