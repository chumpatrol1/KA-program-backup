/*********************************************************
 * Modeling how an infectious disease spreads
 * 
 * There are 3 populations in the model:
 *  - Susceptible: people who have yet to get the disease
 *  - Infected: people with the disease
 *  - Removed: people who non-longer infectious,
 *             either due to death or recovery
 * 
 * In every tick of the simulation, people come into
 * contact with one another. Infected people spread
 * the disease to a proportion of susceptible people.
 * A proportion of infected people are removed by
 * death or recovery.
 * 
 * Try changing the rate parameters below and seeing
 * how that effect the progression of the epidemic.
**********************************************************/

/*****************************************************
 *      Rates
 * All rates are per update tick
******************************************************/
// Number of people each infected person contacts each update
var CONTACT_RATE = 0.8;

// Number of people who will be infected for each contact
var INFECTION_RATE = 0.1;

// Number of infected people that recover or die each update
var REMOVAL_RATE = 0.02;

// Rate of infection
var R0 = CONTACT_RATE * INFECTION_RATE / REMOVAL_RATE;

var INITIAL_IMMUNITY = 0;

/*****************************************************
 *  Initial values
******************************************************/
// Total population (constant, so no births or deaths)
var TOTAL_POPULATION = 320000000;

// Number of people initially infected
var INITIAL_INFECTED = 1;

/*****************************************************
 *      Colours
******************************************************/

var BACKGROUND = color(250, 250, 250);
var RED = color(200, 0, 0);
var GREY = color(160, 160, 160);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

/*****************************************************
 *      Values for initial populations
******************************************************/

var populations = {
    Susceptible: {
        counts: [TOTAL_POPULATION * (1 - INITIAL_IMMUNITY) - INITIAL_INFECTED],
        colour: BLUE
    },
    Infected: {
        counts: [INITIAL_INFECTED],
        colour: RED
    },
    Removed: {
        counts: [TOTAL_POPULATION * INITIAL_IMMUNITY],
        colour: GREY
    }
};

// Time in arbitrary units
var t = 0;

/*****************************************************
 *      Values for initial populations
******************************************************/

var MAX_RADIUS = 80;
var radiusScale = MAX_RADIUS / sqrt(TOTAL_POPULATION);
var showTime = false;

/*****************************************************
 *      Draw functions
******************************************************/

// Add commas to large Susceptibles
var formatNumber = function(n) {
    var str = round(n).toString();
    str = str.split(".");
    
    if (str[0].length > 3) {
        return str[0].replace(/(\d)(?=(\d{3})+$)/g, "$1,");
    }
    
    return str;
};

// Write R0 value and time
var drawInfo = function(x, y, w, h) {
    fill(20);
    textAlign(LEFT, TOP);
    textSize(14);
    text("R0 = " + round(R0 * 100) / 100, x + 5, y + 2);
    //text("t = " + t, x + 80, y + 2);
};

// Draw an arrow showing the flux between populations
var drawArrow = function(x1, x2, y, flux) {
    var d = 8;
    
    // Line
    stroke(20);
    strokeWeight(2);
    line(x1 + d, y, x2 - d, y);
    
    // Arrow
    noStroke();
    fill(20);
    triangle(x2 - d + 4, y, x2 - d - 8, y - 4, x2 - d - 8, y + 4);
    
    // Label
    textAlign(CENTER, BASELINE);
    text(formatNumber(flux), (x1 + x2) / 2, y - 5);
};

// Draw each population as a circle with area equal to its size
var drawPopulations = function(gx, gy, gw, gh) {
    noStroke();
    fill(240);
    //rect(gx + 1, gy + 1, gw - 2, gh - 2);

    var sumDiameters = 0;
    var radii = [];
    
    // Calculate radii of population graphs
    for (var pop in populations) {
        var radius = sqrt(populations[pop].counts[t]) * radiusScale;
        radii.push(radius);
        sumDiameters += radius * 2;
    }
    
    // Use radii to find nice x-coordinates for populations
    // The minimum distance between the screen edge and circle edge is 10
    // The minimum distance between the screen edge and circle center is 40
    var border1 = max(40, radii[0] + 10) - radii[0];
    var border2 = max(40, radii[2] + 10) - radii[2];
    var dx = (gw - sumDiameters - border1 - border2) / 2;
    
    // Draw population graphs
    noStroke();
    
    var x = border1;
    var i = 0;
    var maxY = gy + gh - 5;
    var cy = gy + MAX_RADIUS + 5;
    for (var pop in populations) {
        fill(populations[pop].colour);
        
        var r = radii[i];
        x += r;
        // Circle
        ellipse(x, cy, r * 2, r * 2);
        
        // Label
        fill(20);
        textAlign(CENTER, BASELINE);
        textSize(13);
        text(pop, x, maxY - 15);
        text(formatNumber(populations[pop].counts[t]), x, maxY);
        x += r + dx;
        
        i++;
    }
    
    // Draw arrows showing flux between cases
    if (t > 0) {
        var newlyInfected = populations.Susceptible.counts[t - 1] - populations.Susceptible.counts[t];
        var x1 = border1 + radii[0] * 2;
        drawArrow(x1, x1 + dx, cy, newlyInfected);
        
        var newlyRemoved = populations.Removed.counts[t] - populations.Removed.counts[t - 1];
        var x2 = border1 + dx + (radii[0] + radii[1]) * 2;
        drawArrow(x2, x2 + dx, cy, newlyRemoved);    
    }

};

var drawGraph = function(gx, gy, gw, gh) {
    noStroke();
    fill(240);
    //rect(gx + 1, gy + 1, gw - 2, gh - 2);
    
    gh -= (showTime ? 40 : 26);
    gy += gh + 10;
    gx += 42;
    gw -= 60;

    // Gridlines
    strokeWeight(1);
    stroke(200);
    fill(20);
    textAlign(RIGHT, CENTER);
    textSize(11);
    var numGridlines = 4;
    for (var i = 0; i <= numGridlines; i++) {
        var p = i / numGridlines;
        var y = gy - 1 - (gh - 1) * p;
        line(gx, y, gx + gw, y);
        text(formatNumber(p * TOTAL_POPULATION / 1000000), gx - 3, y);
    }
    
    var n = populations.Susceptible.counts.length - 1;
    if (t > 1) {
        strokeWeight(2);
        noFill();

        // Plot lines
        var dx = gw / (n - 1);
        for (var pop in populations) {
            stroke(populations[pop].colour);
            beginShape();
            for (var i = 0; i < n; i++) {
                var y = gy - 1 - (gh - 1) * populations[pop].counts[i] / TOTAL_POPULATION;
                vertex(gx + i * dx, y);
            }
            endShape();   
        }
    }
    
    // Horizontal axis labels
    if (showTime) {
        var numGridlines = 4;
        textAlign(CENTER, TOP);
        if (n > numGridlines * 2) {
            for (var i = 1; i < numGridlines; i++) {
                var p = i / numGridlines;
                var x = gx + p * gw;
                line(x, gy, x, gy + 3);
                text(t - n + round(min(t, 2000) * p), x, gy + 4);
            }   
        }
        
        // Always write beginning and end trial
        textAlign(CENTER, TOP);
        line(gx, gy, gx, gy + 3);
        text(t - n, gx, gy + 4);
        line(gx + gw, gy, gx + gw, gy + 3);
        text(t, gx + gw, gy + 4);
    }
    
    // Axis labels
    textSize(13);
    textAlign(CENTER, CENTER);
    translate(gx, gy - gh / 2);
    rotate(270);
    text("Million people", 0, -32);
    resetMatrix();
    
    text("Time", gx + gw / 2, gy + (showTime ? 23 : 9));
    
    //Axis
    strokeWeight(2);
    stroke(20);
    line(gx, gy, gx + gw, gy);
};

// Calculate the number of people newly infected and recovered
var updatePopulations = function() {
    var susceptibleNow = populations.Susceptible.counts[t];
    var infectedNow = populations.Infected.counts[t];
    var removedNow = populations.Removed.counts[t];
    
    var proportionSusceptible = susceptibleNow / TOTAL_POPULATION;
    
    // Number of susceptible people contacted by infected people
    var infectedContact = infectedNow * proportionSusceptible * CONTACT_RATE;
    
    // Number of people infected this time period
    var newCases = infectedContact * INFECTION_RATE;
    
    // Number of infected people who recover/die
    var removedCase = infectedNow * REMOVAL_RATE;
    
    // Update populations
    populations.Susceptible.counts.push(susceptibleNow - newCases);
    populations.Infected.counts.push(infectedNow + newCases - removedCase);
    populations.Removed.counts.push(removedNow + removedCase);
    
    t++;
};

/*****************************************************
 *      Main loop
******************************************************/

draw = function() {
    // Drawing
    background(BACKGROUND);
    
    drawInfo(0, 0, width, 20);
    drawPopulations(0, 20, width, 200);
    drawGraph(0, 236, width, 160);
    
    if (t === 0 || populations.Infected.counts[t] > 0.5) {
        updatePopulations();   
    }
    
};