/************************************************
 * Test whether a point is inside a quadrilateral
 * by calculating its position using two
 * triangle sides as basis vectors.
*************************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var PURPLE = color(157, 56, 189);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var transparentColors = [
    color(64, 95, 237, 100),
    color(255, 0, 175, 100),
    color(28, 173, 123, 100)
];

var CONTROL_POINT_SIZE = 12;

var dragX, dragY;
var points, point1, point2, point3, point4, point5;

var selected = false;

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

var subtractVectors = function(v1, v2) {
    return { x: v1.x - v2.x, y: v1.y - v2.y };
};

/****************************************
 *  Draggable point object
****************************************/

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    var oldX = this.x;
    var oldY = this.y;
    this.x = mouseX + dragX;
    this.y = mouseY + dragY;
    
    // Check points don't overlap
    if (point1.x === point2.x && point1.y === point2.y) {
        this.x = oldX;
        this.y = oldY;
    }
};

draggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

/****************************************
 *      Create objects
****************************************/

point1 = new draggablePoint(width * 0.4, height * 0.1, ORANGE, "A");
point2 = new draggablePoint(width * 0.25, height * 0.9, ORANGE, "B");
point3 = new draggablePoint(width * 0.8, height * 0.8, ORANGE, "C");
point4 = new draggablePoint(width * 0.9, height * 0.4, ORANGE, "D");
point5 = new draggablePoint(width * 0.5, height * 0.5, PINK);

var points = [point1, point2, point3, point4];
var selectables = [point1, point2, point3, point4, point5];

/****************************************
 *      Calculation
****************************************/

// Test whether a point is inside a quadrilateral
// defined by an array of points
var insideQuad = function(point, quadPoints) {
    // Calculate vectors
    var v1 = subtractVectors(quadPoints[1], quadPoints[0]);
    var v2 = subtractVectors(quadPoints[2], quadPoints[0]);
    var v3 = subtractVectors(quadPoints[3], quadPoints[0]);
    var vp = subtractVectors(point, quadPoints[0]);
    
    // Calculate dot products
    var dot11 = dotProduct(v1, v1);
    var dot12 = dotProduct(v1, v2);
    
    var dot22 = dotProduct(v2, v2);
    
    var dot33 = dotProduct(v3, v3);
    var dot32 = dotProduct(v3, v2);
    
    var dot1p = dotProduct(v1, vp);
    var dot2p = dotProduct(v2, vp);
    var dot3p = dotProduct(v3, vp);
    
    // Calculate barycentric coordinates of two triangles
    var d = 1 / (dot11 * dot22 - dot12 * dot12);
    var u = (dot22 * dot1p - dot12 * dot2p) * d;
    var v = (dot11 * dot2p - dot12 * dot1p) * d;
    
    var d2 = 1 / (dot33 * dot22 - dot32 * dot32);
    var u2 = (dot22 * dot3p - dot32 * dot2p) * d2;
    var v2 = (dot33 * dot2p - dot32 * dot3p) * d2;
    
    return (u >= 0 && v >= 0 && u + v < 1) || (u2 >= 0 && v2 >= 0 && u2 + v2 < 1);
};

/****************************************
 *      Display functions
****************************************/

var drawTriangle = function() {
    var pointIsInside = insideQuad(point5, points);
    
    // Filled triangle
    noStroke();
    if (pointIsInside) {
        fill(transparentColors[0]);    
    } else {
        fill(200);
    }
    
    quad(points[0].x, points[0].y, points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y);
    
    stroke(255);
    //line(points[0].x, points[0].y, points[2].x, points[2].y);
    
    // Labels
    textSize(14);
    textAlign(CENTER, CENTER);

    var n = points.length;    
    for (var i = 0; i < n; i++) {
        var p1 = points[i];
        var p2 = points[(i + n - 1) % n];
        var p3 = points[(i + 1) % n];
        
        // Get label position
        var dx = p2.x + p3.x - 2 * p1.x;
        var dy = p2.y + p3.y - 2 * p1.y;
        var d = sqrt(dx * dx + dy * dy);
        var tx = p1.x - dx / d * 16;
        var ty = p1.y - dy / d * 16;

        fill(points[i].color);    
        text(points[i].name, tx, ty);
    }
    
    // Line from B to P
    if (pointIsInside) {
        stroke(BLUE);
        point5.color = BLUE;
    } else {
        stroke(200);
        point5.color = color(200, 200, 200);
    }
    
    strokeWeight(2);
    //line(point4.x, point4.y, point2.x, point2.y);
    
    for (var i = 0; i < selectables.length; i++) {
        selectables[i].draw();
    }
    
};

/****************************************
 *      Main loop
****************************************/

var draw = function() {
    background(BACKGROUND);
    drawTriangle();
};

/****************************************
 *      Event handling
****************************************/

mousePressed = function() {
    for (var i = 0; i < selectables.length; i++) {
        if (selectables[i].mouseover()) {
            selected = selectables[i];
            dragX = selected.x - mouseX;
            dragY = selected.y - mouseY;
        }
    }
};

mouseReleased = function() {
    selected = false;
};

mouseOut = function() {
    mouseReleased();
};

mouseDragged = function() {
    if (selected) {
        selected.move();
    }
};