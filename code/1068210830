/*
    Draws a 3D object consisting of triangular or rectangular faces.
    Faces are shaded depening on their orientation relative to the light source.
    
    Define faces counterclockwise
    
    Use the mouse to spin the object.
    
    Currently objects must be convex.
*/

// Move to centre of screen
translate(200.5, 200.5);
stroke(2, 4, 10);
var rotateAngle = 2;
var faceColor = [80, 80, 250];

var s = {
    nodes: [[-30, -120, -30], [ 30, -120, -30],
            [ 30, -120,  30], [-30, -120,  30],
            [-80,  -60, -40], [-40,  -60, -80],
            [ 40,  -60, -80], [ 80,  -60, -40],
            [ 80,  -60,  40], [ 40,  -60,  80],
            [-40,  -60,  80], [-80,  -60,  40],
            [-80,   40, -40], [-40,   40, -80],
            [ 40,   40, -80], [ 80,   40, -40],
            [ 80,   40,  40], [ 40,   40,  80],
            [-40,   40,  80], [-80,   40,  40],
            [-30,  100, -30], [ 30,  100, -30],
            [ 30,  100,  30], [-30,  100,  30]
            ],
    faces: [[3,2,1,0],
            [4,0,5], [1,7,6], [2,9,8],[3,11,10],
            [0,1,6,5], [1,2,8,7], [2,3,10,9], [0,4,11,3],
            [4,5,13,12],[5,6,14,13],[6,7,15,14],[7,8,16,15],
            [8,9,17,16],[9,10,18,17],[10,11,19,18],[11,4,12,19],
            [12,13,20], [14,15,21], [16,17,22],[18,19,23],
            [13,14,21,20],[15,16,22,21],[17,18,23,22],[19,12,20,23],
            [20,21,22,23]]
};

// Objects
var objects = [s];

var subtractVectors = function(v1, v2){
    return [[v1[0] - v2[0]],
            [v1[1] - v2[1]],
            [v1[2] - v2[2]]];
};

var normaliseVector = function(v) {
    var d = sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
    return [v[0]/d, v[1]/d, v[2]/d];
};

var normalOfPlane = function(face, nodes) {
    var n1 = nodes[face[0]];
    var n2 = nodes[face[1]];
    var n3 = nodes[face[2]];
    
    var v1 = subtractVectors(n1, n2);
    var v2 = subtractVectors(n1, n3);
    
    var v3 = [[v1[1]*v2[2] - v1[2]*v2[1]],
              [v1[2]*v2[0] - v1[0]*v2[2]],
              [v1[0]*v2[1] - v1[1]*v2[0]]];
              
    return v3;
};

var dotProduct = function(v1, v2){
    // Assume everything has 3 dimensions
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
};

var currentX = false;
var currentY = false;

var translate3D = function(x, y, z, nodes) {
    for (var i = 0; i < nodes.length; i+=1) {
        nodes[i] = [nodes[i][0]+x, nodes[i][1]+y, nodes[i][2]+z];
    }
};

var rotateY3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;

    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [ct*x + st*z, y, -st*x + ct*z];
    }
};

var rotateX3D = function(theta, nodes){
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;
    var obj;
    
    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [x, ct*y - st*z, st*y + ct*z];
    }
};

var lightVector = normaliseVector([1,0,-2]);

var draw = function() {
    var i, o;
    var face;
    var nodes;
    var node1;
    var node2;
    
    background(255, 255, 255);

    for (o in objects) {
        var obj = objects[o];
        nodes = obj.nodes;
        
        if ('edges' in obj) {
            var edges = obj.edges;
        
            for (i = 0; i < edges.length; i+=1) {
                node1 = nodes[edges[i][0]];
                node2 = nodes[edges[i][1]];
                line(node1[0], node1[1], node2[0], node2[1]);
            }     
        }
        
    if ('faces' in obj) {
      for (var f in obj.faces) {
        face = obj.faces[f];
        var fnorm = normalOfPlane(face, nodes);
        if (fnorm[2] < 0) {
          var l = dotProduct(lightVector, normaliseVector(fnorm));
          fill(l*faceColor[0], l*faceColor[1], l*faceColor[2]);
          if (face.length === 3) {
            triangle(nodes[face[0]][0], nodes[face[0]][1],
                     nodes[face[1]][0], nodes[face[1]][1],
                     nodes[face[2]][0], nodes[face[2]][1]);
          } else {
            quad(nodes[face[0]][0], nodes[face[0]][1],
                 nodes[face[1]][0], nodes[face[1]][1],
                 nodes[face[2]][0], nodes[face[2]][1],
                 nodes[face[3]][0], nodes[face[3]][1]);
          }
        }
      }
    }
        
    }

    if (mouseIsPressed) {
        if (currentX !== false) {
            var theta1 = -(currentX - mouseX) * PI / 10;
            var theta2 = (currentY - mouseY) * PI / 10;
            
            for (o in objects) {
                nodes = objects[o].nodes;
                rotateY3D(theta1, nodes);
                rotateX3D(theta2, nodes);    
            }
        }
        currentX = mouseX;
        currentY = mouseY;
    } else {
        currentX = false;
    }
};

var mouseOut = function(){
    mouseIsPressed = false;
};

var keyPressed = function() {
    var f = 0;
    var d = 0;
    if (keyCode === LEFT) {
        f = rotateY3D;
        d = 2;
    } else if (keyCode === RIGHT) {
        f = rotateY3D;
        d = -2;
    } else if (keyCode === UP) {
        f = rotateX3D;
        d = -2;
    } else if (keyCode === DOWN) {
        f = rotateX3D;
        d = 2;
    }
    
    if (f !== 0) {
        for (var obj in objects) {
                f(d, objects[obj].nodes); 
        }
    }
    
};