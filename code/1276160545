/********************************************************
 * Runs the Monty Hall problem continually,
 * graphing the results of switching or not switching.
*********************************************************/

var sky = getImage("space/background");
var grass = getImage("cute/GrassBlock");
var MontyHall = getImage("cute/CharacterBoy");
var closedChest = getImage("cute/ChestClosed");
var openedChest = getImage("cute/ChestOpen");
var ladybird = getImage("cute/EnemyBug");
var gem = getImage("cute/GemOrange");
var myFont = createFont("Times", 20);
var shading = getImage("cute/ShadowSouth");

var chests;
var chestY = 250;
var chestW = 75;
var chestH = 125;

var prizeChest;
var chestSelected, chestOpened;
var win, choice;

var results = {
    stick: { win: 0, lose: 0, total: 0 },
    switc: { win: 0, lose: 0, total: 0 }
};

var mode;
var switchButton, stickButton;

var Chest = function(x, y, contents) {
    this.x = x;
    this.opened = false;
    this.selected = false;
    this.contents = contents;
    
    this.draw = function() {
        if (this.selected) {
            noStroke();
            fill(255, 0, 0, 120);
            rect(x-5, y+31, chestW+10, chestH-25, 10);
        }
        
        if (this.opened) {
            image(openedChest, x, y, chestW, chestH);
            translate(x - 16,y - 5);
            rotate(-20);
            image(this.contents, 0, 0, chestW, chestH);  
            resetMatrix();
        } else {
            image(closedChest, x, y, chestW, chestH);   
        }
    };
};

var intialiseChests = function() {
    var chests = [];
    for (var c=0; c<3; c++) {
        var chest;
        if (c === prizeChest) {
            chest = new Chest(c*100 + 20, chestY, gem);
        } else {
            chest = new Chest(c*100 + 20, chestY, ladybird);
        }
        chests.push(chest);
    }
    return chests;
};


var newGame = function() {
    mode = "Choice1";
    prizeChest = floor(random(0, 3));
    chests = intialiseChests();
};
newGame();

var Button = function(label) {
    this.label = label;
    this.mouseOver = false;
    
    this.draw = function(x, y) {
        textAlign(LEFT, BASELINE);
        this.x1 = x;
        this.y = y;
        text(this.label, this.x1, this.y);
        this.x2 = this.x1 + textWidth(this.label);
        
        if (this.mouseOver) {
            stroke(40, 40, 40);
            strokeWeight(2);
            line(this.x1, this.y+2, this.x2, this.y+2);   
        }
    };
    
    this.isMouseOver = function() {
        if (mouseX >= this.x1 && mouseX <= this.x2 &&
            mouseY >= this.y-20 && mouseY <= this.y) {
                this.mouseOver = true;
            } else {
                this.mouseOver = false;
            }
    };
};

var restartButton = new Button("Play Again");

var speechBubble1 = function(x, y) {
    textAlign(LEFT, BASELINE);
    text("One chest contains a gem.", x, y+22);
    text("In the other two are ladybirds.", x, y+46);
    text("Click on the one you think has the gem.", x, y+70);};

var speechBubble2 = function(x, y) {
    textAlign(LEFT, BASELINE);
    var txt = "You chose chest "+(chestSelected+1)+".";
    text(txt, x, y+22);
    text("Chest " + (chestOpened+1) + " contained a ladybird.", x, y+46);
    
    txt = "Do you want to ";
    text(txt, x, y+70);
    x +=textWidth(txt);
    stickButton.draw(x, y + 70);
    
    txt = " or ";
    x = stickButton.x2;
    text(txt, x, y+70);
    x +=textWidth(txt);
    switchButton.draw(x, y + 70);
    text("?", switchButton.x2, y+70);
};

var speechBubble3 = function(x, y) {
    textFont(myFont, 22);
    textAlign(CENTER, BASELINE);
    if (win) {
        text("You picked the gem!\nYou win!", x, y+24);
    } else {
        text("You picked the bug!\nYou lose!", x, y+24);
    }
    restartButton.draw(x-50, y + 74);
};

var speechBubble = function() {
    var x = 48;
    var y = 185;
    var width = 340;
    var height = 82;
    var tx = 318;
    var ty = y + height - 2;
    
    fill(240, 240, 255);
    stroke(220, 220, 230);
    strokeWeight(3);
    rect(x, y, width, height, 12);
    
    noStroke();
    triangle(tx, ty, tx+18, ty+30, tx+36, ty);
    stroke(220, 220, 230);
    line(tx, ty+2, tx+18, ty+30);
    line(tx+36, ty+2, tx+18, ty+30);
    
    textFont(myFont, 20);
    fill(40, 40, 40);
    
    if (mode === "Choice1") {
        speechBubble1(x + 8, y);
    } else if (mode === "Choice2") {
        speechBubble2(x + 8, y);
    } else if (mode === "Reveal") {
        speechBubble3(x + width/2, y);
    }
};

var drawBar = function(x, y, result) {
    if (result.total) {
        stroke(0, 0, 0);
        strokeWeight(1);
        fill(191, 17, 17);
        rect(x, y, 252, 36);
        var d = 251 * result.win / result.total;
        
        if (result.win) {
            fill(16, 163, 16);
            noStroke();
            rect(x+1, y+1, d, 35);
        }
        
        fill(250, 250, 250);
        textAlign(CENTER, CENTER);
        textSize(16);
        
        if (result.win) {
            text("wins: " + result.win, x + d/2, y+18);
        }
        
        if (result.lose) {
            text("loses: " + result.lose, x + (d+250)/2, y+18);
        }
    }
};

var drawResults = function() {
    textSize(20);
    textAlign(LEFT, BASELINE);
    fill(255, 200, 0);
    
    text("Stick: " + results.stick.total, 20, 40);
    text("Switch: " + results.switc.total, 20, 90);

    drawBar(110, 16, results.stick);
    drawBar(110, 66, results.switc);

};

var draw = function() {
    image(sky, 0, 0);
    
    // Grass
    for (var g=0; g<8; g++) {
        image(grass, g*50, 325, 50, 50);
        image(grass, g*50, 350, 50, 50);
    }
    
    for (var c=0; c<3; c++) {
        chests[c].draw();
    }
    
    scale(1.1, 1.1);
    image(MontyHall, 270, 196);
    resetMatrix();
    speechBubble();
    drawResults();
};

// Initial choice of chest
// Open a chest that isn't selected
var chooseChest = function(chest) {
    chestSelected = chest;
    chests[chest].selected = true;
    
    mode = "Choice2";
    stickButton = new Button("STICK");
    switchButton = new Button("SWITCH");
    
    if (prizeChest !== chest) {
        // Open the chest not selected and without the prize
        chestOpened = 3 - prizeChest - chest;
    } else {
        // Open a random chest other than the selected one
        var rand = floor(2 * random());
        chestOpened = [(chest+1) % 3, (chest+2) % 3][rand];
    }
    
    chests[chestOpened].opened = true;
};

var clickChest = function() {
    if (mouseY > chestY && mouseY < chestY + chestH) {
        for (var c=0; c<3; c++) {
            if (mouseX > chests[c].x && mouseX < chests[c].x + chestW) {
                chooseChest(c);
            }
        }
    }
};

var revealChest = function() {
    chests[chestSelected].opened = true;
    results[choice].total++;
    
    if (chestSelected === prizeChest) {
        win = true;
        results[choice].win++;
    } else {
        win = false;
        results[choice].lose++;
    }
    mode = 'Reveal';
};

var mouseClicked = function() {
    if (mode === 'Choice1') {
        clickChest();
    } else if (mode === 'Choice2') {
        if (stickButton.mouseOver) {
            choice = 'stick';
            revealChest();
        } else if (switchButton.mouseOver) {
            choice = 'switc';
            chests[chestSelected].selected = false;
            chestSelected = 3 - chestSelected - chestOpened;
            chests[chestSelected].selected = true;
            revealChest();
        }
    } else if (mode === 'Reveal' && restartButton.mouseOver){
        newGame();
    }
};

var mouseMoved = function() {
    if (mode === 'Choice2') {
        stickButton.isMouseOver();
        switchButton.isMouseOver();   
    } else if (mode === 'Reveal') {
        restartButton.isMouseOver(); 
    }
};