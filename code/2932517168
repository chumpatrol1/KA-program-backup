/*************************************************
 * TODO:
 *  Show image
 *  Light from blue orb should get blocked by yellow orb
**************************************************/

// Standard colours and variables
var BACKGROUND = color(0);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var showing = {
    'Incoming light': true,
    Pinhole: true,
};

// GUI
{
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, {name: name});
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 13);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}
/*******************************************************
 *      GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, 240);
    rect(this.x, this.y, this.w, this.h, 8);
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 1;
        this.h += h + 1;
    }
    
    this.h += 5;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseDragged();
    }
};
}
}
/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = 16 + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= 8;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};
}
/**********************************************************
 * Memory obj object - basically a circle
**********************************************************/

var Orb = function(x, y, z, r, fill) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.r = r;
    this.r2 = r * r;
    this.d = r * 2;
    this.fill = fill;
    this.stroke = lerpColor(fill, color(255), 0.5);
};

Orb.prototype.draw = function() {
    // Glow
    noStroke();
    fill(this.stroke + (30 << 24));
    var d = this.d + 2;
    for (var i = 0; i < 8; i++) {
        d += 2;
        ellipse(this.x, this.y, d, d);
    }
    
    strokeWeight(3);
    stroke(this.stroke);
    fill(this.fill);
    ellipse(this.x, this.y, this.d - 2, this.d - 2);
    
    // Reflection
    fill(this.stroke);
    noStroke();
    pushMatrix();
    translate(this.x + this.r * 0.5, this.y - this.r * 0.5);
    rotate(45);
    ellipse(0, 0, this.r * 0.35, this.r * 0.15);
    popMatrix();
    
    if (this.cx) {
        stroke(255, 0, 0);
        strokeWeight(8);
        point(this.cx, this.cy);
    }
};

/**********************************************************
 *      Image plane
 * A plane that collects reflected light and stores its
 * color in a 2D array.
**********************************************************/

var ImagePlane = {
    x: width - 10,
    y: 20,
    height: height - 40,
    y2: height - 20,
    
    draw: function() {
        stroke(200);
        strokeWeight(5);
        line(this.x, this.y, this.x, this.y2);
    },
};

/**********************************************************
 *      Pinhole
 * A barrier with a hole in it
**********************************************************/

var Pinhole = {
    x: width - 180,
    y: height / 2,
    
    draw: function() {
        stroke(160);
        strokeWeight(3);
        line(this.x, this.y1 - 2, this.x, 0);
        line(this.x, this.y2 + 2, this.x, height);
    },
    
    setRadius: function(r) {
        this.y1 = this.y - r;
        this.y2 = this.y + r;
    }
};
Pinhole.setRadius(30);

/**********************************************************
 * Creation of objects
**********************************************************/

var toolbar = new Toolbar(5, 298, 128);
toolbar.add(Slider, {
    name: "Pinhole size",
    min: 1,
    max: 100,
    now: 30,
    trigger: function() {
        Pinhole.setRadius(this.val);
    }
});
toolbar.add(Slider, {
    name: "Focal distance",
    min: 10,
    max: 250,
    now: 170,
    trigger: function() {
        Pinhole.x = ImagePlane.x - this.val;
    }
});

var orbs = [
    new Orb(90, 100, 0, 70, color(100, 160, 255)),
    new Orb(260, 260, 0, 70, color(254, 210, 90)),
];

var drawLightPath = function() {
    if (mouseX < width - 20 || mouseY < ImagePlane.y || mouseY > ImagePlane.y2) {
        return;
    }
    
    // Point on image plane
    var x = ImagePlane.x;
    var y = mouseY;
    
    var orb, dx, dy, d, d2, d3, w;
    var bx, by, bx1, by1, bx2, by2, vx, vy, by3, by4;
    
    noStroke();
    
    // Calculate region of orbs visible
    for (var i = 0; i < orbs.length; i++) {
        orb = orbs[i];
        dx = orb.x - x;
        dy = orb.y - y;
        
        // Distance to orb center squared
        d = dx * dx + dy * dy;
        
        // Distance to orb tangent squared
        d2 = d - orb.r2;
        
        // Normalise vector to orb
        d = sqrt(d);
        dx /= d;
        dy /= d;
        
        // Width of triangle tangent to orb
        w = 1 + orb.r * sqrt(d2) / d;
        
        // Distance to base of tangent triangle
        d3 = sqrt(d2 - w);
        
        // Point at base of tangent triangle
        bx = x + dx * d3;
        by = y + dy * d3;
        
        dx *= w;
        dy *= w;
        
        // Triangle base corners
        bx1 = bx + dy;
        by1 = by - dx;
        bx2 = bx - dy;
        by2 = by + dx;
        
        // Normalised vector to imagePlane point
        vx = bx1 - x;
        vy = by1 - y;
        d = sqrt(vx * vx + vy * vy);
        vx /= d;
        vy /= d;
        by3 = by1 + (Pinhole.x - bx1) * vy / vx;
        
        // Top
        vx = bx2 - x;
        vy = by2 - y;
        d = sqrt(vx * vx + vy * vy);
        vx /= d;
        vy /= d;
        by4 = by2 + (Pinhole.x - bx2) * vy / vx;
        
        fill(orb.fill + (220 << 24));
        quad(bx1, by1, bx2, by2, Pinhole.x, by4, Pinhole.x, by3);
        
        // Block by pinhole
        by3 = min(by3, Pinhole.y2);
        by4 = max(by4, Pinhole.y1);
        
        if (by3 > by4) {
            // Light through pinhole
            triangle(x, y, Pinhole.x, by4, Pinhole.x, by3);
        }
    }
    
    // Highlight point
    noFill();
    strokeWeight(2);
    stroke(255);
    ellipse(x, y, 12, 12);
    
    // Draw field of view
    var dx = x - Pinhole.x;
    var dy1 = y - Pinhole.y1;
    var dy2 = y - Pinhole.y2;
    var d1 = sqrt(dx * dx + dy1 * dy1);
    var d2 = sqrt(dx * dx + dy2 * dy2);
    
    noStroke();
    fill(255, 255, 255, 160);
    /*
    triangle(x, y,
        x - 1000 * dx / d1, y - 1000 * dy1 / d1,
        x - 1000 * dx / d2, y - 1000 * dy2 / d2);
      */  
};

/**********************************************************
 *  Main loop
**********************************************************/

var i;
draw = function() {
    background(BACKGROUND);
    
    ImagePlane.draw();
    drawLightPath();
    
    for (i = 0; i < orbs.length; i++) {
        orbs[i].draw();
    }
    
    if (showing.Pinhole) {
        Pinhole.draw();
    }
    
    toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/
{
keyPressed = function() {
    //println(keyCode);
};

mousePressed = function() {
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
};

mouseReleased = function() {
    toolbar.mouseReleased();
};

mouseOut = function() {
    toolbar.mouseReleased();
};
}
