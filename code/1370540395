 /****************************************************

 *****************************************************/
// Function, f(x), under which we are finding the area.
//var f = function(x) { return pow(4*x-1, 3)/120 -3*x + 16; };
var f1 = function(x) { return pow(x-2, 3)/6 + 2*x + 120; };
var f2 = function(x) { return pow(2*x+5, 2) + 3*x - 80; };

// Graph properties
var minX = -10;
var maxX =  5;

// Display parameters
var graphWidth = 300;
var graphHeight = 300;

var colours = [color(255, 0, 0), color(0, 255, 0)];

var graph1;
var sliderSelected = false;
var sliderSize = 16;
var sliderX = 0;

var functionToArray = function(f, a, b, width) {
    // Create an array of length width containing the values of f(x)
    // from x = a to x = b (a must be <b).

    var resolution = (b - a) / width;
    var firstPoint = f(a);
    var yValues = [firstPoint];
    var maxY = firstPoint;
    var minY = firstPoint;
    
    for (var x=a+resolution; x<=b; x+=resolution) {
        var y = f(x);
        if (y > maxY) { maxY = y; }
        else if (y < minY) { minY = y; }
        yValues.push(y);
    }
    
    return [yValues, minY, maxY];
};

// Graph display parameters
var Graph = function(gx, gy, gw, gh) {
    this.originX = gx;
    this.originY = gy;
    this.width = gw;
    this.height = gh;
    this.functions = [];
    this.data = [];
    
    // Points opposite the origin
    this.gx2 = gx + gw;
    this.gy2 = gy - gh;
    
    this.setXAxis = function(a, b) {
        this.minX = a;
        this.maxX = b;
        this.scaleX = this.width / (this.maxX - this.minX);
        this.tickX = floor((this.maxX - this.minX) / 10);
    };
    
    this.setYAxis = function(a, b) {
        this.minY = a;
        this.maxY = b;
        this.scaleY = this.height / (this.maxY - this.minY);
        this.tickY = floor((this.maxY - this.minY) / 10);
    };
    
    this.plotX = function(x) {
        return this.originX + this.scaleX * (x - this.minX);
    };
    
    this.plotY = function(y) {
        return this.originY - this.scaleY * (y - this.minY);
    };
    
    this.addFunction = function(f) {
        var graphData = functionToArray(f, this.minX, this.maxX, this.width);
        this.functions.push(f);
        this.data.push(graphData[0]);
        var minY = ceil(graphData[1]);
        var maxY = ceil(graphData[2]);
        
        if (this.minY === undefined) {
            this.minY = minY;
        }
        if (this.maxY === undefined) {
            this.maxY = maxY;
        }

        this.tickY = ceil((this.maxY - this.minY) / 5);
        this.maxY = ceil(this.maxY / this.tickY) * this.tickY;
        this.minY = floor(this.minY / this.tickY) * this.tickY;
        this.scaleY = this.height / (this.maxY - this.minY);
    };
    
    this.draw = function() {
        // Draw the axes and gridlines for a graph
    
        var x0 = this.plotX(0);
        var y0 = this.plotY(0);
    
        strokeWeight(1);
        fill(250, 250, 250);
        textSize(12);
        textAlign(CENTER, TOP);
                    
        stroke(25, 25, 25);
        for (var x=this.minX; x<=this.maxX; x+=this.tickX) {
            var x1 = this.plotX(x);
            line(x1, this.gy2, x1, this.originY + 4);
            text(x, x1 + 1, this.originY + 5);
        }
        
        textAlign(RIGHT, CENTER);
        for (var y=this.minY; y<=this.maxY; y+=this.tickY) {
            var y1 = this.plotY(y);
            line(this.originX - 3, y1, this.gx2, y1);
            text(y, this.originX - 7, y1);
        }
        
        stroke(240, 240, 240);
        strokeWeight(1);
        line(x0, this.originY, x0, this.gy2);
        line(this.originX, y0, this.gx2, y0);
        
        // Axis labels
        fill(250, 250, 250);
        textAlign(CENTER, BASELINE);
        textSize(14);
        text("x", this.originX + this.width/2, this.originY + 32);
        
        translate(this.originX - 28, this.originY - this.height/2);
        rotate(270);
        text("y", 0, 0);
        resetMatrix();
        
        for (var i=0; i<this.data.length; i++) {
            this.plotFunction(this.data[i], colours[i]);   
        }
    };
    
    this.plotFunction = function(data, col) {
        strokeWeight(2);
        stroke(col);
        
        if (this.minX === undefined) { this.minX = 0; }
        
        var y1 = this.plotY(data[0]);
        var dx = this.width / data.length;
        var x = this.plotX(this.minX);
        
        for (var i=1; i<=data.length-1; i++) {
            var y2 = this.plotY(data[i]);
            if (y1 <= this.originY && y1 >= this.gy2 &&
                y2 <= this.originY && y2 >= this.gy2) {
                line(x, y1, x + dx, y2);
            }
            x += dx;
            y1 = y2;
        }
    };
};

var drawSlider = function() {
    stroke(255, 255, 255, 128);
    strokeWeight(2);
    var x = graph1.plotX(sliderX);
    var y = graph1.plotY(graph1.functions[0](sliderX));
    
    if (sliderSelected) { fill(250, 250, 250); }
    else { fill(80, 80, 80, 128); }
    ellipse(x, y, sliderSize, sliderSize);
    
    fill(250, 250, 255);
    textAlign(LEFT, BASELINE);
    var sx = round(100 * sliderX) / 100;
    var sy = round(100 * graph1.functions[0](sliderX)) / 100;
    text("Slider at (" + sx + ", " + sy + ")", 40, 375);
};

graph1 = new Graph(60, 320, graphWidth, graphHeight);
graph1.setXAxis(minX, maxX);
//graph1.setYAxis(-5, 50);
graph1.addFunction(f1);
graph1.addFunction(f2);

var draw = function() {
    background(0, 0, 0);
    graph1.draw();
    drawSlider();
};

var mousePressed = function() {
    var x = graph1.plotX(sliderX);
    var y = graph1.plotY(graph1.functions[0](sliderX));
    
    if (abs(mouseX - x) <= sliderSize &&
        abs(mouseY - y) <= sliderSize) {
        sliderSelected = true;
    }
};

var mouseDragged = function() {
    if (sliderSelected) {
        var x = (mouseX - graph1.originX) / graph1.scaleX + minX;
        var y = graph1.plotY(f1(x));
        if (y <= graph1.originY && y >= graph1.gy2) {
            sliderX = constrain(x, minX, maxX);
        }
    }
};

var mouseReleased = function() {
    sliderSelected = false;
};

var mouseOut = function() {
    sliderSelected = false;
};