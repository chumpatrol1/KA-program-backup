/*
    Todo:
*/

frameRate(30);

//Globals
var keysDown = []; //For key events 
var players = [];
var critters = [];
var bubbles = [];
var buttons = [];
var sliders = [];
var food = [];
var playerProjectiles = [];
var enemyProjectiles = [];
var mode = 0;
var t = 0;
var dt = 0.1;
var bodyPartType = 1;
var view_xview = 0;
var view_yview = 0;

var debug_mode = false;

//Slider values
var minFood = {Value: 2};
var maxFood = {Value: 25};
var foodSpeed = {Value: 0.5};
var agility = {Value: 3};
var speed = {Value: 3};

//Constants
var GAME_TITLE = "Petri Dish";
var W = 87;
var A = 65;
var S = 83;
var D = 68;
var SPACE = 32;
var REPRODUCTION_THRESHOLD = 3;
var MUTATION_PROBABILITY = 0.2;
var MUTATION = 0.5;
var FOOD_GROW_TIME = 20;

//Classes

var Slider = function(x, y, w, h, min, max, obj, s){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.min = min;
    this.max = max;
    this.obj = obj;
    this.s = s;
    
    this.drawSlider = function()
    {
        translate(this.x, this.y);
        
        rect(0, 0, this.w, this.h);
        ellipse(this.w/2, this.h -(this.obj.Value/this.max)-4, 10, 10);
        rotate(-90);
        textSize(16);
        text(this.s, -this.h, 0);
        
        resetMatrix();
    };
};
var s = new Slider(370, 100, 10, 100, 0, 20, minFood, "Min Food");
//sliders.push(s);

var Button = function(x, y, w, h, callback, p1, s){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.s = s;
    this.callback = callback;
    this.r = random(50, 200);
    this.g = random(50, 200);
    this.b = random(50, 200);
    
    this.drawButton = function(){
        rectMode(CORNER);
        strokeWeight(3);
        stroke(this.r-20, this.g-20, this.b-20);
        fill(this.r+20, this.g+20, this.b+20);
        rect(this.x, this.y, this.w, this.h, 10);
        
        fill(255, 255, 255);
        textSize(24);
        text(this.s, this.x+this.w/2-textWidth(this.s)/2, this.y+this.h/2+9);
    };
    
    this.click = function(){
        this.callback(p1);
    };
};

var Bubble = function(){
    this.x = round(random(1)) * 300 + random(100);
    this.y = 420;
    this.radius = random(5, 15);
    this.vspeed = random(-1, -2);
};
    
Bubble.prototype.draw = function(){
    this.y += this.vspeed;
    noFill();
    stroke(255, 255, 255);
    strokeWeight(2);
    ellipse(this.x, this.y, this.radius/2,
    this.radius/2); 
};

var BodyPart = function(type){
    this.type = type;
};

var Critter = function()
{
    this.x = 200;
    this.y = 200;
    this.hspeed = 0;
    this.vspeed = 0;
    this.r = random(50, 200);
    this.g = random(50, 200);
    this.b = random(50, 200);
    this.energy = REPRODUCTION_THRESHOLD - 1;
    this.movementSpeed = 1;
    this.agility = 3;
    this.metabolism = 1;
    this.finType = 0;
    this.angle = 0;
    this.canMove = false;
    this.bodyParts = 0;
    this.fins = 0;
    this.dna = [];
    
    this.init = function()
    {
        for(var i=0; i < 9; i++)
        {
            this.dna.push([]);
            for(var j=0; j < 9; j++)
            {
                var b = new BodyPart(-1);
                this.dna[i].push(b);
            }
        }
        var b = new BodyPart(2);
        this.dna[4][4] = b;
    };
    
    this.calcMass = function()
    {
        for(var i=0; i < 9; i++)
        {
            for(var j=0; j < 9; j++)
            {
                if (this.dna[i][j].type === 1)
                {
                    this.fins++;
                }
                if(this.dna[i][j].type !== -1)
                {
                    this.bodyParts++;
                }
                
            }
        }
    };
    
    this.diceRoll = function(probability) {
        return random(0, 1) < min(1, probability);
    };
    
    this.copy = function(model)
    {
        for(var i=0; i < 9; i++){
            this.dna.push([]);
            for(var j=0; j < 9; j++){
                var b = new BodyPart(-1);
                b.type = model.dna[i][j].type;
                this.dna[i].push(b);
            }
        }
        this.x = model.x;
        this.y = model.y;
        this.r = model.r;
        this.g = model.g;
        this.b = model.b;
        this.energy = model.energy/2;
        this.movementSpeed = model.movementSpeed;
        this.agility = model.agility;
        this.finType = model.finType;
        this.metabolism = model.metabolism;
        this.calcMass();
    };
    
    this.reproduce = function()
    {
        var c;
        
        if (this.energy < REPRODUCTION_THRESHOLD)
        {
            return;
        }
        
        c = new Critter();
        c.copy(this);
        c.mutate();
        critters.push(c);
        this.energy /=2 ;
    };
    
    this.mutate = function()
    {   
        var i, j;
        for(i = 0; i < this.dna.length; i++){
            for(j = 0; j < this.dna[i].length; j++){
                if (this.dna[i][j].type !== -1 && this.diceRoll(MUTATION_PROBABILITY))
                {
                    var a = floor(Math.random()*3) - 1;
                    var b = floor(Math.random()*3) - 1;
                    if ((i+a) >= 0 && (i+a) <= this.dna.length &&
                    (j+b) >= 0 && (j+b) <= this.dna[i].length)
                    {
                        if (this.diceRoll(0.45))
                        {
                            this.dna[i+a][j+b].type = floor(Math.random()*4);
                        }
                        else
                        {
                            this.dna[i+a][j+b].type = -1;
                        }
                    }
                }
            }
        }
        if (this.diceRoll(MUTATION_PROBABILITY*1.5))
        {
            this.movementSpeed += random(-MUTATION, MUTATION);
        }
        
        if (this.diceRoll(MUTATION_PROBABILITY*1.5)) {
            this.agility += random(-MUTATION, MUTATION);
        }
        
        if (this.diceRoll(MUTATION_PROBABILITY)) {
            this.metabolism += random(-MUTATION, MUTATION);
        }
        
        if (this.diceRoll(MUTATION_PROBABILITY)) {
            this.r = constrain(this.r + random(-MUTATION*100, MUTATION*100), 0, 255);
            this.g = constrain(this.g + random(-MUTATION*100, MUTATION*100), 0, 255);
            this.b = constrain(this.b + random(-MUTATION*100, MUTATION*100), 0, 255);
        }
    };
    
    this.nearestFood = function(){
        var nearestDistance = dist(this.x, this.y, food[0].xpos, food[0].ypos);
        var d, index, i;
        index = 0;
        
        for(i = 1; i < food.length; i++){
            d = dist(this.x, this.y, food[i].xpos, food[i].ypos);
            if (d < nearestDistance){
                nearestDistance = d;
                index = i;
            }
        }
        
        return(index);
    };
    
    this.update = function(){
        var i, f, target, error;
        
        if(mode !== 2 || food.length === 0){
            return;
        }
        
        f = food[this.nearestFood()];
        
        target = (atan2(this.y-f.ypos, this.x-f.xpos)) - 180;
        error = this.angle - target;
        
        if(abs(error) > this.agility){
            if (this.angle < target){
                this.angle += this.agility;
            }
            else if (this.angle > target)
            {
                this.angle -= this.agility;
            }
        }
        else
        {
            this.angle = target;
        }
        
            
        if (debug_mode)
        {
            fill(255, 0, 0);
            noStroke();
            ellipse(f.xpos, f.ypos, 10, 10);
        }
        
        var newSpeed = this.movementSpeed*2*this.fins/this.bodyParts;
        this.x += newSpeed * cos(this.angle);
        this.y += newSpeed * sin(this.angle);
        this.energy -= this.metabolism/500 * this.movementSpeed;
        
        if (this.energy <= 0)
        {
            for(i = 0; i < critters.length; i++)
            {
                if (critters[i] === this)
                {
                    critters.splice(i, 1);
                    break;
                }
            }
        }
    };
};

var Food = function(x, y){
    this.xpos = x;
    this.ypos = y;
    this.hspeed = random(-foodSpeed.Value, foodSpeed.Value);
    this.vspeed = random(-foodSpeed.Value, foodSpeed.Value);
    this.countdown = FOOD_GROW_TIME;
    
    this.draw = function(){
        stroke(48, 161, 84);
        fill(27, 219, 52);
        strokeWeight(2);
        ellipse(this.xpos, this.ypos, 5, 5);
        this.xpos += this.hspeed;
        this.ypos += this.vspeed;
        if(this.xpos < 0){
            this.xpos = 400;
        }
        else if(this.xpos > 400){
            this.xpos = 0;
        }
        if(this.ypos < 0){
            this.ypos = 400;
        }
        else if(this.ypos > 400){
            this.ypos = 0;
        }
        this.countdown -= dt;
        if (this.countdown <= 0)
        {
            this.countdown = FOOD_GROW_TIME;
            var f = new Food();
            f.xpos = this.xpos;
            f.ypos = this.ypos;
            if (food.length < maxFood.Value)
            {
                food.push(f);
            }
            
        }
    };
};

//Function definitions
var pointDirection = function(x1, y1, x2, y2){
    var dy = y2 - y1;
    var dx = x2 - x1;
    
    return atan2(dy, dx);
};

var setBodyPartType = function(type){
    bodyPartType = type;
};

var setMode = function(m){
    mode = m;
};

var mutate = function()
{
    critters[0].mutate();
};

var setup = function()
{
    //Add the starter critter
    var b;
    var c = new Critter();
    critters.push(c);
    critters[0].init();
    critters[0].x = 200;
    critters[0].y = 200;
    critters[0].bodyParts = 1;
    
    //Add the GUI
    b = new Button(20, 320, 70, 26, setBodyPartType, 1, "Fin");
    buttons.push(b);
    b = new Button(20, 360, 70, 26, setBodyPartType, 2, "Mouth");
    buttons.push(b);
    b = new Button(100, 320, 70, 26, setBodyPartType, 0, "Eye");
    buttons.push(b);
    b = new Button(100, 360, 70, 26, setBodyPartType, 3, "Spike");
    buttons.push(b);
    b = new Button(180, 320, 75, 26, mutate, null, "Mutate");
    buttons.push(b);
    
    b = new Button(320, 360, 70, 26, setMode, 2, "Start");
    buttons.push(b);
    
    angleMode = "degrees";
};

var step = function(){
    var i;
    
    for(i = 0; i < players.length; i++){
        players[i].keyEvents();
        players[i].drawImage();
    }

};

var mousePressed = function(){
};

var mouseReleased = function(){
   
    if(mode === 0){
        setup();
        mode = 1;
    }
    
    else if (mode === 1){
        for(var i = 0; i < buttons.length; i++){
            if(mouseButton === RIGHT){
                bodyPartType = -1;
            }
            else if(mouseX > buttons[i].x && mouseX < buttons[i].x + buttons[i].w){
                if(mouseY > buttons[i].y && mouseY < buttons[i].y + buttons[i].h){
                    buttons[i].click();
                }
            }   
        }
        
        if(mouseX > 110 && mouseX <= 300){
            if(mouseY > 110 && mouseY <= 300){
                var xpos = floor((mouseX-110)/20);
                var ypos = floor((mouseY-110)/20);
                if (bodyPartType === -1 && critters[0].dna[xpos][ypos].type !== -1)
                {
                    critters[0].bodyParts--;
                    if (critters[0].dna[xpos][ypos].type === 1)
                    {
                        critters[0].fins--;
                    }
                }
                if (bodyPartType !== -1)
                {
                    critters[0].bodyParts++;
                }
                
                if (bodyPartType === 1)
                {
                    critters[0].fins++;
                }
                critters[0].dna[xpos][ypos].type = bodyPartType;
            }
        }
    }
};

var keyPressed = function(){
   keysDown[keyCode] = true;
};

var keyReleased = function(){
   keysDown[keyCode] = false;
};

var keyEvents = function(){
    //if (keysDown[A]) { ...
    //if (mouseIsPressed) { ...
};

var drawMenu = function(){
    //Title
    fill(255, 255, 255);
    textSize(36);
    text(GAME_TITLE, 200-(textWidth(GAME_TITLE)/2), 60);
    
    textSize(24);
    text("Click to Start", 200-(textWidth("Click to Start")/2), 370);
    
    noFill();
    stroke(17, 47, 138);
    strokeWeight(4);
    rectMode(CORNER);
    rect(10, 10, 380, 380, 15);
};

var drawBubbles = function(){
    for (var i = bubbles.length - 1; i >= 0; i--){
        if (bubbles[i].y < -20) {
            bubbles.splice(i, 1);
        } else {
            bubbles[i].draw();
        }
    }
};

var addBubbles = function(n){
    for (var i = 0; i < n; i++){
        bubbles.push(new Bubble());
    }
};

var drawGrid = function(){
    var i;
    
    stroke(255, 255, 255);
    strokeWeight(2);
    for(i = 110; i <= 300; i += 20){
        line(i, 111, i-1, 290);
        line(110, i, 288, i);
    }
};

var drawFin = function(critter, offsetx, offsety){
    fill(critter.r, critter.g, critter.b);
    stroke(critter.r - 50, critter.g - 50, critter.b - 50);
    strokeWeight(2);
    
    pushMatrix();
    translate(critter.x, critter.y);
    rotate(critter.angle);
    
    pushMatrix();
    translate(offsetx, offsety);
    rotate(15 * sin(100 * t));
    triangle(6, 0,-8, -8, -8, 8);
    popMatrix();
    
    popMatrix();
};

var drawMouth = function(critter, offsetx, offsety){
    var k;
    var mx = critter.x + cos(critter.angle)*offsetx  - sin(critter.angle)*offsety;
    var my = critter.y + cos(critter.angle)*offsety + sin(critter.angle)*offsetx;
    
    for(k = 0; k < food.length; k++)
    {
        if (dist(mx, my, food[k].xpos, food[k].ypos) < 10)
        {
            food.splice(k, 1);
            critter.energy++;
            critter.reproduce();
            break;
        }
    }
    
    translate(critter.x, critter.y);
    rotate(critter.angle);
    
    stroke(critter.r-50, critter.g-50, critter.b-50);
    strokeWeight(2);
    fill(critter.r, critter.g, critter.b);
    rectMode(CENTER);
    
    pushMatrix();
    translate(offsetx, offsety);
    rect(0, 0, 12, 12);
    fill(0, 0, 0);
    strokeWeight(2);
    stroke(critter.r-30, critter.g-30, critter.b-30);
    ellipse(0, 0, 8*pow(cos(100*t),2) + 2, 8*pow(cos(100*t),2) + 2);
    popMatrix();
    
    resetMatrix();
};

var drawSpike = function(critter, offsetx, offsety){
    translate(critter.x, critter.y);
    rotate(critter.angle);
    
    strokeWeight(2);
    fill(critter.r, critter.g, critter.b);
    rectMode(CENTER);
    noStroke();
    
    pushMatrix();
    translate(offsetx, offsety);
    triangle(10+5*pow(cos(100*t), 2), 0, 6, -4, 6, 4);
    triangle(-10-5*pow(cos(100*t), 2), 0, -6, -4, -6, 4);
    triangle(0, 10+5*pow(cos(100*t),2), -4, 6, 4, 6);
    triangle(0, -10-5*pow(cos(100*t),2), -4, -6, 4, -6);
    stroke(critter.r-50, critter.g-50, critter.b-50);
    rect(0, 0, 12, 12);
    popMatrix();
    
    resetMatrix();
};

var drawEyeball = function(critter, offsetx, offsety){
    translate(critter.x, critter.y);
    rotate(critter.angle);
    noStroke();
    fill(critter.r, critter.g, critter.b);
    
    pushMatrix();
    translate(offsetx, offsety);
    ellipse(0, 0, 15, 15);
    fill(255, 255, 255);
    ellipse(0, 0*20, 10, 10);
    fill(0, 0, 0);
    noStroke();
    ellipse(0, 0, 3, 3);
    popMatrix();
    
    resetMatrix();
};

var drawCritters = function(){
    var j, k;
    
    
    for (var i = 0; i < critters.length; i++){
        if (critters[i] === undefined) {
            println("Null pointer exception in drawCritters()");
            continue;
        }
        
        //For each critter
        rectMode(CENTER);
        stroke(critters[i].r, critters[i].g, critters[i].b);
        fill(critters[i].r, critters[i].g, critters[i].b);
        
        for (var j = 0; j < critters[i].dna.length; j++){
            for (var k = 0; k < critters[i].dna[j].length; k++){
                if (critters[i].dna[j][k].type !== -1){
                    pushMatrix();
                    stroke(critters[i].r-30, critters[i].g-30, critters[i].b-30);
                    strokeWeight(6);
                    translate(critters[i].x, critters[i].y);
                    rotate(critters[i].angle);
                    line((j - 4) * 20, (k - 4) * 20, 0, 0);
                    popMatrix();
                }
            }
        }
        
        for(j=0; j < critters[i].dna.length; j++){
            for(k=0; k < critters[i].dna[j].length; k++){
                //For each body part
                
                if (critters[i].dna[j][k].type === 0){
                    //Eyeball
                    drawEyeball(critters[i], (j-4)*20, (k-4)*20);
                }
                
                else if(critters[i].dna[j][k].type === 1){
                    //Fins
                    drawFin(critters[i], (j-4)*20, (k-4)*20);
                }
                
                else if(critters[i].dna[j][k].type === 2){
                    //Mouth
                    drawMouth(critters[i], (j-4)*20, (k-4)*20);
                }
                
                else if(critters[i].dna[j][k].type === 3){
                    //Spikes
                    drawSpike(critters[i], (j-4)*20,(k-4)*20);
                }
            }
        }
        critters[i].update();
        rectMode(LEFT);
        fill(0, 0, 0);
        noStroke();
        rect(critters[i].x-10, critters[i].y-14, 20, 4);
        fill(85, 255, 0);
        rect(critters[i].x-10, critters[i].y-14, 20*critters[i].energy/REPRODUCTION_THRESHOLD, 4);
    }
};

var drawButtons = function(){
    for (var i = 0; i < buttons.length; i++){
        buttons[i].drawButton();
    }
};

var drawSelection = function(){
    var c = new Critter();
    c.r = critters[0].r;
    c.g = critters[0].g;
    c.b = critters[0].b;
    c.x = mouseX;
    c.y = mouseY;

    switch(bodyPartType) {
        case 0:
            drawEyeball(c, 0, 0);
            break;
        case 1:
            drawFin(c, 0, 0);
            break;
        case 2:
            drawMouth(c, 0, 0);
            break;
        case 3:
            drawSpike(c, 0, 0);
            break;
    }
};

var drawFood = function() {
    while (food.length < minFood.Value){
        var f = new Food(floor(random(0, 400)), floor(random(0, 400)));
        food.push(f);
    }
    
    for (var i = 0; i < food.length; i++){
        food[i].draw();
    }
};

var draw = function() {
    t += dt;
    
    //Menu
    if (mode === 0){
        background(106, 170, 204);
        drawBubbles();
        addBubbles(1);
        drawMenu();
    }
    
    //Builder
    else if (mode === 1){
        background(106, 170, 204);
        textSize(36);
        fill(255, 255, 255);
        text("Design your creature!", 25, 35);
        textSize(14);
        text("Speed: \n" + critters[0].movementSpeed.toFixed(2), 300, 120);
        text("Agility: \n" + critters[0].agility.toFixed(2), 300, 160);
        text("Metabolism: \n" + critters[0].metabolism.toFixed(2), 300, 200);
        
        drawGrid();
        drawCritters();
        drawButtons();
        drawSelection();
        keyEvents();
        step();
    } else {
        // Simulation
        background(106, 170, 204);
        drawCritters();
        drawFood();
    }
    
    if (debug_mode) {
        textSize(9);
        fill(255, 255, 255);
        text("mode = " + mode, 5, 20);
        text("t = " + floor(t), 5, 10);
    }
    
};