/**************************************
 * Use the one that this is a spin-off of
 * Demonstration of a weighted average.
***************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var sansFont = createFont("sans", 14);
var serifFont = createFont("serif", 16);

var toolbarX = width * 0.01;
var toolbarWidth = 120;
var toolbarHeight = 178;

var CONTROL_POINT_SIZE = 12;

var gridSize = 20;
var snapSize = 10;

var dragX, dragY;
var points, point1, point2, point3;
var averagePoint;

var selected = false;
var sliders = [];
var buttons = [];

var showing = {
    Fill: true,
    Equation: true
};


/**************************************
 * GUI Slider to vary parameters
***************************************/

var Slider = function(x, y, width, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    this.held = false;
};

Slider.prototype.draw = function() {
    noStroke();
    fill(180);
    rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);
};

Slider.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.drag = function() {
    if (this.held) {
        var x = constrain(mouseX, this.x, this.x + this.width);
        this.bx = x;
        this.val = this.min + round((x - this.x) * this.scale);
        return true;
    }
};

// This is used if you want to update the value in a way other
// than using the slider (but want the slider to update).
Slider.prototype.update = function(d) {
    this.val = constrain(this.val + d, this.min, this.max);
    this.bx = (this.val - this.min) / this.scale + this.x;
};

/**************************************
 *  GUI Button
***************************************/

var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(220, 220, 220, 250);
    this.highlightCol = color(250, 50, 50, 250);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
};

Button.prototype.mouseover = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseover() || this.selected) {
        fill(this.defaultCol);
    } else {
        noFill();
    }
    strokeWeight(1);
    stroke(200);
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    noStroke();
    if (this.mouseover() || this.selected) {
        fill(this.defaultCol);
    } else {
        noFill();
    }
    rect(this.x, this.y, this.w, this.h + 1, 5);
    
    fill(10);
    textFont(sansFont, 14);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.x + 4, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.x + 5, this.y + 4, this.x + this.box + 4, this.y + 3 + this.box);
        line(this.x + this.box + 4, this.y + 4, this.x + 5, this.y + 3 + this.box);
    }
};

var snap = function(n) {
    return round(n / snapSize) * snapSize;
};

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    var oldX = this.x;
    var oldY = this.y;
    this.x = snap(mouseX + dragX);
    this.y = snap(mouseY + dragY);
    
    // Check points don't overlap
    if (point1.x === point2.x && point1.y === point2.y) {
        this.x = oldX;
        this.y = oldY;
    }
};

draggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

var constrainedPoint = function(color, name) {
    this.name = name;
    this.color = ORANGE;
    
    this.animation = 0;
    this.update();
    //this.setColor();
    
};
constrainedPoint.prototype = Object.create(draggablePoint.prototype);

constrainedPoint.prototype.update = function() {
    this.x = 0;
    this.y = 0;
    var totalWeight = 0;
    
    for (var i = 0; i < sliders.length; i++) {
        totalWeight += sliders[i].val;
    }
    
    if (totalWeight === 0) {
        this.x = null;
        this.y = null;
    } else {
        for (var i = 0; i < sliders.length; i++) {
            var point = points[i];
            var weight = sliders[i].val / totalWeight;
            
            this.x += point.x * weight;
            this.y += point.y * weight;
        }    
    }
};

constrainedPoint.prototype.move = function() {
    if (this.p1.x === this.p2.x && this.p1.y === this.p2.y) {
        return;
    }
    
    // Project (mouseX, mouseY) onto line
    var lx = this.p1.x - this.p2.x;
    var ly = this.p1.y - this.p2.y;
    var mx = mouseX - this.p2.x;
    var my = mouseY - this.p2.y;
    
    var w = (mx * lx + my * ly ) / (lx * lx + ly * ly);
    this.w = constrain(round(w * 20) / 20, 0, 1);
    //this.setColor();
    
};

constrainedPoint.prototype.setColor = function() {
    if (this.w === 0.5) {
        this.color = GREY;
    } else if (this.w < 0.5) {
        this.color = lerpColor(this.p2.color, GREY, this.w * 2);
    } else {
        this.color = lerpColor(GREY, this.p1.color, this.w * 2 - 1);
    }
    
    this.color = lerpColor(this.p2.color, this.p1.color, this.w);
};

point1 = new draggablePoint(width * 0.4, height * 0.1, BLUE, "A");
point2 = new draggablePoint(width * 0.25, height * 0.9, PINK, "B");
point3 = new draggablePoint(width * 0.9, height * 0.4, GREEN, "C");
averagePoint = new constrainedPoint(ORANGE, "I");

var points = [point1, point2, point3];
var selectables = [point1, point2, point3, averagePoint];

/**************************************
 *      Create GUI
***************************************/

var createButtons = function() {
    var buttons = [];
    var x = toolbarX + 8;
    var y = toolbarX + 123;
    var w = 102;
    var h = 22;
    
    for (var opt in showing) {
        buttons.push(new CheckBox(x, y, w, h, opt));
        y += 28;
    }
    
    return buttons;
};

var buttons = createButtons();

var sliders = [
    new Slider(toolbarX + 19, toolbarX + 30, 80, -10, 10, 5),
    new Slider(toolbarX + 19, toolbarX + 70, 80, -10, 10, 5),
    new Slider(toolbarX + 19, toolbarX + 110, 80, -10, 10, 5)
];

/**************************************
 *      Display functions
***************************************/

var drawGrid = function() {
    stroke(GRIDGREY);
    strokeWeight(1);
    
    for (var x = 1; x < width / gridSize; x++) {
        line(x * gridSize, 0, x * gridSize, height);
    }
    for (var y = 1; y < height / gridSize; y++) {
        line(0, y * gridSize, width, y * gridSize);
    }
};

var drawLinesAndLabels = function() {
    var points = [point1, point2, point3];
    
    var n = points.length;
    
    // Filled triangles
    if (showing.Fill && averagePoint.x !== null) {
        noStroke();
        for (var i = 0; i < n; i++) {
            var p2 = points[(i + n - 1) % n];
            var p3 = points[(i + 1) % n];
            fill(points[i].color + (100<< 24));
            triangle(p2.x, p2.y, p3.x, p3.y, averagePoint.x, averagePoint.y);
        }   
    }
    
    // Labels
    textFont(serifFont, 16);
    textAlign(CENTER, CENTER);
    strokeWeight(2);
    
    for (var i = 0; i < n; i++) {
        var p1 = points[i];
        var p2 = points[(i + n - 1) % n];
        var p3 = points[(i + 1) % n];

        stroke(points[i].color);
        line(p2.x, p2.y, p3.x, p3.y);
        
        // Get label position
        var dx = p2.x + p3.x - 2 * p1.x;
        var dy = p2.y + p3.y - 2 * p1.y;
        var d = sqrt(dx * dx + dy * dy);
        var tx = p1.x - dx / d * 16;
        var ty = p1.y - dy / d * 16;

        fill(points[i].color);    
        text(selectables[i].name, tx, ty);
    }
    
    for (var i = 0; i < n; i++) {
        points[i].draw();
    }
    
};

var colorText = function(txtArr, x, y) {
    for (var i = 0; i < txtArr.length; i++) {
        fill(txtArr[i][1]);
        var txt = txtArr[i][0];
        text(txt, x, y);
        x += textWidth(txt);
    }
    return x;
};

var drawGUI = function() {
    noStroke();
    fill(240, 240, 240, 200);
    rect(toolbarX, toolbarX, toolbarWidth, toolbarHeight, 8);
    
    textFont(sansFont, 14);
    textAlign(CENTER, CENTER);
    
    var labels = ["A", "B", "C"];
    var colours = [BLUE, PINK, GREEN];
    for (var i = 0; i < sliders.length; i++) {
        var s = sliders[i];
        var txt = "Weight for " + labels[i] + ": " + s.val;
        s.draw();
        fill(colours[i]);
        text(txt,  s.x + s.width / 2, s.y - 18);
    }
    
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].draw();
    }
};

var drawEquation = function() {
    textAlign(LEFT, CENTER);
    textFont(serifFont, 16);

    var h = 42;
    var tx = toolbarX + 4;
    var ty = height - toolbarX - h / 2;
    var v = [sliders[0].val, sliders[1].val, sliders[2].val];
    var txt = "I";
    
    var w = 12 + textWidth("I = A + B + C" + v[0] + v[1] + v[2]);  
    
    noStroke();
    fill(240, 240, 240, 200);
    rect(toolbarX, height - toolbarX - h, w, h, 8);
    
    fill(ORANGE);
    text(txt, tx, ty);
    tx += textWidth(txt);
    
    fill(TEXTCOL);
    txt = " =  ";
    text(txt, tx, ty);
    tx += textWidth(txt);
    
    textAlign(LEFT, BASELINE);
    var tx2 = colorText([
        [v[0] + "A", BLUE],
        [" + ", TEXTCOL],
        [v[1] + "B", PINK],
        [" + ", TEXTCOL],
        [v[2] + "C", GREEN],
    ], tx, ty - 3);
    
    strokeWeight(1);
    stroke(20);
    line(tx - 2, ty, tx2 + 2, ty);
    
    var dx = textWidth("ABC");
    
    textAlign(LEFT, TOP);
    colorText([
        [sliders[0].val, BLUE],
        [" + ", TEXTCOL],
        [sliders[1].val, PINK],
        [" + ", TEXTCOL],
        [sliders[2].val, GREEN],
    ], tx + dx / 2, ty);
};

/**************************************
 *      Main loop
**************************************/

var draw = function() {
    background(BACKGROUND);
    
    drawGrid();
    drawLinesAndLabels();
    
    averagePoint.update();
    
    // Draw the average unless all the weights are 0
    if (averagePoint.x !== null) {
        averagePoint.draw();
        fill(0);
        text(averagePoint.name, averagePoint.x, averagePoint.y - CONTROL_POINT_SIZE / 2 - 8);   
    }
    
    drawGUI();
    
    if (showing.Equation) {
        drawEquation();
    }
};

/**************************************
 *      Event handling
**************************************/

mousePressed = function() {
    for (var i = 0; i < selectables.length; i++) {
        if (selectables[i].mouseover()) {
            selected = selectables[i];
            dragX = selected.x - mouseX;
            dragY = selected.y - mouseY;
        }
    }
    
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].selected();
    }
};

mouseReleased = function() {
    selected = false;
    
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].held = false;
    }
    
    for (var b = 0; b < buttons.length; b++) {
        if (buttons[b].mouseover()) {
            buttons[b].click();
        }
    }
};

mouseOut = function() {
    mouseReleased();
};

mouseDragged = function() {
    if (selected) {
        selected.move();
    }
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].drag();
    }
};