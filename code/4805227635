// http://freespace.virgin.net/hugo.elias/models/m_perlin.htm

// Animate subdivision

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var SWATCHSIZE = 128;

strokeJoin(ROUND);
var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var showing = {
    Polygon: true,
    //'Control points': true,
    //'Clamps': true
};

var graph;
var swatch;

var createSwatch = function(n, brightness) {
    loadPixels();
    var px = imageData.data;
    
    var ni = 1 / n;
    var x, y, h, s, r, g, b, i, f, p, q, t;
    var index;
    
    //var s = 0.5;          // Saturation
    var v = brightness;     // Brightness
    
    for (x = 0; x < n; x++) {
        h = ni * x;     // Hue along x-axis
        for (y = 0; y < n; y++) {
            s = ni * y; // Saturation along y-axis
            //v = ni * y; // Brightness along y-axis
            i = floor(h * 6);
            f = h * 6 - i;
            p = v * (1 - s);
            q = v * (1 - f * s);
            t = v * (1 - (1 - f) * s);
            switch (i % 6) {
                case 0: r = v; g = t; b = p; break;
                case 1: r = q; g = v; b = p; break;
                case 2: r = p; g = v; b = t; break;
                case 3: r = p; g = q; b = v; break;
                case 4: r = t; g = p; b = v; break;
                case 5: r = v; g = p; b = q; break;
            }
            index = x + (y * width) << 2;
            px[index++] = r * 0xFF | 0;
            px[index++] = g * 0xFF | 0;
            px[index++] = b * 0xFF | 0;
        }
    }
    updatePixels();
    return get(0, 0, n, n);
};

// Create target
var createTarget = function() {
    var target = {};
    
    if (Program.settings().points) {
        var points = Program.settings().points.split(",");
        target.points = [];
        for (var i = 0; i < points.length; i++) {
            target.points.push(parseFloat(points[i]));
        }
    } else {
        target.points = [-0.46, 0.46, -0.46, 0.46, -0.46];
    }
    
    target.subdivisions = constrain(parseFloat(Program.settings().subdivisions || 4), 0, 4);

    target.hue =  constrain(parseFloat(Program.settings().hue || 50), 0, 255);

    return target;
};

var target = createTarget();

/****************************************************
 * Generic GUI component from which other elements
 * inherit
 * The default object is basically a button
*****************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/****************************************************
 *  GUI Button
*****************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

// Button to set a colour
var SwatchButton = function(x, y, w, h, name, colour) {
    Button.call(this, x, y, w, h, {
        name: name,
        trigger: function() {
            this.showSwatch = !this.showSwatch;
        }
    });
    this.color = colour;
    this.defaultCol = color(250);
    graph.hue = hue(this.color);
    graph.sat = saturation(this.color);
    
    this.showSwatch = false;
    this.sx = this.x + this.w + 16;
    this.sy = this.y - 4;
    this.sx2 = this.sx + SWATCHSIZE;
    this.sy2 = this.sy + SWATCHSIZE;
};
SwatchButton.prototype = Object.create(Button.prototype);

SwatchButton.prototype.draw = function() {
    this.fade();
    
    fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
    noStroke();
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    var txt = this.name;
    text(txt, this.x + this.w / 2 - 10, this.y + this.h / 2 + 1);
    
    strokeWeight(1);
    stroke(20);
    fill(this.color);
    rect(this.x + this.w - 22, this.y + 2, 16, 16);
    
    // TODO: make a swatch object
    if (this.showSwatch) {
        noStroke();
        fill(0,0,0,50);
        rect(this.sx, this.sy, SWATCHSIZE + 4, SWATCHSIZE + 30);
        fill(0);
        rect(this.sx - 2, this.sy - 2, SWATCHSIZE + 4, SWATCHSIZE + 30);
        image(swatch, this.sx, this.sy);
        
        if (this.mouseOverSwatch()) {
            fill(this.setColor());
            rect(this.sx, this.sy2 + 2, SWATCHSIZE, 24);
        } else {
            fill(255);
            text("Pick a color", this.sx + SWATCHSIZE / 2, this.sy2 + 13);
        }
    }
};

SwatchButton.prototype.setColor = function() {
    colorMode(HSB);
    this.hue = map(mouseX, this.sx, this.sx2, 0, 255);
    this.sat = map(mouseY, this.sy, this.sy2, 0, 255);
    var c = color(this.hue, this.sat, 200);
    colorMode(RGB);
    return c;
};

SwatchButton.prototype.mouseOverSwatch = function() {
    return mouseX >= this.sx && mouseX <= this.sx2 &&
           mouseY >= this.sy && mouseY <= this.sy2;
};

SwatchButton.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
    if (this.showSwatch && !this.mouseOverSwatch()) {
        this.showSwatch = false;
    }
};

SwatchButton.prototype.mouseReleased = function() {
    if (this.selected && this.mouseOver()) {
        this.trigger();
    } else if (this.showSwatch) {
        if (this.mouseOverSwatch()) {
            this.color = this.setColor();
            graph.hue = this.hue;
            graph.sat = this.sat;
        } else {
            this.showSwatch = false;
        }
    }
    this.selected = false;
};
}
/****************************************************
 * GUI Slider
*****************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = 12;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};

var ColorSlider = function(x, y, w, h, params) {
    Slider.call(this, x, y, w, h, params);
    this.saturation = params.saturation || 180;
    this.brightness = params.brightness || 180;
    this.setColor();
};
ColorSlider.prototype = Object.create(Slider.prototype);

ColorSlider.prototype.setColor = function() {
    colorMode(HSB);
    this.color = color(this.val, this.saturation, this.brightness);
    colorMode(RGB);
    this.R = red(this.color);
    this.G = green(this.color);
    this.B = blue(this.color);
};

ColorSlider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(this.color);
    strokeWeight(4);
    stroke(this.stroke);
    line(this.x, this.y, this.x2, this.y);
    stroke(250);
    strokeWeight(1);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
};

ColorSlider.prototype.trigger = function() {
    this.setColor();
};
}
/****************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for
 * adding components like buttons and sliders.
*****************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.addSwatch = function(name, colour) {
    var h = 20;
    var button = new SwatchButton(this.x + 5, this.y + this.h, this.w - 10, h, name, colour);
    this.components.push(button);
    this.h += h + 8;
    return button;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
/****************************************************
 *      DraggablePoint
 * A freely draggable point with a position and
 * colour.
*****************************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.r = 16;
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = this.r + this.animation;
    ellipse(this.x, this.y, r, r);
    
    fill(0);
    textSize(10);
    textAlign(CENTER, CENTER);
    text(this.index + 1, this.x, this.y);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};
}
/****************************************************
 *      Graph
 * A collection of draggable points constrained to
 * a box
*****************************************************/
{
var Graph = function(x, y, w, h, n) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.n = n;
    this.curvePoints = [];

    // Constraints for draggable points
    this.y1 = this.y + 12;
    this.y2 = this.y + this.h - 12;
    
    this.subdivisions = 0;
    this.getRandomPoints(this.n);
};

Graph.prototype.getTargetImage = function(target) {
    this.subdivisions = target.subdivisions;
    this.getNonRandomPoints(target.points);
    var y = this.y + this.h + 60;
    this.drawColorBar(y, 50, target.hue);
    this.img = get(this.x, y, this.w, 50);
    
    // Reset
    this.subdivisions = 0;
    this.getRandomPoints(this.n);
};

Graph.prototype.getRandomPoints = function(n) {
    var dx = (this.w - 24) / (n - 1);
    var x = this.x + 12;
    var points = [];
    
    for (var i = 0; i < n; i++) {
        var value = (random() - 0.5) * 0.8;
        var py = lerp(this.y + this.h, this.y, value);
        var p = new DraggablePoint(x, py - this.h / 2);
        p.value = value;
        p.index = i;
        points.push(p);
        x += dx;
    }
    
    this.points = points;
    this.curvePoints = [];
    this.calculateSubdivisionCurve();
};

Graph.prototype.getNonRandomPoints = function(arr) {
    var dx = (this.w - 24) / (arr.length - 1);
    var x = this.x + 12;

    var points = arr.map(function(value, i) {
        var py = lerp(this.y + this.h, this.y, value + 0.5);
        var p = new DraggablePoint(x, py);
        p.index = i;
        p.value = value;
        x += dx;
        return p;
    }, this);
    
    this.points = points;
    this.calculateSubdivisionCurve();
};

Graph.prototype.resetPoints = function() {
    var arr = new Array(this.points.length + 1).join('0').split('').map(parseFloat);
    this.getNonRandomPoints(arr);
};

Graph.prototype.draw = function() {
    this.drawBox(this.x, this.y);
    
    var p = this.points;
    var n = p.length;

    noFill();
    
    // Control polygon
    if (showing.Polygon) {
        strokeWeight(1);
        stroke(BLUE);

        beginShape();
        for (var i = 0; i < n; i++) {
            vertex(p[i].x, p[i].y);
        }
        endShape();
    }
    
    // Curve points
    strokeWeight(3);
    stroke(GREEN);

    var firstPoint = p[0];
    var lastPoint = p[n - 1];
    
    beginShape();
    vertex(firstPoint.x, firstPoint.y);
    p = this.curvePoints;
    n = p.length;

    for (var i = 0; i < n; i++) {
        vertex(p[i][0], p[i][1]);
    }
    vertex(lastPoint.x, lastPoint.y);
    endShape();

    //if (showing['Control points']) {
        this.points.forEach(function(p) {
            p.draw();
        });
    //}
    
    var y = this.y + this.h + 5;
    
    this.drawColorBar(y, 50);
    image(this.img, this.x, y + 55);
    
    fill(0);
    textSize(15);
    textAlign(RIGHT, CENTER);
    text("Result:", this.x, y + 25);
    text("Target:", this.x, y + 80);
};

Graph.prototype.drawBox = function(x, y) {
    fill(250);
    strokeWeight(1);
    stroke(80);
    rect(x, y, this.w, this.h, 2);
    
    var n = 4;
    var mid = n / 2 - 1;
    var dy = this.h / n;
    var y2 = y;
    
    stroke(225);
    for (var i = 0; i < n - 1; i++) {
        y2 += dy;
        line(x + 2, y2, x + this.w - 2, y2);
    }
};

Graph.prototype.drawColorBar = function(y1, h, hue) {
    // Show colours along line
    var p = this.curvePoints;
    var n = p.length - 1;
    var n1 = this.points.length - 1;
    var y2 = y1 + h;

    hue = (hue === undefined ? this.hue : hue);

    strokeWeight(1);
    colorMode(HSB);

    var p1, p2, d, my;
    for (var x = this.points[0].x; x <= this.points[n1].x; x++) {
        var mx = norm(x, p[0][0], p[n][0]) * n;
 
        if (mx < 0) {
            p1 = this.points[0];
            p2 = this.points[1];
            d = (x - p1.x) / (p2.x - p1.x);
            my = lerp(p1.y, p2.y, d);
        } else if (mx >= n) {
            p1 = this.points[n1 - 1];
            p2 = this.points[n1];
            d = (x - p1.x) / (p2.x - p1.x);
            my = lerp(p1.y, p2.y, d);
        } else {
            // Interpolate along line
            p1 = floor(mx);
            my = lerp(p[p1][1], p[p1 + 1][1], mx - p1);
        }
        my = 1 - norm(my, this.y1, this.y2);
        
        stroke(hue, this.sat, my * 255);
        line(x, y1, x, y2);
    }

    colorMode(RGB);
};

Graph.prototype.subdivide = function() {
    if (this.subdivisions < 4) {
        this.subdivisions++;
        this.calculateSubdivisionCurve();
    }
};

Graph.prototype.calculateSubdivisionCurve = function(n1, n2) {
    var n1 = max(2, n1 || 1);
    var n2 = n2 || this.points.length - 1;
    var q = 1 << this.subdivisions;
    var q2 = q * q;
    var n = this.points.length;
    var p1, p2, p3, a, b, c, s, t, x, y, index;
    
    var p1 = this.points[n1 - 2];
    var p2 = this.points[n1 - 1];
    
    for (var i = n1; i <= n2; i++) {
        index = (i - 2) * q;
        p3 = this.points[i];
        
        for (t = 0; t < q; t++) {
            s = q - t - 1;
            a = (s * s + s) >> 1;
            c = (t * t + t) >> 1;
            b = q2 - a - c;
            
            this.curvePoints[index + t] = [
                (p1.x * a + p2.x * b + p3.x * c) / q2,
                (p1.y * a + p2.y * b + p3.y * c) / q2
            ];
        }
        p1 = p2;
        p2 = p3;
    }
};

Graph.prototype.mousePressed = function() {
    //if (!showing['Control points']) { return; }
    
    for (var i = 0; i < this.points.length; i++) {
        if (this.points[i].mouseOver()) {
            this.selected = this.points[i];
            break;
        }
    }
};

Graph.prototype.mouseReleased = function() {
    this.selected = false;
};

Graph.prototype.mouseDragged = function() {
    if (this.selected) {
        // Only move y coordinate and constrain in box
        this.selected.move(0, mouseY - pmouseY);
        this.selected.y = constrain(this.selected.y, this.y1, this.y2);
        this.selected.value = norm(this.selected.y, this.y + this.h, this.y) - 0.5;
        var n = this.selected.index;
        this.calculateSubdivisionCurve(n, n + 2);
    }
};
}
/****************************************************
 * Set-up page
*****************************************************/

graph = new Graph(111, 0, width - 112, height - 112, 5);
var toolbar = new Toolbar(0, 0, 110);

toolbar.add(Slider, {
    name: "Subdivisions",
    max: 4,
    ballR: 12,
    trigger: function() {
        if (graph.subdivisions !== this.val) {
            graph.subdivisions = this.val;
            var p = (graph.points.length - 2) << this.val;
            graph.curvePoints = new Array(p);
            graph.calculateSubdivisionCurve();
        }
    }
});
toolbar.addSwatch('Color', color(40, 120, 80));
toolbar.add(Button, {
    name: "Reset Points",
    trigger: function() {
        graph.resetPoints();
    }
});
/*toolbar.add(Button, {
    name: "Randomize Points",
    trigger: function() {
        graph.getRandomPoints(12);
    }
});*/
toolbar.addOptions(showing);

graph.getTargetImage(target);

/****************************************************
 * Main loop
*****************************************************/

draw = function() {
    if (!swatch) {
       swatch = createSwatch(SWATCHSIZE, 0.8);
    }
    background(255);
    graph.draw();
    toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    graph.mousePressed();
    toolbar.mousePressed();
};

mouseDragged = function() {
    graph.mouseDragged();
    toolbar.mouseDragged();
};

mouseReleased = function() {
    graph.mouseReleased();
    toolbar.mouseReleased();
};

mouseOut = function() {
    mouseReleased();
};
