/************************************************
 * Testing whether a point is inside a triangle
 * by calculating its position using two
 * triangle sides as basis vectors.
*************************************************/
var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var PURPLE = color(157, 56, 189);
var GREY = color(200, 200, 200);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var BLUE_T = color(64, 95, 237, 100);
var PINK_T = color(255, 0, 175, 100);
var GREEN_T = color(28, 173, 123, 100);

var myFont = createFont("Times", 20);
var CONTROL_POINT_SIZE = 12;

var selected = false;

/****************************************
 *      Calculations
****************************************/
// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

// Test whether point, p, is inside the 
// triangle, t, defined by an array of points
var insideTriangle = function(p, t) {
    // Calculate vectors BA and BC, and BM
    var v1 = { x: t.points[0].x - t.points[1].x, y: t.points[0].y - t.points[1].y };
    var v2 = { x: t.points[2].x - t.points[1].x, y: t.points[2].y - t.points[1].y };
    var v3 = { x: p.x - t.points[1].x, y: p.y - t.points[1].y };
    
    // Calculate dot products
    var dot11 = dotProduct(v1, v1);
    var dot12 = dotProduct(v1, v2);
    var dot13 = dotProduct(v1, v3);
    var dot22 = dotProduct(v2, v2);
    var dot23 = dotProduct(v2, v3);
    
    // Calculate barycentric coordinates
    var d = 1 / (dot11 * dot22 - dot12 * dot12);
    var u = (dot22 * dot13 - dot12 * dot23) * d;
    var v = (dot11 * dot23 - dot12 * dot13) * d;
    
    if (u >= 0 && v >= 0 && u + v < 1) {
        /*
        strokeWeight(3);
        stroke(PINK);
        
        var p1x = lerp(point2.x, point1.x, u);
        var p1y = lerp(point2.y, point1.y, u);
        var p2x = lerp(point2.x, point3.x, v);
        var p2y = lerp(point2.y, point3.y, v);
        
        line(point2.x, point2.y, p1x, p1y);
        line(p2x, p2y, point4.x, point4.y);

        stroke(PURPLE);
        line(p1x, p1y, point4.x, point4.y);
        line(point2.x, point2.y, p2x, p2y);
        */
        return true;
    }
    
};

/****************************************
 *  Draggable point object
****************************************/

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

draggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

draggablePoint.prototype.mousePressed = function() {
    if (this.mouseover()) {
        selected = this;
    }
};

/****************************************
 *  Triangle object
****************************************/

var Triangle = function(p1, p2, p3, col1, col2) {
    this.points = [p1, p2, p3];
    this.color1 = col1;
    this.color2 = col2;
};

Triangle.prototype.draw = function(inTriangle) {
    // Filled triangle
    noStroke();
    if (inTriangle) {
        fill(this.color1);    
    } else {
        fill(this.color2);
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    
    triangle(this.points[0].x, this.points[0].y,
             this.points[1].x, this.points[1].y,
             this.points[2].x, this.points[2].y);
 
    for (var i = 0; i < this.points.length; i++) {
        this.points[i].draw();
    }
    
    // Labels
    textSize(14);
    textAlign(CENTER, CENTER);
    
    for (var i = 0; i < 3; i++) {
        var p1 = this.points[i];
        var p2 = this.points[(i + 2) % 3];
        var p3 = this.points[(i + 1) % 3];
        
        // Get label position
        var dx = p2.x + p3.x - 2 * p1.x;
        var dy = p2.y + p3.y - 2 * p1.y;
        var d = sqrt(dx * dx + dy * dy);
        var tx = p1.x - dx / d * 16;
        var ty = p1.y - dy / d * 16;

        fill(this.points[i].color);    
        text(this.points[i].name, tx, ty);
    }
};

Triangle.prototype.mousePressed = function() {
    for (var i = 0; i < this.points.length; i++) {
        this.points[i].mousePressed();
    }
};

/****************************************
 *      Create objects
****************************************/

var point1 = new draggablePoint(width * 0.4, height * 0.1, ORANGE, "A");
var point2 = new draggablePoint(width * 0.25, height * 0.9, ORANGE, "B");
var point3 = new draggablePoint(width * 0.9, height * 0.4, ORANGE, "C");
var point4 = new draggablePoint(width * 0.5, height * 0.5, PINK);

var triangle1 = new Triangle(point1, point2, point3, BLUE_T, GREY);
var selectables = [triangle1, point4];

/****************************************
 *      Main loop
****************************************/

var draw = function() {
    background(BACKGROUND);
    
    var inTriangle = insideTriangle(point4, triangle1);
    
    triangle1.draw(inTriangle);
    point4.draw();
};

/****************************************
 *      Event handling
****************************************/

mousePressed = function() {
    for (var i = 0; i < selectables.length; i++) {
        selectables[i].mousePressed();
    }
};

mouseReleased = function() {
    selected = false;
};

mouseOut = function() {
    mouseReleased();
};

mouseDragged = function() {
    if (selected) {
        selected.move();
    }
};