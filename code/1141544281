/*****************************************
*  Some nodes connected by springs. 
*  By repelling each other they organise
*  their arrangement optimally. 
******************************************/

var balls = [];
var ballSize = 20;
var ballColour = color(60, 80, 140, 120);
var selectedColour = color(100, 100, 200, 255);

// List of links between balls
var springConnections = [[0, 1]];
var springLength = 35;
var springStrength = 0.05;

// Physical variables to play with
var acceleration = 0.05;    // Force of throw
var drag = 0.97;            // Air resistance
var friction = 0.8;         // Wall bounciness
var repulsion = 8;          // Force of replusion between balls

// GUI
var buttonSize = 36;
var mode = "dragging";
var modeFunction = function() {};

// Find the distance between two balls (must be > 0)
var distance = function(ball1, ball2) {
    var dx = ball1.x - ball2.x;
    var dy = ball1.y - ball2.y;
    var d = max(1, sqrt(dx*dx + dy*dy) - ball1.r - ball2.r);
    return d;
};

// Find the angle between two balls (relative to x-axis)
var angle = function(ball1, ball2) {
    var dx = ball1.x - ball2.x;
    var dy = ball1.y - ball2.y;
    var theta = atan2(dy, dx);
    return theta;
};

// Ball object with a position, speed and colour
var Ball = function(x, y, r, c) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.c = c;
    
    this.dx = 10 * (random() - 0.5);
    this.dy = 10 * (random() - 0.5);
    
    this.draw =function() {
        fill(this.c);
        ellipse(this.x, this.y, this.r*2, this.r*2);
    };
    
    // Move ball based on its velocity
    this.move = function() {
        this.dx *= drag;
        this.dy *= drag;
        this.x += this.dx;
        this.y += this.dy;
    };
    
    // Bounce off walls
    this.bounce = function(){
        if (this.x < this.r) {
            this.x = this.r;
            this.dx *= -friction;
        }
        if (this.x > 400 - this.r){
            this.x = 400 - this.r;
            this.dx *= -friction;
        }
        if (this.y < this.r) {
            this.y = this.r;
            this.dy *= -friction;
        }
        if (this.y > 400 - this.r){
            this.y = 400 - this.r;
            this.dy *= -friction;
        }
    };
    
    // Test whether mouse is over ball
    this.selected = function() {
        if (abs(mouseX - this.x) < this.r && 
            abs(mouseY - this.y) < this.r) {
                return true;
        }
    };
    
    this.collide = function(that) {
        var dx = this.x - that.x;
        var dy = this.y - that.y;
        var dr = this.r + that.r;
        
        if (dx * dx + dy * dy < dr * dr){
            var theta = atan2(dy, dx);
            var force = (sqrt(dr * dr) - sqrt(dx*dx + dy*dy));
            this.dx += force * cos(theta);
            that.dx -= force * cos(theta);
            this.dy += force * sin(theta);
            that.dy -= force * sin(theta);
        }
    };
    
    this.repel = function(that) {
        var d = distance(this, that);
        var theta = angle(this, that);
        var force = repulsion / d;
        
        this.dx += force * cos(theta);
        that.dx -= force * cos(theta);
        this.dy += force * sin(theta);
        that.dy -= force * sin(theta);
    };
    
    this.repelFromSides = function() {
        this.dx += (200 - this.x) / 400;
        this.dy += (200 - this.y) / 400;
    };
};


var Button = function(x, y, width, height, desc, imageF, func) {
    this.x1 = x;
    this.y1 = y;
    this.x2 = x + width;
    this.y2 = y + height;
    this.width = width;
    this.height = height;
    this.desc = desc;
    this.func = func;
    this.mouseOver = false;
    this.selected = false;
    
    this.draw = function() {
        if (!this.selected && !this.mouseOver) {
            fill(220, 220, 225, 140);
            stroke(40, 40, 45, 140);
        } else {
            fill(220, 220, 225);
            stroke(40, 40, 45);
        }
        strokeWeight(2);
        imageF(this.x1, this.y1, this.width, this.height);
        
        if (this.mouseOver) {
            fill(240, 240, 240, 200);
            stroke(80, 80, 80, 200);
            rect(mouseX, mouseY+20, this.desc.length * 8, 20, 3);
            fill(10, 10, 10, 200);
            text(this.desc, mouseX + 6, mouseY + 34);
        }
    };
    
    this.isMouseOver = function() {
        if (mouseY <= this.y2 && mouseX <= this.x2 &&
            mouseY >= this.y1 && mouseX >= this.x1) {
                this.mouseOver = true;
            } else {
                this.mouseOver = false;
            }
    };
    
    this.click = function() {
        if (this.mouseOver) {
            if (this.selected) {
                this.selected = false;
                mode = "dragging";
                modeFunction = function() {};
            } else {
                this.selected = true;
                mode = this.desc;
                modeFunction = this.func;
            }
            return true;
        }
    };
};

/*****************************************************
* These functions draw the icons
*****************************************************/
var newBallButtonIcons = function(x, y, w, h) {
    rect(x, y, w, h, 4);
    fill(255, 255, 255);
    ellipse(x + w/2-2, y + h/2+2, w/2, w/2);
    line(x+w-7, y+7, x+w-7, y+13);
    line(x+w-10, y+10, x+w-5, y+10);
};

var removeBallButtonIcons = function(x, y, w, h) {
    rect(x, y, w, h, 4);
    fill(255, 255, 255);
    ellipse(x + w/2-2, y + h/2+2, w/2, w/2);
    line(x+w-10, y+10, x+w-5, y+10);
};

/*****************************************************
* These functions are called when buttons are clicked
*****************************************************/

var newNode = function() {
    balls.push(new Ball(mouseX, mouseY, ballSize, ballColour));
};

/*****************************************************
* Create buttons
*****************************************************/
var buttons = [
    new Button (10, 10, buttonSize, buttonSize,
                "Add nodes", newBallButtonIcons, newNode),
    new Button (55, 10, buttonSize, buttonSize,
                "Remove nodes", removeBallButtonIcons, 0)
];

// A spring between ball1 and ball2 of a given length and strength
var Spring = function(ball1, ball2, length, strength) {
    this.ball1 = ball1;
    this.ball2 = ball2;
    this.length = length;
    this.strength = strength;
    
    this.draw = function() {
        var theta = angle(this.ball1, this.ball2);
        var x1 = this.ball1.x - this.ball1.r * cos(theta);
        var y1 = this.ball1.y - this.ball1.r * sin(theta);
        var x2 = this.ball2.x + this.ball2.r * cos(theta);
        var y2 = this.ball2.y + this.ball2.r * sin(theta);
        line(x1, y1, x2, y2);
    };
    
    this.contract = function() {
        var delta = distance(this.ball1, this.ball2) - this.length;
        var theta = angle(this.ball1, this.ball2);
        var force = delta * strength;
        
        this.ball1.dx -= force * cos(theta);
        this.ball2.dx += force * cos(theta);
        this.ball1.dy -= force * sin(theta);
        this.ball2.dy += force * sin(theta);
    };
};

// Create an array of balls
for (var i = 0; i < 2; i++) {
    var x = ballSize + round(random() * (400 - 2 * ballSize));
    var y = ballSize + round(random() * (400 - 2 * ballSize));
    balls.push(new Ball(x, y, ballSize, ballColour));
}

// Create an array of springs between balls
var springs = [];
for (var i = 0; i < springConnections.length; i++){
    var b1 = balls[springConnections[i][0]];
    var b2 = balls[springConnections[i][1]];
    springs.push(new Spring(b1, b2, springLength, springStrength));    
}

var selected = false;
var i, j;

var draw = function() {
    // Clear everything
    background(255, 255, 255);

    // Draw springs and calculate contraction
    strokeWeight(2);
    stroke(20, 20, 20);
    for (i=0; i<springs.length; i++) {
        springs[i].draw();
        springs[i].contract();
    }

    // Draw balls and calculate repulsion
    for (i=0; i<balls.length; i++) {
        balls[i].draw();
        balls[i].repelFromSides();
        for (j=i; j<balls.length; j++){
            balls[i].repel(balls[j]);
        }
    }
    
    // Work out if any ball is dragged
    if (mouseIsPressed) {
        if (mode === 'dragging') {
        if (!selected) {
            for (i=0; i<balls.length; i++) {
                if (balls[i].selected()) {
                    selected = balls[i];
                    selected.c = selectedColour;
                    break;
                }
            }
        } else {
            // Throw ball
            selected.dx += (mouseX - selected.x) * acceleration;
            selected.dy += (mouseY - selected.y) * acceleration;
        }
    } else { 
        if (selected) {
            selected.c = ballColour;
            selected = false;
        }
    }
    }
    
    // Move balls
    for (i=0; i<balls.length; i++) {
        balls[i].bounce();
        balls[i].move();
    }
    
    // Draw GUI
    for (var b=0; b<buttons.length; b++) {
        buttons[b].isMouseOver();
        buttons[b].draw();
    }
};

// Let go when mouse leaves canvas
var mouseOut = function(){
    mouseIsPressed = false;
};

var mouseClicked = function() {
    var buttonClicked = false;
    var b;
    
    // Button click
    for (b=0; b<buttons.length; b++) {
        if (buttons[b].click()) {
            buttonClicked = true;
            break;
        }
    }
    
    if (!buttonClicked) {
        // Click in an area other than the buttons
        modeFunction();
    } else {
        for (b=0; b<buttons.length; b++) {
            if (buttons[b].desc !== mode) {
                buttons[b].selected = false;
            }
        }
    }

};