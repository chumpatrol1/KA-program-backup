
// Position of circle
var circleX = 200;
var circleY = 200;

// Radius
var circleR = 100;
// Radius squared, calculate it now as we'll use it a lot
var circleR2 = circleR * circleR;

// Radius minus 1, used for anti-aliasing
var circleR1 = circleR - 1;
var circleR12 = circleR1 * circleR1;

// Difference between the square values, inverted
// Used for anti-aliasing
var circleRd = 1 / (circleR2 - circleR12);

/*******************************************************
 *      Get going
********************************************************/

draw = function() {
    background(0);
    loadPixels();
    
    var p = this.imageData.data;

    // Vary y from the top of the circle to the bottom
    for (var y = -circleR; y < circleR; y++) {
        // We have a circle centered at (0, 0);
        // Pythagoras tells us that a the edge of the circle,
        // x^2 + y^2 = r^2
        // So for a given y, x = sqrt(r^2 - y^2)
        var dx = floor(sqrt(circleR2 - y * y));
        
        // For this y, the circle goes from -dx to dx
        // (So its width is 2dx)
        for (var x = -dx; x <= dx; x++) {
            var intensity = 1;
            // Distance from pixel to center at (0, 0)
            var pixelDist = x * x + y * y;
            
            // If pixel is further than radius - 1 from the center
            // i.e. is on the edge of the circle
            if (pixelDist > circleR12) {
                // Scale intensity by the distance this pixel is from
                // radius minus 1
                intensity *= 1 - (pixelDist - circleR12) * circleRd;
            }
            
            // So far we have assumed the circle was at (0, 0) to make things easy
            // Now move its center to (circleX, circleY)
            var pixelX = circleX + x;
            var pixelY = circleY + y;
            
            // Find which element in p to update
            // p is an 4 * 400 * 400 long array
            // For each pixel, it has four values (RGBA)
            // The first row of pixels goes from 0 - 399 * 4
            // The second row goes from 400 * 4 - 799 * 4
            // The yth row goes from y * 400 * 4
            // To find the xth pixel across, add x * 4
            var pixelIndex = (pixelX + pixelY * 400) * 4;
            
            // Set the pixels 
            p[pixelIndex++] = 128 * intensity;      // Red value
            p[pixelIndex++] = 200 * intensity;      // Green value
            p[pixelIndex++] = 255 * intensity;      // Blue value
        }
    }

    updatePixels();
    
    noLoop();
};
