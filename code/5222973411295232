// Implementing my own Perlin noise
// From: https://en.wikipedia.org/wiki/Perlin_noise
// http://flafla2.github.io/2014/08/09/perlinnoise.html



// 6t^5 - 15t^4 + 10t^3
var fade = function(t) {
    return t * t * t * (t * (t * 6 - 15) + 10);         
};

var Grid = function(w, h) {
    this.width = w;
    this.height = h;
    this.size = 120;
    this.w = this.width * this.size;
    this.h = this.height * this.size;
    this.x = (width - this.w) / 2;
    this.y = 80;
    this.x2 = this.x + this.w;
    this.y2 = this.y + this.h;
    this.gradients = this.getRandomGradient();
    this.calculateNoise();
};

Grid.prototype.draw = function() {
    noFill();
    strokeWeight(2);
    
    var bx, by;
    var s2 = this.size / 2;
    
    image(this.img, this.x, this.y);
    
    for (var x = 0; x <= this.width; x++) {
        bx = this.x + x * this.size;
        for (var y = 0; y <= this.height; y++) {
            by = this.y + y * this.size;
            if (x < this.width && y < this.height) {
                stroke(40);
                rect(bx, by, this.size, this.size);
            }
            
            stroke(40, 80, 250);
            line(bx, by,
                 bx + (s2 - 2) * this.gradients[x][y][0],
                 by + (s2 - 2) * this.gradients[x][y][1]);
        }
    }
    
    var BLACK = color(0,0,0);
    var GREEN = color(0,255,0);
    var RED = color(255,0,0);
    
    var col = function(n) {
        n /= Math.SQRT2;
        
        if (n >= 0) {
            return lerpColor(BLACK, GREEN, n);
        } else {
            return lerpColor(BLACK, RED, -n);
        }
    };
    
    if (this.mouseOver()) {
        fill(0);
        var x = this.pixelToGridX();
        var y = this.pixelToGridY();
        var gx = floor(x);
        var gy = floor(y);
        
        if (gx < this.width && gy < this.height) {
            var mx = x % 1;
            var my = y % 1;
            var dx = (x - gx) * this.size;
            var dy = (y - gy) * this.size;
            var delta = [[0, 0], [1, 0], [0, 1], [1, 1]];
            var dots = [];
            
            for (var i = 0; i < 4; i++) {
                var d = delta[i];
                var grad = this.gradients[gx + d[0]][gy + d[1]];
                var distX = mx - d[0];
                var distY = my - d[1];
                var dp = distX * grad[0] + distY * grad[1];
                dots.push(dp);
                
                var x = this.gridToPixelX(gx + d[0]);
                var y = this.gridToPixelY(gy + d[1]);
                
                noStroke();
                var n = 255 - 128 * ((d[0] ? mx : (1 - mx)) + (d[1] ? my : (1 - my)));
                fill(n, n, 255, 200);
                //rect(x + 1, y + 1, this.size - 2, this.size - 2);
                
                stroke(col(dp));
                line(x, y, x + distX * this.size, y + distY * this.size);
                
                noStroke();     
                fill(col(dp));
                rect(d[0] * 20, d[1] * 20, 20, 20);
                
                x += 5;
                y += 15;
                text(nf(distX, 0, 2) + ", " + nf(distY, 0, 2), x, y);
                //text(dp.toFixed(3), x, y + 16);
            }
            
            text(mx.toFixed(3), 350, 120);
            text(my.toFixed(3), 350, 140);
            var ix1 = lerp(dots[0], dots[1], mx);
            fill(col(ix1));
            text(ix1.toFixed(3), 350, 160);
            var ix2 = lerp(dots[2], dots[3], mx);
            fill(col(ix2));
            text(ix2.toFixed(3), 350, 180);
            var v = lerp(ix1, ix2, my);
            fill(col(v));
            text(v.toFixed(3), 350, 200);
            rect(10, 10, 20, 20);
        
        }
    }
};

Grid.prototype.getRandomGradient = function() {
    var gradients = [];
    
    for (var x = 0; x <= this.width; x++) {
        var row = [];
        for (var y = 0; y <= this.height; y++) {
            var angle = random(0, 360);
            row.push([cos(angle), sin(angle)]);
        }
        gradients.push(row);
    }
    
    return gradients;
};

Grid.prototype.dotGridGradient = function(ix, iy, x, y) {
    // Compute the distance vector
    var dx = x - ix;
    var dy = y - iy;
 
    // Compute the dot-product
    return dx * this.gradients[ix][iy][0] + dy * this.gradients[ix][iy][1];
 };

Grid.prototype.calculateNoise = function() {
    var img = createGraphics(this.w, this.h, JAVA2D);
    var n = this.gradients.length;
    var x, y, dx, dy, x0, x1, y0, y1, n0, n1, ix0, ix1, value, weightX, weightY;
    
    for (x = 0; x < this.w; x++) {
        // Determine grid cell x-coordinates
        dx = x / this.size;
        x0 = floor(dx);
        x1 = (x0 + 1) % n;
        weightX = fade(dx - x0);     // Interpolation weight
        
        for (y = 0; y < this.h; y++) {
            // Determine grid cell y-coordinates
            dy = y / this.size;
            y0 = floor(dy);
            y1 = (y0 + 1) % n;
            weightY = fade(dy - y0);     // Interpolation weight
            
            n0 = this.dotGridGradient(x0, y0, dx, dy);
            n1 = this.dotGridGradient(x1, y0, dx, dy);
            ix0 = lerp(n0, n1, weightX);
            
            n0 = this.dotGridGradient(x0, y1, dx, dy);
            n1 = this.dotGridGradient(x1, y1, dx, dy);
            ix1 = lerp(n0, n1, weightX);
            
            value = lerp(ix0, ix1, weightY);
            img.stroke(128 + value * 128);
            img.point(x, y);
        }
    }
    
    this.img = img;
};

Grid.prototype.mouseOver = function() {
    return mouseX >= this.x && mouseX < this.x2 &&
           mouseY >= this.y && mouseY < this.y2;
};

Grid.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        var gx = this.pixelToGridX();
        var gy = this.pixelToGridY();
        var angle = atan2(gy % 1 - 0.5, gx % 1 - 0.5);
        this.gradients[floor(gx)][floor(gy)] = [cos(angle), sin(angle)];
    }
};

Grid.prototype.pixelToGridX = function() {
    return map(mouseX, this.x, this.x2, 0, this.width);
};

Grid.prototype.pixelToGridY = function() {
    return map(mouseY, this.y, this.y2, 0, this.height);
};

Grid.prototype.gridToPixelX = function(v) {
    return map(v, 0, this.width, this.x, this.x2);
};

Grid.prototype.gridToPixelY = function(v) {
    return map(v, 0, this.height, this.y, this.y2);
};


var grid = new Grid(2, 2);

draw = function() {
    background(250);
    grid.draw();
};

mousePressed = function() {
    grid.mousePressed();
};
