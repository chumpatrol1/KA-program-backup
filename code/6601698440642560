var cardsOut = [];
var chosenCards =[];
var cardHeight = 75;
var cardWidth = 50;
var shapeSize = 12;
var columns = 4;
var score = 0;
var sets =20;

var screen = 'intro';

// Constants
// Put here so they're easy to change
var BACKGROUND = color(255, 249, 66);
var CARD_COLOR = color(240, 231, 231);

var STROKE_COLORS = [
    color(8, 107, 8),
    color(0, 17, 255),
    color(255, 68, 0)
];

var FILL_COLORS = [
    color(23, 135, 13),
    color(17, 0, 255),
    color(255, 0, 0),
];

// Shape functions for card
var drawSquare = function(x, y) {
    rect(x - shapeSize / 2, y - shapeSize / 2, shapeSize, shapeSize);
};

var drawCircle = function(x, y) {
    ellipse(x, y, shapeSize, shapeSize);
};

var drawTriangle = function(x, y) {
    triangle(x, y - shapeSize / 2,
             x - shapeSize / 2, y + shapeSize / 2,
             x + shapeSize / 2, y + shapeSize / 2);
};


//set up for cards
var Cards = function(n) {
    this.number = n;
    this.opacity = (n % 3) / 2;
    this.amount =  floor(n / 9) % 3 + 1;
    this.stroke = STROKE_COLORS[floor(n / 3) % 3];
    this.fill = FILL_COLORS[floor(n / 3) % 3];
    
    // Mix fill with background to get transparent effect
    this.fill = lerpColor(this.fill, CARD_COLOR, this.opacity);
    
    // Set draw functions
    if (n < 28) {
        this.shape = 'square';
        this.drawShape = drawSquare;
    } else if(n > 54){
        this.shape = 'circle';
        this.drawShape = drawCircle;
    } else {
        this.shape = 'triangle';
        this.drawShape = drawTriangle;
    }
};

Cards.prototype.draw = function(x, y) {
    this.x = x;
    this.y = y;
    
    // Highlight
    if (this.selected){
        fill(255, 0, 230, 60);
        noStroke();
        for (var i = 1; i < 4; i++) {
            rect(x - i, y - i, cardWidth + i*2 + 1, cardHeight + i*2 + 1, 3);   
        }
    }
    
    // Card outline
    fill(CARD_COLOR);
    stroke(112, 105, 111);
    strokeWeight(1);
    rect(x, y, cardWidth, cardHeight);
    
    // Card details
    strokeWeight(2);
    stroke(this.stroke);
    fill(this.fill);
    
    for(var i = 0; i < this.amount; i++) {
        this.drawShape(x + (i + 0.5) * (shapeSize + 3) + 3, y + 30);
    }
};

Cards.prototype.click = function() {
    if (mouseX > this.x && mouseX < this.x + cardWidth &&
        mouseY > this.y && mouseY < this.y + cardHeight) {
            if (!this.selected) {
                // Select card
                this.selected = true;
                // Store the number of the card so it's easier to refer to
                chosenCards.push(this);
            } else {
                // Deselect card
                this.selected = false;
                // Remove from chosen cards
                var i = chosenCards.indexOf(this);
                chosenCards.splice(i, 1);
            }
    }
};

/**********************************************
 *  Initialise objects
***********************************************/
// Make the deck of cards
var deck = [];
for (var i = 0; i < 81; i++){
    deck.push(new Cards(i));
}

// Add n cards to the table
var dealCards = function(n) {
    for(var i = 0; i < n; i++) {
        var drawn = floor(random(deck.length));
        var myCard = deck[drawn];
        
        // Take card out
        cardsOut.push(myCard);
    
        // Remove card from deck
        deck.splice(drawn,1);
    }
};
dealCards(12);

// This can be used to tell the player why their set failed.
var failInfo = function(card1, card2, card3, p) {
    println(p);
    println(card1[p] + " " + card2[p] + " " + card3[p]);
};

var testForSet = function(){
    // This just saves some typing later
    var card1 = chosenCards[0];
    var card2 = chosenCards[1];
    var card3 = chosenCards[2];
    
    // Assume we have a match until proven otherwise
    var check = true;
    
    // Check properties in a loop
    var properties = ['opacity', 'amount', 'stroke', 'shape'];

    for (var i = 0; i < properties.length; i++) {
        var p = properties[i];
        
        if (card1[p] === card2[p]) {
            if (card1[p] !== card3[p]) {
                check = false;
                failInfo(card1, card2, card3, p);
                break;  // No need to check further
            }
        } else if (card1[p] === card3[p] || card2[p] === card3[p]) {
            check = false;
            failInfo(card1, card2, card3, p);
            break;  // No need to check further
        }
    }

    if (check) {
        // Remove chosen cards
        for (var i = 0; i < chosenCards.length; i++) {
            var index = cardsOut.indexOf(chosenCards[i]);
            cardsOut.splice(index, 1);
        }
        
        score += 10;
        sets -= 1;
        if (sets === 0) {
            screen = 'end';
        } else {
            dealCards(min(3, deck.length));
        }

    } else {
        score -= 10;
    }
    
    chosenCards = [];
};

/**********************************************
 *  Draw functions
***********************************************/

var drawStartScreen = function() {
    background(34, 39, 89);
    fill(240, 240, 237);
    textSize(22);
    text("Set!", 100, 100);
    text("Every card has 4 characteristics:\n shape, amount of shapes, amount its \nfilled in and color.\n Form a set by finding any 3 cards \nwhere for each of these characteristics \nthey are all the same, or all different.\n\nClick to Start!", 10, 150);
};

var drawCardScreen = function() {
    background(BACKGROUND);
    
    // Button
    fill(68, 255, 0);
    rect(350,0,50,50);
    fill(0, 0, 0);
    text("More\ncards",348,19);

    // Cards
    var gap = (width - cardWidth * columns) / (columns + 1);
    for (var i = 0; i< cardsOut.length; i++) {
        var row = i % columns;
        var column = floor(i / columns);
        var x = row * (cardWidth + gap) + gap;
        var y = (column + 0.5) * cardHeight * 1.5;
        cardsOut[i].draw(x, y);
    }
    
    // Information
    fill(3, 3, 3);
    textSize(20);
    text("Score: "+ score, 20, 20);
    text(sets + " sets remain", 150, 20);
};

var drawEndScreen = function() {
    background(0, 0, 0);
    fill(241, 242, 237);
    text("Congrats! You got a score of " + score,13,100);
};

/**********************************************
 *      Main loop
 *  Try to keep this as simple as possible,
 *  so it's easy to see the overall logic.
***********************************************/

draw = function() {
    switch(screen) {
        case 'intro':
            drawStartScreen();
            break;
        case 'playing':
            drawCardScreen();
            break;
        case 'end':
            //drawEndScreen();
    }
};
    
/**********************************************
 *      Event handling
***********************************************/

//note when cards are chosen and add them to the list of chosen cards
mouseClicked = function() {
    if (screen === 'intro') {
        screen = 'playing';
    }
    
    // Click on a card
    for(var i = 0; i < cardsOut.length; i++) {
        cardsOut[i].click();
    }
   
    if (chosenCards.length === 3){
        testForSet();
    }
    
    // Click more cards button
    if (mouseX > 350 && mouseY < 50){
        columns++;
        dealCards(3);
    }
};