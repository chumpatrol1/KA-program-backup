// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var BLACK = color(0, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);
var MESSAGEBLUE = color(20, 60, 160);

var CONTROL_POINT_SIZE = 14;
var RESOLUTION = 40;

var num_points = 3;
var SOLUTIONS = [
    [[2, 1]],
    [[2, 1], [2, 2], [3, 1.5]],
    [[2, 1], [2, 2], [2, 3], [3, 1.5], [3, 2.5], [4, 2]],
    [[2, 1], [2, 2], [2, 3], [2, 4], [3, 1.5], [3, 2.5], [3, 3.5], [4, 2], [4, 3], [5, 2.5]],
];

var sansFont = createFont("sans", 14);
var serifFont = createFont("serif", 16);

var gridSize = 18;
var snapSize = 9;
var toolbar, nextButton;

var state = "intro";

var showing = {
    'Control points': true,
    'Control arms': true,
    Construction: true,
    Curve: false,
    //Labels: true,
    Grid: false,
    //Equation: false,
    //Evaluation: false
};

var dragX, dragY;

var snap = function(n) {
    return round(n / snapSize) * snapSize;
};

var snapX = function(x) {
    return width / 2 - snap(width / 2 - x);
};

var snapY = function(y) {
    return height / 2 - snap(height / 2 - y);
};

/**************************************
 *  Generic GUI component from which
 * other elements inherit
 * 
 * The default object is basically a
 * button
***************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};
}
/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/******************************************************
 * GUI Slider to vary parameters
*******************************************************/
{
var Slider = function(x, y, w, minValue, maxValue, nowValue, name, updateFunction) {
    GUI_Component.call(this, x, y, w, 12, name, updateFunction);
    
    this.x2 = x + w;
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = minValue;
    this.max = maxValue;
    this.val = nowValue === undefined ? minValue : nowValue;
    this.setValue(this.val);
    
    this.held = false;
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(TEXTCOL);
        textFont(serifFont, 15);
        textAlign(CENTER, BASELINE);
        text(this.name + " = " + this.val / 100,  this.x + this.w / 2, this.y - 13);
    }
    
    strokeWeight(2);
    stroke(PINK);
    line(this.x, this.y, this.bx, this.y);

    stroke(BLUE);
    line(this.bx, this.y, this.x2, this.y);

    strokeWeight(1);
    stroke(255);
    fill(GREEN);
    ellipse(this.bx, this.y, this.ballD, this.ballD);

};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max));
        this.trigger();
        return true;
    }
};

Slider.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
};
}
/*************************************
 *      Toolbar
 *  Contains other GUI elements
**************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, updateF, options) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    var button = new Button(x, y, w, h, name, updateF);
    
    if (options) {
        for (var opt in options) {
            button[opt] = options[opt];
        }
    }
    
    this.buttons.push(button);
    this.components.push(button);
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = name ? 24 : 10;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    var slider = new Slider(x, y, w, minX, maxX, nowX, name, updateF);
    
    this.sliders.push(slider);
    this.components.push(slider);
    this.h += h + 16;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.buttons.push(button);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].mouseDragged()) {
            return true;
        }
    }
};
}
/*************************************
 * DraggablePoint
 * A freely draggable point with a
 * position and colour.
**************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function(selected) {
    if (selected === this || (!selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x = snapX(mouseX + dragX);
    this.y = snapY(mouseY + dragY);
};
}
/*************************************
 * InteractivePoint
 * A point with a position and colour
 * which has a mouseover effect.
**************************************/

var InteractivePoint = function(x, y, n, depth) {
    this.x = x;
    this.y = y;
    this.n = n;
    this.depth = depth;
    
    this.d = 7;
    this.animation = 0;
};

InteractivePoint.prototype.draw = function(selected) {
    if (selected || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }
    
    strokeWeight(1);
    stroke(BACKGROUND);
    
    if (selected) {
        fill(PINK);
    } else {
        fill(GREY);    
    }
    
    var d = this.d + this.animation / 2 ;
    quad(this.x, this.y - d, this.x + d, this.y, this.x, this.y + d, this.x - d, this.y);
    
    fill(0);
    //text(this.n, this.x, this.y);
};

InteractivePoint.prototype.mouseOver = function() {
    return mouseX >= this.x - this.d && mouseX <= this.x + this.d && 
           mouseY >= this.y - this.d && mouseY <= this.y + this.d;
};

/*************************************
 * HalfLine
 * Line between by two points with two colours 
**************************************/

var HalfLine = function(p1, p2, t, thickness) {
    this.p1 = p1;
    this.p2 = p2;
    this.thickness = thickness || 1;
    
    var pointId =  (p1.n + p2.n) / 2;
    var depth = max(p1.depth || 0, p2.depth || 0) + 1;
    this.point = new InteractivePoint(0, 0, pointId, depth);
    this.updateT(t);
};

HalfLine.prototype.draw = function() {
    strokeWeight(this.thickness);
    stroke(PINK);
    line(this.p1.x, this.p1.y, this.point.x, this.point.y);
    stroke(BLUE);        
    line(this.point.x, this.point.y, this.p2.x, this.p2.y);
};

HalfLine.prototype.updateT = function(t) {
    this.point.x = lerp(this.p1.x, this.p2.x, t);
    this.point.y = lerp(this.p1.y, this.p2.y, t);
};

/*************************************
 * Curve
 * Curve between by two points at
 * (x1, y1) and (x2, y2), with n control points
**************************************/

var Curve = function(cx, cy, n) {
    this.cx = cx;
    this.cy = cy;
    this.n = n;
    this.t = 0.5;
    this.selectedControl = false;
    
    this.setControlPoints(n);
    this.getControlArms();
    this.curvePoint = this.arms[0].point;
    
    this.id = [];
    this.armIds = {};
};

Curve.prototype.setControlPoints = function(n) {
    this.controlPoints = [];
    
    var radius = min(width, height) * 0.35 - 20;
    var dAngle = (random(150) + 120) / (n - 1);
    var angle = random(360);
    
    for (var i = 0; i < n; i++) {
        angle += dAngle + (random(20) - 10);
        var r = radius + (random(40) - 20);
        var x = constrain(this.cx - r * cos(angle), 0, width);
        var y = constrain(this.cy - r * sin(angle), 0, height);
        var p = new DraggablePoint(x, y);
        p.n = i;
        this.controlPoints.push(p);
    }
};

Curve.prototype.getControlArms = function() {
    this.arms = [];
    for (var i = 0; i < this.controlPoints.length - 1; i++) {
        var p1 = this.controlPoints[i];
        var p2 = this.controlPoints[i + 1];
        this.arms.push(new HalfLine(p1, p2, this.t, 3));
    }
};

Curve.prototype.updateT = function(t) {
    this.t = t;
    for (var i = 0; i < this.arms.length; i++) {
        this.arms[i].updateT(t);
    }
};

Curve.prototype.addArm = function(p1, p2) {
    if (p1 === p2) {
        state = false;
        return;
    }
    
    if (p1.n > p2.n) {
        var tmp = p1;
        p1 = p2;
        p2 = tmp;
    }

    var arm = new HalfLine(p1, p2, this.t, 1); 
    var id = [arm.point.depth, arm.point.n];
    arm.id = id.join(",");
    
    if (!this.armIds[arm.id]) {
        this.arms.push(arm);
        this.curvePoint = arm.point;
        this.calculateCurve();
        toolbar.buttons[toolbar.buttons.length - 1].disabled = false;
        
        this.id.push(id);
        this.armIds[arm.id] = true;
        state = false;
        this.test();
    }
    
    //println("add " + this.arms.length);
};

Curve.prototype.removeLastArm = function() {
    if (this.arms.length >= this.n) {
        var arm = this.arms.splice(-1)[0];
        this.id.splice(-1);
        
        this.armIds[arm.id] = false;
        var n = this.arms.length;
        
        if (n === this.n - 1) {
            toolbar.buttons[toolbar.buttons.length - 1].disabled = true;
        }
        
        this.curvePoint = this.arms[n - 1].point;
        this.calculateCurve();

        if (n === this.n) {
            state = 'intro';
        }
        this.test();
    }
};

Curve.prototype.calculateCurve = function() {
    this.curvePoints = [];
    var n = this.arms.length;
    
    if (!n) { return; }
    
    for (var i = 0; i <= RESOLUTION; i++) {
        for (var j = 0; j < n; j++) {
            this.arms[j].updateT(i / RESOLUTION);
        }
        this.curvePoints.push([
            this.curvePoint.x,
            this.curvePoint.y
        ]);
    }
    
    // Reset t
    for (var i = 0; i < n; i++) {
        this.arms[i].updateT(this.t);
    }
};

Curve.prototype.test = function() {
    state = false;
    var test = SOLUTIONS[num_points - 3];
    
    if (test.length !== this.id.length) {
        return false;
    }
    
    this.id.sort(function(a, b) {
        return (a[0] * 10 + a[1]) - (b[0] * 10 + b[1]);
    });
    
    for (var i = 0; i < test.length; i++) {
        if (i > this.id.length - 1) {
            return false;
        }
        //println("t " + this.id[i] + " " + test[i]);
        if (this.id[i][0] !== test[i][0] ||
            this.id[i][1] !== test[i][1]) {
                return false;
        }
    }
    
    state = 'win';
    return true;
};

Curve.prototype.draw = function() {
    //println(this.id);
    
    if (showing.Curve && this.curvePoints && this.arms.length >= this.n) {
       this.drawCurve();   
    }
    
    // Lines to control points
    if (showing['Control arms']) {
        var n = showing.Construction ? this.arms.length : this.n - 1;
        for (var i = 0; i < n; i++) {
            this.arms[i].draw();
        }
        
        for (var i = 0; i < n; i++) {
            this.arms[i].point.draw(this.selected === this.arms[i]);
        }
    }
    
    fill(212, 21, 21);
    //text(this.arms.length, 20, 300);
    
    // Point at t
    if (this.arms.length >= this.n) {
        stroke(255);
        fill(GREEN);
        strokeWeight(1);
        ellipse(this.curvePoint.x, this.curvePoint.y, 12, 12);
    }
    
    if (showing['Control points']) {
        this.drawControlPoints();
    }
    
    if (this.selected) {
        strokeWeight(1);
        stroke(GREY);
        line(this.selected.point.x, this.selected.point.y, mouseX, mouseY);
    }
};

Curve.prototype.drawCurve = function() {
    strokeWeight(5);
    stroke(GREEN);
    noFill();
    
    beginShape();
    for (var i = 0; i < this.curvePoints.length; i++) {
        vertex(this.curvePoints[i][0], this.curvePoints[i][1]);
    }
    endShape();
};

Curve.prototype.drawControlPoints = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        this.controlPoints[i].draw(this.selected);
    }
    
    if (showing.Labels) {
        this.drawLabels();
    }
};

Curve.prototype.drawLabels = function() {
    textSize(16);
    textAlign(CENTER, CENTER);
    
    var x1 = this.p1.x;
    var y1 = this.p1.y;
    var x2 = this.p2.x;
    var y2 = this.p2.y;
    var x3 = this.p3.x;
    var y3 = this.p3.y;
    
    this.drawLabel("C", x1, y1, x3, y3);
    this.drawLabel("A", x2, y2, x3, y3);
    this.drawLabel("B", x3, y3, (x1 + x2)/2, (y1 + y2) / 2);
    
    x1 = lerp(x3, x1, this.t);
    y1 = lerp(y3, y1, this.t);
    x2 = lerp(x2, x3, this.t);
    y2 = lerp(y2, y3, this.t);
    var x3 = lerp(x2, x1, this.t);
    var y3 = lerp(y2, y1, this.t);
    
    fill(0);
    this.drawLabel("R", x1, y1, x2, y2);
    this.drawLabel("Q", x2, y2, x1, y1);
    
    fill(GREEN);
    var angle = atan2(y1 - y2, x1 - x2) - 90;
    this.drawLabel("P", x3, y3, x3 + cos(angle), y3 + sin(angle));
};

Curve.prototype.drawLabel = function(name, x1, y1, x2, y2) {
    var dx = x1 - x2;
    var dy = y1 - y2;
    var d = sqrt(dx * dx + dy * dy);
    dx /= d;
    dy /= d;
    
    text(name, x1 + dx * 15, y1 + dy * 15);
};

Curve.prototype.mousePressed = function() {
    // Test whether any control points are selected
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseOver()) {
            this.selectedControl = this.controlPoints[i];
            dragX = this.selectedControl.x - mouseX;
            dragY = this.selectedControl.y - mouseY;
            break;
        }
    }
    
    // Test whether any (new) anchor point selected
    var oldSelected = this.selected;
    this.selected = false;
    
    for (var i = 0; i < this.arms.length; i++) {
        if (this.arms[i].point.mouseOver()) {
            this.selected = this.arms[i];
            break;
        }
    }
    
    // If we had selected an anchor point and have selected another,
    // add a new arm
    if (this.selected) {
        if (oldSelected) {
            this.addArm(oldSelected.point, this.selected.point);
            this.selected = false;
        } else if (this.n === 3){
            state = 'holding arm';
        }
    }
    
};

Curve.prototype.mouseDragged = function() {
    if (this.selectedControl !== false) {
        this.selectedControl.move();
        this.calculateCurve();
    }
};

Curve.prototype.mouseReleased = function() {
    this.selectedControl = false;
};

/*************************************
 * Creation of objects
**************************************/
var myCurve = new Curve(width / 2 + 100, height / 2 + 40, num_points);

var updateT = function(v) {
    myCurve.updateT(v / 100);
    myCurve.movedT = true;
};
var updateDepth = function(i, v) {
    myCurve.setControlPoints(i);
};

toolbar = new Toolbar(width * 0.01, width * 0.01, 128);
//toolbar.addScrubber(2, ["Linear", "Quadratic", "Cubic", "Quartic", "Quintic"], updateDepth);
toolbar.addSlider(0, 100, 50, "t", updateT);
toolbar.addOptions(showing);

var removeArm = function() {
    myCurve.removeLastArm();
};

toolbar.addButton("Undo", removeArm, { disabled: true });

var nextProblem = function() {
    myCurve = new Curve(width / 2 + 100, height / 2 + 40, ++num_points);
    state = false;
    showing.Curve = false;
    toolbar.buttons[toolbar.buttons.length - 1].disabled = true;
};

nextButton = new Button(width / 2 - 30, 64, 60, 20, "Next", nextProblem);
nextButton.showing = false;

/*************************************
 *  Draw functions
**************************************/
var drawMessageBox = function(txt, x, y, h, left) {
    textAlign(CENTER, CENTER);
    textSize(16);
    textLeading(20);
    
    strokeWeight(3);
    stroke(20, 60, 160);
    fill(TOOLBAR);
    
    var w = textWidth(txt) + 24;

    x = x - (left ? 0 : w / 2);
    rect(x, y, w, h, 20);
    
    fill(20);
    text(txt, x + w / 2, y + h / 2);
};

var drawArrow = function(x1, y1, x2, y2) {
    var angle = atan2(y2 - y1, x2 - x1);
    var d = dist(x1, y1, x2, y2) * 0.3;
    
    var cx1 = x1;
    var cy1 = y1;
    var cx2 = x2;
    var cy2 = y2;
    var angle2 = angle + 20;
    
    if (angle > 45 && angle < 135) {
        cx1 += d * cos(angle + 40);
        cy1 += d * sin(angle + 40);
        cx2 -= d * cos(angle - 40);
        cy2 -= d * sin(angle - 40);
        angle2 = angle - 40;
    } else {
        cx1 += d * cos(angle - 20);
        cy1 += d * sin(angle - 20);
        cx2 -= d * cos(angle + 20);
        cy2 -= d * sin(angle + 20);
    }
    
    //ellipse(cx1, cy1, 8, 8);ellipse(cx2, cy2, 8, 8);
    
    noFill();
    strokeWeight(3);
    stroke(MESSAGEBLUE);
    bezier(x1, y1, cx1, cy1, cx2, cy2, x2, y2);
    
    noStroke();
    fill(MESSAGEBLUE);
    pushMatrix();
    translate(x2, y2);
    rotate(angle2);
    triangle(8, 0, -5, 4, -5, -4);
    popMatrix();
};

var drawMessage = function(message, x, y, x1, y1) {
    textFont(sansFont, 15);
    textLeading(16);
    
    var nLines = message.split("\n").length;
    var w = textWidth(message) + 20;
    var h = nLines * 22 + 3;
    
    strokeWeight(3);
    stroke(MESSAGEBLUE);
    fill(255);
    rect(x - w / 2, y, w, h, 20);
    
    textAlign(CENTER, CENTER);
    fill(20);
    text(message, x, y + h / 2);
    
    if (x1) {
        drawArrow(x - w / 2, y + h / 2, x1, y1);
    }
};

var getMessage = function() {
    var message, x1, y1;
    nextButton.showing = false;

    if (state === 'intro') {
        message = "Click on a grey diamond to begin a construction line.";
        //x1 = myCurve.arms[0].point.x;
        //y1 = myCurve.arms[0].point.y - 10;
    } else if (state === 'holding arm') {
        message = "Click on another grey diamond to add a construction line.";
    } else if (state === 'win') {
        if (showing.Curve) {
            message = "Congratulations!\nYou made a curve using " + (myCurve.n - 1) + " arms.";
            nextButton.showing = (myCurve.n < 6);
        } else if (!myCurve.movedT) {
            message = "Change the value of t and watch how the green point moves.";
            x1 = toolbar.x + toolbar.w;
            y1 = toolbar.sliders[0].y;
        } else {
            message = "Show the curve to see the shape the point traces out.";
            var x1 = toolbar.x + toolbar.w - 40;
            var y1 = toolbar.buttons[3].y + 12;
        }
    } else if (myCurve.arms.length === myCurve.n - 1) {
        message = "Now try to make a degree " + (myCurve.n - 1) + " curve.";
    }
    
    if (message) {
        drawMessage(message, width / 2, width * 0.01, x1, y1);
    }

};

var drawGrid = function() {
    stroke(GRIDGREY);
    strokeWeight(1);
    
    var n = ceil(0.5 * width / gridSize);
    for (var x = -n; x < n; x++) {
        var gx = width / 2 + x * gridSize;
        line(gx, 0, gx, height);
    }
    
    n = ceil(0.5 * height / gridSize);
    for (var y = -n; y < n; y++) {
        var gy = height / 2 + y * gridSize;
        line(0, gy, width, gy);
    }
    
    // Axes
    stroke(GREY);
    line(width / 2, 0, width / 2, height);
    line(0, height / 2, width, height / 2);
    
    // Labels
    fill(GREY);
    textSize(11);
    
    textAlign(CENTER, TOP);
    n = ceil(0.25 * width / gridSize) * 2;

    for (var x = -n; x <= n; x += 2) {
        if (x) {
            var gx = width / 2 + x * gridSize;
            line(gx, height/2 - 2, gx, height/2 + 2);
            text("" + x, gx, height / 2 + 5);
        }
    }
    
    textAlign(RIGHT, CENTER);
    n = ceil(0.25 * height / gridSize) * 2;
    for (var y = -n; y <= n; y += 2) {
        if (y) {
            var gy = height / 2 + y * gridSize;
            line(width/2 - 2, gy, width/2 + 2, gy);
            text("" + (-y),  width/2 - 5, gy);   
        }
    }
};

/*************************************
 * Main loop
**************************************/

draw = function() {
    background(BACKGROUND);
    if (showing.Grid) {
        drawGrid();
    }
    myCurve.draw();
    toolbar.draw();
    nextButton.draw();
    getMessage();
};

/****************************************************
 * Event handling
*****************************************************/

mousePressed = function() {
    myCurve.mousePressed();
    toolbar.mousePressed();
    nextButton.mousePressed();
};

mouseReleased = function() {
    myCurve.mouseReleased();
    toolbar.mouseReleased();
    nextButton.mouseReleased();
};

mouseDragged = function() {
    myCurve.mouseDragged();
    toolbar.mouseDragged();
};
