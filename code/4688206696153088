/****************************************
 * Finding points on a cubic indirectly
*****************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 240);

var CONTROL_POINT_SIZE = 12;
var RESOLUTION = 30;

/*********************************************************************
 *      Draggable point
*********************************************************************/

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

draggablePoint.prototype.draw = function() {
    if (this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    var r = CONTROL_POINT_SIZE + this.animation;
    
    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);    
    ellipse(this.x, this.y, r, r);
};

/***************************************
 *      Parabolic line
 * A line made of a series of points
 * Between each point pair of points,
 * a control point is added,
 * which controls the parabola.
****************************************/
var getMidpoint = function(p1, p2) {
    return { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };
};

var getWeightedPoint = function(p1, p2, w) {
    return { x: lerp(p1.x, p2.x, w), y: lerp(p1.y, p2.y, w) };
};

var getCubicHermite = function(t, p1, p2, m1, m2) {
    var t2 = t * t;
    var t3 = t * t2;
    
    var a =  2 * t3 - 3 * t2 + 1;
    var b = -2 * t3 + 3 * t2;
    var c = t3 - 2 * t2 + t;
    var d = t3 - t2;
    
    return {
        x: p1.x * a + p2.x * b + m1.x * c + m2.x * d,
        y: p1.y * a + p2.y * b + m1.y * c + m2.y * d
    };
};

var getCubicBezier = function(t, p1, p2, m1, m2) {
    var t2 = t * t;
    var t3 = t * t2;
    
    var a = -1 * t3 + 3 * t2 - 3 * t + 1;
    var b = t3;
    var c =  3 * t3 - 6 * t2 + 3 * t;
    var d = -3 * t3 + 3 * t2;
    
    return {
        x: p1.x * a + p2.x * b + m1.x * c + m2.x * d,
        y: p1.y * a + p2.y * b + m1.y * c + m2.y * d
    };
};

/***************************************
 *  Spline between an array of points
****************************************/

var spline = function(points, color) {
    this.vertices = [];
    this.controls = [];
    this.color = color || GREEN;
    this.selected = false;
    
    // Add vertices;
    for (var i = 0; i < points.length; i += 2) {
        this.vertices.push(new draggablePoint(points[i], points[i + 1]));
    }
    
    // Add control points as midpoints
    for (var i = 0; i < this.vertices.length - 1; i++) {
        var p1 = this.vertices[i];
        var p2 = this.vertices[i + 1];
        var m1 = getWeightedPoint(p1, p2, 0.3);
        var m2 = getWeightedPoint(p1, p2, 0.7);
        this.controls.push(new draggablePoint(m1.x, m1.y, PINK));
        this.controls.push(new draggablePoint(m2.x, m2.y, PINK));
    }
    
    this.points = this.vertices.concat(this.controls);
    
};

spline.prototype.draw = function() {
    noFill();
    
    for (var i = 0; i < this.controls.length; i += 2) {
        var m1 = this.controls[i];
        var m2 = this.controls[i + 1];
        var p1 = this.vertices[i / 2];
        var p2 = this.vertices[i / 2 + 1];
        
        // Draw control lines
        strokeWeight(2);
        stroke(BLUE);
        line(p1.x, p1.y, m1.x, m1.y);
        line(p2.x, p2.y, m2.x, m2.y);
        
        // Draw curve
        strokeWeight(4);
        stroke(this.color);
        beginShape();
        for (var j = 0; j <= RESOLUTION; j++) {
            var p = getCubicBezier(j / RESOLUTION, p1, p2, m1, m2);
            vertex(p.x, p.y);
        }
        endShape();
    }
    
    // Vertex points
    for (var i = 0; i < this.vertices.length; i++) {
        this.vertices[i].draw();
    }
    
    // Control points
    for (var i = 0; i < this.controls.length; i++) {
        this.controls[i].draw();
    }
};

spline.prototype.mousePressed = function() {
    for (var i = 0; i < this.points.length; i++) {
        if (this.points[i].mouseover()) {
            this.selected = this.points[i];
        }
    }
};

spline.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move();
    }
};

spline.prototype.mouseReleased = function() {
    this.selected = false;
};

var myLine = new spline([40, 300, 360, 120]);
myLine.controls[0].x = 60;
myLine.controls[0].y = 100;
myLine.controls[1].y = 300;

/***************************************
 *      Display functions
****************************************/

var drawHorizontal = function(y, d) {
    var p1 = myLine.vertices[0];
    var p2 = myLine.vertices[1];
    
    stroke(120);
    strokeWeight(1);
    line(p1.x, y, p2.x, y);

    stroke(200);    
    var x = d * ceil(p1.x / d);
    while (x <= p2.x) {
        line(x, 0, x, y - 1);
        x += d;
    }
};

var drawPointOnArc = function(d, resolution) {
    var p1 = myLine.vertices[0];
    var p2 = myLine.vertices[1];
    var m1 = myLine.controls[0];
    var m2 = myLine.controls[1];
    
    noFill();
    
    var tx = d * ceil(p1.x / d);
    var y = p1.y;
    
    // Minimum distance between targetX and x on line
    var minD = abs(tx - p1.x);
    
    for (var i = 0; i <= resolution; i++) {
        var p = getCubicBezier(i / resolution, p1, p2, m1, m2);
        
        strokeWeight(1);
        stroke(80);
        //ellipse(p.x, p.y, 10, 10);
        
        var dx = abs(tx - p.x);
        
        if (dx > minD) {
            strokeWeight(2);
            stroke(255, 0, 0);
            ellipse(tx, y, 10, 10);
            tx += d;
            //println(i + " " + tx);
            minD = abs(tx - p.x);
        } else {
            stroke(80);
            //ellipse(p.x, p.y, 10, 10);
            minD = dx;
        }
        
        y = p.y;

    }
    
};

draw = function() {
    background(BACKGROUND);
    
    drawHorizontal(390, 20);
    myLine.draw();
    drawPointOnArc(20, 100);
    //noLoop();
};

/****************************************
 *      Event handling
****************************************/

mousePressed = function() {
    myLine.mousePressed();
};

mouseReleased = function() {
    myLine.mouseReleased();
};

mouseDragged = function() {
    myLine.mouseDragged();
};
