/*************************************************
 * TODO:
 *  Control light amount
 *  Controls for pinhole size and position
 *  Button to clear film
 *  Merge colours in image plane
 *  Use imageData to store image on film efficiently
 *  Separate light into incoming and reflected arrays
 * 
 *  Create version where you can control where the light points
**************************************************/

// Standard colours and variables
var BACKGROUND = color(0);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var LIGHT_SPEED = 5;
var running = true;
var lightSources = [];
var lightBeams = [];
var explosions = [];

angleMode = 'degrees';
var showing = {
    'Incoming light': true,
    Pinhole: true,
};

// GUI
{
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, {name: name});
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 13);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}
/*******************************************************
 *      GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, 240);
    rect(this.x, this.y, this.w, this.h, 8);
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 1;
        this.h += h + 1;
    }
    
    this.h += 5;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseDragged();
    }
};
}
}
/**********************************************************
 * Memory obj object - basically a circle
**********************************************************/

var Orb = function(x, y, z, r, fill) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.r = r;
    this.r2 = r * r;
    this.d = r * 2;
    this.fill = fill;
    this.stroke = lerpColor(fill, color(255), 0.5);
};

Orb.prototype.draw = function() {
    // Gleam
    noStroke();
    fill(this.stroke + (30 << 24));
    var d = this.d + 2;
    for (var i = 0; i < 8; i++) {
        d += 2;
        ellipse(this.x, this.y, d, d);
    }
    
    strokeWeight(3);
    stroke(this.stroke);
    fill(this.fill);
    ellipse(this.x, this.y, this.d, this.d);
    
    // Reflection
    fill(this.stroke);
    noStroke();
    pushMatrix();
    translate(this.x + this.r * 0.5, this.y - this.r * 0.5);
    rotate(45);
    ellipse(0, 0, this.r * 0.35, this.r * 0.15);
    popMatrix();
    
    if (this.cx) {
        stroke(255, 0, 0);
        strokeWeight(8);
        point(this.cx, this.cy);
    }
};

/**********************************************************
 *      Explosion
 * Unnecessary eye candy for light hitting the plane
**********************************************************/

var Explosion = function(x, y, colour) {
    this.x = x - 3;
    this.y = y;
    this.color = colour;
    this.animation = 16;
};

Explosion.prototype.draw = function() {
    stroke(this.color + ((255 * this.animation / 16) << 24));
    var r = 20 - this.animation;
    arc(this.x, this.y, r, r, 90, 270);
    //line(this.x, this.y, this.x + 3, this.y);
    this.animation--;
};

/**********************************************************
 *      LightBeam
 * A bar travelling in a straight line, bouncing off objects
**********************************************************/

var LightBeam = function(x, y, dx, dy, dz) {
    this.x = x;
    this.y = y;
    this.z = 0;
    this.dx = dx;
    this.dy = dy;
    this.dz = dz;
    
    this.color = color(255, 255, 255, 200);
    this.length = 20;
    this.beenSeen = false;
    
    this.findEnd();
};

LightBeam.prototype.findEnd = function() {
    this.x2 = this.dx * this.length;
    this.y2 = this.dy * this.length;
};

LightBeam.prototype.draw = function() {
    if (!this.beenSeen || 
        (!showing['Incoming light'] && !this.collided)) {
        return;
    }
    
    strokeWeight(3);
    stroke(this.color + (200 << 24));
    line(this.x, this.y, this.x - this.x2, this.y - this.y2);
    
    strokeWeight(1);
    line(this.x, this.y, this.x - this.x2, this.y - this.y2);
};

LightBeam.prototype.move = function() {
    this.x += this.dx * LIGHT_SPEED;
    this.y += this.dy * LIGHT_SPEED;
    this.z += this.dz * LIGHT_SPEED;
    
    if (this.x < -this.length ||
        this.x > width + this.length ||
        this.y < -this.length ||
        this.y > height + this.length) {
            this.toRemove = this.beenSeen;
    } else {
        this.beenSeen = true;
    }
};

/**********************************************************
 *      LightSource
 * A point that emits LightBeams at a given angle with
 * a particular spread and rate.
**********************************************************/
// TODO: get this working for different angles again
var LightSource = function(x, y) {
    this.x = x;
    this.y = y;
    // Light spread over a cone with angle 30
    this.spreadAngle = cos(30);
    this.updateRate = 32;
    this.updateNumber = 2;
    this.t = 0;
};

// Randomly generate light in a cone
// http://math.stackexchange.com/questions/56784/generate-a-random-direction-within-a-cone
LightSource.prototype.addLightBeam = function(n) {
    n = n || 1;
    
    for (var i = 0; i < n; i++) {
        var dx = -random(this.spreadAngle, 1);
        var nx = sqrt(1 - dx * dx);
        var theta = random(0, 360);
        
        lightBeams.push(new LightBeam(
            this.x, this.y,
            dx, nx * cos(theta), nx * sin(theta)
        ));
    }
};

LightSource.prototype.update = function() {
    this.t += LIGHT_SPEED;
    if (this.t > this.updateRate) {
        this.t = 0;
        this.addLightBeam(this.updateNumber);
    }
};

/**********************************************************
 *      Image plane
 * A plane that collects reflected light and stores its
 * color in a 2D array.
**********************************************************/

var ImagePlane = {
    x: width - 5,
    y: 20,
    height: height - 40,
    y2: height - 20,
    
    draw: function() {
        stroke(200);
        strokeWeight(5);
        line(this.x, this.y, this.x, this.y2);
        
        // Draw representation of image plane
        if (this.imageArray) {
            fill(BACKGROUND);
            strokeWeight(3);
            stroke(200);
            rect(this.imageX - 1, this.imageY - 1,
                 this.imageSize + 2, this.imageSize + 2);
                
            // Show exposure
            // TODO: Exposure to degrade over time and mix colours
            for (var x = this.imageSize; x--;) {
                for (var y = this.imageSize; y--;) {
                    if (this.imageArray[x][y]) {
                        set(this.imageX + x, this.imageY + y, this.imageArray[x][y]);
                    }
                }
            }
        }
    },
    
    // Create an array to store the light information
    // to display at (x, y)
    createImageArray: function(x, y, s) {
        this.imageX = x;
        this.imageY = y;
        this.imageSize = s;
        this.imageArray = [];
        
        for (var x = 0; x < s; x++) {
            var arr = new Array(s);
            var len = s;
            while (--len >= 0) {
                arr[len] = 0;
            }
            this.imageArray.push(arr);
        }
    },
    
    // Calculate the result of the image being hit with a beam of light
    hitByBeam: function(beam) {
        // Calculate y-coordinate of intersection
        var dx = beam.x - this.x;
        var y = beam.y - dx * beam.dy / beam.dx;
        
        explosions.push(new Explosion(this.x, y, beam.color));
        
        // Check beam is with bounds along y-axis
        if (y < this.y || y > this.y2) { return; }
        
        // Map y-coordinate to imageGrid
        y = norm(y, this.y, this.y2) * this.imageSize;
        
        // X-coordinate on image plane corresponds to beam's z coordinate
        var x = norm(beam.z, -this.height / 2, this.height / 2) * this.imageSize;
        
        // Check beam is with bounds along x-axis
        if (x < 0 || x > this.imageSize) { return; }
        
        this.imageArray[floor(x)][floor(y)] = beam.color;
    }
};

/**********************************************************
 *      Pinhole
 * A barrier with a hole in it
**********************************************************/

var Pinhole = {
    x: width - 180,
    y: height / 2,
    r: 30,
    r2: 30 * 30,
    
    draw: function() {
        stroke(120);
        strokeWeight(3);
        line(this.x, this.y - this.r, this.x, 0);
        line(this.x, this.y + this.r, this.x, height);
    },
};

/**********************************************************
 * Creation of objects
**********************************************************/

var toolbar = new Toolbar(5, 292, 128);
toolbar.add(Slider, {
    name: "Speed",
    now: 4,
    max: 10,
    trigger: function() {
        LIGHT_SPEED = this.val;
    }
});
toolbar.addOptions(showing);

var orbs = [
    new Orb(240, 270, 0, 70, color(254, 210, 90)),
    new Orb(120, 120, 0, 70, color(100, 160, 255)),
];

lightSources.push(
    new LightSource(width + 10, height / 2)
);

ImagePlane.createImageArray(width - 135, height - 110, 100);

/**********************************************************
 *      Physics
 * Calculate collisions and update positions
**********************************************************/

var updateSimulation = function() {
    var beam, orb, i, j, d, dx, dy, dz;
    var orbsLength = orbs.length;
    
    for (i = lightBeams.length; i--;) {
        beam = lightBeams[i];
        beam.move();
        
        // Remove beams that have left the screen
        if (beam.toRemove) {
            lightBeams.splice(i, 1);
            continue;
        }
        
        // Reflected light hits image plane
        if (beam.throughHole && beam.x > ImagePlane.x) {
            ImagePlane.hitByBeam(beam);
            lightBeams.splice(i, 1);
            continue;
        }
        
        // Reflected light hits pinhole
        if (showing.Pinhole && beam.collided &&
            !beam.throughHole && beam.x > Pinhole.x) {
            // TODO: back-project position for this x
            d = (beam.y - Pinhole.y) * (beam.y - Pinhole.y) + beam.z  * beam.z;
            if (d > Pinhole.r2) {
                lightBeams.splice(i, 1);
                continue;
            }
            beam.throughHole = true;
        }
        
        // Collisions
        // TODO check whether beam could have travelled through the orb
        for (j = orbsLength; j--;) {
            orb = orbs[j];
            dx = beam.x - orb.x;
            dy = beam.y - orb.y;
            dz = beam.z - orb.z;
            d = dx * dx + dy * dy + dz * dz;
            
            // There is a collision
            if (d < orb.r2) {
                // If it's already reflected then remove it
                if (beam.collided) {
                    lightBeams.splice(i, 1);
                    continue;
                }
                beam.color = orb.fill; 
                beam.collided = true;
                
                // Find collision site
                // Maybe could assume it's just beam.x, y, z
                var dot = dx * beam.dx + dy * beam.dy + dz * beam.dz;
                var det = dot * dot + orb.r2 - d;
                // Should never be true, but test just in case
                if (det < 0) { break; }
                det = sqrt(det);
                d = dot + det;
                
                // Collision site
                var x = beam.x - d * beam.dx;
                var y = beam.y - d * beam.dy;
                var z = beam.z - d * beam.dz;
                
                // Distance to collision site
                d = sqrt((x - beam.x) * (x - beam.x) + 
                         (y - beam.y) * (y - beam.y) +
                         (z - beam.z) * (z - beam.z));
                
                // Calculate new position and angle.
                beam.x = x - d * beam.dx;
                beam.y = y - d * beam.dy;
                beam.z = z - d * beam.dz;
                
                // Vector from sphere center to collision site
                x -= orb.x;
                y -= orb.y;
                z -= orb.z;
                d = sqrt(x * x + y * y + z * z);
                
                beam.dx = x / d;
                beam.dy = y / d;
                beam.dz = z / d;
                beam.findEnd();
            }
        }
    }
    
    for (var i = 0; i < lightSources.length; i++) {
        lightSources[i].update();
    }
};

/**********************************************************
 *  Main loop
**********************************************************/

var i;
draw = function() {
    background(BACKGROUND);
    
    for (i = 0; i < orbs.length; i++) {
        orbs[i].draw();
    }
    
    for (i = 0; i < lightBeams.length; i++) {
        lightBeams[i].draw();
    }
    
    ImagePlane.draw();
    
    strokeWeight(4);
    noFill();
    for (i = explosions.length; i--;) {
        explosions[i].draw();
        if (explosions[i].animation < 1) {
            explosions.splice(i, 1);
        }
    }
    
    if (showing.Pinhole) {
        Pinhole.draw();
    }
    
    toolbar.draw();
    
    if (running) {
        updateSimulation();
    }
};

/**************************************
 *  Event handling
***************************************/
{
keyPressed = function() {
    //println(keyCode);
    if (keyCode === 32) {
        running = !running;
    }
};

mousePressed = function() {
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
};

mouseReleased = function() {
    toolbar.mouseReleased();
};

mouseOut = function() {
    toolbar.mouseReleased();
};
}
