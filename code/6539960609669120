var friction = 0.96;
var keys = [];

var Cell = function(x, y, r, n) {
    this.x = x;
    this.y = y;
    this.r = r;
    
    this.outline = [];
    this.movement = [];
    for (var i = 0; i < n; i++) {
        this.outline.push({
            x: x + r * sin(360 * i / n),
            y: y - r * cos(360 * i / n)
        });
        this.movement.push({ x: 0, y: 0 });
    }
    
    this.speed = 0.5;
};

Cell.prototype.draw = function() {
    strokeWeight(2);
    stroke(22, 117, 17);
    fill(127, 209, 123);
    
    beginShape();
    for (var i = 0; i < this.outline.length; i++) {
        curveVertex(this.outline[i].x, this.outline[i].y);
    }
    curveVertex(this.outline[0].x, this.outline[0].y);
    curveVertex(this.outline[1].x, this.outline[1].y);
    endShape(CLOSE);
};

Cell.prototype.update = function() {
    // Find cell centre
    this.x = 0;
    this.y = 0;
    var n = this.outline.length;
    
    for (var i = 0; i < n; i++) {
        this.x += this.outline[i].x;
        this.y += this.outline[i].y;
    }
    this.x /= n;
    this.y /= n;
    
    for (i = 0; i < n; i++) {
        // Move nodes to the centre
        var a = 360 * i / n;
        var dx = 0.25 * (this.outline[i].x - (this.x + this.r * sin(a)));
        var dy = 0.25 * (this.outline[i].y - (this.y - this.r * cos(a)));
        this.movement[i].x -= dx;
        this.movement[i].y -= dy;
        
        // Update positions
        this.outline[i].x += this.movement[i].x;
        this.outline[i].y += this.movement[i].y;
        
        // Drag
        this.movement[i].x *= friction;
        this.movement[i].y *= friction;
        
        // Add random noise;
        this.movement[i].x += 0.1 * (random() - 0.5);
        this.movement[i].y += 0.1 * (random() - 0.5);
    }
};

Cell.prototype.move = function(dir, dx, dy) {
    var n = this.outline.length;
    var node = round(n * dir / 4);
    
    if (dx !== 0) {
        var d = dx * this.speed;
        this.movement[node].x += d * (random() / 2 + 0.5);
        this.movement[(node + 1) % n].x += d * random();
        this.movement[(node + n - 1) % n].x += d * random();
    } else {
        var d = dy * this.speed;
        this.movement[node].y += d * (random() / 2 + 0.5);
        this.movement[(node + 1) % n].y += d * random();
        this.movement[(node + n - 1) % n].y += d * random();   
    }
};

var cell = new Cell(200, 200, 20, 16);

var handleKeys = function() {
    if (keys[UP]) { cell.move(0, 0, -1); }
    if (keys[DOWN]) { cell.move(2, 0, 1); }
    if (keys[LEFT]) { cell.move(3, -1, 0); }
    if (keys[RIGHT]) { cell.move(1, 1, 0); }
};

draw = function() {
    background(24, 66, 112);
    
    // Update velocity based on key presses
    handleKeys();
    
    cell.update();
    
    // Draw object
    cell.draw();
};

keyPressed = function() {
    keys[keyCode] = true;
};

keyReleased = function() {
    keys[keyCode] = false;
};