// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var RED = color(200, 0, 0);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);

var serifFont = createFont("Times", 22);
var sansFont = createFont("sans", 15);

var pointR = 10;
var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 200;
var ANIMATE_SPLIT = 12;
var ANIMATE_AVERAGE = 30;

var txtFont = createFont("monospace", 14);
var myFont = createFont("sans", 12);

var weightingForAverages = [1, 1, 1, 1];
var weightsEqualZero = false;

var toolbar;

var showing = {
    'Pontos de controle': true,
    'Braços de controle': true,
    'Pontos de média': true,
    Curva: true,
};

var selected = false;
var myCurve;

/*************************************
 * GUI Slider to vary parameters
**************************************/

var Slider = function(x, y, width, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;

    this.draw = function() {
        noStroke();
        fill(180);
        rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);
    
        strokeWeight(1);
        stroke(0, 0, 0, 120);
        fill(180, 180, 250);
        ellipse(this.bx, this.y, this.ballD, this.ballD);
        noStroke();
        fill(255, 255, 255, 150);
        ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);

    };
    
    this.selected = function() {
        this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + round((x - this.x) * this.scale);
            return true;
        }
    };
  
    // This is used if you want to update the value in a way other
    // than using the slider (but want the slider to update).
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
    this.transition = 0;
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/**************************************
 *      Number scrubber object
 * Shows a number with up and down arrow buttons to 
 * change the value
**************************************/
{
var Scrubber = function(x, y, w, h, values, updateF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.font = createFont("serif", h);
    this.fontSize = h * 0.8;
    
    this.index = values.now || 0;
    if (values.options) {
        this.mapping = values.options;
        this.value = this.mapping[this.index];
        this.min = 0;
        this.max = this.mapping.length - 1;
    } else if (values.range) {
        this.min = values.range[0];
        this.max = values.range[1];
        this.value = this.index;
    }
    
    this.updateFunction = updateF;
    this.selected = false;
};

Scrubber.prototype.draw = function(x, y) {
    if (x) { this.x = x; }
    if (y) { this.y = y; }
    
    // Box
    stroke(200);
    noFill();
    strokeWeight(1);
    rect(this.x, this.y - 1, this.w - 1, this.h + 1, 8);
    
    // Text
    textFont(this.font, this.fontSize);
    textAlign(CENTER, BASELINE);
    fill(TEXTCOL);
    
    var ty = this.y + textAscent() + 4;
    text("" + this.value, this.x + this.w / 2, ty);
    
    // Arrow buttons
    var mouseover = this.mouseOver();
    if (this.selected === 1 || mouseover === 1) {
        fill(ORANGE);
        stroke(ORANGE);
    } else {
        noFill();
        stroke(200);
    }
    
    triangle(this.x + 3, this.y - 3,
             this.x + this.w - 3, this.y - 3,
             this.x + this.w / 2, this.y - 12);
    
    if (this.selected === 2 || mouseover === 2) {
        //fill(200);
        //stroke(160);
        fill(ORANGE);
        stroke(ORANGE);
    } else {
        noFill();
        stroke(200);
    }
    
    triangle(this.x + 3, this.y + this.h + 3,
             this.x + this.w - 3, this.y + this.h + 3,
             this.x + this.w / 2, this.y + this.h + 12);

    this.updateValue();
};

Scrubber.prototype.updateValue = function() {
    if (this.selected && this.t % this.mod === 0) {
        if (this.selected === 1) {
            this.index = min(this.index + 1, this.max);
        } else if (this.selected === 2) {
            this.index = max(this.index - 1, this.min);
        }

        this.mapValue();
        this.update();
        this.mod = 5;
    }
    this.t++;
};

Scrubber.prototype.mapValue = function() {
    if (this.mapping) {
        this.value = this.mapping[this.index];
    } else {
        this.value = this.index;
    }
};

Scrubber.prototype.setValue = function(n) {
    this.value = n;
    if (this.mapping) {
        this.index = this.mapping.indexOf(this.value);
    } else {
        this.index = this.value;
    }
};

// Return 1 or 2 if mouse over top or
// bottom arrow respectively.
// Otherwise return null
Scrubber.prototype.mouseOver = function() {
    if (mouseX >= this.x + 3 && mouseX <= this.x + this.w - 3) {
        if (mouseY >= this.y - 12 && mouseY <= this.y) {
            return 1;
        } else if (mouseY >= this.y + this.h && mouseY <= this.y + this.h + 12) {
            return 2;
        }
    }
};

Scrubber.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
    this.t = 0;
    this.mod = 16;
};

Scrubber.prototype.mouseReleased = function() {
    this.selected = false;
};

Scrubber.prototype.update = function() {
    if (this.updateFunction) {
        this.updateFunction(this.value);
    }
};
}
/*************************************
 * GUI Slider to vary parameters
**************************************/
{
var Slider = function(x, y, width, min_v, max_v, current_v, name, updateF) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    this.name = name;
    this.updateF = updateF;
    
    this.ballD = 16;
    this.ballR = this.ballD / 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;
};

Slider.prototype.draw = function(c) {
    if (this.name) {
        textAlign(CENTER, CENTER);
        fill(c || 10);
        textFont(sansFont);
        text(this.name + ": " + this.val ,  this.x + this.width / 2, this.y - 18);
    }
    
    noStroke();
    fill(180);
    rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);
};

Slider.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.drag = function() {
    if (this.held) {
        var x = constrain(mouseX, this.x, this.x + this.width);
        this.bx = x;
        this.val = this.min + round((x - this.x) * this.scale);
        this.update();
        return true;
    }
};

Slider.prototype.update = function() {
    if (this.updateF) {
        this.updateF(this.val);
    }
};
}
/*************************************
 *      Toolbar
 *  Contains other GUI elements
**************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.buttons.length; i++) {
        this.buttons[i].draw();
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, func) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    
    this.buttons.push(new Button(x, y, w, h, name, func));
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = name ? 24 : 10;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    
    this.sliders.push(new Slider(x, y, w, minX, maxX, nowX, name, updateF));
    
    this.h += h + 16;
};

Toolbar.prototype.addScrubber = function(nowValue, values, updateF) {
    var h = 20;
    var x = this.x + 5;
    var y = this.y + this.h + 3;
    var w = this.w - 10;
    
    this.buttons.push(new Scrubber(x, y, w, h, nowValue, values, updateF));
    this.h += h + 10;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        this.buttons.push(new CheckBox(x, y, w, h, opt));
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseOver()) {
            this.buttons[i].selected = true;
        }
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].selected();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        var button = this.buttons[i];
        if (!button.deactivated && button.selected && button.mouseOver()) {
            button.click();
        }
        button.selected = false;
    }
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].held = false;
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].drag()) {
            return true;
        }
    }
};
}
/*************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
**************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (selected === this || this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

/*************************************
 * AveragePoint
 * A point whose position is defined
 * as the weighted average of a list
 * of points.
 * 
 *  points is an array of
 * draggablePoints
    weights is a mapping of an index
    in points with a weight
**************************************/

var AveragePoint = function(points, weights, color) {
    this.color = color || GREEN;
    this.points = points;
    this.weights = weights;
    this.r = pointR;
    this.animation = 12;
    
    this.update();
    //this.info();
};

AveragePoint.prototype.draw = function(n) {
    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);

    var r = this.r * (1.15 - abs((this.animation - 3) / ANIMATE_SPLIT));

    ellipse(this.x, this.y, r, r);
    
    if (n !== undefined) {
        fill(255, 0, 0);
        text(n, this.x, this.y);
    }
    
    if (this.animation) {
        this.animation--;
    }
};

AveragePoint.prototype.update = function() {
    this.x = 0;
    this.y = 0;
    
    for (var i in this.weights) {
        var w = this.weights[i];
        this.x += this.points[i].x * w;
        this.y += this.points[i].y * w;
    }
};

// Change position using the weights of a second point
// Used for animation
AveragePoint.prototype.move = function(p2, w) {
    this.x = 0;
    this.y = 0;
    var v = 1 - w;
    
    for (var i in this.weights) {
        var w1 = this.weights[i];
        this.x += this.points[i].x * w1 * w;
        this.y += this.points[i].y * w1 * w;
    }
    
    for (var i in p2.weights) {
        var w2 = p2.weights[i];
        this.x += p2.points[i].x * w2 * v;
        this.y += p2.points[i].y * w2 * v;
    }
};

AveragePoint.prototype.info = function() {
    println("Point");
    println("(" + this.x + ", " + this.y + ")");
    for (var i in this.weights) {
        println(i + ": " + this.weights[i]);
    }
};

var averageWeights = function(w1, w2, w) {
    w = w || 0.5;
    var d = { };
    
    for (var i in w1) {
        d[i] = w1[i] * w;
    }
    
    w = 1 - w;
    
    for (var i in w2) {
        if (d[i]) {
            d[i] += w2[i] * w;
        } else {
            d[i] = w2[i] * w;  
        }
    }
    
    return d;
};

// Given array of arrays in the form [point, weight]
// return a new averagePoint,
// which is the weighted average of those points
var getAverageOfPoints = function(points) {
    // First convert weights from form (1, 2, 1) to (0.25, 0.5, 0.25)
    var totalWeight = 0;
    
    for (var i = 0; i < points.length; i++) {
        totalWeight += points[i][1];
    }
    
    if (totalWeight === 0) {
        totalWeight = 1;
    }
    
    var weights = { };
    for (var i = 0; i < points.length; i++) {
        var point = points[i][0];
        var weight = points[i][1] / totalWeight;
        
        for (var w in point.weights) {
            if (weights[w]) {
                weights[w] += point.weights[w] * weight;
            } else {
                weights[w] = point.weights[w] * weight;
            }
        }
    }
    
    return new AveragePoint(points[0][0].points, weights);
};

/*************************************
 *      Curve
 * A collection of points, joined by control arms
 * A curve is drawn between the points
**************************************/

var Curve = function(points) {
    this.controlPoints = [];
    this.curvePoints = [];
    this.newPoints = [];
    this.points = points;
    
    this.mouseoverPoint = false;
    this.labels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    this.animation = 0;
    
    // Add control points
    for (var i = 0; i < points.length; i++) {
        var p = new DraggablePoint(points[i][0], points[i][1]);
        this.controlPoints.push(p);
    }

    this.reset();

};

Curve.prototype.update = function() {
    for (var i = 0; i < this.curvePoints.length; i++) {
        this.curvePoints[i].update();
        //this.curvePoints[i].info();
    }
};

Curve.prototype.reset = function() {
    // Add curve points
    this.curvePoints = [];
    for (var i = 0; i < this.points.length; i++) {
        var d = {};
        d[i] = 1;
        var p = new AveragePoint(this.controlPoints, d);
        this.curvePoints.push(p);
    }
    this.update();
};

Curve.prototype.draw = function() {
    if (this.animation) {
        this.animation--;
        
        if (this.animation < 1 && this.newPoints.length) {
            this.curvePoints = this.newPoints;
        } else {
            // Move points towards position of new points
            var p = this.animation / ANIMATE_AVERAGE;
            
            for (var i = 0; i < this.curvePoints.length; i++) {
                this.curvePoints[i].move(this.newPoints[i], p);
            }
        }
    }

    if (showing['Braços de controle']) {
        this.drawControlArms();
    }
    
    if (showing.Curva && !weightsEqualZero) {
        this.drawCurve();   
    }
    
    if (showing['Pontos de média'] && !weightsEqualZero) {
        this.drawCurvePoints();
    }
    
    if (showing['Pontos de controle']) {
        this.drawControlPoints();
    }
};

Curve.prototype.drawControlArms = function() {
    stroke(BLUE);
    strokeWeight(2);
    
    var n = this.controlPoints.length;
    for (var i = 0; i < n; i++) {
        var p1 = this.controlPoints[i];
        var p2 = this.controlPoints[(i + 1) % n];
        line(p1.x, p1.y, p2.x, p2.y);
    }
};

Curve.prototype.drawControlPoints = function() {
    var n = this.controlPoints.length;
    
    for (var i = 0; i < n; i++) {
        this.controlPoints[i].draw();
    }
    
    // Labels
    fill(ORANGE);
    textFont(serifFont, 18);
    textAlign(CENTER, CENTER);
    for (var i = 0; i < n; i++) {
        var p1 = this.controlPoints[i];
        var p2 = this.controlPoints[(i + 1) % n];
        var p3 = this.controlPoints[(i + n - 1) % n];
        
        var dx = p2.x + p3.x - 2 * p1.x;
        var dy = p2.y + p3.y - 2 * p1.y;
        var d = sqrt(dx * dx + dy * dy);
        var tx = p1.x - dx / d * 16;
        var ty = p1.y - dy / d * 16;
        text(this.labels.charAt(i), tx, ty);
    }
};

Curve.prototype.drawCurve = function() {
    stroke(GREEN);
    strokeWeight(4);
    noFill();

    var n = this.curvePoints.length;

    beginShape();
    for (var i = 0; i <= n; i++) {
        var p = this.curvePoints[i % n];
        vertex(p.x, p.y);
    }
    endShape();
};

Curve.prototype.drawCurvePoints = function() {
    for (var i = 0; i < this.curvePoints.length; i++) {
        this.curvePoints[i].draw();
    }
};

// Get a set of average points given some an array of weights
Curve.prototype.getAveragePoints = function(weights) {
    var averagePoints = [];
    
    // Two weights use points 0 and +1,
    // Three weights uses points -1, 0, +1
    var d = floor((weights.length - 1) / 2);
    
    var n = this.curvePoints.length;
    for (var i = 0; i < this.curvePoints.length; i++) {
        var weightedPoints = [];
        
        for (var w = 0; w < weights.length; w++) {
            var p = this.curvePoints[(i + n + w - d) % n];    
            weightedPoints.push([p, weights[w]]);
        }
        
        averagePoints.push(getAverageOfPoints(weightedPoints));
    }
    
    return averagePoints;
};

// Get average point between each existing point
// Add these between the existing points
Curve.prototype.split = function() {
    if (this.curvePoints.length < MAX_RESOLUTION && !this.animation) {
    var newPoints = this.getAveragePoints([1, 1]);
    
    for (var i = 0; i < newPoints.length; i++) {
        this.curvePoints.splice(i * 2 + 1, 0, newPoints[i]);
    }
    }
};

// Each point is averaged with the following point
Curve.prototype.average = function() {
    var weights = weightingForAverages.slice(0, toolbar.sliders[0].val);
    this.newPoints = this.getAveragePoints(weights);
    this.animation = ANIMATE_AVERAGE;
};

Curve.prototype.subdivide = function() {
    if (this.curvePoints.length < MAX_RESOLUTION && !this.animation) {
        this.split();
        this.average();   
    }
};

Curve.prototype.mousePressed = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseover()) {
            selected = i;
        }
    }
};

Curve.prototype.mouseDrag = function() {
    if (selected !== false) {
        var p = this.controlPoints[selected];
        p.x += mouseX - pmouseX;
        p.y += mouseY - pmouseY;
        this.update();
    }
};

// Show mouseover information
Curve.prototype.mouseMove = function() {
    this.mouseoverPoint = false;
    
    for (var i = 0; i < this.curvePoints.length; i++) {
        var p = this.curvePoints[i];
        if (dist(mouseX, mouseY, p.x, p.y) <= p.r * 0.5) {
            this.mouseoverPoint = p;
            break;
        }
    }
};

/*************************************
 * Creation of objects
**************************************/

myCurve = new Curve([
    [width * 0.5, height * 0.2],
    [width * 0.5 + height * 0.4, height * 0.6],
    [width * 0.5, height * 0.9],
    [width * 0.5 - height * 0.4, height * 0.6]
]);

var toolbar = new Toolbar(width * 0.01, width * 0.01, 160);

var splitCurve = function() {
    if (myCurve.curvePoints.length < MAX_RESOLUTION) {
        myCurve.split();
    }
};
    
var averageCurve = function() { myCurve.average(); };

var subdivide = function() {
    myCurve.subdivide();
};

var reset = function() {
    myCurve.reset();
};

var checkSumOfWeights = function() {
    var n = toolbar.sliders[0].val;
    var sum = 0;
    for (var i = 0; i < n; i++) {
        sum += toolbar.sliders[i + 1].val;
    }
    weightsEqualZero = (sum === 0);
};

var updateNumberOfWeights = function(v) {
    var nowSliders = toolbar.sliders.length - 1;
    var dSliders = v - nowSliders;
    
    if (!dSliders) { return; }
    
    // Reset toolbar
    toolbar.buttons = [];
    
    // Remove sliders
    if (dSliders < 0) {
        toolbar.sliders.splice(v + 1);
    }
    
    // Reset toolbar height
    toolbar.h = 4 + 39 * toolbar.sliders.length;
    
    var updateWeightFunction = function(i) {
        return function(v) {
            weightingForAverages[i] = v;
            checkSumOfWeights();
        };
    };
    
    if (dSliders > 0) {
        for (var i = nowSliders; i < v; i++) {
            toolbar.addSlider(-5, 5, 1, "x", updateWeightFunction(i));
        }
    }
  
    // Rename sliders
    var names = [
        ["Peso esquerdo", "Peso direito"],
        ["Peso esquerdo", "Peso médio", "Peso direito"],
        ["Peso esquerdo 1", "Peso esquerdo 2", "Peso direito 1", "Peso direito 2"],
    ][v - 2];
    
    for (var i = 0; i < names.length; i++) {
        toolbar.sliders[i + 1].name = names[i];
    }
    
    checkSumOfWeights();
    
    // Buttons
    toolbar.addButton("Dividir", splitCurve);
    toolbar.addButton("Média", averageCurve);
    toolbar.addButton("Subdividir", subdivide);
    toolbar.addButton("Desfazer", reset);
    toolbar.addOptions(showing);
    
    myCurve.reset();
};

toolbar.addSlider(2, 4, 2, "Pesos", updateNumberOfWeights);
updateNumberOfWeights(2);

/*************************************
 *  Draw functions
**************************************/

// Convert decimal to fraction,
var findFraction = function(d) {
    var tolerance = 0.000001;
    
    if (abs(round(d) - d) <= tolerance) {
        return [round(d), 1];
    }
    
    var loN = 0;
    var loD = 1;
    var hiN = 1;
    var hiD = 1;
    var midN = 1;
    var midD = 2;

    while (1) {
        if (abs(midN / midD - d) <= tolerance) {
            return [midN, midD];
        } else if (midN / midD < d) {
            loN = midN;
            loD = midD;
        } else {
            hiN = midN;
            hiD = midD;
        }

        midN = loN + hiN;
        midD = loD + hiD;
    }
};

var drawMouseOverInfo = function() {
    if (myCurve.mouseoverPoint) {
        var weights = myCurve.mouseoverPoint.weights;
        var labels = ["A", "B", "C", "D"];
        var terms = [];
     
        for (var w in weights) {
            if (weights[w] === 1) {
                terms.push(labels[w]);
            } else if (weights[w] > 0){
                var frac = findFraction(weights[w]);
                terms.push("(" + frac[0] + "/" + frac[1] + ")" + labels[w]);   
            }
        }
     
        fill(20);
        textAlign(LEFT, BASELINE);
        textSize(18);
        text(terms.join(" + "), 8, height - 8);
    }
};

var drawMessageBox = function(txt, x, y, h, left) {
    textAlign(CENTER, CENTER);
    textSize(16);
    textLeading(20);
    
    strokeWeight(3);
    stroke(RED);
    fill(230, 230, 230, 200);
    
    var w = textWidth(txt) + 24;

    x = x - (left ? 0 : w / 2);
    rect(x, y, w, h, 20);
    
    fill(20);
    text(txt, x + w / 2, y + h / 2);
};

var drawWarning = function() {
    if (weightsEqualZero) {
        drawMessageBox("Weights should\nnot sum to 0!", toolbar.x + toolbar.w + 4, 75, 45, true);
    }
};

/*************************************
 *  Main loop
**************************************/

draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    toolbar.draw();
    drawMouseOverInfo();
    drawWarning();
};

/*************************************
 *  Event handling
**************************************/

mousePressed = function() {
    myCurve.mousePressed();
    toolbar.mousePressed();
};

mouseReleased = function() {
    selected = false;
    toolbar.mouseReleased();
};

mouseDragged = function() {
    myCurve.mouseDrag();
    toolbar.mouseDragged();
};

mouseMoved = function() {
    myCurve.mouseMove();
};
