/*********************************************************
 * Drag the red object and see how it appears in the
 * two eyes (merged).
 * 
 * The tree represents a large distant object.
 *
 * Press 'c' to cross eyes and focus on the object
 * 
 * To Do:
 *   - fix cross eyed view
 *   - option to pick an eye
*********************************************************/
var crossEyed = false;

var personX = 40;
var personY = 122;
var personR = 60;

var eyeDist = 23;
var eyeR = sqrt(personR*personR - eyeDist*eyeDist) / 2;
var eyeAngle = 90 + atan(personR / eyeR);
var eyeX = personX + eyeR;
var eyeY1 = personY - eyeDist/2;
var eyeY2 = personY + eyeDist/2;

var treeDist = 1000;
var treePos = 200;

var viewWidth = 250;
var viewHeight = 175;

var fieldAngle = 40;
var relAngle = 2 * PI * fieldAngle/360;

var GRASS = getImage("cute/GrassBlock");
var TREE = getImage("cute/TreeTall");
var tileRatio = GRASS.height / GRASS.width;
var impFont = createFont("Impact", 40);

var Button = function(x, y, w, h, name, clickF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(180, 180, 180);
    this.highlightCol = color(250, 60, 60);
    this.clickF = clickF;
    this.showing = true;
    
    this.highlight = function() {
        if (mouseX >= this.x && mouseX <= this.x + this.w && 
            mouseY >= this.y && mouseY <= this.y + this.h) {
            this.mouseover = true;
        } else {
            this.mouseover = false;
        }
    };
    
    this.click = function() {
        if (this.showing && this.mouseover) {
            if (this.clickF) {
                this.clickF();
                return true;
            }
        }
    };
    
    this.draw = function() {
        if (!this.showing) { return; }
        
        noStroke();
        fill(0, 0, 0, 100);
        rect(this.x + 2, this.y + 2, this.w, this.h, 8);
        
        if (this.mouseover) {
            fill(this.highlightCol);
        } else {
            fill(this.defaultCol);
        }
        rect(this.x, this.y, this.w, this.h, 8);
        
        fill(10);
        textFont(impFont, 28);
        textAlign(CENTER, CENTER);
        text(this.name, this.x + this.w/2, this.y + this.h/2);
    };
};

var myButton = new Button(10, 10, 160, 35, "Cross eyes");
myButton.clickF = function() {
    if (crossEyed) {
        this.name = "Cross eyes";
        crossEyed = false;
    } else {
        this.name = "Uncross eyes";
        crossEyed = true;
    }
};

var objects;
var Obj = function(x, y, r) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.held = false;
    
    this.draw = function() {
        fill(255, 30, 30);
        if (this.mouseover()) {
            stroke(color(255, 100, 100, 200));
            strokeWeight(3);
        } else {
            noStroke();   
        }
        ellipse(this.x, this.y, this.r, this.r);  
    };
    
    this.mouseover = function() {
        return dist(this.x, this.y, mouseX, mouseY) <= this.r/2;
    };
    
    this.click = function() {
        this.held = this.mouseover();
    };
    
    this.drag = function() {
        if (this.held) {
            this.x = max(mouseX, personX + personR/2+10);
            this.y = mouseY;
        }
    };
};

var drawGround = function() {
    for (var y = 0; y < height; y += 33) {
        for (var x = 0; x < width; x += 40) {
            image(GRASS, x, y-25, 40, 40 * tileRatio);
        }
    }
};

var drawPerson = function() {
    strokeWeight(1);
    stroke(50);
    fill(168, 77, 52);
    ellipse(personX, personY, personR, personR-2);
    arc(personX+personR/2-1, personY, 7, 8, -120, 120);
    
    fill(20);
    noStroke();
    arc(personX, personY, personR, personR-2, 60, 300);
    ellipse(personX+4, personY-personR/4+1, personR/2, personR/2);
    ellipse(personX+4, personY+personR/4-1, personR/2, personR/2);
    
    // Eyes
    stroke(40);
    translate(eyeX - 2, eyeY1);
    rotate(eyeAngle);
    fill(250);
    ellipse(0, 0, 5, 10);
    fill(0);
    ellipse(0, 0, 5, 4);
    resetMatrix();
    
    translate(eyeX - 2, eyeY2);
    rotate(-eyeAngle);
    fill(250);
    ellipse(0, 0, 6, 10);
    fill(0);
    ellipse(0, 0, 5, 4);
    resetMatrix();
};

var drawObjectsInField = function(eyeY) {
    fill(255, 30, 30);
    for (var i in objects) {
        var f = (objects[i].x - eyeX) * relAngle;
        var dx = eyeY - objects[i].y;
        var r = objects[i].r * viewWidth / f;

        if (2*(abs(dx) + objects[i].r/2) / f < 1 && r < viewHeight) {
            ellipse(200 - dx * viewWidth / f,
                    395 - viewHeight / 2, r, r);
        } 
    }
};

var drawTree = function(x, y) {
    var a = (360 + atan2(y - objects[0].y, x - objects[0].x)) % 360;
    a = (a - 180 + fieldAngle/2) / fieldAngle;
    var x = treePos - viewWidth * (a - 0.5);
    if (a > 0.12 && a < 0.88) {
        image(TREE, x, 330-viewHeight/2, 50, 80);   
    }
};

var drawEye = function() {
    var x = width/2;
    strokeWeight(2);
    stroke(20);
    fill(112, 192, 212);
    ellipse(x, 395 - viewHeight/2, viewWidth, viewHeight);
    
    fill(129, 212, 112);
    arc(x, 395 - viewHeight/2, viewWidth, viewHeight, 0, 180);
    
    strokeWeight(1);
    stroke(100);
    line(x + 1 - viewWidth/2, 395 - viewHeight/2,
         x - 2 + viewWidth/2, 395 - viewHeight/2);
    
    noStroke();
    if (crossEyed) {
        image(TREE, treePos, 330 - viewHeight/2, 50, 80);
        fill(255, 0, 0, 160);
        drawObjectsInField(eyeY1);
        drawObjectsInField(eyeY2);
    } else {
        fill(255, 0, 0);
        drawTree(eyeX, eyeY1);
        drawTree(eyeX, eyeY2);
        drawObjectsInField(objects[0].y);
    }
    
};

var drawField = function(x, y){
    noStroke();
    fill(0, 0, 255, 80);
    
    if (crossEyed) {
        var d = (width - x) * tan(fieldAngle/2);
        triangle(x, y, width, y - d, width, y + d);
    } else {
        var a = 180+atan2(y - objects[0].y, x - objects[0].x);
        triangle(x, y,
                 x + 600 * cos(a - fieldAngle/2),
                 y + 600 * sin(a - fieldAngle/2),
                 x + 600 * cos(a + fieldAngle/2),
                 y + 600 * sin(a + fieldAngle/2));
    }
    
};

objects = [new Obj(300, 134, 16)];

var draw = function() {
    drawGround();
    drawPerson();
    
    drawField(eyeX, eyeY1);
    drawField(eyeX, eyeY2);
    
    for (var i in objects) {
        objects[i].draw();
    }
    
    drawEye();
    myButton.draw();
};

/*****************************************************
 *        Event Handling
*****************************************************/

var mousePressed = function() {
    for (var i in objects) { objects[i].click(); }
};

var mouseDragged = function() {
    for (var i in objects) { objects[i].drag(); }
};

var mouseReleased = function() {
    for (var i in objects) { objects[i].held = false; }
    myButton.click();
};

var mouseOut = function() {
    mouseReleased();
};

var mouseMoved = function() {
    myButton.highlight();
};

var keyPressed = function() {
    if (keyCode === 67) { crossEyed = !crossEyed; }
};