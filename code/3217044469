var BACKGROUND = color(250, 250, 250);
var GRIDGREY = color(230, 240, 230);
var PINK = color(255, 0, 175);
var BLUE = color(64, 95, 237);
var GREY = color(100, 100, 100);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var RESOLUTION = 20;

// Create function to check line is correct
var createTestFunction = function() {
    var properties = Program.settings();
    //properties.lineType = 'negative';
    
    switch (properties.lineType) {
        case 'positive':
            return function(dx, dy) {
                return dy && dx / dy < 0;
            };
        case 'negative':
            return function(dx, dy) {
                return dy && dx / dy > 0;
            };
        case 'zero':
            return function(dx, dy) {
                return dy === 0;
            };
        case 'undefined':
            return function(dx, dy) {
                return dx === 0;
            };
        default:
            return function() { return true; };
    }
};

var testFunction = createTestFunction();

/**************************************
 *      DraggablePoint
 *  A point that can be dragged
***************************************/
{
var DraggablePoint = function(x, y, name) {
    this.x = x;
    this.y = y;
    this.r = 6;
    this.color = ORANGE;
    this.animation = 0;
    this.name = name || "";
};

DraggablePoint.prototype.draw = function() {
    if (this.selected || (!this.selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = this.r * 2 + this.animation;
    ellipse(this.x, this.y, pr, pr);
    
    fill(0);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y);
};

DraggablePoint.prototype.update = function() {
    // empty for overwriting
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r + 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x = mouseX + dx;
    this.y = mouseY + dy;
};
}
/**************************************
 *      DraggablePoint
 *  A point that can be dragged
***************************************/
{
var DraggableLine = function(p1, p2) {
    this.p1 = p1;
    this.p2 = p2;
    this.color = ORANGE;
    this.update();
};

DraggableLine.prototype.draw = function() {
    strokeWeight(2);
    stroke(this.color);
    line(this.x1, this.y1, this.x2, this.y2);
    
    // Arrows
    pushMatrix();
    translate(this.x1, this.y1);
    rotate(this.angle);
    line(0, 0, -10, -5);
    line(0, 0, -10, 5);
    popMatrix();
    
        pushMatrix();
    translate(this.x2, this.y2);
    rotate(this.angle);
    line(0, 0, 10, -5);
    line(0, 0, 10, 5);
    popMatrix();
};

DraggableLine.prototype.update = function() {
    var mx = (this.p1.x + this.p2.x) / 2;
    var my = (this.p1.y + this.p2.y) / 2;
    this.dx = this.p1.x - this.p2.x;
    this.dy = this.p1.y - this.p2.y;
    this.angle = atan2(this.dy, this.dx);
    
    var t1 = 1000;
    var t2 = 1000;
    var border = 15;
    
    // Test intersection with top and bottom of screen
    if (this.dy < 0) {
        t1 = -(my - border) / this.dy;
        t2 = (my - height + border) / this.dy;
    } else if (this.dy > 0) {
        t1 = -(my - height + border) / this.dy;
        t2 = (my - border) / this.dy;
    }
    
    // Test intersection with left and right edges
    if (this.dx < 0) {
        t1 = min(t1, -(mx - border) / this.dx);
        t2 = min(t2, (mx - width + border) / this.dx);
    } else if (this.dx > 0) {
        t1 = min(t1, -(mx - width + border) / this.dx);
        t2 = min(t2, (mx - border) / this.dx);
    }
    
    this.x1 = mx + this.dx * t1;
    this.y1 = my + this.dy * t1;
    this.x2 = mx - this.dx * t2;
    this.y2 = my - this.dy * t2;
    
    this.testLine();
};

DraggableLine.prototype.testLine = function() {
    if (testFunction(this.dx, this.dy)) {
        //println("t");
        Program.runTest(function() { return true; });
    } else {
        //println("f");
        Program.runTest(function() { return false; });
    }
};

var L1;

}
/**************************************
 *      Grid object
 *  A Cartesian grid and with methods to
 * convert between pixels and grid coordinates.
***************************************/
{
var Grid = function(x0, y0, tickSize, tickValue) {
    this.originX = x0;
    this.originY = y0;
    this.tickSize = tickSize;
    this.tickValue = tickValue;
    
    this.minX = this.originX % this.tickSize;
    this.minY = this.originY % this.tickSize;
    this.snapSize = tickSize * 0.5;
    this.objects = [];
    this.selectables = [];
    this.selected = false;
    
    this.minPX = this.gridToPixelX(-10);
    this.maxPX = this.gridToPixelX(10);
    this.minPY = this.gridToPixelY(10);
    this.maxPY = this.gridToPixelY(-10);
};

Grid.prototype.draw = function() {
    background(BACKGROUND);
    this.drawGrid();
    
    for (var i = 0; i < this.objects.length; i++) {
        //this.objects[i].update();
        this.objects[i].draw();
    }
};

Grid.prototype.drawGrid = function() {
    // Grid lines
    stroke(GRIDGREY);
    strokeWeight(1);
    
    for (var x = this.minX; x < width; x += this.tickSize) {
        line(x, 0, x, height);
    }
    
    for (var y = this.minY; y < height; y += this.tickSize) {
        line(0, y, width, y);
    }
    
    // Axes
    stroke(128);
    line(this.originX, 0, this.originX, height);
    line(0, this.originY, width, this.originY);
    
    // Labels
    fill(0, 0, 0, 128);
    textFont(serifFont, 13);
    
    textAlign(CENTER, TOP);
    for (var x = -10; x <= 10; x++) {
        var px = this.gridToPixelX(x);
        line(px, this.originY - 4, px, this.originY + 4);
        if (x !== 0) {
            text(x, px, this.originY + 6);
        }
    }
    
    textAlign(RIGHT, CENTER);
    for (var y = -10; y <= 10; y++) {
        var py = this.gridToPixelY(y);
        line(this.originX - 4, py, this.originX + 4, py);
        if (y !== 0) {
            text(y, this.originX - 6, py);
        }
    }
    
    // Axis labels
    fill(0);
    textAlign(LEFT, CENTER);
    textFont(serifFont, 15);
    text("y", this.originX + 5, 5);
    textAlign(CENTER, BASELINE);
    text("x", width - 6, this.originX - 4);
};

Grid.prototype.addObject = function(obj, selectable) {
    this.objects.push(obj);
    if (selectable) {
        this.selectables.push(obj);
    }
};

Grid.prototype.snapTo = function(n, origin) {
    origin = origin || 0;
    n = origin - n;
    n = round(n / this.snapSize) * this.snapSize;
    return origin - n;
};

Grid.prototype.pixelToGridX = function(x) {
    return (x - this.originX) / this.tickSize;
};

Grid.prototype.pixelToGridY = function(y) {
    return (this.originY - y) / this.tickSize;
};

Grid.prototype.gridToPixelX = function(x) {
    return x * this.tickSize + this.originX;
};

Grid.prototype.gridToPixelY = function(y) {
    return this.originY - y * this.tickSize;
};

Grid.prototype.gridToPixel = function(x, y) {
    return {
        x: this.gridToPixelX(x),
        y: this.gridToPixelY(y)
    };
};

Grid.prototype.mousePressed = function() {
    for (var i = 0; i < this.selectables.length; i++) {
        var selectable = this.selectables[i];
        if (selectable.mouseOver()) {
            this.selected = selectable;
            this.selected.selected = true;
            this.dragX = selectable.x - mouseX;
            this.dragY = selectable.y - mouseY;
        }
    }
};

Grid.prototype.mouseReleased = function() {
    this.selected.selected = false;
    this.selected = false;
};

Grid.prototype.mouseDragged = function() {
    if (this.selected) {
        // TODO: Check points don't overlap
        var x = this.snapTo(mouseX + this.dragX, this.originX);
        var y = this.snapTo(mouseY + this.dragY, this.originY);
        x = constrain(x, this.minPX, this.maxPX);
        y = constrain(y, this.minPY, this.maxPY);

        // Check object doesn't overlap with any other point:
        for (var i = 0; i < this.selectables.length; i++) {
            var selectable = this.selectables[i];
            if (selectable.x === x && selectable.y === y) {
                return;
            }
        }
        this.selected.x = x;
        this.selected.y = y;
        L1.update();
    }
};

}
/**************************************
 *  Create objects
***************************************/

var grid = new Grid(width / 2, height / 2, 32);

var p1 = new DraggablePoint(grid.gridToPixelX(-3), grid.gridToPixelY(3));
var p2 = new DraggablePoint(grid.gridToPixelX(3), grid.gridToPixelY(3));
var L1 = new DraggableLine(p1, p2);

grid.addObject(L1, false);
grid.addObject(p1, true);
grid.addObject(p2, true);

/*********************************************
 *      Draw functions
**********************************************/

var endState = function() {
    return false;
};

/*********************************************
 *      Main loop
**********************************************/

draw = function() {
    grid.draw();
};

/*********************************************
 *      Event handling
**********************************************/

mousePressed = function() {
    grid.mousePressed();
};

mouseReleased = function() {
    grid.mouseReleased();
};

mouseDragged = function() {
    grid.mouseDragged();
};

mouseOut = mouseReleased;

