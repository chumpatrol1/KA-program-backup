// TODO
// Texture


// Return an array of normals for each pixel
// Each normal is a 3D vector and corresponds to three entries in the array (x, y, z)
var normMap = [];
var getNormalMap = function() {
    // Define leg parameters
    var legX = 200;
    var legW = 80;
    var legR2 = legW * legW;
    var legY1 = 100;
    var legY2 = 300;
    var legH = 1 / (legY2 - legY1 + 1);
    var t = 0.02;
    noiseDetail(4, 0.5);
    
    var x, y, z, m, px;
    
    var getShiftedNoise = function(x, y, z) {
        m = noise(x * t, y * t);
        
        // Push noise the extremes with S-curve
        m *= m * (3 - 2 * m);
        m = m * 1.3 - 0.25;
        if (m > 1) { m = 1; }
        m *= m * (3 - 2 * m);
        m *= m * (3 - 2 * m);
        // Smooth surface
        m *= m * (6 - 5 * m) * 0.6;
        
        return 1 - m;
    };
    
    // Vectors for normal
    var nx, ny, nz;
    
    // Bumped vectors
    var d0, dx, dy, dz, bx, by;
    
    for (x = -legW; x <= legW; x++) {
        // Normal vectors
        nx = x / legW;
        nz = sqrt(1 - nx * nx);
        
        // For pixel calculation
        px = legX + x;
        
        for (y = legY1; y <= legY2; y++) {
            z = sqrt(legR2 - x * x);
            
            // Get noise at this point and neighbourin points
            d0 = getShiftedNoise(x, y, z);
            dx = getShiftedNoise(x + 0.1, y, z);
            dy = getShiftedNoise(x, y + 0.1, z);
            //dz = getShiftedNoise(x, y, z + 0.1);
            
            // Bumped vector
            bx = nx - (d0 - dx) * 100;
            by = (dy - d0) * 100;
            
            // Normalise and multiply by 255;
            m = (255 - d0 * 80) / sqrt(bx * bx + by * by + nz * nz);
            normMap.push(
                bx * m, by * m, nz * m,     // Normal vector
                px + y * width << 2         // Pixel index
            );
            
            //normMap.push(nx, 0, nz, px + y * width << 2, m);
        }
    }
};

getNormalMap();
var n = normMap.length;

var lightZ = 80;
var lightZ2 = lightZ * lightZ;

var mx = 200;
var my = 200;

draw = function() {
    // Only update image if we move the mouse
    if (mx === mouseX && my === mouseY) { return; }
    mx = mouseX;
    my = mouseY;
    
    background(0);
    loadPixels();
    
    var p = this.imageData.data;
    var ms = millis();
    
    // Calculate normalised light vector
    var lightXNorm = mouseX - 200;
    var lightYNorm = mouseY - 200;
    var lightDist = sqrt(lightXNorm * lightXNorm + lightYNorm * lightYNorm + lightZ2);
    lightXNorm /= lightDist;
    lightYNorm /= lightDist;
    var lightZNorm = lightZ / lightDist;
    var light, pn;
    
    //println(round(100*lightXNorm) + " " + round(100*lightYNorm) + " " + round(100*lightZNorm));
    
    for (var i = 0; i < n; i += 4) {
        light = normMap[i] * lightXNorm + normMap[i + 1] * lightYNorm + normMap[i + 2] * lightZNorm;
        light = (120 + light * 0.6);
        pn = normMap[i + 3];
        p[pn] = light;// * normMap[i + 4];
        p[pn + 1] = light;
        p[pn + 2] = light;
    }
    
    ms = millis() - ms;
    updatePixels();
    
    // Test speed
    fill(200);
    text(ms, 370, 390);
    //text(d, 370, 370);
};

mouseClicked = function() {
    println(mouseX + " " + mouseY);
};