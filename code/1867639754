/*******************************************************
 * See how the ellipse changes as you drag the foci 
 * to different positions.
 * The bar represent the distance between each
 * foci and the orbiting point.
 * Drag the arrows to increase or decrease it.
 * 
 * How does the change in distance relate to the 
 * distance between the foci?
 * 
 * Spacebar = pause
********************************************************/
var speed = 200;

// Colours
var BACKGROUND = color(0, 0, 0);
var ORBITER = color(250, 250, 30);

var time_delta = 25;
var string = 250;

// Bar positioning
var barX = 10;
var barY = 10;
var barW = 16;

var angle = 0;
var selected = false;

var locus1, locus2, cx, cy, ex, ey, foci_dist, old_points;
var foci_theta = 0;

var updateEllipseParameters = function() {
    ex = string/2;
    ey = sqrt(ex*ex - foci_dist*foci_dist/4);
    old_points = [];
};

var updateLoci = function() {
    foci_dist = dist(locus1.x, locus1.y, locus2.x, locus2.y);
    foci_theta = atan2(locus2.y-locus1.y, locus2.x-locus1.x);
    cx = (locus1.x + locus2.x) / 2;
    cy = (locus1.y + locus2.y) / 2;
    updateEllipseParameters();
};

var Locus = function(x, y) {
    this.x = x;
    this.y = y;
    this.r = 10;
    
    this.draw = function() {
        fill(120, 120, 120);
        if (this.isSelected()) {
            strokeWeight(3);
            stroke(200, 200, 200);
        } else {
            noStroke();   
        }
        ellipse(this.x, this.y, this.r, this.r);
    };
    
    this.isSelected = function() {
        if (dist(this.x, this.y, mouseX, mouseY) < this.r) {
            return true;
        }
    };
    
    this.drag = function() {
        var temp_x = this.x;
        var temp_y = this.y;
        this.x = mouseX;
        this.y = mouseY;
        
        if (dist(locus1.x, locus1.y, locus2.x, locus2.y) >= string){
            // Loci further apart than string so undo
            this.x = temp_x;
            this.y = temp_y;
        } else {
            updateLoci();
        }
    };
};

var DragArrow = function(x, y) {
    this.x = x;
    this.y = y;
    
    this.draw = function() {
        if (this.isSelected()) {
            fill(255, 255, 255, 250);
        } else {
             fill(255, 255, 255, 150);
        }
        
        triangle(this.x-5, this.y+2,
                 this.x+5, this.y+2,
                 this.x, this.y+9);
        triangle(this.x-5, this.y-2,
                 this.x+5, this.y-2,
                 this.x, this.y-9);
    };
    
    this.isSelected = function() {
        if (mouseX < this.x+10 && mouseX > this.x-10 &&
            mouseY < this.y+10 && mouseY > this.y-10) {
            return true;
        }
    };
    
    this.drag = function() {
        if (mouseY - barY - 2 > foci_dist) {
            this.y = mouseY;
            string = mouseY - barY - 2;
            updateEllipseParameters();   
        }
    };
};

var triangleArea = function(x1, y1, x2, y2, x3, y3) {
    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2;
};

locus1 = new Locus(150, 180);
locus2 = new Locus(320, 220);
updateLoci();

var arrow = new DragArrow(barX+barW/2, barY + string + 2);
var selectables = [locus1, locus2, arrow];

var running = true;
var t = 0;

var draw = function() {
    var dx = ex * cos(angle);
    var dy = ey * sin(angle);
    var r = sqrt(dx * dx + dy * dy);
    var theta = atan2(dy, dx);
    var x = cx + r * cos(foci_theta + theta);
    var y = cy + r * sin(foci_theta + theta);
    
    if (running) {
        t++;
        var r = dist(locus1.x, locus1.y, x, y);
        var v = sqrt(speed * (2/r) + (1/ex));
        
        var x1 = dx;
        var y1 = dy;

        while (dist(dx, dy, x1, y1) < v) {
            angle += 0.05;
            x1 = ex * cos(angle);
            y1 = ey * sin(angle);
        }
        
        if (angle > 360) {
            angle -= 360;
            t = 0;
        }
    }
        
    background(BACKGROUND);
    
    // Background ellipse
    fill(30);
    translate(cx, cy);
    rotate(foci_theta);
    ellipse(0, 0, ex*2, ey*2);
    resetMatrix();
    
    locus1.draw();
    locus2.draw();
    
    noStroke();
    
    // Area
    var area = 0;
    if (old_points.length >= time_delta) {
        fill(250, 250, 0, 160);
        beginShape();
        vertex(locus1.x, locus1.y);
        for (var i=0; i<old_points.length; i++) {
            vertex(old_points[i][0], old_points[i][1]);
            if (i) {
                area += triangleArea(locus1.x, locus1.y,
                        old_points[i][0], old_points[i][1],
                        old_points[i-1][0], old_points[i-1][1]);
            }
        }
        vertex(x, y);
        area += triangleArea(locus1.x, locus1.y, x, y,
                old_points[i-1][0], old_points[i-1][1]);
        endShape();
    }
    
    fill(255);
    if (area) {
        text("Area: " + round(area), 20, 350);
    } else {
        text("Calculating area", 20, 350);
    }
    
    for (var i=0; i<old_points.length; i++) {
        fill(lerpColor(BACKGROUND, ORBITER, i/(old_points.length+2)));
        //ellipse(old_points[i][0], old_points[i][1], 8, 8);
    }
    
    fill(ORBITER);
    ellipse(x, y, 8, 8);
    
    old_points.push([x, y]);
    if (old_points.length > time_delta) {
        old_points.shift();
    }
    
    // Bar showing lengths
    strokeWeight(1);
    stroke(255, 255, 255);
    var midY = barY + string/2;
    line(36, midY - foci_dist/2, 36, midY + foci_dist/2);
    line(33, midY - foci_dist/2, 39, midY - foci_dist/2);
    line(33, midY + foci_dist/2, 39, midY + foci_dist/2);
    
    noFill();
    rect(barX-2, barY-2, barW+3, string + 4);
    
    noStroke();
    var a = dist(locus1.x, locus1.y, x, y);
    var b = dist(locus2.x, locus2.y, x, y);
    fill(50, 200, 60);
    rect(barX, barY, barW, a);
    fill(50, 100, 200);
    rect(barX, barY+a+1, barW, b);
    
    arrow.draw();
};

var mousePressed = function() {
    for (var i in selectables) {
        if (selectables[i].isSelected()) {
            selected = selectables[i];
        }
    }
};

var mouseReleased = function() {
    selected = false;
};

var mouseDragged = function() {
    if (selected) {
        selected.drag();
    }
};

var keyPressed = function() {
    // Spacebar toggles animation
    if (keyCode === 32) { running = !running; }
};