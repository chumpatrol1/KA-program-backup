/***********************************************************
*    Simulation of a methane molecule
* The larger atom is carbon, the smaller ones hydrogen.
* 
* Atoms repel each other, bonds contract like springs
* The optimum arrangement of atoms (a tetrahedron) is
* found through the interplay of these interactions.
* 
* Use the mouse to rotate the molecule or to drag atoms.
* 
* For a mathematic proof, see: https://www.khanacademy.org/science/organic-chemistry/gen-chem-review/hybrid-orbitals-tutorial/v/tetrahedral-bond-angle-proof
***********************************************************/

strokeWeight(2);
var numAtoms = 5;
var carbonSize = 24;
var hydrogenSize = 10;
var atomColour = [20, 60, 140];
var selectedColour = color(100, 100, 200, 255);

// List of links between atoms
var bondList = [[0, 1], [0,2], [0,3], [0,4]];
var bondLength = 50;
var bondStrength = 0.01;

// Physical variables to play with
var acceleration = 0.05;   // Force of throw
var drag = 0.98;           // Air resistance
var repulsion = -1;        // Force of replusion between atoms

var currentX = false;
var currentY = false;
translate(200, 200);

// Find the distance and normalised vector between two atoms
var differenceVector = function(a, b) {
    var dx = a.x - b.x;
    var dy = a.y - b.y;
    var dz = a.z - b.z;
    var d = sqrt(dx*dx + dy*dy + dz*dz) + 0.1;

    dx /= d;
    dy /= d;
    dz /= d;
    d = max(1, d - a.r - b.r);

    return [dx, dy, dz, d];
};

// Ball object with a position, speed and colour
var Ball = function(x, y, z, r, c) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.r = r;
    this.c = c;
    
    this.dx = 10 * (random() - 0.5);
    this.dy = 10 * (random() - 0.5);
    this.dz = 10 * (random() - 0.5);
    
    this.draw =function() {
        noStroke();
        var p = (this.z+200) / 400;
        fill(color(this.c[0] * p + 255 * (1-p),
                   this.c[1] * p + 255 * (1-p),
                   this.c[2] * p + 255 * (1-p),
                   240));
        ellipse(this.x, this.y, this.r*2, this.r*2);
    };
    
    // Move ball based on its velocity
    this.move = function() {
        this.dx *= drag;
        this.dy *= drag;
        this.dz *= drag;
        this.x += this.dx;
        this.y += this.dy;
        this.z += this.dz;
    };
    
    // Test whether mouse is over ball
    this.selected = function() {
        if (abs(mouseX - 200 - this.x) < this.r && 
            abs(mouseY - 200 - this.y) < this.r) {
                return true;
        }
    };
    
    this.repel = function(that) {
        var d = differenceVector(this, that);
        var force = repulsion / d[3];
        
        this.dx -= force * d[0];
        that.dx += force * d[0];
        this.dy -= force * d[1];
        that.dy += force * d[1];
        this.dz -= force * d[2];
        that.dz += force * d[2];
    };
};

// A spring between ball1 and ball2 of a given length and strength
var Spring = function(atom1, atom2, length, strength) {
    this.atom1 = atom1;
    this.atom2 = atom2;
    this.length = length;
    this.strength = strength;
    
    this.draw = function() {
        var z = (400 - this.atom1.z - this.atom2.z)*255/800;
        stroke(z,z,z,128);
        line(this.atom1.x, this.atom1.y,
             this.atom2.x, this.atom2.y);
    };
    
    this.contract = function() {
        var d = differenceVector(this.atom1, this.atom2);
        var force = strength * (d[3] - this.length);
        
        this.atom1.dx -= force * d[0];
        this.atom2.dx += force * d[0];
        this.atom1.dy -= force * d[1];
        this.atom2.dy += force * d[1];
        this.atom1.dz -= force * d[2];
        this.atom2.dz += force * d[2];
    };
};

var rotateY3D = function(theta, atoms) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, z;

    for (var i = 0; i < atoms.length; i+=1) {
        x = atoms[i].x;
        z = atoms[i].z;
        atoms[i].x = ct*x + st*z;
        atoms[i].z = -st*x + ct*z;
    }
};

var rotateX3D = function(theta, atoms){
    var ct = cos(theta);
    var st = sin(theta);
    var y, z;
    
    for (var i = 0; i < atoms.length; i+=1) {
        y = atoms[i].y;
        z = atoms[i].z;
        atoms[i].y = ct*y - st*z;
        atoms[i].z = st*y + ct*z;
    }
};

var centerMolecule = function(atoms) {
    var midX = 0;
    var midY = 0;
    var midZ = 0;
    
    for (var i = 0; i < atoms.length; i+=1) {
        midX += atoms[i].x;
        midY += atoms[i].y;
        midZ += atoms[i].z;
    }
    
    midX /= atoms.length;
    midY /= atoms.length;
    midZ /= atoms.length;
    
    for (i = 0; i < atoms.length; i+=1) {
        atoms[i].x -= midX;
        atoms[i].y -= midY;
        atoms[i].z -= midZ;
    }
};

// Create an array of atoms
var atoms = [];
for (var i = 0; i < numAtoms; i++) {
    if (i === 0) {
        var r = carbonSize;
    } else {
        var r = hydrogenSize;
    }
    var x = r + round(random() * 400 - 200);
    var y = r + round(random() * 400 - 200);
    var z = r + round(random() * 400 - 200);
    var c = atomColour;
    atoms.push(new Ball(x, y, z, r, c));
}

// Create an array of springs between balls
var bonds = [];
for (var i = 0; i < bondList.length; i++){
    var b1 = atoms[bondList[i][0]];
    var b2 = atoms[bondList[i][1]];
    bonds.push(new Spring(b1, b2, bondLength, bondStrength));    
}

var sortByZ = function(a, b){
    return a.z - b.z;
};

var selected = false;
var i, j;

var draw = function() {
    // Sort by z
    atoms.sort(sortByZ);

    // Clear everything
    background(255, 255, 255);

    // Draw springs and calculate contraction
    for (i=0; i<bonds.length; i++) {
        bonds[i].draw();
        bonds[i].contract();
    }

    // Draw balls and calculate repulsion
    for (i=0; i<numAtoms; i++) {
        atoms[i].draw();
        for (j=i+1; j<numAtoms; j++){
            atoms[i].repel(atoms[j]);
        }
    }
    
    // Work out if any ball is dragged
    if (mouseIsPressed) {
        if (currentX !== false) {
            rotateY3D(-(currentX - mouseX) / 40, atoms);
            rotateX3D( (currentY - mouseY) / 40, atoms);
        } else if (!selected) {
            // See if molecule selected
            for (i=0; i<numAtoms; i++) {
                if (atoms[i].selected()) {
                    selected = atoms[i];
                    selected.c = selectedColour;
                    break;
                }
            }
        if (!selected) {
            currentX = mouseX;
            currentY = mouseY;
        }
        } else {
            // Throw ball
            selected.dx += (mouseX - 200 -selected.x) * acceleration;
            selected.dy += (mouseY - 200- selected.y) * acceleration;
        }
        
    } else {
        currentX = false;
        if (selected) {
            selected.c = atomColour;
            selected = false;
        }
    }
    
    // Move balls
    for (i=0; i<numAtoms; i++) {
        atoms[i].move();
    }
    
    centerMolecule(atoms);
};

// Let go when mouse leaves canvas
var mouseOut = function(){
    mouseIsPressed = false;
};