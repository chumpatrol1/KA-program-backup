/*********************************************************
 * The orbits of Venus, Earth, Mars, Jupiter and Saturn
 * around the sun.
 *
 * What does the orbit of Mars look like from Earth?
 * Note, the size of the sun and planets is not to scale.
*********************************************************/
var showCycles = true;

// Sizes
var sun_size = 20;
var mars_size = 6;
var earth_size = 10;
var jupiter_size = 22;
var venus_size = 4;
var saturn_size = 18;

// Colours
var SUN_COL = color(255, 255, 0);
var MARS_COL = color(212, 95, 17);
var EARTH_COL = color(61, 100, 255);
var JUPITER_COL = color(102, 52, 52);
var VENUS_COL = color(209, 193, 23);
var SATURN_COL = color(255, 0, 51);

// Earth days for orbit
var mars_year = 687;
var earth_year = 365;
var jupiter_year = 4332.59;
var venus_year = 224;
var saturn_year = 10759.22;

// Orbit ellipse radii in millions of km (x, y)
var mars_orbit_r = [228, 227];
var earth_orbit_r = [150, 150];
var jupiter_orbit_r = [816, 740];
var venus_orbit_r = [107, 108];
var saturn_orbit_r = [1513, 1313];

// Other variables for the display
var scaling_factor = 0.15;
var orbit_plots = 16;
var max_points = 800;

var fixed_point, old_fixed, fixed_x, fixed_y;
var t = 0;
var running = true;
var highlighted = false;
var animation = 0;
var animation_length = 80;

var Sun = function(r, colour) {
    this.x = 0;
    this.y = 0;
    this.previous_points = [];
    
    this.update = function(t) {        
        if (t % orbit_plots === 0) {
            var x = this.x - fixed_x;
            var y = this.y - fixed_y;
            this.previous_points.push([x, y]);
            if (this.previous_points.length > 700/orbit_plots) {
                this.previous_points.shift();
            }
        }
    };
    
    this.display = function(x, y) {
        fill(colour);
        ellipse(x, y, r, r);
        fill(255, 89, 0, 100);
        ellipse(x, y, r+3, r+3);
    };
    
    this.draw = function() {
        var x = this.x - fixed_x;
        var y = this.y - fixed_y;
        
        fill(colour);
        for (var i in this.previous_points) {
            var p = this.previous_points[i];
            ellipse(p[0], p[1], 2, 2);
        }
        this.display(x, y);
    };
};

var Planet = function(cx, cy, major, minor, year, r, colour) {
    this.x = 0;
    this.y = 0;
    cx *= scaling_factor;
    cy *= scaling_factor;
    major *= scaling_factor;
    minor *= scaling_factor;
    
    this.previous_points = [];
    
    this.update = function(t) {
        var theta = t*360/year;
        this.x = cx + major * cos(theta);
        this.y = cy + minor * sin(theta);
        
        if (t % orbit_plots === 0) {
            var x = this.x - fixed_x;
            var y = this.y - fixed_y;
            this.previous_points.push([x, y]);
            if (this.previous_points.length > max_points) {
                this.previous_points.shift();
            }
        }
    };
    
    this.display = function(x, y) {
        fill(colour);
        ellipse(x, y, r, r);
    };
    
    this.drawCycle = function() {
        ellipse(cx - fixed_x, cy - fixed_y, major*2, minor*2);
    };
    
    this.draw = function() {
        fill(colour);
        
        for (var i in this.previous_points) {
            var p = this.previous_points[i];
            ellipse(p[0], p[1], 2, 2);
        }
        
        this.display(this.x-fixed_x, this.y-fixed_y);
    };
};  

/********************************************************
 *               Make planets here
*********************************************************/
var sun = new Sun(sun_size, SUN_COL);

var mars = new Planet(21, 0,        // Centre of orbit (x, y)
                      mars_orbit_r[0], mars_orbit_r[1],
                      mars_year, mars_size, MARS_COL);

var earth = new Planet(2.5, 0,       // Centre of orbit (x, y)
                       earth_orbit_r[0], earth_orbit_r[1],
                       earth_year, earth_size, EARTH_COL);
var jupiter = new Planet(2.5, 0,       // Centre of orbit (x, y)
                       jupiter_orbit_r[0], jupiter_orbit_r[1],
                       jupiter_year, jupiter_size, JUPITER_COL);

var venus = new Planet(2.5, 0,       // Centre of orbit (x, y)
                       venus_orbit_r[0], venus_orbit_r[1],
                       venus_year, venus_size, VENUS_COL);

var saturn = new Planet(2.5, 0,       // Centre of orbit (x, y)
                       saturn_orbit_r[0], saturn_orbit_r[1],
                       saturn_year, saturn_size, SATURN_COL);

var bodies = [sun, venus, earth, mars, jupiter, saturn];
var names = [
    "Heliocentric",
    "Venus-o-centric",
    "Geocentric",
    "Mars-o-centric",
    "Jupiter-o-centric",
    "Saturn-o-centric"
];

fixed_point = sun;
old_fixed = sun;

var clearPoints = function() {
    bodies.forEach(function(body) {
        body.previous_points = [];
    });
};
/********************************************************
 *               Display functions
*********************************************************/
// Menu
var menu_x = 10;
var menu_y = 10;
var menu_w = 130;
var menu_h = bodies.length*30 + 25;

var drawOptions = function() {
    // Position menu to avoid it drawing over planets
    menu_x = fixed_x > width / 6 ? width - menu_w - 10 : 10;

    // Outline
    stroke(120, 120, 120, 120);
    fill(0, 0, 0, 200);
    rect(menu_x, menu_y, menu_w, menu_h);
    
    // Highlight
    noStroke();
    fill(100, 100, 100, 100);
    highlighted = false;
    
    // Check mouse is in box
    if (mouseX <= menu_x + menu_w && mouseX >= menu_x &&
        mouseY <= menu_y + menu_h && mouseY >= menu_y) {
            for (var i = bodies.length; i > 0; i--) {
                var y = menu_y + i * 30 - 5;
                if (mouseY > y) {
                    rect(menu_x + 1, y, menu_w - 1, 30);
                    highlighted = bodies[i - 1];
                    break;
                }
            }
    }
    
    // Title
    textSize(14);
    textAlign(CENTER, BASELINE);
    fill(240);
    text("Point of view", menu_x + menu_w / 2, menu_y + 18);
    
    textSize(12);
    textAlign(LEFT, CENTER);
    for (var i = 0; i < bodies.length; i++) {
        bodies[i].display(menu_x + 18, menu_y + i * 30 + 40);
        fill(fixed_point === bodies[i] ? 255 : 100);
        text(names[i], menu_x + 35, menu_y + i * 30 + 40);
    }
};

draw = function() {    
    if (running) {
        t += 2;
        
        var p = animation/animation_length;
        fixed_x = lerp(old_fixed.x, fixed_point.x, p);
        fixed_y = lerp(old_fixed.y, fixed_point.y, p);
        
        if (animation > 0) {
            animation--;
            if (animation === 0) { clearPoints(); }
        }

        bodies.forEach(function(body) {
            body.update(t);
        });
    }
    
    background(0, 0, 0);
    noStroke();
    pushMatrix();
    translate(width/2, height/2);
    bodies.forEach(function(body) {
        body.draw();
    });
    popMatrix();
    
    drawOptions();
};

/********************************************************
 *               Event handling
*********************************************************/

mousePressed = function() {
    if (highlighted) {
        if (highlighted !== fixed_point) {
            old_fixed = fixed_point;
            fixed_point = highlighted;
            animation = animation_length;
        }
    }
};

keyPressed = function() {
    // Spacebar toggles animation
    if (keyCode === 32) { running = !running; }
};