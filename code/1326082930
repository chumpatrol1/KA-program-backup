/**********************************************************
 * A coin is selected from a bag.
 * Flip the coin and see the probability that you picked
 * a certain coin change.
 * 
 * Based on this video:
 * https://www.khanacademy.org/math/applied-math/random%20algorithms,%20probability/v/bayes-theorem-visualized
***********************************************************/

// Coins in bag - try changing the quantities of each coin
var coinTypes = [
    { name: "Two heads", pHeads: 1, quantity: 1,
      colour: color(236, 82, 250) },
    { name: "Heads bias", pHeads: 0.75, quantity: 0,
      colour: color(255, 153, 0) },
    { name: "Fair", pHeads: 0.5, quantity: 1,
      colour: color(18, 196, 65) },
    { name: "Tails bias", pHeads: 0.25, quantity: 0,
      colour: color(0, 247, 255)},
    { name: "Two tails", pHeads: 0, quantity: 1,
      colour: color(19, 141, 247) }
];
var coins, mysteryCoin;

// Fonts
var IMPACT = createFont("impact", 20);
var SERIF = createFont("Serif", 32);
var SANS = createFont("Sans", 20);
var BLACK = color(0, 0, 0);

// Display parameters
var top = 8;
var barX = 72;
var totalBarWidth = 324;
var midX = barX + totalBarWidth/2;
var flipHeight = 60;
var labelX = 4;

// Animation parameters
var flipTimer = 0;
var maxTimer = 32;

var outcomes = [];  // Result of coins flips

var Coin = function(name, pHeads, colour) {
    this.name = name;
    this.pHeads = pHeads;
    this.colour = colour;
    this.probabilities = [];
    this.nameText = round(100 * this.pHeads) + "%";
    
    this.flip = function() {
        if (random() < pHeads) { return "Heads"; }
        else { return "Tails"; }
    };
    
    this.drawProb = function(x, y, w, h) {        
        var widthHeads = this.pHeads * w;
        var midY = y + h/2;
        
        // Draw bar
        noStroke();
        fill(this.colour);
        rect(x, y, w-1, h);
        
        fill(BLACK);
        textAlign(CENTER, CENTER);
        textFont(SANS, 14);
        if (this.pHeads > 0) { text("H", x+widthHeads/2, midY); }
        if (this.pHeads < 1) { text("T", x+(w + widthHeads)/2, midY);}
        
        if (this.pHeads * (1 - this.pHeads) ) {
            stroke(BLACK);
            strokeWeight(1);
            line(x+widthHeads, y, x+widthHeads, y+h);
        }
    };
};

var buildCoins = function() {
    // Convert list of hashes into a list of objects
    var i;
    var nCoins = 0;
    for (i=0; i<coinTypes.length; i++) {
        nCoins += coinTypes[i].quantity;
    }
    
    var coins = [];    
    for (i=0; i<coinTypes.length; i++) {
        if (coinTypes[i].quantity === 0) { continue; }
        var coin = new Coin(coinTypes[i].name, coinTypes[i].pHeads,
                            coinTypes[i].colour);
        coin.probabilities.push(coinTypes[i].quantity/nCoins);
        coins.push(coin);
    }
    
    return coins;
};

var FlipButton = function(x, y) {
    this.x = x;
    this.y = y;
    this.w = 90;
    this.h = 24;
    
    this.draw = function(x, y) {
        this.x = x - this.w/2;
        this.y = y;
        
        if (this.mouseOver()) {
            fill(200, 200, 200);
        } else {
            fill(120, 120, 120);
        }
        strokeWeight(2);
        stroke(250, 250, 250);
        rect(this.x, this.y, this.w, this.h, 5);
        
        textFont(IMPACT, 20);
        fill(BLACK);
        textAlign(CENTER, CENTER);
        text("Flip coin", this.x + this.w/2, this.y + this.h/2);
    };
    
    this.mouseOver = function() {
        return mouseX >= this.x && mouseX <= this.x + this.w &&
                mouseY >= this.y && mouseY <= this.y + this.h;
    };
};

var flipCoin = function() {
    var result = mysteryCoin.flip();
    outcomes.push(result);
    flipTimer = maxTimer;
    
    // Update coin probabilities
    var norm = 0;
    var n = coins[0].probabilities.length-1;
    var i, p;
    for (i=0; i<coins.length; i++) {
        var prior = coins[i].probabilities[n];
        if (result==="Heads") { p = coins[i].pHeads; }
        else { p = 1 - coins[i].pHeads; }
        p *= prior;
        coins[i].probabilities.push(p);
        norm += p;
    }
    
    // Normalise
    for (i=0; i<coins.length; i++) {
        coins[i].probabilities[n+1] /= norm;
    }
    
};

coins = buildCoins();
mysteryCoin = coins[floor(random() * coins.length)];     
var button = new FlipButton(194, 205);

/***************************************************
 * Drawing functions
****************************************************/
var drawMysteryCoins = function(x, y, w, h) {
    var coinSize = 50;
    var coinY = y + coinSize/2;
    var baseY = y + h - 15;
    
    // Draw initial rainbow
    noStroke();
    textFont(SANS, 14);
    textAlign(CENTER, TOP);
    
    var px = x;
    for (var i=0; i<coins.length; i++) {
        var coin = coins[i];
        var width = coin.probabilities[0] * w;
        
        fill(coin.colour);
        triangle(midX, coinY-8, px, baseY, px+width-1, baseY);
        text(coin.name, px+width/2, baseY-1);
        
        fill(BLACK);
        textFont(SERIF, 12);
        var s = round(100*coin.probabilities[0]) + "%";
        text(s, px+width/2, baseY - 13);
        
        px += width;
    }
    
    // Draw coin
    strokeWeight(2);
    stroke(255, 255, 255);
    fill(BLACK);
    ellipse(midX, coinY, coinSize, coinSize);
    
    fill(255, 255, 255);
    textFont(SERIF, 40);
    textAlign(CENTER, CENTER);
    text("?", midX, coinY);
    
    // Label
    textFont(SANS, 12);
    textAlign(LEFT, CENTER);
    text("Select a coin", labelX, y + h/2);
};

var drawProbabilityBar = function(x, y, w, h, level) {
    var x1 = x;
    var x2 = x;
    var y2 = y - flipHeight + 1;
    var w1, w2, totalW;
    
    for (var i=0; i<coins.length; i++) {
        var coin = coins[i];
        w1 = w * coin.probabilities[level];
        
        // Draw change in probability parallelograms
        if (level > 0) {
            totalW = w * coin.probabilities[level-1];
            if (outcomes[level-1] === "Heads") {
                w2 = totalW * coin.pHeads;
            } else {
                w2 = totalW * (1 - coin.pHeads);
                x2 += totalW * coin.pHeads;
            }
            
            if (coin.probabilities[level]) {
                fill(coin.colour);
                quad(x2, y2, x2 + w2-1, y2,
                     x1 + w1-1, y-1, x1, y-1);
                fill(BLACK);
                textAlign(CENTER, BASELINE);
                textFont(SERIF, 12);
                var s = round(100*coin.probabilities[level]) + "%";
                text(s, x1+w1/2, y - 3);
            }
            
            if (outcomes[level-1] === "Heads") {
                x2 += totalW;
            } else {
                 x2 += w2;
            }
        }
        
        // Draw probability bar
        if (coin.probabilities[level]) {
            coin.drawProb(x1, y, w1, h);
            x1 += w1;
        }
    }
    
    // Label
    fill(255, 255, 255);
    textFont(SANS, 12);
    textAlign(LEFT, CENTER);
    if (level < outcomes.length) {
        text("Result: " + outcomes[level][0], labelX, y + h/2);
    } else {
        text("Possible\nOutcomes", labelX, y + h/2);
    }
};

var draw = function() {
    background(BLACK);
    
    var y = top;
    var height = 90;
    drawMysteryCoins(barX, y, totalBarWidth, height);
    
    y += height + 1;
    height = 16;
    
    for (var i=0; i<=outcomes.length; i++) {
        drawProbabilityBar(barX, y, totalBarWidth, height, i);
        y += flipHeight + 16;
    }
    y -= flipHeight - 10;
    
    if (outcomes.length < 3) {
        button.draw(midX, y);   
    }
};

var mouseClicked = function() {
    if (button.mouseOver) { flipCoin(); }
};
