<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Input test</title>
        <style>
            h1 {
                font-family: monospace;
                margin-top: 0;
                text-align: center;
            }
            #input-box {
                width: 96%;
                height: 160px;
                margin-bottom: 0;
                padding: 6px 4px 6px 10px;
                outline: none;
                box-sizing: border-box;
                font-family: "Courier New", Fixed, monospace;
                font-size: 15px;
                color: rgb(109, 121, 222);

                border: 1px #565752 solid;
                overflow: scroll;
            }
            button {
                font-size: 1em;
            }
            .comment {
                color: rgb(76, 136, 107);
            }
            #output-box {
                width: 96%;
                height: 72px;
                margin-bottom: 0;
                padding: 6px 4px 6px 10px;
                outline: none;
                box-sizing: border-box;
                font-family: "Courier New", Fixed, monospace;
                font-size: 15px;
                color: rgb(109, 121, 222);
                border: 1px #565752 solid;
                overflow: scroll;
            }
        </style>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    </head>
    <body>

    <h1>LISP-Like-Language</h1>
    <p>I'm attempting to make my own programming language and interpreter, based on LISP. So far the only functions that really works are + and -. However, you can use an arbitary number of parameters and nest functions.</p>
    
    <h2>Implemented so far</h2>
    <ul>
        <li>Input box</li>
        <li>Output box with multiple lines</li>
        <li>Functions and parameter states</li>
        <li>Calling functions with an arbitrary number of arguments</li>
        <li>Nesting functions</li>
        <li>Function: + - * /</li>
        <li>Parsing parameters as numbers</li>
        <li>Undefined function error message</li>
        <li>Some variable handling (PI is defined as a global variable)</li>
    </ul>
    
    <h2>Try it out below</h2>
    <p>e.g. (+ 1 2)</p>
    <p>(- 1 2 3 4)</p>
    <p>(+ (+ 1 (- 2 3 4) 5))</p>
    <div id="input-box" contenteditable></div>
    <button id="run-button">Run</button>
    <pre id="output-box"></pre>

    <!-- Lisp Like Language interpreter -->
<script>
    // A scope contains a set of variables, including functions.
    var Scope = function(parent) {
        this.parent = parent;
    };

    Scope.prototype.getVariable = function(v) {
        var f = this[v];
        if (f !== undefined) {
            return f;
        } else {
            return this.parent.getVariable(v);
        }
    };

    // LLL acts like a global scope
    // It contains all the standard functions and variables
    var LLL = function() {
        this.synonyms = {
            '+': 'plus',
            '-': 'minus',
            '*': 'mult',
            '/': 'div',
        };

        this.PI = Math.PI;
    };

    LLL.prototype.getVariable = function(v) {
        return this[v];
    };

    // Functions
    LLL.prototype.throw = function(errorType, errorMessage) {
        return [false, errorType, errorMessage];
    };

    LLL.prototype.plus = function(arr) {
        if (!arr.length) {
            this.throw("ParameterError", "plus takes one or more arguments (0 given)");
        } else {
            var x = arr[0];
            for (var i = 1; i < arr.length; i++) {
                x += arr[i];
            }
            return [true, x];
        }
    };

    LLL.prototype.minus = function(arr) {
        if (!arr.length) {
            this.throw("ParameterError", "minus takes one or more arguments (0 given)");
        } else {
            var x = arr[0];
            for (var i = 1; i < arr.length; i++) {
                x -= arr[i];
            }
            return [true, x];
        }
    };

    LLL.prototype.mult = function(arr) {
        if (!arr.length) {
            this.throw("ParameterError", "mult takes one or more arguments (0 given)");
        } else {
            var x = arr[0];
            for (var i = 1; i < arr.length; i++) {
                x *= arr[i];
            }
            return [true, x];
        }
    };

    LLL.prototype.div = function(arr) {
        if (!arr.length) {
            this.throw("ParameterError", "div takes one or more arguments (0 given)");
        } else {
            var x = arr[0];
            for (var i = 1; i < arr.length; i++) {
                x /= arr[i];
            }
            return [true, x];
        }
    };

    LLL.prototype.call = function(name, parameters) {
        if (!name) {
            return [true, null];
        }

        name = this.synonyms[name] || name;

        if (this[name]) {
            return this[name](parameters);
        } else {
            return [false, "NameError", name + " not defined"];
        }
    };

</script>

    <!-- State machine for parsing input -->
<script>
    // Generic State object
    var State = function(machine, scope) {
        this.machine = machine;
        this.scope = scope;
        this.str = "";
        
        if (this.machine.debug) {
            var s = "New state: " + this.type
            if (this.scope) s += "(Child of " + this.scope.type + ")";
            console.log(s);
        }
    };
    
    State.prototype.parse = function(char) {
        if (char.match(/\s/)) {
            // Whitespace so end this state unless its a leading space
            if (this.str.length) {
                this.nextState();
            }
        } else if (char === "(") {
            this.newScope();
        } else if (char === ")") {
            this.exitScope();
        } else {
            this.str += char;
        }
    };

    State.prototype.getVariable = function(v) {
        var f = this[v];
        if (f !== undefined) {
            return f;
        } else {
            return this.scope.getVariable(v);
        }
    };

    State.prototype.nextState = function() {
    };

    State.prototype.newScope = function() {
        this.machine.newState('function', this);
    };

    State.prototype.exitScope = function() {};

    // Possible use for syntax highlighting
    State.prototype.getCode = function(char) {
        if (this.machine.debug) {
            console.log("* " + this.type + ": " + this.str);
        }
        
        return '<span class="' + this.type + '">' + this.str + "</span>";
    };
        
/**********************************************
 * CommentState
 *  Writing a comment
 *  This is anything outside of parenthesis
 *  TODO: allow parenthesis to be escaped
***********************************************/

    var CommentState = function(machine, scope) {
        this.type = "comment";
        State.call(this, machine, scope);
    };
    
    CommentState.prototype = Object.create(State.prototype);

/**********************************************
 * FunctionState:
 *  Writing a function name
 *  This is the first set of non-whitespace characters
 *  after an open parenthesis
***********************************************/

    var FunctionState = function(machine, scope, env) {
        this.type = "function";
        State.call(this, machine, scope);
        this.env = env;
        this.func = this;
        this.parameters = [];
    };
    
    FunctionState.prototype = Object.create(State.prototype);

    // Get the actual function from the environment
    FunctionState.prototype.getFunction = function() {
        var functionName = this.env.synonyms[this.str] || this.str;
        // TODO: what about if this is a variable
        this.f = this.env[functionName];

        if (!this.f) {
            this.machine.raiseError("NameError: " + this.str + " is not a function");
        }
    };

    FunctionState.prototype.nextState = function() {
        this.getFunction();
        if (this.f) {
            this.machine.newState('parameter', this);
        }
    };

    FunctionState.prototype.exitScope = function() {
        if (!this.f) {
            this.getFunction();
        }
        if (this.f) {
            this.callFunction();
        }
    };

    FunctionState.prototype.callFunction = function() {
        if (this.machine.debug) {
            console.log("Call function " + this.str + " with " + this.parameters.join(", "));
        }
        var result =  this.f(this.parameters);
        if (result[0]) {
            this.machine.exitScope(this.scope, result[1]);
        } else {
            this.machine.raiseError(result[1] + ": " + result[2]);
        }
    }

/**********************************************
 * ParameterState:

 *  Writing a parameter for a function
***********************************************/

    var ParameterState = function(machine, scope) {
        this.type = "parameter";
        State.call(this, machine, scope);
        this.func = scope.func;
        this.value;
        this.valueType;
    };

    ParameterState.prototype = Object.create(State.prototype);

    ParameterState.prototype.addToFunction = function() {
        // Parse type of parameter

        // TODO: ideally I should parse this myself
        this.value = parseFloat(this.str);
        if (!isNaN(this.value)) {
            this.valueType = 'Number';
        } else {
            // Check whether value is a variable
            this.value = this.scope.getVariable(this.str);
            if (this.value) {
                this.valueType = 'Variable';
            } else {
                // TODO: Check whether is string
                this.value = this.str;
                this.valueType = "String";
            }
        }

        if (this.machine.debug) {
            console.log("Parameter " + this.str + " interpreted as " + this.valueType + " (" + this.value + ")");
        }

        this.func.parameters.push(this.value);
    }

    ParameterState.prototype.nextState = function() {
        this.addToFunction();
        this.machine.newState('parameter', this.scope);
    };

    ParameterState.prototype.exitScope = function() {
        this.addToFunction();
        this.func.callFunction();
    };

/**********************************************
 * StateMachine:
 *  Object to keep track of the state we're in
***********************************************/

    var StateMachine = function(outputBox, env, debug) {
        this.outputBox = outputBox;
        this.env = env;
        this.debug = debug;
        this.code = "";
        this.state = new CommentState(this, this.env);
    };
    
    StateMachine.prototype.parse = function(str) {
        this.running = true;
        if (this.debug) console.log("Parsing: " + str);
        
        var lines = str.split('\n');

        for (var i = 0; i < lines.length; i++) {
            var line = lines[0];

            for (var j = 0; j < line.length; j++) {
                if (!this.running) {
                    this.output(line);
                    this.output((j ? new Array(j - 1).join(' ') : '') + '^');
                    return;
                }   
                this.state.parse(line.charAt(j));
            }
        }
        
        if (this.debug) console.log("End parsing");
    };
    
    // Moving to a new state
    StateMachine.prototype.newState = function(type, scope) {
        //if (this.debug) console.log("Expecting " + type);
        
        if (type === 'function') {
            this.state = new FunctionState(this, scope, this.env);
        } else if (type === 'parameter') {
            this.state = new ParameterState(this, scope);
        } else {
            alert("UnknownState: " + type);
        }
    };
    
    // Returning the previous scope
    StateMachine.prototype.exitScope = function(upScope, returnValue) {
        this.state = upScope;

        if (this.state.type === "comment") {
            this.output("> " + returnValue);
        } else {
            if (this.debug) {
                console.log("Returning a value of " + returnValue + " to " + this.state.type);
            }
            this.state.str = returnValue;
        }

        // Returning to the old state also triggers the end of that state
        this.state.nextState();
    };

    StateMachine.prototype.raiseError = function(errorMessage) {
        this.output("> " + errorMessage);
        this.running = false;
    };

    StateMachine.prototype.output = function(message) {
        var outputLine = $("<div></div>");
        outputLine.addClass("output-line");
        outputLine.text(message);
        this.outputBox.append(outputLine);
    };

    StateMachine.prototype.updateCode = function(state) {
        if (state.started) {
            this.code += state.getCode();
        }
    };
    
</script>

<script>
    $("#run-button").on("click", function() {
        var inputBox = $("#input-box")[0];
        var outputBox = $("#output-box")
        var code = inputBox.textContent;
        
        var lll = new LLL();
        var SM = new StateMachine(outputBox, lll, true);
        var output = SM.parse(code);
    });
</script>

    </body>
</html>