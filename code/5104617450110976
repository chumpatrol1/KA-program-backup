/**********************************************
 * Program to build animations
 * 
 * Click on a frame to select it.
 * Use the sliders to change the x, y
 * coordinates of the ball at that frame.
 * Linear interpolation is used to
 * calculate the coordinates for the frames
 * in between.
**********************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var SKYBLUE = color(230, 240, 255);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(140, 140, 140);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 240);

var sansFont = createFont("sans", 14);
var serifFont = createFont("serif", 14);

frameRate(24);
var FRAMES = 24;

var removeButton, speedSlider;

// Linear interpolation of the values of an array between two indices
var interpolate = function(arr, index1, index2) {
    var d = index2 - index1;
    var v1 = arr[index1];
    var v2 = arr[index2];
    
    for (var i = 1; i < d; i++) {
        arr[index1 + i] = lerp(v1, v2, i / d);
    }
};

/*********************************************
 *      Slider object
**********************************************/

var Slider = function(x, y, length, orientation, minValue, maxValue, nowValue, name, updateF) {
    this.x = x;
    this.y = y;
    this.length = length;
    this.orientation = orientation;
    
    if (this.orientation === 'vertical') {
        this.start = y;
        this.end = y + this.length;
        this.v1 = this.end;
        this.v2 = this.start;
    } else {
        this.start = x;
        this.end = x + this.length;
        this.v1 = this.start;
        this.v2 = this.end;
    }
    
    this.name = name;
    this.updateFunction = updateF;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = minValue;
    this.max = maxValue;
    this.value = nowValue || minValue;
    this.setValue(this.value);

    this.held = false;
};

Slider.prototype.draw = function() {
    strokeWeight(3);
    stroke(GREY);
    if (this.orientation === 'vertical') {
        line(this.x, this.y, this.x, this.end);
    } else {
        line(this.x, this.y, this.end, this.y);
    }
    
    strokeWeight(1);
    stroke(BACKGROUND);
    fill(ORANGE);
    if (this.orientation === 'vertical') {
        ellipse(this.x, this.ball, this.ballD, this.ballD);
    } else {
        ellipse(this.ball, this.y, this.ballD, this.ballD);
    }
    
};

Slider.prototype.mouseOver = function() {
    if (mouseX >= this.x - this.ballR &&
        mouseY >= this.y - this.ballR) {
        if (this.orientation === 'vertical') {
            return mouseX <= this.x + this.ballR &&
                   mouseY <= this.end + this.ballR;
        } else {
            return mouseX <= this.end + this.ballR &&
                   mouseY <= this.y + this.ballR;
        }   
    }
};
    
Slider.prototype.selected = function() {
    if (this.orientation === 'vertical') {
        this.held = dist(mouseX, mouseY, this.x, this.ball) <= this.ballR;
    } else {
        this.held = dist(mouseX, mouseY, this.ball, this.y) <= this.ballR;
    }
    if (!this.held && this.mouseOver()) {
        this.setBallPosition();
    }
};
    
Slider.prototype.drag = function() {
    if (this.held) {
        this.setBallPosition();
        return true;
    }
};

Slider.prototype.setBallPosition = function() {
    var value = this.orientation === 'vertical' ? mouseY : mouseX;
    this.ball = constrain(value, this.start, this.end);
    this.setValue();
};

Slider.prototype.setValue = function(d) {
    if (d !== undefined) {
        this.value = constrain(d, this.min, this.max);
    } else {
        
        this.value = round(map(this.ball, this.v1, this.v2, this.min, this.max));
        this.update();
    }
    this.ball = map(this.value, this.min, this.max, this.v1,  this.v2);
};

Slider.prototype.update = function() {
    if (this.updateFunction) {
        this.updateFunction(this.value);
    }
};

/********************************************************
 *  GUI Button
*********************************************************/

var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultColor = color(140, 140, 140);
    this.highlightColor = color(40, 40, 40);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.mouseReleased = function() {
    if (this.mouseOver()) {
        this.click();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    noFill();
    strokeWeight(1);
    stroke(this.defaultColor);
    if (!this.deactivated && (this.mouseOver() || this.selected)) {
        fill(TOOLBAR);
        stroke(this.highlightColor);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textSize(14);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

// Circular button
var CircleButton = function(x, y, w, h, clickFunction, drawFunction) {
    Button.call(this, x, y, w, h, "", clickFunction);
    this.drawIcon = drawFunction;
};
CircleButton.prototype = Object.create(Button.prototype);

CircleButton.prototype.draw = function() {
    var c;
    if (this.mouseOver()) {
        c = color(40, 40, 40);
        fill(TOOLBAR);
    } else {
        c = color(140, 140, 140);
        noFill();
    }
    
    var x = this.x + this.w / 2;
    var y = this.y + this.w / 2;
    stroke(c);
    strokeWeight(2);
    ellipse(x, y, this.w, this.w);
    
    if (this.drawIcon) {
        fill(c);
        this.drawIcon(x, y, this.w / 2);   
    }
};

/***************************************************
 *      Frame selector
 * A slider allowing the user to select a frame
****************************************************/

var FrameSelector = function(timeline, x, y, dx, maxFrames) {
    this.timeline = timeline;
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.h = 0;
    this.w = (maxFrames + 1) * this.dx;
    
    this.r = 10;
    this.by = this.y - this.r;
    this.maxFrames = maxFrames;
    this.held = false;
    
    this.setBallPosition();
};

FrameSelector.prototype.draw = function() {
    this.setBallPosition();
    
    if (this.mouseOver()) {
        var frame = this.mapMouseToFrame();
        if (frame !== this.timeline.currentFrame) {
            strokeWeight(2);
            stroke(ORANGE);
            noFill();
            var x = this.x + (frame + 0.5) * this.dx;
            ellipse(x, this.by, this.r * 2 + 1, this.r * 2 + 1);
        }
    }
    
    // Frame counter
    strokeWeight(1);
    stroke(GREY);
    fill(TEXTCOL);
    textSize(12);
    textAlign(CENTER, BASELINE);
    for (var i = 0; i <= this.maxFrames; i++) {
        var x = this.x + (i + 0.5) * this.dx;
        line(x, this.y, x, this.y - 3);
        text(i + 1, x, this.y - 5);
    }
    
    // Line over the avar boxes
    strokeWeight(1);
    stroke(200);
    line(this.bx, this.y, this.bx, this.y + this.h);
    
    // Selector ball
    fill(ORANGE);
    stroke(BACKGROUND);
    ellipse(this.bx, this.by, this.r * 2 + 1, this.r * 2 + 1);
    
    fill(TEXTCOL);
    textSize(12);
    textAlign(CENTER, CENTER);
    text(this.timeline.currentFrame + 1, this.bx, this.by);
    
    strokeWeight(1);
    stroke(GREY);
    line(this.x, this.y, this.x + this.w, this.y);
};

FrameSelector.prototype.setBallPosition = function() {
    this.bx = this.x + (this.timeline.currentFrame + 0.5) * this.dx;
};

FrameSelector.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.by) <= this.r;
};

FrameSelector.prototype.drag = function() {
    if (this.held) {
        this.updateFrame();
        return true;
    }
};

FrameSelector.prototype.mouseOver = function() {
    return mouseX > this.x && mouseX < this.x + this.w &&
           mouseY < this.y && mouseY > this.y - 2 * this.r;
};

// Clicking on frame moves to that frame
FrameSelector.prototype.mouseReleased = function() {
    if (this.mouseOver()) {
        this.updateFrame();
    }
};

FrameSelector.prototype.mapMouseToFrame = function() {
    var f = map(mouseX + 4, this.x, this.x + this.w, 0, this.maxFrames + 1);
    return constrain(floor(f), 0, this.maxFrames);
};

// Move to a new frame based on the mouse position
FrameSelector.prototype.updateFrame = function() {
    this.timeline.currentFrame = this.mapMouseToFrame();
    this.setBallPosition();
};

/***************************************************
 *      Timeline
 * A object that contains an array for each avar
****************************************************/

var Timeline = function(x, y, w, h, frames, scene) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.scene = scene;
    this.state = 'paused';
    
    this.padding = 8;
    
    this.frameCount = frames;
    this.currentFrame = 0;
    this.frameSelector = new FrameSelector(
        this, this.x, this.y,
        this.w / this.frameCount, this.frameCount -1
    );
    
    this.avars = {};
    this.avarCount = 0;
    
    this.keyFrames = [0, this.frameCount - 1];
    
    this.sliders = [this.frameSelector];
};

// Add an animation variable
// It's value will be set to the given value for all frames
// A slider to control it is also added
Timeline.prototype.addAvar = function(name, value, vmin, vmax) {
    var values = [];
    for (var i = 0; i < this.frameCount; i++) {
        values.push(value);
    }
    
    this.avars[name] = {
        values: values,
        min: vmin,
        max: vmax
    };
    
    this.sliders.push(new Slider(
        this.x - 10,
        this.y + this.avarCount * this.h + this.padding,
        this.h - this.padding * 2,
        'vertical',
        vmin, vmax, value, name)
    );
    
    this.frameSelector.h += this.h;
    this.avarCount++;
};

Timeline.prototype.draw = function() {
    // Move to next frame if running
    
    if (this.state === 'running' && frameCount % (6 - speedSlider.value) === 0) {
        this.currentFrame = (this.currentFrame + 1) % this.frameCount;
        this.updateFrame();
    }
    
    var dx = this.w / this.frameCount;
    
    // Frame Selector
    this.frameSelector.draw();

    var n = 0;
    var y = this.y;
    for (var a in this.avars) {
        var avar = this.avars[a];
        var values = avar.values;
        
        // Bounding rect
        strokeWeight(1);
        stroke(GREY);
        noFill();
        //rect(this.x, y, this.w, this.h);
        line(this.x, y + this.h, this.x + this.w, y + this.h);
        
        // Label
        textAlign(CENTER, BASELINE);
        textSize(16);
        fill(TEXTCOL);
        text(a, this.x - 32, y + this.h / 2 - 1);
        
        textAlign(CENTER, TOP);
        textSize(13);
        text(round(values[this.currentFrame]), this.x - 32, y + this.h / 2 + 1);
        
        // Draw value graph
        strokeWeight(2);
        stroke(BLUE);
        noFill();
        
        var y1 = y + this.padding;
        var y2 = y + this.h - this.padding;
        
        beginShape();
        for (var i = 0; i < this.keyFrames.length; i++) {
            var frame = this.keyFrames[i];
            var vx = this.x + (frame + 0.5) * dx;
            var vy = map(values[frame], avar.min, avar.max, y2, y1);
            vertex(vx, vy);
        }
        endShape();
        
        // Draw keyFrame markers
        strokeWeight(1);
        stroke(BACKGROUND);
        fill(BLUE);
        for (var i = 0; i < this.keyFrames.length; i++) {
            var frameNum = this.keyFrames[i];
            var vx = this.x + (frameNum + 0.5) * dx;
            var vy = map(values[frameNum], avar.min, avar.max, y2, y1);
            ellipse(vx, vy, 7, 7);
        }
        
        // Draw slider
        this.sliders[n + 1].draw();
        
        y += this.h;
        n++;
    }
};

Timeline.prototype.updateAvar = function(name, value) {
    var f1 = this.currentFrame;
    var avar = this.avars[name];
    avar.values[f1] = value;

    if (this.keyFrames.indexOf(f1) === -1) {
        this.keyFrames.push(f1);
        this.keyFrames.sort(function(a, b) { return a - b; });
        this.updateRemoveButton();
    }
    
    // Interpolate between keyFrames
    var index = this.keyFrames.indexOf(f1);
    
    // Interpolate before this frame
    if (index !== 0) {
        interpolate(avar.values, this.keyFrames[index - 1], f1);
    }
    
    // Interpolate after this frame
    if (index !== this.keyFrames.length - 1) {
        interpolate(avar.values, f1, this.keyFrames[index + 1]);
    }
    
    this.updateScene();
};

Timeline.prototype.updateRemoveButton = function() {
    removeButton.showing = this.currentFrame > 0 &&
        this.currentFrame < this.frameCount - 1 &&
        this.keyFrames.indexOf(this.currentFrame) !== -1;
};

Timeline.prototype.removeCurrentKeyFrame = function() {
    var index = this.keyFrames.indexOf(this.currentFrame);
    
    // Check it's not the first or last frame just to be sure
    if (index > 0 && index < this.frameCount - 1) {
        var f1 = this.keyFrames[index - 1];
        var f2 = this.keyFrames[index + 1];
        this.keyFrames.splice(index, 1);
        
        // Re-interpolate avars
        for (var avar in this.avars) {
            interpolate(this.avars[avar].values, f1, f2);
        }
    }
};

// Current frame has changed, so update sliders and actor
Timeline.prototype.updateFrame = function() {
    for (var s = 1; s < this.sliders.length; s++) {
        var slider = this.sliders[s];
        var avar = this.avars[slider.name];
        slider.setValue(avar.values[this.currentFrame]);
    }
    
    this.updateRemoveButton();
    this.updateScene();
};

Timeline.prototype.updateScene = function() {
    var actor = this.scene.actors[0];
    actor.x = this.avars.x.values[this.currentFrame];
    actor.y = this.avars.y.values[this.currentFrame];
};

// Drag sliders and update values
Timeline.prototype.drag = function() {
    if (this.state === 'running') { return; }
    
    for (var s = 0; s < this.sliders.length; s++) {
        if (this.sliders[s].drag()) {
            var slider = this.sliders[s];
            
            if (slider.name) {
                // Update value of avars
                this.updateAvar(slider.name, slider.value);
            } else {
                // Current Frame has update
                this.updateFrame();
            }
            break;
        }
    }
};

Timeline.prototype.mousePressed = function() {
    if (this.state === 'running') { return; }
    
    for (var s = 0; s < this.sliders.length; s++) {
        this.sliders[s].selected();
    }
};

Timeline.prototype.mouseReleased = function() {
    if (this.state === 'running') { return; }
    
    for (var s = 0; s < this.sliders.length; s++) {
        this.sliders[s].held = false;
    }
    
    this.frameSelector.mouseReleased();
};

/***************************************************
 *      Actor
 * An actor is an object in a scene to be animated.
****************************************************/

var Actor = function(x, y) {
    this.x = x;
    this.y = y;
};

Actor.prototype.draw = function(x, y) {
    strokeWeight(1);
    stroke(200, 30, 30);
    noStroke();
    
    fill(0, 0, 0, 60);
    ellipse(this.x + x + 1, y - this.y + 1, 20, 20);
    fill(255, 60, 60);
    ellipse(this.x + x, y - this.y, 20, 20);
};

/***************************************************
 *      Scene
 * A scene is box in which the actor exists
****************************************************/

var Scene = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.actors = [];
};

Scene.prototype.draw = function() {
    strokeWeight(1);
    stroke(GREY);
    fill(SKYBLUE);
    rect(this.x, this.y, this.w, this.h + 20);
    
    noStroke();
    fill(120, 200, 160);
    rect(this.x + 1, this.y + this.h, this.w - 1, 20);
    
    strokeWeight(2);
    stroke(GREEN);
    line(this.x + 1, this.y + this.h + 1, this.x + this.w - 1, this.y + this.h + 1);
    
    for (var i = 0; i < this.actors.length; i++) {
        this.actors[i].draw(this.x, this.y + this.h);
    }
};

Scene.prototype.addActor = function(actor) {
    this.actors.push(actor);
};

/***************************************************
 *      Setup
****************************************************/

// TODO: bind avars to actor somehow
var scene = new Scene(20, 16, width - 40, 200);
scene.addActor(new Actor(200, 50));

// Create 24 frames of animation
var timeline = new Timeline(60, 275, width - 80, 110, FRAMES, scene);
timeline.addAvar('x', 200, 11, scene.w - 11);
timeline.addAvar('y', 50, 0, scene.h - 11);

/***************************************************
 *      Set up other GUI elements
****************************************************/

var playPause = function() {
    if (timeline.state === 'running') {
        timeline.state = 'paused';
    } else if (timeline.state === 'paused') {
        timeline.state = 'running';
    }
};

var playIcon = function(x, y, r) {
    noStroke();
    if (timeline.state === 'running') {
        rect(x - 4, y - 5, 3, 10, 5);
        rect(x + 1, y - 5, 3, 10, 5);
    } else {
        triangle(x - r * 0.4, y - r * 0.5, x - r * 0.4, y + r * 0.5, x + r * 0.65, y);
    }
};

var removeKeyFrame = function() {
    timeline.removeCurrentKeyFrame();
};

var buttonY = timeline.y + timeline.h * timeline.avarCount + 10;
var playButton = new CircleButton(60, buttonY, 24, 24, playPause, playIcon);

removeButton = new Button(200, buttonY + 1, 125, 20, "Remove keyframe", removeKeyFrame);
removeButton.showing = false;

speedSlider = new Slider(100, buttonY + 20, 60, 'horizontal', 1, 5, 3);

/***************************************************
 *      Main loop
****************************************************/

draw = function() {
    background(BACKGROUND);
    scene.draw();
    timeline.draw();
    
    playButton.draw();
    
    if (timeline.state !== 'running') {
        removeButton.draw();    
    }
    
    fill(TEXTCOL);
    textAlign(CENTER, BASELINE);
    textSize(13);
    text("Speed: " + speedSlider.value, speedSlider.x + speedSlider.length / 2, speedSlider.y - 10);
    speedSlider.draw();
};

/*****************************************************
 *      Event handling
******************************************************/

mousePressed = function() {
    timeline.mousePressed();
    speedSlider.selected();
};

mouseDragged = function() {
    timeline.drag();
    speedSlider.drag();
};

mouseReleased = function() {
    timeline.mouseReleased();
    playButton.mouseReleased();
    removeButton.mouseReleased();
    speedSlider.held = false;
};

mouseOut = function() {
    mouseReleased();
};
