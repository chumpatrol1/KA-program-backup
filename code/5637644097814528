/**************************************
 *  Click on the grey anchor points to draw
 *  strings between them.
 *  Try to make a parabola.
 * 
 *  To Do
 *  - Only allow one string per point (?)
 *  - Otherwise allow strings to be deleted.
 *  - Show parabola on completion.
***************************************/

// Standard colours and variables
//var BACKGROUND = color(250, 250, 250);
var BACKGROUND = color(240, 250, 255);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var BACKBONE_COL = color(0, 140, 0);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var TOOLBARCOL = color(225, 225, 225, 180);
var MESSAGEBLUE = color(20, 60, 160);

var sansFont = createFont("sans", 15);

var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 20;
var NUM_ANCHORS = 5;

strokeJoin(ROUND);
strokeCap(ROUND);

var showing = {
    'Control points': true,
    'Control arms': true,
    'String points': true,
    Curve: false
};

// Given the end points of two lines (x1, y1) to (x2, y2) and (x3, y3) to (x4, y4),
// return the point where they intersect
// Assume lines do intersect (i.e. are not parallel and are not segments)
var findIntersection = function(x1, y1, x2, y2, x3, y3, x4, y4) {
    var dx1 = (x1 - x2);
    var dx2 = (x3 - x4);
    var dy1 = (y1 - y2);
    var dy2 = (y3 - y4);
    var d = dx1 * dy2 - dy1 * dx2;
    return [(dx2 * (x1 * y2 - y1 * x2) - dx1 * (x3 * y4 - y3 * x4)) / d,
            (dy2 * (x1 * y2 - y1 * x2) - dy1 * (x3 * y4 - y3 * x4)) / d];
};

/**************************************
 *  Generic GUI component from which
 * other elements inherit
 * 
 * The default object is basically a
 * button
***************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};
}
/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var FilledSButtonDraw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    noFill();
    fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));

    stroke(this.highlightCol);
    strokeWeight(1);
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function(col) {
    this.draw = FilledSButtonDraw.bind(this);
    this.defaultCol = color(0, 0, 0, 1);
    this.highlightCol = col;
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/*********************************************
 * InteractivePoint
 * A point with a position and colour which
 * has a mouseover effect.
**********************************************/

var InteractivePoint = function(x, y, n) {
    this.x = x;
    this.y = y;
    this.n = n;
    this.d = 7;
    this.animation = 0;
};

InteractivePoint.prototype.draw = function(selected) {
    if (selected || this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }
    
    strokeWeight(1);
    stroke(BACKGROUND);
    
    if (selected) {
        fill(PINK);
    } else {
        fill(GREY);    
    }
    
    var d = this.d + this.animation / 2 ;
    quad(this.x, this.y - d, this.x + d, this.y, this.x, this.y + d, this.x - d, this.y);
    
    fill(0);
    //text(this.n, this.x, this.y);
};

InteractivePoint.prototype.mouseover = function() {
    return mouseX >= this.x - this.d && mouseX <= this.x + this.d && 
           mouseY >= this.y - this.d && mouseY <= this.y + this.d;
};

/*********************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
**********************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function(selected) {
    if (selected || this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

/*********************************************
 * Curve
**********************************************/

// Curve between by two points at (x1, y1) and (x2, y2),
// with a control point at (x3, y3)
var Curve = function(x1, y1, x2, y2, x3, y3) {
    this.p1 = new DraggablePoint(x1, y1);
    this.p2 = new DraggablePoint(x2, y2);
    this.p3 = new DraggablePoint(x3, y3);
    this.controlPoints = [this.p1, this.p2, this.p3];
    
    this.splinePoints = [];
    this.strings = [];
    this.selected = false;
    this.selectedAnchor = false;
    
    this.addAnchors();
    this.update();
    this.animation = 0;
};

Curve.prototype.addAnchors = function() {
    this.anchorPoints = [];
    for (var i = 1; i <= NUM_ANCHORS; i++) {
        var r = i / (NUM_ANCHORS + 1);
        var x3 = lerp(this.p1.x, this.p3.x, r);
        var y3 = lerp(this.p1.y, this.p3.y, r);
        var x4 = lerp(this.p3.x, this.p2.x, r);
        var y4 = lerp(this.p3.y, this.p2.y, r);
        
        this.anchorPoints.push(new InteractivePoint(x3, y3, 2 * i - 2));
        this.anchorPoints.push(new InteractivePoint(x4, y4, 2 * i - 1));
    }
};

Curve.prototype.draw = function() {
    // Lines to control points
    stroke(BLUE);
    strokeWeight(2);
    line(this.p1.x, this.p1.y, this.p3.x, this.p3.y);
    line(this.p2.x, this.p2.y, this.p3.x, this.p3.y);
    
    // Draw strings
    strokeWeight(1);
    for (var i = 0; i < this.strings.length; i++) {
        var str = this.strings[i];
        var p1 = this.anchorPoints[str[0]];
        var p2 = this.anchorPoints[str[1]];
        
        // Draw red if wrong
        if (str[2]) {
            stroke(GREY);
        } else {
            stroke(RED);
        }
        
        line(p1.x, p1.y, p2.x, p2.y);
    }
    
    if (this.correct === true) {
        this.drawParabola();
    }
    
    strokeWeight(1);
    stroke(255);
    for (var i = 0; i < this.anchorPoints.length; i++) {
        this.anchorPoints[i].draw(this.selectedAnchor === i);
        //text(i, this.anchorPoints[i].x,this.anchorPoints[i].y-10);
    }
    
    for (var i = 0; i < this.controlPoints.length; i++) {
        this.controlPoints[i].draw();
    }
    
    // Draw a string that is being made
    if (this.selectedAnchor !== false) {
        strokeWeight(1);
        stroke(PINK);
        var anchor = this.anchorPoints[this.selectedAnchor];
        line(anchor.x, anchor.y, mouseX, mouseY);
    }
    
};

Curve.prototype.update = function() {
// Fill splinePoints array with points along the curve
    var x1 = this.p1.x;
    var y1 = this.p1.y;
    var x2 = this.p3.x;
    var y2 = this.p3.y;
    
    for (var i = 1; i <= NUM_ANCHORS; i++) {
        var r = i / (NUM_ANCHORS + 1);
        var x3 = lerp(x1, x2, r);
        var y3 = lerp(y1, y2, r);
        var x4 = lerp(x2, this.p2.x, r);
        var y4 = lerp(y2, this.p2.y, r);
        
        this.anchorPoints[2 * i - 2].x = x3;
        this.anchorPoints[2 * i - 2].y = y3;
        this.anchorPoints[2 * i - 1].x = x4;
        this.anchorPoints[2 * i - 1].y = y4;
    }

    this.calculateSplines();
    //println(this.splinePoints);
};

Curve.prototype.calculateSplines = function() {
    var x1 = this.p1.x;
    var y1 = this.p1.y;
    var x2 = this.p3.x;
    var y2 = this.p3.y;
    var d = 1 / (NUM_ANCHORS + 1);
    
    this.splinePoints = [];
    for (var i = 1; i <= NUM_ANCHORS; i++) {
        var r = i * d;
        var x3 = lerp(this.p1.x, this.p3.x, r);
        var y3 = lerp(this.p1.y, this.p3.y, r);
        var x4 = lerp(this.p3.x, this.p2.x, r);
        var y4 = lerp(this.p3.y, this.p2.y, r);
        var coord = findIntersection(x1, y1, x2, y2, x3, y3, x4, y4);
        this.splinePoints.push([coord[0], coord[1]]);
        x1 = x3;
        y1 = y3;
        x2 = x4;
        y2 = y4;
    }
    
    this.splinePoints.push([x2, y2]);
};

Curve.prototype.drawTrueStrings = function() {
    for (var i = 0; i <= NUM_ANCHORS; i++) {
        var r = i / (NUM_ANCHORS + 1);
        var x1 = lerp(this.p1.x, this.p3.x, r);
        var y1 = lerp(this.p1.y, this.p3.y, r);
        var x2 = lerp(this.p3.x, this.p2.x, r);
        var y2 = lerp(this.p3.y, this.p2.y, r);
        
        // Draw strings
        strokeWeight(1);
        stroke(GREY);
        line(x1, y1, x2, y2);
        
        // String anchors
        stroke(255);
        fill(GREY);
        var d = 5;
        quad(x1, y1 - d, x1 + d, y1, x1, y1 + d, x1 - d, y1);
        quad(x2, y2 - d, x2 + d, y2, x2, y2 + d, x2 - d, y2);
    }
};

Curve.prototype.drawParabola = function() {
    if (this.animation && frameCount % 5 === 0) {
        this.animation--;
    }
    
    var n = this.splinePoints.length - this.animation;
    
    strokeWeight(5);
    stroke(BACKBONE_COL);
    var x1 = this.splinePoints[0][0];
    var y1 = this.splinePoints[0][1];
    for (var i = 0; i < n; i++) {
        var x2 = this.splinePoints[i][0];
        var y2 = this.splinePoints[i][1];
        line(x1, y1, x2, y2);
        x1 = x2;
        y1 = y2;
    }
};

Curve.prototype.selectPoint = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseover()) {
            this.selected = this.controlPoints[i];
            break;
        }
    }
    
    var anchor = -1;
    for (var i = 0; i < this.anchorPoints.length; i++) {
        if (this.anchorPoints[i].mouseover()) {
            anchor = i;
            break;
        }
    }
    
    if (anchor > -1) {
        if (this.selectedAnchor !== false) {
            // Connect the points
            this.addString(anchor, this.selectedAnchor);
        } else {
            // Click on point to start a new string
            var stringNum = this.findStringFromPoint(anchor);
            
            if (stringNum > -1) {
                // This point already has a string
                var str = this.strings[stringNum];
                this.selectedAnchor = str[str[0] === anchor ? 1 : 0];
                this.strings.splice(stringNum, 1);
            } else {
                this.selectedAnchor = anchor;    
            }
        }
    } else {
        this.selectedAnchor = false;
    }
    this.testCompletion();
};

Curve.prototype.mouseDrag = function() {
    if (this.selected) {
        this.selected.x += mouseX - pmouseX;
        this.selected.y += mouseY - pmouseY;
        this.update();
    }
};

Curve.prototype.findStringFromPoint = function(p) {
    // Find a string that attaches to point p
    for (var i = 0; i < this.strings.length; i++) {
        var str = this.strings[i];
        if (str[0] === p || str[1] === p) {
            return i;    
        }
    }
    return -1;
};

Curve.prototype.addString = function(n1, n2) {
    if ((n1 % 2) + (n2 % 2) === 1) {
        var stringNum = this.findStringFromPoint(n1);
        if (stringNum > -1) {
            // Delete existing string
            this.strings.splice(stringNum, 1);
        }
        
        // Add string
        var isStringCorrect = (floor(n1 / 2) === floor(n2 / 2));
        
        this.strings.push([n1, n2, isStringCorrect]);
        this.selectedAnchor = false;
        this.testCompletion();
    }
};

Curve.prototype.testCompletion = function() {
    var correct = 0;
    for (var i = 0; i < this.strings.length; i++) {
        if (this.strings[i][2]) {
            correct++;
        } else {
            this.correct = -1;
            return;
        }
    }
    
    if (correct === NUM_ANCHORS) {
        if (!this.correct) {
            this.correct = true;
            this.animation = NUM_ANCHORS;
        }
    } else {
        this.correct = false;
    }
};

/**************************************
 * Creation of objects
***************************************/

var myCurve = new Curve(
    width * 0.7, height * 0.1,
    width * 0.7, height * 0.9,
    width * 0.3, height * 0.5);

var restartFunc = function() {
    myCurve.strings = [];
    myCurve.correct = false;
};

var restartButton = new Button(
    width * 0.99 - 80,
    height - 24 - width * 0.01,
    80, 24, "Restart", restartFunc);
restartButton.makeFilled(color(200, 0, 0));

/**************************************
 * Tooltip functions
***************************************/

var drawMessage = function(message, x, y) {
    textFont(sansFont, 15);
    textLeading(20);
    
    var nLines = message.split("\n").length;
    var w = textWidth(message) + 20;
    var h = nLines * 22 + 3;
    
    strokeWeight(3);
    stroke(MESSAGEBLUE);
    fill(255);
    rect(x - w / 2, y, w, h, 20);
    
    textAlign(CENTER, CENTER);
    fill(20);
    text(message, x, y + h / 2);
};

var getMessage = function() {
    var message;
    
    if (myCurve.correct === -1) {
        message = "A string is not connected correctly.\nClick on one of its end points to undo it.";
    } else if (myCurve.correct) {
        message = "Good job!\nMove to the next video.";
    } else if (myCurve.selectedAnchor === false) {
        message = "Click on a grey diamond to add a string.";
    } else {
        message = "Click on a grey diamond on the other control arm to fix the string.";
    }
    
    drawMessage(message, width / 2, 10);
};

/**************************************
 * Main loop
***************************************/

var draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    restartButton.draw();
    getMessage();
};

/**************************************
 * Event handling
***************************************/

mousePressed = function() {
    restartButton.mousePressed();
    myCurve.selectPoint();
};

mouseReleased = function() {
    myCurve.selected = false;
    restartButton.mouseReleased();
};

mouseOut = function() {
    mouseReleased();
};

mouseDragged = function() {
    myCurve.mouseDrag();
};