/********************************************************
 * 
 * 
 * TODO:
 *  - Reproduction
 *  - Death
 *  - Click to select a creature to follow
 *  - Genetics
 *  - Improve the look
*********************************************************/

var BACKGROUND = color(120, 180, 240);

var keys = {};
var running = true;

/*********************************************************
 *  Bodies are any object that moves in the pool
*********************************************************/

var Body = function(pool, x, y, r, strokeC, fillC) {
    this.pool = pool;
    this.position = new PVector(x, y);
    this.velocity = new PVector(0, 0);
    this.acceleration = new PVector(0, 0);
    this.r = r;
    this.stroke = strokeC;
    this.fill = fillC;
    
    this.speed = 0;
    this.friction = 0.98;
};

Body.prototype.draw = function(dx, dy) {
    var x = this.position.x + dx;
    var y = this.position.y + dy;
    
    if (x > -this.r && x < width + this.r && y > -this.r && y < height + this.r) {
        strokeWeight(1);
        stroke(this.stroke);
        fill(this.fill);
        ellipse(x, y, this.r * 2, this.r * 2);    
    }
};

Body.prototype.move = function() {
    this.velocity.add(this.acceleration);
    this.velocity.mult(this.friction);
    this.position.add(this.velocity);
    this.bounce();
};

Body.prototype.update = function() {
    this.move();
};

Body.prototype.randomVector = function(dx, dy) {
    dy = dy || dx;
    return new PVector((random() - 0.5) * dx, (random() - 0.5) * dy);
};

Body.prototype.bounce = function() {
    // Bounce on walls
    if (this.position.x - this.r <= 0) {
        this.position.x = 2 * this.r - this.position.x + 1;
    } else if (this.position.x + this.r >= this.pool.width) {
        this.position.x = 2 * (this.pool.width - this.r)- this.position.x - 1;
    }
    
    if (this.position.y - this.r <= 0) {
        this.position.y = 2 * this.r - this.position.y + 1; 
    } else if (this.position.y + this.r >= this.pool.height) {
        this.position.y = 2 * (this.pool.height - this.r)- this.position.y - 1;
    }
};

/*********************************************************
 *  Food is constantly added to the pool.
 * It moves randomly, often changing direction.
 * It can be eaten to give an organism energy.
*********************************************************/

var Food = function(pool, x, y) {
    Body.call(this, pool, x, y, 3, color(20, 100, 0), color(20, 200, 20));
    this.type = 'food';
    this.speed = 0.05;
    this.acceleration = this.randomVector(this.speed);
    this.energy = 600;
};
Food.prototype = Object.create(Body.prototype);

Food.prototype.update = function() {
    this.move();
    
    // Randomly change direction
    if (random() < 0.01) {
        this.acceleration = this.randomVector(this.speed);
    }
};

/*********************************************************
 *  Creature
*********************************************************/

var Creature = function(pool, x, y, size, energy) {
    this.age = 0;
    this.type = 'creature';
    this.size = size;
    this.r = sqrt(size);
    
    Body.call(this, pool, x, y, this.r, color(40, 160, 60), color(50, 200, 100));
    
    // Initial stored energy
    this.energy = energy;
    
    // Energy used for growth per update
    this.growthRate = 0.1;
    
    // Energy used for growing offspring per update
    this.offspringGrowth = 0.02;
    
    // Energy given to offspring as a store
    this.offspringStrorage = 0.2;
    
    // Size of offspring when released
    // Should be bigger than some threshold and less than half parent size
    this.offspringSize = 36;
    this.newOffspring();
    
    this.speed = 0.04;
    this.velocity = this.randomVector(this.speed);
    this.target = false;
};
Creature.prototype = Object.create(Body.prototype);

Creature.prototype.draw = function(dx, dy) {
    var x = this.position.x + dx;
    var y = this.position.y + dy;
    var angle = atan2(this.velocity.y, this.velocity.x);
    var mouth = frameCount % 24;
    
    strokeWeight(2);
    stroke(80, 125, 190);
    fill(104, 156, 230);
    arc(x, y, this.r * 2, this.r * 2, angle + mouth * 2, angle + 360 - mouth * 2);
};

Creature.prototype.update = function() {
    this.age++;
    
    // Move towards target
    if (this.target) {
        var target = PVector.sub(this.target.position, this.position);
        target.normalize();
        target.mult(this.speed);
        this.acceleration = target;
    } else if (frameCount % 100 === 0) {
        this.acceleration = this.randomVector(this.speed);
    }
    
    this.move();
    
    this.metabolise();
    
    // Eat target
    if (this.target && PVector.dist(this.position, this.target.position) <= this.r + this.target.r &&
        !this.target.toDelete) {
        this.target.toDelete = true;
        this.energy += this.target.energy;
        this.searchForTarget();
        return;
    }
    
    // Search for food every 16 updates, in case something is closer
    if (this.age > 150 && frameCount % 16 === 0) {
        this.searchForTarget();
    }
    
};

Creature.prototype.metabolise = function() {
    // Basal energy for housekeeping
    this.energy -= this.size * 0.002;
    
    // Energy for movement
    this.energy -= this.speed * this.r;
    
    // Growth
    this.energy -= this.growthRate;
    this.size += this.growthRate / 10;
    this.r = sqrt(this.size);
    
    // Growing an offspring
    if (this.offspring.size < this.offspringSize) {
        this.energy -= this.offspringGrowth + this.offspringStrorage;
        this.offspring.size += this.offspringGrowth;
        this.offspring.energy += this.offspringStorage;   
    } else if (this.offspring.size < this.size / 2) {
        // Reproduce
        var angle = atan2(this.velocity.y, this.velocity.x);
        var x = this.position.x - this.r * cos(angle);
        var y = this.position.y - this.r * sin(angle);
        this.pool.addCreature(x, y, this.offspring.size, this.offspring.energy);
        this.newOffspring();
    }
    
    // Starvation
    if (this.energy < 0) {
        // Die
    }
};

Creature.prototype.newOffspring = function() {
    this.offspring = {
        size: 0,
        energy: 0
    };
};

Creature.prototype.searchForTarget = function() {
    var x = this.position.x;
    var y = this.position.y;
    var minDist = 320000;
    this.target = false;
    
    // Search contents with nested if statements to reduce calculations
    // Ideally calculate all interdistances elsewhere
    for (var i = 0; i < this.pool.contents.length; i++) {
        var body = this.pool.contents[i];
        if (body.type === 'food') {
            var dx = abs(body.position.x - x);
            if (dx < 400) {
                var dy = abs(body.position.y - y);
                if (dy < 400) {
                    var d = dx * dx + dy * dy;
                    if (d < minDist) {
                        minDist = d;
                        this.target = body;
                    }
                }
            }
        }
    }
};

/*********************************************************
 *  The Pool object represents the pool where all the
 * other objects exist.
*********************************************************/

var Pool = function(width, height) {
    this.width = width;
    this.height = height;
    this.walls = 40;
    
    // The camera is at the top, left of the screen
    this.camera = new PVector(-10, -10);
    
    this.contents = [];
};

Pool.prototype.draw = function() {
    background(BACKGROUND);
    
    // Draw sky at the top
    if (this.camera.y <= 0) {
        strokeWeight(2);
        stroke(60, 100, 250);
        fill(150, 220, 255);
        rect(-1, -1, width + 2, -this.camera.y);
    }
    
    // Draw the walls of the pool if we can see them
    strokeWeight(2);
    stroke(80);
    fill(120);
    if (this.camera.x <= 0) {
        rect(-1, -1, -this.camera.x, height + 2);
    } else if (this.camera.x >= this.width - width) {
        var w = this.camera.x - this.width + width;
        rect(width - w, -1, w, height + 2);
    }
    
    if (this.camera.y >= this.height - height) {
        var h = this.camera.y - this.height + height;
        rect(-1, height - h, width + 2, h);
    }
    
    var dx = -this.camera.x;
    var dy = -this.camera.y;
    for (var i = 0; i < this.contents.length; i++) {
        this.contents[i].draw(dx, dy);
    }
    
    fill(0);
    var y = 16;
    //text(this.camera, 10, y); y += 16;
    //text(round(this.contents[0].position.x) + " " + round(this.contents[0].position.y), 10, y); y += 16;
    text(round(this.contents[0].energy), 10, y); y += 16;
    text(round(this.contents[0].size), 10, y); y += 16;
    text(round(this.contents[0].offspring.size), 10, y); y += 16;
};

Pool.prototype.update = function() {
    for (var i = 0; i < this.contents.length; i++) {
        this.contents[i].update();
    }
    
    for (var i = this.contents.length - 1; i >= 0; i--) {
        if (this.contents[i].toDelete) {
           this.contents.splice(i, 1); 
        }
    }
    
    // Add more food every 10s
    if (frameCount % 300 === 0) {
        this.addFood(1);
    }
    
    // Move camera to follow Creature
    var dx = (this.contents[0].position.x - this.camera.x - width / 2) * 0.02;
    var dy = (this.contents[0].position.y - this.camera.y - height / 2) * 0.02;
    //this.moveCamera(dx, dy);
};

Pool.prototype.addFood = function(n) {
    for (var i = 0; i < n; i++) {
        this.contents.push(new Food(this, random() * this.width, random() * this.height));
    }
};

Pool.prototype.addCreature = function(x, y, size, energy) {
    x = x === undefined ? random() * this.width : x;
    x = y === undefined ? random() * this.height : y;
    size = size === undefined ? 64 : size;
    energy = energy === undefined ? 2400 : energy;
    this.contents.push(new Creature(this, x, y, size, energy));
};

Pool.prototype.moveCamera = function(dx, dy) {
    this.camera.x = constrain(this.camera.x + dx, -this.walls, this.width - width + this.walls);
    this.camera.y = constrain(this.camera.y + dy, -this.walls, this.height - height + this.walls);
};

/*********************************************************
 *  Set up
*********************************************************/

var pool = new Pool(1200, 1200);
pool.addCreature(50, 50);
pool.addFood(50);

/*********************************************************
 *  Event handling
*********************************************************/

keyPressed = function() {
    keys[keyCode] = true;
};

keyReleased = function() {
    keys[keyCode] = false;
};

var handleKeyPresses = function() {
    var dx = 0;
    var dy = 0;
    
    if (keys[LEFT]) {
        dx = -5;
    } else if (keys[RIGHT]) {
        dx = 5;
    }
    
    if (keys[UP]) {
        dy = -5;
    } else if (keys[DOWN]) {
        dy = 5;
    }
    
    if (dx || dy) {
        pool.moveCamera(dx, dy);
    }
    
    if (keys[32]) {
        running = !running;
        keys[32] = false;
    }
};

/*********************************************************
 *  Main loop
*********************************************************/

draw = function() {
    if (running) {
        pool.update();
        pool.draw();    
    }
    
    handleKeyPresses();
};