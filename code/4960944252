var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var IMAGE_X = 140;
var IMAGE_Y = 10;
var IMAGE_WIDTH = 240;
var IMAGE_HEIGHT = 160;
var TARGET_Y = IMAGE_Y * 2 + IMAGE_HEIGHT;

// Get target parameters
randomSeed(Program.settings().seed || 10);

var targetZoom = constrain(parseFloat(Program.settings().zoom || 3), 1, 3);
var targetSubdivisions = parseFloat(Program.settings().subdivisions || 0);
targetSubdivisions = constrain(targetSubdivisions, 0, 2);

var targetHue = constrain(parseFloat(Program.settings().hue || 1), 0, 255);

colorMode(HSB);
var targetColor = color(targetHue, 180, 220);
colorMode(RGB);
var targetRGB = { R: red(targetColor), G: green(targetColor), B: blue(targetColor) };


/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*************************************************
 *  GUI Button
**************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};
}
/*******************************************************
 * GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = 11;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    //this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(15);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(12);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR + 3;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};

var ColorSlider = function(x, y, w, h, params) {
    this.saturation = params.saturation || 180;
    this.brightness = params.brightness || 180;
    this.setColor();
    Slider.call(this, x, y, w, h, params);
};
ColorSlider.prototype = Object.create(Slider.prototype);

ColorSlider.prototype.setColor = function() {
    colorMode(HSB);
    this.color = color(this.val, this.saturation, this.brightness);
    colorMode(RGB);
    this.R = red(this.color);
    this.G = green(this.color);
    this.B = blue(this.color);
};

ColorSlider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(this.color);
    strokeWeight(4);
    stroke(this.stroke);
    line(this.x, this.y, this.x2, this.y);
    stroke(250);
    strokeWeight(1);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
};

ColorSlider.prototype.trigger = function() {
    this.setColor();
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
/*******************************************************
 * Grid functions
********************************************************/
// Return a 2D array of random numbers
var getRandomNumbers = function(n, m) {
    //n -= 1;
    //m -= 1;
    
    var grid = [];
    
    for (var i = 0; i < n; i++) {
        var row = [];
        for (var j = 0; j < m; j++) {
            row.push(random());
        }
        grid.push(row);
    }
    /*
    // Make grid wrap by adding first number to the end of every line
    for (var i = 0; i < n; i++) {
        grid[i].push(grid[i][0]);
    }
    // Add copying first row to the end
    grid.push(grid[0]);
    */
    return grid;
};

var subdivideGrid = function(grid) {
    var w = grid.length;
    var h = grid[0].length;
    var splitGrid = [];
    
    // Split grid
    var i, j;
    var row, newRow, p2, p1;
    
    // For each row, add an element between each existing element, which is the mean of its neighbours
    for (i = 0; i < w; i++) {
        newRow = [];
        row = grid[i];
        p1 = row[0];
        
        for (j = 1; j < h; j++) {
            p2 = row[j];
            newRow.push(p1, (p1 + p2) / 2);
            p1 = p2;
        }
        newRow.push(p1);
        splitGrid.push(newRow);
    }
    
    //newGrid.forEach(function(row) { println(row); });
    
    // Add a new row in between each row, which is the average of its neighbours
    var row2, row1 = splitGrid[w - 1];
    h = splitGrid[0].length;
    
    for (i = w - 1; i--;) {
        newRow = [];
        row2 = splitGrid[i];
        for (j = 0; j < h; j++) {
            newRow.push((row1[j] + row2[j]) / 2);
        }
        splitGrid.splice(i + 1, 0, newRow);
        row1 = row2;
    }
    
    //newGrid.forEach(function(row) { println(row); });
    
    // Average grid
    // For each element average it with each of its neighbours
    w = splitGrid.length;
    var d = [[-1, 0], [1, 0], [0, -1], [0, 1]];
    var averageGrid = [];
    var v;
    
    for (i = 0; i < w; i++) {
        newRow = [];
        
        for (j = 0; j < h; j++) {
            v = splitGrid[i][j] + 
                splitGrid[i][(j + 1) % h] +
                splitGrid[i][(j + h - 1) % h] +
                splitGrid[(i + 1) % w][j] +
                splitGrid[(i + w - 1) % w][j];
            v *= 0.2;
            newRow.push(v);
        }
        averageGrid.push(newRow);
    }
    
    return averageGrid;
};

var getNoiseImage = function(grid, x, y, zoom, col) {
    loadPixels();
    var p = imageData.data;
    if (!p) { return; }
    
    fill(0);
    rect(x, y, IMAGE_WIDTH, IMAGE_HEIGHT);
    
    var i, j, ix, ix2, iy, px, py, px1, px2, index, v1, v2, v3;
    
    var d1 = 2 * (grid.length - 1) / (IMAGE_WIDTH * (1 << zoom));
    var d2 = 2 * (grid[0].length - 1) / (IMAGE_HEIGHT * (1 << zoom));
    var R = col.R;
    var G = col.G;
    var B = col.B;
    
    for (i = 0; i < IMAGE_WIDTH; i++) {
        px = i * d1;        // Pixel in grid
        ix = px | 0;        // Index of row in grid
        px1 = grid[ix];
        px2 = grid[ix + 1];
        ix = px - ix;       // How far along tile in grid
        ix2 = 1 - ix;
        
        for (j = 0; j < IMAGE_HEIGHT; j++) {
            py = j * d2;
            iy = py | 0;
            py -= iy;
            
            v1 = px1[iy] * ix2 + px2[iy] * ix;
            v2 = px1[iy + 1] * ix2 + px2[iy + 1] * ix;
            v3 = lerp(v1, v2, py);
            
            index = (y + j) * width + x + i << 2;
            
            p[index++] = R * v3;
            p[index++] = G * v3;
            p[index++] = B * v3;
        }
    }

    updatePixels();

    return get(x, y, IMAGE_WIDTH, IMAGE_HEIGHT);
};

/*******************************************************
 * Set-up
********************************************************/

var subdivisions = 0;
var zoom = 1;

var gridImage, targetImage;
var initialNumbers = getRandomNumbers(13, 9);
var noiseGrid = initialNumbers;
var targetGrid = initialNumbers;

for (var i = 0; i < targetSubdivisions; i++) {
    targetGrid = subdivideGrid(targetGrid);
}

/*******************************************************
 *      Create GUI
********************************************************/
var toolbar = new Toolbar(10, 20, 120);
var colorSlider;

toolbar.add(Slider, {
    name: "Subdivisions",
    max: 2,
    trigger: function() {
        if (subdivisions !== this.val) {
            subdivisions = this.val;
            noiseGrid = initialNumbers;
            for (var i = 0; i < subdivisions; i++) {
                noiseGrid = subdivideGrid(noiseGrid);
            }
            gridImage = getNoiseImage(noiseGrid, IMAGE_X, IMAGE_Y, zoom, colorSlider);
        }
    }
});
toolbar.add(Slider, {
    name: "Resolution",
    min: 1,
    max: 3,
    trigger: function() {
        if (zoom !== this.val) {
            zoom = this.val;
            gridImage = getNoiseImage(noiseGrid, IMAGE_X, IMAGE_Y, zoom, colorSlider);
        }
    }
});
toolbar.add(ColorSlider, {
    max: 255,
    now: 90,
    brightness: 220,
    trigger: function() {
        this.setColor();
        gridImage = getNoiseImage(noiseGrid, IMAGE_X, IMAGE_Y, zoom, this);
    }
});
//toolbar.add(Button, { name: 'Submit' });
colorSlider = toolbar.components[2];

/****************************************************
 * Test for the correct answer
*****************************************************/

var testResult = function() {
    var passed = true;
    
    if (passed && 
        subdivisions === targetSubdivisions && zoom === targetZoom &&
        (abs(colorSlider.val - targetHue) <= 20 ||
         abs(colorSlider.val - targetHue) >= 235)) {
            //println('passed');
            Program.runTest(function() { return true; });
    } else {
        //println('failed');
        Program.runTest(function() { return false; });
    }
    
};

/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(250);
    
    if (targetImage) {
        textSize(18);
        fill(10);
        textAlign(CENTER, CENTER);
        text("Target Image:", IMAGE_X * 0.5, TARGET_Y + IMAGE_HEIGHT * 0.5);
        image(targetImage, IMAGE_X, TARGET_Y);
    } else {
        targetImage = getNoiseImage(targetGrid, IMAGE_X, TARGET_Y, targetZoom, targetRGB);
    }
    
    if (gridImage) {
        image(gridImage, IMAGE_X, IMAGE_Y);
    } else {
        gridImage = getNoiseImage(noiseGrid, IMAGE_X, IMAGE_Y, zoom, colorSlider);
    }
    
    toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
    testResult();
};

mouseReleased = function() {
    toolbar.mouseReleased();
};

mouseOut = mouseReleased;
