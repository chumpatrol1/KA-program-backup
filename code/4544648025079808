// This value changes the amount of distortion
var turbulence = 3;
var frequency = 12;

// This value changes the speed that the distortion changes
var speed = 10;

// This value affects the nature of the distortion
// Smaller numbers are smoother
var noiseScale = 0.018;

// The first number will affect the size of the ripples,
// the second will affect the size of the distortion
noiseDetail(2, 0.6);

// This is the images I'm using
var img = getImage("avatars/robot_male_3");
var imgWidth = img.width;
var imgHeight = img.height;
var cx = imgWidth / 2;
var cy = imgHeight / 2;

// Offset of image
// Multiply offset in pixels by 4
var dx = 200 * 4;

var initialise = function() {
    image(img, 0, 0);
};

var x, y, p, x2, y2, p2, angle, d, d2;
var initialised = false;

draw = function() {
    // Make sure this.imageData is defined
    if (!initialised) {
        initialised = true;
        initialise();
        return;
    }
    
    // Get our pixels
    loadPixels();
    var pix = this.imageData.data;
    
    // Use this number to make the noise update based on the time
    // the program has been running
    var f = frameCount * speed;
    
    // Go through every pixel using two weird for loops
    for (y = imgHeight; y; --y) {
        for (x = imgWidth; x; --x) {
            // Calculate the index of the pixel we're reading
            angle = atan2(y - cy, x - cx);
            d = dist(x, y, cx, cy);
            d2 = cos(d * frequency + frameCount * speed) * turbulence;
            d += d2;
            
            x2 = ~~(cx + d * cos(angle));
            y2 = ~~(cy + d * sin(angle));
            
            p2 = (x2 + y2 * height) << 2;
            
            // Calculate the index of the pixel we're writing
            p = (x + y * height) << 2;
            
            // Set the current pixel (200 pixels to the right of the initial image)
            // to the pixel in the initial image shifted in x by the noise
            pix[800 + p++] = pix[p2++];
            pix[800 + p++] = pix[p2++];
            pix[800 + p++] = pix[p2];
        }
    }
    updatePixels();
};
