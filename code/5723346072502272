/****************************************************
 * Building robots
 *  - Click and drag the parts onto the screen.
 *  - How many combinations are there?
 *
 * To do
 *  - Fix use of pmouse
 *  - Mouseover robot highlights branch.
 *  - Pop off parts nicely
 *  - Dropping part on existing part
 *    of the same type swaps them
*****************************************************/ 

var BACKGROUND = color(230, 240, 255);
var GREY = color(160, 160, 160);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TOOLBAR = color(245, 245, 245);

var selected = false;
var showBin = false;
var onScreenParts = [];
var allCombinations = [];

var toolbarWidth = 80;
var binHeight = 80;

var treeW = 360;
var treeX = width - treeW;

var drawConnections = false;
var tick = 0x2714;

// Each toolbar contains an array of draw functions (currently ugly placeholder images)
var partImages = {
    heads: [
        function(x, y, w, h) {
            strokeWeight(2);
            stroke(60);
            line(x - w * 0.5, y - h * 0.2, x + w * 0.5, y - h * 0.2);
            strokeWeight(5);
            point(x - w * 0.5, y - h * 0.2);
            point(x + w * 0.5, y - h * 0.2);
            
            strokeWeight(1);
            stroke(100);
            fill(200);
            rect(x - w * 0.35, y - h / 2, w * 0.7, h, w / 5);
            fill(255);
            rect(x - w * 0.2, y - h * 0.4, w * 0.4, h * 0.3, w / 5);
        },
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(100);
            fill(200);
            ellipse(x, y, w * 0.8, h);
            
            fill(255, 255, 255);
            ellipse(x, y - h * 0.1, w * 0.4, h * 0.5);
            fill(0);
            noStroke();
            ellipse(x, y - h * 0.1, w * 0.3, h * 0.2);
        }
    ],
    
    bodies: [
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(100);
            fill(200);
            rect(x - w * 0.1, y - h * 0.5, w * 0.2, h * 0.3);
            rect(x - w * 0.4, y - h * 0.3, w * 0.8, h * 0.78, w / 5);
            quad(x - w * 0.46, y + 0.35 * h, x + w * 0.46, y + 0.35 * h,
                 x + w * 0.5, round(y + 0.5 * h), x - w * 0.5,  round(y + 0.5 * h));
        },
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(100);
            fill(200);
            ellipse(x - h * 0.3, y + w  * 0.35, w * 0.3, h * 0.3);
            ellipse(x + h * 0.3, y + w  * 0.35, w * 0.3, h * 0.3);
            ellipse(x, y, w * 0.9, h * 0.9);
        },
        function(x, y, w, h) {
            strokeWeight(3);
            stroke(20);
            fill(255);
            ellipse(x - h * 0.3, y + h * 0.4, w * 0.2, h * 0.2);
            ellipse(x, y + h * 0.4, w * 0.2, h * 0.2);
            ellipse(x + h * 0.3, y + h * 0.4, w * 0.2, h * 0.2);
            
            strokeWeight(1);
            stroke(100);
            fill(200);
            quad(x - w / 2, y + h * 0.4, x + w / 2, y + h * 0.4, x + w * 0.3, y - h / 2, x - w * 0.3, y - h / 2);
        }
    ]
};

var removeItemFromArray = function(item, arr) {
    var i = arr.indexOf(item);
    if (i !== -1) {
        arr.splice(i, 1);
    }
    return item;
};

/***************************************************
 *      Generic part object
 * Deals with drawing mouseover events
***************************************************/ 

var Part = function(x, y, n, drawFunc) {
    this.x = x;
    this.y = y;
    this.n = n;
    this.drawFunction = drawFunc;
};

Part.prototype.draw = function() {
    if (this.drawFunction) {
        this.drawFunction(this.x, this.y, this.width, this.height);
    }
    
    // Draw connections for debugging
    if (drawConnections) {
        noStroke();
        fill(0);
        for (var cxn in this.connections) {
            var coords = this.connections[cxn];
            ellipse(this.x + coords[0], this.y + coords[1], 3, 3);  
        }
    }
};

Part.prototype.mouseover = function() {
    return mouseX >= this.x - this.width / 2 && mouseX <= this.x + this.width / 2 &&
           mouseY >= this.y - this.height / 2 && mouseY <= this.y + this.height / 2;
};

Part.prototype.overlap = function(that) {
    return this.x + this.width / 2 >= that.x - that.width / 2 &&
           this.x - this.width / 2 <= that.x + that.width / 2 &&
           this.y + this.height / 2 >= that.y - that.height / 2 &&
           this.y - this.height / 2 <= that.y + that.height / 2;
};

// Connect part and organise
Part.prototype.connectTo = function(that) {
    if (that.type === 'body') {
        that.connectTo(this);
    }
};

Part.prototype.select = function() {
    if (this.mouseover()) {
        return removeItemFromArray(this, onScreenParts);
    }
};

Part.prototype.move = function(dx, dy) {
    var coords = this.constrainMovement(dx, dy);
    this.x += coords[0];
    this.y += coords[1];
};

Part.prototype.constrainMovement = function(dx, dy) {
    if (this.x + dx < this.width / 2) {
        dx = this.width / 2 - this.x;
    } else if (this.x + dx > treeX - this.width / 2) {
        dx = treeX - this.width / 2 - this.x;
    }
    
    if (this.y + dy < this.height / 2 + 40) {
        dy = this.height / 2 - this.y + 40;
    } else if (this.y + dy > height - this.height / 2) {
        dy = height - this.height / 2 - this.y;
    }
    return [dx, dy];
};

Part.prototype.update = function() {
};

Part.prototype.remove = function() {
};

/***************************************************
 *      Head object
***************************************************/ 

var Head = function(x, y, n, f) {
    this.type = 'head';
    this.width = 40;
    this.height = 30;
    
    // Where do we connect to other parts
    this.connectionPositions = {
        body: [0, round(this.height * 0.45)]
    };
    
    Part.call(this, x, y, n, f);
};
Head.prototype = Object.create(Part.prototype);

Head.prototype.copy = function() {
    return new Head(this.x, this.y, this.n, this.drawFunction);
};

/***************************************************
 *      Arm object
***************************************************/ 

var Arm = function(x, y, n, f) {
    this.type = 'arms';
    this.width = 80;
    this.height = 30;
    
    // Where do we connect to other parts
    this.connectionPositions = {
        body: [0, 0]
    };
    
    Part.call(this, x, y, n, f);
};
Arm.prototype = Object.create(Part.prototype);

Arm.prototype.copy = function() {
    return new Arm(this.x, this.y, this.n, this.drawFunction);
};

/***************************************************
 *      Body object
***************************************************/ 

var Body = function(x, y, n, f) {
    this.type = 'body';
    this.width = 50;
    this.height = 50;
    
    // Where do we connect to other parts
    this.connectionPositions = {
        head: [0, this.height * -0.4],
        arms: [0, this.height * -0.2]
    };
    
    this.connections = {};
    
    Part.call(this, x, y, n, f);
};
Body.prototype = Object.create(Part.prototype);

Body.prototype.copy = function() {
    return new Body(this.x, this.y, this.n, this.drawFunction);
};

Body.prototype.draw = function() {
    if (this.drawFunction) {
        this.drawFunction(this.x, this.y, this.width, this.height);
    }
    if (this.connections.head) {
        this.connections.head.draw();
    }
};

Part.prototype.select = function() {
    for (var p in this.connections) {
        var part = this.connections[p];
        if (part && part.mouseover()) {
            // TODO: This only works with heads
            allCombinations[part.n][this.n]--;
            delete this.connections[part.type];
            return part;
        }
    }
    
    if (this.mouseover()) {
        return removeItemFromArray(this, onScreenParts);
    }
};

Body.prototype.remove = function() {
    var part = this.connections.head;
    if (part) {
        allCombinations[part.n][this.n]--;
    }
};

Body.prototype.move = function(dx, dy) {
    var coords = this.constrainMovement(dx, dy);
    this.x += coords[0];
    this.y += coords[1];
    
    for (var p in this.connections) {
        var part = this.connections[p];
        if (part) {
            part.x += coords[0];
            part.y += coords[1];
        }
    }
};

Body.prototype.connectTo = function(that) {
    if (!this.connections[that.type]) {
        this.connections[that.type] = that;
        removeItemFromArray(that, onScreenParts);
        var n1 = this.n;
        var n2 = that.n;
        allCombinations[n2][n1]++;
    }
};

// Move parts towards the correct connection point
Body.prototype.update = function() {
    for (var p in this.connections) {
        var part = this.connections[p];
        
        // Don't move parts if they have been selected
        if (part === selected) {
            return;
        }
        
        var coords1 = this.connectionPositions[part.type];
        var coords2 = part.connectionPositions[this.type];
        
        if (!coords1 || !coords2) {
            return;
        }
        
        var x1 = this.x + coords1[0];
        var y1 = this.y + coords1[1];
        var x2 = part.x + coords2[0];
        var y2 = part.y + coords2[1];
        
        // If connected part moves too far away then break bond
        // Not used any more
        if (!this.overlap(part) && dist(x1, y1, x2, y2) > 20) {
            this.remove();
            return;
        }
        
        // Otherwise connected parts move towards each other
        if (x2 > x1) {
            part.x--;
        } else if (x2 < x1) {
            part.x++;
        }
        
        if (y2 > y1) {
            part.y--;
        } else if (y2 < y1) {
            part.y++;
        }
    }
};

/***************************************************
 *      Toolbar object
***************************************************/ 

var Toolbar = function(x, y, name, parts) {
    this.x = x;
    this.y = y;
    this.name = name;
    this.width = toolbarWidth;
    
    this.parts = [];
    this.addParts(parts);
    
    this.height = 20;
    if (this.parts.length > 0) {
        this.height += parts.length * (this.parts[0].height + 10);
    }
};

Toolbar.prototype.addParts = function(parts) {
    var x = this.x + 8 + (this.width - 8) * 0.5;
    var x = this.x + this.width * 0.5;
    
    for (var i = 0; i < parts.length; i++) {
        var newPart;
        
        if (this.name === 'heads') {
            newPart = new Head(x, 0, i, parts[i]);
        } else if (this.name === 'arms') {
            newPart = new Arm(x, 0, i, parts[i]);
        } else {
            newPart = new Body(x, 0, i, parts[i]);
        }
        
        this.parts.push(newPart);
    }
    
    // Adjust y position based on size of part
    // TODO: improve how this is done.
    
    var h = this.parts[0].height;
    var y = this.y + 24 + h * 0.5;
    
    for (var i = 0; i < parts.length; i++) {
        this.parts[i].y = y;
        y += h + 10;
    }
};

Toolbar.prototype.draw = function() {
    strokeWeight(1);
    stroke(150);
    
    if (this.mouseover()) {
        fill(253);
    } else {
        fill(TOOLBAR);   
    }
    
    rect(this.x, this.y, this.width, this.height, 5);
    
    textAlign(CENTER, TOP);
    textSize(14);
    fill(10);
    text(this.name.toUpperCase(), this.x + this.width / 2, this.y + 3);
    
    textAlign(LEFT, CENTER);
    for (var i = 0; i < this.parts.length; i++) {
        var part = this.parts[i];
        fill(20);
        //text(this.labels[i], this.x + 8, part.y);
        part.draw();
    }
};

Toolbar.prototype.mouseover = function() {
    return mouseX >= this.x && mouseX <= this.x + this.width &&
           mouseY >= this.y && mouseY <= this.y + this.height;
};

Toolbar.prototype.overlap = function(that) {
    return this.x <= that.x + that.width / 2 &&
           this.x + this.width >= that.x - that.width / 2 &&
           this.y <= that.y + that.height / 2 &&
           this.y + this.height >= that.y - that.height / 2;
};

/***************************************************
 *      Bin
***************************************************/

var Bin = function(x, y, h) {
    this.x = x;
    this.y = y;
    this.width = h * 1.5;
    this.height = h;
};

Bin.prototype.draw = function() {
    fill(60);
    noStroke();
    
    var dx1 = this.width * 0.25;
    var dx2 = this.width * 0.2;
    var y1 = this.y - this.height * 0.35;
    var y2 = this.y + this.height * 0.5;
    
    // Base
    quad(this.x - dx1, y1, this.x + dx1, y1, this.x + dx2, y2, this.x - dx2, y2);
    
    dx2 = this.height * 0.42;
    y1 = this.y - this.height * 0.37;
    y2 = this.y - this.height * 0.46;
    
    // Lid (open if holding an object over it)
    if (selected && this.mouseover()) {
        pushMatrix();
        translate(this.x - dx2, y1);
        rotate(-30);
        quad(0, 0, dx2 * 2, 0, dx1 + dx2, y2 - y1, dx2 - dx1, y2 - y1);
        popMatrix();
    } else {
        quad(this.x - dx2, y1, this.x + dx2, y1, this.x + dx1, y2, this.x - dx1, y2);
    }
};

Bin.prototype.mouseover = function() {
    return mouseX >= this.x - this.width / 2 && mouseX <= this.x + this.width / 2 &&
           mouseY >= this.y - this.height / 2 && mouseY <= this.y + this.height / 2;
};

/*********************************************
 *      Initialising objects
**********************************************/

var combinationCount = 1;

// Create an n by m array for all combinations
var createCombinationMatrix = function() {
    var counts = [];
    for (var part in partImages) {
        var n = partImages[part].length;
        combinationCount *= n;
        counts.push(n);
    }
    
    var addArray = function(level) {
        var nParts = counts[level];
        
        if (nParts) {
            var arr = [];
            for (var i = 0; i < nParts; i++) {
                arr.push(addArray(level + 1));
            }
            return arr;
        } else {
            return 0;
        }
        
    };
    
    return addArray(0);
};

allCombinations = createCombinationMatrix();

// Make toolbars
var y = 50;
var toolbars = [];
for (var toolbar in partImages) {
    var parts = partImages[toolbar];
    var newToolbar = new Toolbar(10, y, toolbar, parts);
    toolbars.push(newToolbar);
    y += newToolbar.height + 12;
}

// Make bin
var bin = new Bin(10 + toolbarWidth / 2, height - binHeight / 2 - 10, binHeight);

/*********************************************
 *  Function to test whether we have all combinations
**********************************************/

var testEndState = function() {
    var missingRobot = false;
    var nHeads = partImages.heads.length;
    var nBodies = partImages.bodies.length;
    
    // Look through all robots
    for (var i = 0; i < nHeads; i++) {
        for (var j = 0; j < nBodies; j++) {
            if (allCombinations[i][j] === 0) {
                return "Drag the robot parts onto the screen below\nto make all combinations of heads and bodies.";
            }
        }
    }
    
    if (onScreenParts.length === combinationCount + selected) {
        return "Congratulations!\nYou found all the combinations.";
    } else {
        return "You've used too many parts!\nPut some in the bin.";
    }
};

/********************************************************
 *      Draw functions
*********************************************************/
var makeStars = function(n) {
    var stars = [];
    for (var i = 0; i < n; i++) {
        var x = floor(width * random());
        var y = floor(160 * random());
        stars.push([x, y]);
    }
    return stars;
};
var stars = makeStars(50);

// To be replaced with something more interesting
var SKY1 = color(40, 70, 160);
var SKY2 = color(235, 220, 205);
var LAND1 = color(225, 165, 130);
var LAND2 = color(210, 140, 120);
var LAND3 = color(200, 160, 130);
var ROAD = color(185, 115, 85);

var drawBackground = function() {
    // Sky
    strokeWeight(1);
    var h = 140;
    for (var i = 0; i < h; i++) {
        stroke(lerpColor(SKY1, SKY2, i / h));
        line(0, i, width, i + 1);
    }
    
    // Stars
    stroke(255);
    for (var i = 0; i < stars.length; i++) {
        point(stars[i][0], stars[i][1]);
    }

    var x = 0;
    var y = h;
    noStroke();
    fill(LAND2);
    rect(x, y, width, height);
    
    fill(LAND3);
    beginShape();
    vertex(x, y);
    vertex(x, y);
    x += 50;
    y -= 70;
    vertex(x, y);
    x += 100;
    y -= 30;
    curveVertex(x, y);
    x += 100;
    y += 40;
    curveVertex(x, y);
    x += 80;
    y -= 20;
    curveVertex(x, y);
    x += 100;
    y += 20;
    curveVertex(x, y);
    x += 120;
    y -= 40;
    curveVertex(x, y);
    x += 100;
    y += 50;
    curveVertex(x, y);
    x += 100;
    y += 50;
    curveVertex(x, y);
    vertex(width, y);
    endShape(CLOSE);

    var x = 0;
    var y = h + 10;
    fill(LAND1);
    beginShape();
    vertex(x, y);
    curveVertex(x, y);
    y -= 60;
    curveVertex(x, y);
    x += 40;
    y -= 30;
    curveVertex(x, y);
    x += 80;
    y += 70;
    curveVertex(x, y);
    x += 80;
    y -= 30;
    curveVertex(x, y);
    x += 80;
    curveVertex(x, y);
    x += 120;
    y -= 40;
    curveVertex(x, y);
    x += 80;
    y += 50;
    curveVertex(x, y);
    x += 80;
    y -= 10;
    curveVertex(x, y);
    x += 80;
    y += 30;
    curveVertex(x, y);
    x += 80;
    y -= 20;
    curveVertex(x, y);
    x += 80;
    y += 40;
    curveVertex(x, y);
    vertex(width, y);
    endShape(CLOSE);

    // Rock
    var x = width - 200;
    var y = height - 100;
    beginShape();
    vertex(x + 120, y);
    vertex(x, y);
    curveVertex(x + 20, y - 40);
    curveVertex(x + 70, y - 50);
    curveVertex(x + 90, y - 70);
    curveVertex(x + 120, y - 60);
    curveVertex(x + 140, y - 30);
    curveVertex(x + 160, y);
    endShape(CLOSE);

    // Road
    fill(ROAD);
    quad(width / 2 - 180, height, width / 2 - 40, height,
         width / 2 + 12, h + 10, width / 2 - 12, h + 10);
    
    fill(0);
    arc(width / 2, h + 10, 24, 36, 181, 360);

};

// TODO: make this neater by making an actual tree structure
var drawTree = function(x, y) {
    // Background
    strokeWeight(1);
    stroke(200);
    fill(TOOLBAR);
    rect(x, 0, width - x - 1, height - 1);
    stroke(150);
    line(x - 1, -1, x - 1, height);
    
    var nHeads = partImages.heads.length;
    var nBodies = partImages.bodies.length;

    // Create tree
    var tree = { };
    var count = 0;
    for (var i = 0; i < nHeads; i++) {
        for (var j = 0; j < nBodies; j++) {
            if (allCombinations[i][j] > 0) {
                if (tree[i] === undefined) {
                    tree[i] = [];
                }
                count++;
                tree[i].push(j);
            }
        }
    }

    if (count === 0) {
        return;
    }

    var dx = treeW / count;
    var x1 = x + dx / 2;
    var y1 = height / 2 - 20;
    var y2 = height - 60;

    var sumX = 0;
    var headXs = [];

    // Draw tree
    for (var i = 0; i < nHeads; i++) {
        var branch = tree[i];
        if (branch) {
            // Draw head
            var headX = x1 + (branch.length - 1) * dx / 2;
            sumX += headX;
            headXs.push(headX);
            partImages.heads[i](headX, y1, 40, 30);
            
            // Draw bodies
            for (var j = 0; j < branch.length; j++) {
                partImages.bodies[branch[j]](x1, y2, 50, 50);
                
                strokeWeight(3);
                stroke(80, 120, 180);
                line(headX, y1 + 20, x1, y2 - 30);
                
                x1 += dx;
            }
        }
    }
    
    sumX /= headXs.length;
    
    // Draw to branches
    strokeWeight(3);
    stroke(80, 120, 180);
    
    for (var i = 0; i < headXs.length; i++) {
        line(headXs[i], y1 - 20, sumX, 30);
    }
};

// Tell player when all combinations have been found
var drawMessage = function() {
    var message = testEndState();
    
    strokeWeight(3);
    stroke(20, 60, 160);
    fill(TOOLBAR);
    
    var w = 325;
    var x = toolbarWidth + (treeX - toolbarWidth) / 2;
    rect(x - w / 2, 5, w, 44, 10);
    
    textAlign(CENTER, TOP);
    fill(20);
    textSize(15);
    textLeading(20);
    
    text(message, x, 8);
    
};

/********************************************************
 *      Main loop
*********************************************************/

draw = function() {
    background(BACKGROUND);
    drawBackground();
    
    for (var i = 0; i < onScreenParts.length; i++) {
        onScreenParts[i].update();
        onScreenParts[i].draw();
    }
    
    /*
    strokeWeight(1);
    stroke(200);
    fill(TOOLBAR);
    rect(0, 0, toolbarWidth + 8, height-1);
    stroke(150);
    line(toolbarWidth + 9, -1, toolbarWidth + 9, height);
    */
    
    for (var i = 0; i < toolbars.length; i++) {
        toolbars[i].draw();
    }
    
    bin.draw();
    
    if (selected) {
        selected.draw();
    }
    
    drawTree(treeX, 20);
    
    drawMessage();
};

/********************************************************
 *      Event handling
*********************************************************/

mousePressed = function() {
    // Are we selecting an object on the screen?
    for (var i = onScreenParts.length - 1; i >= 0; i--) {
        // Selected item is removed from screen so it can
        // be drawn separately and move to the front
        selected = onScreenParts[i].select();
        if (selected) { return; }
    }
    
    // Are we selecting a part from the toolbar?
    // If so, create a copy
    for (var i = 0; i < toolbars.length; i++) {
        var toolbar = toolbars[i];
        if (toolbar.mouseover()) {
            for (var j = 0; j < toolbar.parts.length; j++) {
                var part = toolbar.parts[j];
                if (part.mouseover()) {
                    selected = part.copy();
                    break;
                }
            }    
        }
    }
};

mouseDragged = function() {
    if (selected) {
        selected.move(mouseX - pmouseX, mouseY - pmouseY);
    }
};

mouseReleased = function() {
    if (selected) {
        // If part overlaps with bin or toolbars, remove it
        var onScreen = !selected.overlap(bin);
        
        for (var i = 0; i < toolbars.length; i++) {
            if (toolbars[i].overlap(selected)) {
                onScreen = false;
                break;
            }
        }
        
        if (onScreen) {
            // Put down on screen
            onScreenParts.push(selected);
            
            // Test for overlapping parts
            for (var i = 0; i < onScreenParts.length; i++) {
                var part = onScreenParts[i];
                if (part !== selected && selected.overlap(part)) {
                    if (part.type !== selected.type) {
                        selected.connectTo(part);    
                    } else {
                        // Swap
                        //selected = onScreenParts.splice(i, 1)[0];
                        return;
                    }
                }
            }
        } else {
            selected.remove();
        }
        selected = false;   
    }
};
