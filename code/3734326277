// Light vector
var lightX = -8;
var lightY = -5;
var lightZ = -12;

// Normalise
var lightD = sqrt(lightX * lightX + lightY * lightY + lightZ * lightZ);
lightX /= lightD;
lightY /= lightD;
lightZ /= lightD;

// Leg parameters
// Coordinates of base of leg
var legX = 0;
var legY = 650;
var legZ = 1520;

// Coordinates of top of leg
var legX2 = 0;
var legY2 = 200;
var legZ2 = 1520;

// Leg vector
var legDX = legX2 - legX;
var legDY = legY2 - legY;
var legDZ = legZ2 - legZ;
var legD = sqrt(legDX * legDX + legDY * legDY + legDZ * legDZ);
legDX /= legD;
legDY /= legD;
legDZ /= legD;

// Radius of leg with and without scales
var legR = 600 / PI;
var legR2 = legR * legR;
var scaleThickness = 0;
//var legInner = legR - scaleThickness;

var legDot = legX * legDX + legY * legDY + legZ * legDZ;
var legDotX = legX - legDot * legDX;
var legDotY = legY - legDot * legDY;
var legDotZ = legZ - legDot * legDZ;
//println(legDotX + " " + legDotY + " " + legDotZ);

var LegC = legDotX * legDotX + legDotY * legDotY + legDotZ * legDotZ - legR2;

// Cone parameters
var clawR = 30;     // Radius where claw meets skin
var clawL = 90;    // Length of claw from tip to skin
var clawAngle = 30; // Angle around leg

// Half-angle for claw cone
var clawA = atan(clawR / clawL);
var cosA = cos(clawA);
var sinA = sin(clawA);
var cosA2 = cosA * cosA;
var sinA2 = sinA * sinA;

// Length of cone along its edge (squared)
var clawL2 = (clawL + 10) / cos(clawA);
clawL2 = clawL2 * clawL2;

var getClaws = function(n, angle, startAngle) {
    var claws = [];
    
    for (var i = 0; i < n; i++) {
        
        // Vector for claw (base to apex)
        var v = new PVector(
            cos(startAngle + angle * i),
            0.3,
            -sin(startAngle + angle * i)
            );
        
        // Coordinate where claw axis hits the skin (the base of the claw)
        var base = new PVector(
            legX + v.x * legR,
            legY - clawR,
            legZ + v.z * legR
        );

        // Get coordinate for tip of claw
        v.normalize();
        v.mult(clawL);
        var apex = PVector.add(base, v);
        
        // Get dot for intersection test
        v.normalize();
        var dot = PVector.dot(apex, v);
        
        // Get values for intersection test
        var dotV = PVector.sub(PVector.mult(v, dot), apex);
        
        var d = sq(dotV.mag());
        
        claws.push({
            x:  apex.x, y: apex.y, z: apex.z,
            vx: -v.x,  vy: -v.y,  vz: -v.z,
            dot: dot,
            dx: dotV.x, dy: dotV.y, dz: dotV.z,
            c: cosA2 * d - sinA2 * dot * dot
        });
        
    }

    return claws;
};

var claws = getClaws(3, 50, 40);

/*********************************************************
 *      PixelGrid
 *  Where we do the ray-tracing 
*********************************************************/

var PixelGrid = {
    // Set up pixel grid with width and height (w, h),
    // centered on (0, y, z), perpendicular to the vector
    // from (0, 0, 0) to (0, y, z)
    x: 0,

    setup: function(y, z, w, h) {
        this.y = y;
        this.z = z;
        
        this.w = w;
        this.h = h;
        var w2 = w / 2 - 0.5;
        var h2 = h / 2 - 0.5;

        var d = sqrt(y * y + z * z);
        this.dy = z / d;
        this.dz = -y / d;
        
        // Vector to top left corner
        this.x1 = this.x - w2;
        this.y1 = this.y - h2 * this.dy;
        this.z1 = this.z - h2 * this.dz;
    },
    
    rayTrace: function() {
        var x, y, y2, z2, px, py, pz, ix, iy, iz, dx, dy, dz;
        var vx, vy, vz;
        var A, B, i, t, tc, d, dot, det, intensity, c, claw, hit;
        intensity = 1;
        loadPixels();
        var p = imageData.data;
        var claw = claws[0];
        
        for (y = 0; y < this.h; y++) {
            // Coordinate for this pixel
            py = this.y1 + y * this.dy;
            pz = this.z1 + y * this.dz;
            y2 = py * py;
            z2 = pz * pz;

            for (x = 0; x < this.w; x++) {
                // Raytrace with a ray from [0, 0, 0] to [px, py, pz]
                px = this.x1 + x;
                tc = false;
                
                for (c = 0; c < 3; c++) {
                    claw = claws[c];
                
                    // Dot ray vector with claw cone vector
                    dot = px * claw.vx + py * claw.vy + pz * claw.vz;
                    
                    // Project ray onto claw axis
                    vx = px - dot * claw.vx;
                    vy = py - dot * claw.vy;
                    vz = pz - dot * claw.vz;
                    
                    A = cosA2 * (vx * vx + vy * vy + vz * vz) - sinA2 * dot * dot;
                    B = cosA2 * (vx * claw.dx + vy * claw.dy + vz * claw.dz) - sinA2 * dot * claw.dot;
                    
                    det = B * B - A * claw.c;
    
                    if (det > 0) {
                        tc = (-B - 2 * sqrt(det)) / A;
    
                        // Calculate intersection point
                        ix = tc * px;
                        iy = tc * py;
                        iz = tc * pz;
                        
                        // Check whether intersection with above top or below base
                        // (I - base) dot (ClawVector)
                        dx = ix - claw.x;
                        dy = iy - claw.y;
                        dz = iz - claw.z;
                        dot = dx * claw.vx + dy * claw.vy + dz * claw.vz;
                        
                        // Also check whether distance between intersection
                        // and apex is too far 
                        if (dot > 0 && dot < clawL && dx*dx + dy*dy + dz*dz < clawL2) {
                            
                            // Calculate vector from projection of intersection
                            // point onto leg axis to intersection point
                            // i.e. the normal of the surface at that point
                            vx = dx - dot * claw.vx;
                            vy = dy - dot * claw.vy;
                            vz = dz - dot * claw.vz;
                            d = sqrt(vx * vx + vy * vy + vz * vz);
        
                            // Calculate diffuse light
                            intensity = 0.3 + 0.7 * (vx * lightX + vy * lightY + vz * lightZ) / d;
                            
                            //intensity = (t - 1) * 3;
                            //intensity = dot / clawD;
                            // Index
                            i = x + y * width << 2;
                            p[i++] = 255 * intensity;
                            p[i++] = 255 * intensity;
                            p[i++] = 220 * intensity;
                            break;
                        }
                    }
                    
                   tc = false;
                }
                
               
                // Intersection with leg (cylinder)
                dot = px * legDX + py * legDY + pz * legDZ;
                
                // Project ray onto leg axis
                vx = px - dot * legDX;
                vy = py - dot * legDY;
                vz = pz - dot * legDZ;
                
                A = 2 * (vx * vx + vy * vy + vz * vz);
                B = -2 * (vx * legDotX + vy * legDotY + vz * legDotZ);
                det = B * B - 2 * A * LegC;

                if (det > 0) {
                    t = (-B - sqrt(det)) / A;

                    // Is cylinder behind a claw?
                    if (tc && t > tc) { continue; }
                    //else if (tc){println(t +" " +tc); break;}

                    // Calculate intersection point
                    ix = t * px;
                    iy = t * py;
                    iz = t * pz;
                    
                    // Check whether intersection with above top or below base
                    // (I - base) dot (LegVector)
                    dx = ix - legX;
                    dy = iy - legY;
                    dz = iz - legZ;
                    dot = dx * legDX + dy * legDY + dz * legDZ;
                    
                    if (dot < 0 || dot > legD) { continue; }

                    // Calculate vector from projection of intersection
                    // point onto leg axis to intersection point
                    // i.e. the normal of the surface at that point
                    vx = dx - dot * legDX;
                    vy = dy - dot * legDY;
                    vz = dz - dot * legDZ;
                    d = sqrt(vx * vx + vy * vy + vz * vz);
                    
                    // Calculate diffuse light
                    intensity = 0.2 + 0.8*(vx * lightX + vy * lightY + vz * lightZ) / d;

                    // Index
                    i = x + y * width << 2;
                    p[i++] = 120 * intensity;
                    p[i++] = 160 * intensity;
                    p[i++] = 60 * intensity;
                }

            }
        }
        
        updatePixels();
    }
};
PixelGrid.setup(300, 1000, 400, 400);

background(0);
PixelGrid.rayTrace();
