// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var CONTROL_POINT_SIZE = 12;

var toolbar;
var toolbarWidth = 128;

var showing = {
    Points: true,
    Line: true,
    Message: true,
};
var tooltipPosition = 0;

/**************************************
 *  Generic GUI component from which
 * other elements inherit
 * 
 * The default object is basically a
 * button
***************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};

GUI_Component.prototype.deactivationCondition = function() {
    if (this.deactivationFunction) {
        this.deactivated = this.deactivationFunction();
    }
};
}
/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var FilledButtonDraw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function(col) {
    this.draw = FilledButtonDraw.bind(this);
    this.defaultCol = color(0, 0, 0, 1);
    this.highlightCol = col;
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/**************************************
 * GUI Slider to vary parameters
***************************************/
{
var Slider = function(x, y, w, minValue, maxValue, nowValue, name, updateFunction) {
    GUI_Component.call(this, x, y, w, 12, name, updateFunction);
    
    this.x2 = x + w;
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = minValue || 0;
    this.max = maxValue === undefined ? 1 : maxValue;
    this.val = nowValue === undefined ? this.min : nowValue;
    this.setValue(this.val);
    
    this.held = false;
    this.decimalPlaces = 0;
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(TEXTCOL);
        textSize(15);
        textAlign(CENTER, BASELINE);
        text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 13);
    }
    
    noStroke();
    fill(180);
    rect(this.x - 8, this.y - this.h/2, this.w + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);

};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
};
}
/*************************************
 *      Number scrubber object
 * Shows a number with up and down
 * arrow buttons to change the value
**************************************/
{
var Scrubber = function(x, y, w, h, nowValue, values, updateF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.index = nowValue;
    if (Array.isArray(values)) {
        this.mapping = values;
        this.value = this.mapping[this.index];
        this.maxValue = this.mapping.length;
    } else {
        this.maxValue = values;
        this.value = this.index;
    }
    
    this.updateFunction = updateF;
    this.selected = false;
};

Scrubber.prototype.draw = function(x, y) {
    if (x) { this.x = x; }
    if (y) { this.y = y; }
    
    // Box
    var d = 16;
    stroke(200);
    fill(BACKGROUND);
    strokeWeight(1);
    rect(this.x + d - 1, this.y - 1, this.w - d * 2, this.h + 1, 8);
    
    // Text
    textSize(15);
    textAlign(CENTER, CENTER);
    fill(TEXTCOL);
    
    var ty = this.y + this.h / 2;
    text("" + this.value, this.x + this.w / 2, ty);
    
    // Arrow buttons
    var mouseover = this.mouseOver();
    fill(ORANGE);
    if (this.selected === 1 || mouseover === 1) {
        //fill(200);
        stroke(160);
    } else {
        noStroke();
    }
    
    triangle(this.x + 3, ty,
             this.x + d - 2, this.y + 1,
             this.x + d - 2, this.y + this.h - 1);
    
    if (this.selected === 2 || mouseover === 2) {
        //fill(200);
        stroke(160);
    } else {
        //fill(ORANGE);
        noStroke();
    }
    
    triangle(this.x + this.w - 3, ty,
             this.x + this.w - d + 2, this.y + 1,
             this.x + this.w - d + 2, this.y + this.h -1);
};

Scrubber.prototype.updateValue = function() {
    if (this.selected === 1) {
        this.index = (this.index - 1 + this.maxValue) % this.maxValue;
    } else if (this.selected === 2) {
        this.index = (this.index + 1) % this.maxValue;
    }

    this.mapValue();
    this.update();
};

Scrubber.prototype.mapValue = function() {
    if (this.mapping) {
        this.value = this.mapping[this.index];
    } else {
        this.value = this.index;
    }
};

Scrubber.prototype.setValue = function(n) {
    this.value = n;
    if (this.mapping) {
        this.index = this.mapping.indexOf(this.value);
    } else {
        this.index = this.value;
    }
};

// Return 1 or 2 if mouse over top or bottom
// arrow respectively. Otherwise return null
Scrubber.prototype.mouseOver = function() {
    if (mouseY >= this.y && mouseY <= this.y + this.h) {
        if (mouseX >= this.x && mouseX <= this.x + 16) {
            return 1;
        } else if (mouseX >= this.x + this.w - 16 && mouseX <= this.x + this.w) {
            return 2;
        }
    }
};

Scrubber.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

Scrubber.prototype.mouseReleased = function() {
    if (this.selected) {
        this.updateValue();
        this.selected = false;
    }
};

Scrubber.prototype.click = function() {
    this.selected = this.mouseOver();
    this.updateValue();
};

Scrubber.prototype.update = function() {
    if (this.updateFunction) {
        this.updateFunction(this.index);
    }
};
}
/**************************************
 *      Toolbar
 *  Contains other GUI elements
***************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, updateF, options) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    var button = new Button(x, y, w, h, name, updateF);
    
    if (options) {
        for (var opt in options) {
            button[opt] = options[opt];
        }
    }
    
    this.buttons.push(button);
    this.components.push(button);
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = name ? 24 : 10;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    var slider = new Slider(x, y, w, minX, maxX, nowX, name, updateF);
    
    this.sliders.push(slider);
    this.components.push(slider);
    this.h += h + 16;
};

Toolbar.prototype.addScrubber = function(nowValue, values, updateF) {
    var h = 20;
    var x = this.x + 5;
    var y = this.y + this.h + 3;
    var w = this.w - 10;
    var scrubber = new Scrubber(x, y, w, h, nowValue, values, updateF);
    
    this.buttons.push(scrubber);
    this.components.push(scrubber);
    this.h += h + 10;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.buttons.push(button);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].mouseDragged()) {
            return true;
        }
    }
};
}
/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};

/**************************************
 *      Scene object
 *  Wraps the other objects
**************************************/

var Scene = function() {
    this.selected = false;
    this.points = [
        new DraggablePoint(80, 300),
        new DraggablePoint(320, 150),
    ];
    
    this.draggable = this.points;

};

Scene.prototype.draw = function() {
    if (showing.Line) {
        strokeWeight(2);
        stroke(BLUE);
        
        for (var i = 0; i < this.points.length - 1; i++) {
            var p1 = this.points[i];
            var p2 = this.points[i + 1];
            line(p1.x, p1.y, p2.x, p2.y);
        }
    }
    
    if (showing.Points) {
        for (var i = 0; i < this.points.length; i++) {
            this.points[i].draw();
        }
    }
};

Scene.prototype.mousePressed = function() {
    for (var i = 0; i < this.draggable.length; i++) {
        if (this.draggable[i].mouseOver()) {
            this.selected = this.draggable[i];
        }
    }
};

Scene.prototype.mouseReleased = function() {
    this.selected = false;
};

Scene.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
    }
};

/**************************************
 *  Draw tooltip
***************************************/

var drawArrow = function(x1, y1, x2, y2) {
    var angle = atan2(y2 - y1, x2 - x1);
    var d = dist(x1, y1, x2, y2) * 0.3;
    
    var cx1 = x1;
    var cy1 = y1;
    var cx2 = x2;
    var cy2 = y2;
    var angle2 = angle + 20;
    
    if (angle > 45 && angle < 135) {
        cx1 += d * cos(angle + 40);
        cy1 += d * sin(angle + 40);
        cx2 -= d * cos(angle - 40);
        cy2 -= d * sin(angle - 40);
        angle2 = angle - 40;
    } else {
        cx1 += d * cos(angle - 20);
        cy1 += d * sin(angle - 20);
        cx2 -= d * cos(angle + 20);
        cy2 -= d * sin(angle + 20);
    }
    
    //ellipse(cx1, cy1, 8, 8);ellipse(cx2, cy2, 8, 8);
    
    noFill();
    strokeWeight(3);
    stroke(MESSAGEBLUE);
    bezier(x1, y1, cx1, cy1, cx2, cy2, x2, y2);
    
    noStroke();
    fill(MESSAGEBLUE);
    pushMatrix();
    translate(x2, y2);
    rotate(angle2);
    triangle(8, 0, -5, 4, -5, -4);
    popMatrix();
};

var drawMessage = function(message, x, y, x1, y1) {
    textFont(sansFont, 15);
    textLeading(16);
    
    var nLines = message.split("\n").length;
    var w = textWidth(message) + 20;
    var h = nLines * 22 + 3;
    
    strokeWeight(3);
    stroke(MESSAGEBLUE);
    fill(TOOLBAR);
    fill(255);
    rect(x - w / 2, y, w, h, 20);
    
    textAlign(CENTER, CENTER);
    fill(20);
    text(message, x, y + h / 2);
    
    if (x1) {
        drawArrow(x - w / 2, y + h / 2, x1, y1);
    }
};

/**************************************
 * Creation of objects
***************************************/

var scene = new Scene();

toolbar = new Toolbar(width * 0.01, width * 0.01, toolbarWidth);

var button1Func = function() { println("Button 1"); };
var button2Func = function() { println("Button 2"); };

toolbar.addSlider(0, 5, 0, "Slider");
toolbar.addSlider(1, 100, 50, "d");
toolbar.addButton("Button 1", button1Func, { deactivated: true });
toolbar.addButton("Button 2", button2Func);
toolbar.addOptions(showing);

toolbar.buttons[1].deactivationFunction = function() {
    return toolbar.sliders[0].val > 3; 
};

var submitButton = new Button(10, height - 34, 80, 24, "Submit", function() { println("Submit!"); });
submitButton.makeFilled(CS_GREEN);

var clearButton = new Button(100, height - 34, 80, 24, "Clear", function() { println("Clear!"); });
clearButton.makeFilled(color(200, 0, 0));

/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    scene.draw();
    
    toolbar.draw();
    submitButton.draw();
    clearButton.draw();
    
    if (showing.Message) {
        drawMessage("Two line\nmessage here", 250, 6, toolbar.x + toolbar.w + 5, toolbar.sliders[0].y + 1);
    }
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    scene.mousePressed();
    toolbar.mousePressed();
};

mouseDragged = function() {
    scene.mouseDragged();
    toolbar.mouseDragged();
};

mouseReleased = function() {
    scene.mouseReleased();
    toolbar.mouseReleased();
};

mouseOut = function() {
    toolbar.mouseReleased();
};
