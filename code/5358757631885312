// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var toolbar;
var toolbarWidth = 128;

var showing = {
    Points: true,
    Line: true,
    Message: true,
};

var forEach = function(arr, func) {
    var i, n = arr.length;
    for (i = 0; i < n; i++) {
        arr[i][func]();
    }
};

/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *  GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, {name: name});
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};

}
/*******************************************************
 * GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 14);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 * GUI Label
********************************************************/
var Label = function(x, y, w, h, name) {
    this.x = x + w / 2;
    this.x1 = x + 8;
    this.x2 = x + w - 8;
    this.y = y + h + 1;
    this.y2 = y + h / 2 + 3;
    this.name = name;
};

Label.prototype.draw = function() {
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y2);
    
    strokeWeight(1);
    stroke(20);
    line(this.x1, this.y, this.x2, this.y);
};
/*************************************
 *      Number scrubber object
 * Shows a number with up and down
 * arrow buttons to change the value
**************************************/
{
var Scrubber = function(x, y, w, h, nowValue, values, updateF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.index = nowValue;
    if (Array.isArray(values)) {
        this.mapping = values;
        this.value = this.mapping[this.index];
        this.maxValue = this.mapping.length;
    } else {
        this.maxValue = values;
        this.value = this.index;
    }
    
    this.updateFunction = updateF;
    this.selected = false;
};

Scrubber.prototype.draw = function(x, y) {
    if (x) { this.x = x; }
    if (y) { this.y = y; }
    
    // Box
    var d = 16;
    stroke(200);
    fill(BACKGROUND);
    strokeWeight(1);
    rect(this.x + d - 1, this.y - 1, this.w - d * 2, this.h + 1, 8);
    
    // Text
    textSize(15);
    textAlign(CENTER, CENTER);
    fill(TEXTCOL);
    
    var ty = this.y + this.h / 2;
    text("" + this.value, this.x + this.w / 2, ty);
    
    // Arrow buttons
    var mouseover = this.mouseOver();
    fill(ORANGE);
    if (this.selected === 1 || mouseover === 1) {
        //fill(200);
        stroke(160);
    } else {
        noStroke();
    }
    
    triangle(this.x + 3, ty,
             this.x + d - 2, this.y + 1,
             this.x + d - 2, this.y + this.h - 1);
    
    if (this.selected === 2 || mouseover === 2) {
        //fill(200);
        stroke(160);
    } else {
        //fill(ORANGE);
        noStroke();
    }
    
    triangle(this.x + this.w - 3, ty,
             this.x + this.w - d + 2, this.y + 1,
             this.x + this.w - d + 2, this.y + this.h -1);
};

Scrubber.prototype.updateValue = function() {
    if (this.selected === 1) {
        this.index = (this.index - 1 + this.maxValue) % this.maxValue;
    } else if (this.selected === 2) {
        this.index = (this.index + 1) % this.maxValue;
    }

    this.mapValue();
    this.update();
};

Scrubber.prototype.mapValue = function() {
    if (this.mapping) {
        this.value = this.mapping[this.index];
    } else {
        this.value = this.index;
    }
};

Scrubber.prototype.setValue = function(n) {
    this.value = n;
    if (this.mapping) {
        this.index = this.mapping.indexOf(this.value);
    } else {
        this.index = this.value;
    }
};

// Return 1 or 2 if mouse over top or bottom
// arrow respectively. Otherwise return null
Scrubber.prototype.mouseOver = function() {
    if (mouseY >= this.y && mouseY <= this.y + this.h) {
        if (mouseX >= this.x && mouseX <= this.x + 16) {
            return 1;
        } else if (mouseX >= this.x + this.w - 16 && mouseX <= this.x + this.w) {
            return 2;
        }
    }
};

Scrubber.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

Scrubber.prototype.mouseReleased = function() {
    if (this.selected) {
        this.updateValue();
        this.selected = false;
    }
};

Scrubber.prototype.click = function() {
    this.selected = this.mouseOver();
    this.updateValue();
};

Scrubber.prototype.update = function() {
    if (this.updateFunction) {
        this.updateFunction(this.index);
    }
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w, heading) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
    this.labels = [];
    
    if (heading) {
        this.labels.push(new Label(this.x, this.y + this.h - 6, this.w, 20, heading));
        this.h += 26;
    }
    
    this.subMenu = false;
};

Toolbar.prototype.draw = function() {
    if (this.components.length + this.labels.length === 0) { return; }
    
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    forEach(this.components, 'draw');
    forEach(this.labels, 'draw');
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addLabel = function(name) {
    var h = 20;
    this.labels.push(new Label(this.x, this.y + this.h, this.w, h, name));
    this.h += h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.addRadioButtons = function(options, trigger, defaultOption) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var radioButtons = [];
    
    var triggerFunction = function() {
        if (!this.marked) {
            this.marked = true;
            
            // Deselected other buttons
            for (var i = 0; i < radioButtons.length; i++) {
                if (radioButtons[i] !== this) {
                    radioButtons[i].marked = false;
                }
            }
            trigger(this.name);
        }
    };
    
    for (var i = 0; i < options.length; i++) {
        var button = new RadioButton(x, y, w, 22, options[i], triggerFunction);
        radioButtons.push(button);
        y += 27;
        this.h += 27;
    }
    
    radioButtons[defaultOption || 0].trigger();
    
    this.components = this.components.concat(radioButtons);
    this.h += 2;
};

Toolbar.prototype.addSubMenu = function(menu) {
    if (this.subMenu === menu) {
        // If menu already open, then close it
        this.removeSubMenu();
    } else {
        this.removeSubMenu();
        this.subMenu = menu;
        this.components.push(menu);
    }
};

Toolbar.prototype.removeSubMenu = function() {
    if (this.subMenu) {
        var index = this.components.indexOf(this.subMenu);
        if (index > -1) {
            this.components.splice(index, 1);
        }
        this.subMenu = false;
    }
};

Toolbar.prototype.mouseOver = function() {
    return mouseX >= this.x && mouseX <= this.x + this.w &&
           mouseY >= this.y && mouseY <= this.y + this.h;
}; 

Toolbar.prototype.mousePressed = function() {
    forEach(this.components, 'mousePressed');
    if (this.subMenu && !(this.subMenu.mouseOver() || this.mouseOver())) {
        this.removeSubMenu();
    }
};

Toolbar.prototype.mouseReleased = function() {
    forEach(this.components, 'mouseReleased');
};

Toolbar.prototype.mouseDragged = function() {
    forEach(this.components, 'mouseDragged');
};
}
/*******************************************************
 *      ColorPickerHSB
 * Mini-toolbar with sliders to pick a colour.
********************************************************/
var ColorPickerHSB = function(x, y, w, heading, hue, saturation, brightness) {
    Toolbar.call(this, x, y, w, heading);
    this.hue = hue;
    this.saturation = saturation;
    this.brightness = brightness;
    this.setColor();
    
    var self = this;
    
    // Update header to show colour box
    this.labels[0].draw = function() {
        var s = 14;
        
        fill(20);
        textFont(sansFont, 15);
        textAlign(CENTER, CENTER);
        text(this.name, this.x - s / 2, this.y2);
        
        strokeWeight(1);
        stroke(20);
        line(this.x1, this.y, this.x2, this.y);
        
        fill(self.color);
        rect(this.x + textWidth(this.name) / 2, this.y - s - 2, s, s);
    };
    
    this.add(Slider, {
        name: 'Hue',
        now: hue,
        max: 255,
        trigger: function() {
            if (self.hue !== this.val) {
                self.hue = this.val;
                self.setColor();
            }
        }
    });
    
    this.add(Slider, {
        name: 'Saturation',
        now: saturation,
        max: 255,
        trigger: function() {
            if (self.saturation !== this.val) {
                self.saturation = this.val;
                self.setColor();
            }
        }
    });
    
    this.add(Slider, {
        name: 'Brightness',
        now: brightness,
        max: 255,
        trigger: function() {
            if (self.brightness !== this.val) {
                self.brightness = this.val;
                self.setColor();
            }
        }
    });

};
ColorPickerHSB.prototype = Object.create(Toolbar.prototype);

ColorPickerHSB.prototype.setColor = function() {
    colorMode(HSB);
    this.color = color(this.hue, this.saturation, this.brightness);
    colorMode(RGB);
};
/*******************************************************
 *  Create toolbars
********************************************************/

var toolbars = [
    new Toolbar(5, 5, 120)
];

var colourPickerToolbar1 = new ColorPickerHSB(130, 5, 120, "Color 1", 100, 160, 160);
var colourPickerToolbar2 = new ColorPickerHSB(130, 5, 120, "Color 2", 200, 120, 100);

toolbars[0].add(Button, {
    name: "Set color 1",
    trigger: function() {
        toolbars[0].addSubMenu(colourPickerToolbar1);
    }
});
toolbars[0].add(Button, {
    name: "Set color 2",
    trigger: function() {
        toolbars[0].addSubMenu(colourPickerToolbar2);
    }
});

/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    noStroke();
    fill(colourPickerToolbar1.color);
    rect(0, 0, width, height / 2);
    fill(colourPickerToolbar2.color);
    rect(0, height / 2, width, height / 2);
    forEach(toolbars, 'draw');
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    forEach(toolbars, 'mousePressed');
};

mouseDragged = function() {
    forEach(toolbars, 'mouseDragged');
};

mouseReleased = function() {
    forEach(toolbars, 'mouseReleased');
};

mouseOut = function() {
    forEach(toolbars, 'mouseReleased');
};
