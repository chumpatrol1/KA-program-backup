/*********************************************************
 * Three points define a circle.
 * Drag the orange points to find a new circle
 * 
 * For more information, see:
 https://www.khanacademy.org/math/geometry/triangle-properties/perpendicular_bisectors/v/three-points-defining-a-circle
*********************************************************/

var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

var CONTROL_POINT_SIZE = 12;
var selected = false;

/*********************************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
*********************************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (selected === this || this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};
}
/*********************************************************
 *      Create objects
*********************************************************/

var points = [
    new DraggablePoint(100, 60, ORANGE),
    new DraggablePoint(300, 120, ORANGE),
    new DraggablePoint(280, 240, ORANGE),
];

/*********************************************************
 *      Find circle
*********************************************************/

var findCircle = function(points) {
    var d1 = dist(points[0].x, points[0].y, points[1].x, points[1].y);
    var d2 = dist(points[1].x, points[1].y, points[2].x, points[2].y);
    var d3 = dist(points[2].x, points[2].y, points[0].x, points[0].y);
    
    // Perpendicular bisector vectors
    var dx1 = -(points[0].y - points[1].y) / d1;
    var dy1 = (points[0].x - points[1].x) / d1;
    var dx2 = -(points[1].y - points[2].y) / d2;
    var dy2 = (points[1].x - points[2].x) / d2;
    var dx3 = -(points[2].y - points[0].y) / d3;
    var dy3 = (points[2].x - points[0].x) / d3;
    
    var dot = dx2 * dy1 - dy2 * dx1;
    
    // If points are colinear(ish), draw a straight line
    if (abs(dot) < 0.04) {
        stroke(BLUE);
        strokeWeight(2);
        line(points[0].x + 600 * dy1, points[0].y - 600 * dx1,
             points[0].x - 600 * dy1, points[0].y + 600 * dx1);
        return;
    }
    
    // Mid-point coordinates
    var mx1 = (points[0].x + points[1].x) / 2;
    var my1 = (points[0].y + points[1].y) / 2;
    var mx2 = (points[1].x + points[2].x) / 2;
    var my2 = (points[1].y + points[2].y) / 2;
    
    // Find intersection of lines in terms of position along 2 bisector
    var s = (dx1 * (my2 - my1) - dy1 * (mx2 - mx1)) / dot;
    
    var ix = mx2 + s * dx2;
    var iy = my2 + s * dy2;

    // Find radius
    var r = dist(ix, iy, points[0].x, points[0].y);

    // Draw circle center
    stroke(BLUE);
    strokeWeight(8);
    point(ix, iy);
    
    // Draw perpendicular bisector
    strokeWeight(1);
    stroke(GREEN);
    line(ix, iy, ix + dx1 * 600, iy + dy1 * 600);
    line(ix, iy, ix + dx2 * 600, iy + dy2 * 600);
    line(ix, iy, ix + dx3 * 600, iy + dy3 * 600);
    
    // Draw circle
    stroke(BLUE);
    noFill();
    strokeWeight(2);
    ellipse(ix, iy, r * 2, r * 2);
};

/*********************************************************
 *      Main Loop
*********************************************************/

var draw = function() {
    background(BACKGROUND);
    
    findCircle(points);
    points.forEach(function(p) { p.draw(); });
};

/*********************************************************
 *      Event handling
*********************************************************/

var mousePressed = function() {
    for (var i = 0; i < points.length; i++) {
        if (points[i].mouseover()) {
            selected = points[i];
            break;
        }
    }
};

var mouseReleased = function() {
    selected = false;
};

var mouseDragged = function() {
    if (selected) {
        selected.move();
    }
};