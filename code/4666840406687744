/**
 * Text editor with JS syntax highlighting
 * 
 *      ~ Features ~
 * Syntax hightling for JS (incomplete)
 * Two different colour schemes
 * 
 *  - Keyboard interface -
 * Typing and deleting
 * Arrow keys move cursor
 * Ctrl + arrow to move the extremes
 * Ctrl + delete to remove the line to that point
 * Shift + arrow to select text
 * Adding a newline preserves the current indentation level
 * 
 *  - Mouse interface -
 * Click the header to change colour scheme
 * Click and drag to select text
 * 
 *  - Buttons - 
 * Cut, Copy, Paste
 * Change colour scheme
 * 
 * TODO:
 *  Fixes
 *      Highlight parameters without comma
 *      Multi-line comments (/* vs /**)
 *      Remember cursorX when it is reduced due to line length
 * 
 *  New features
 *      Double click to select word
 *      Draw indentation
 *      Scrollbars
 *      Dropdown menus ?
 *      Undo/redo
 *      Tab ?
 *      Autocomplete parentheses ?
 * 
 *  General
 *      Write unit tests ?
**************************************/

// Code we want to display
var code = [
    "/*****************",
    " * TODO: Multiline comment",
    "******************/",
    " ",
    "var test = function(a, b) {",
    "    this.if = -5;",
    "    this.if2 = 4 || 3 && 2;",
    "    this.x = 1 + 2 + -3 * 4 / 5;",
    "",
    "    var x = [",
    "        0.01, true, // EOL comment" ,
    "        'string', \"true\",",
    "    ];",
    "    ",
    "    for (var i = 0; i < x.length; i++) {",
    " /* comment */   println(x[i]);",
    "    };",
    "};",
    ""
];

// Colour scheme for different styles of highlighting
var colorSchemes = {
    standard: {
        background: color(255),
        header: color(52, 106, 41),
        headerStroke: color(202, 194, 159),
        gutter: color(240),
        gutterHighlight: color(220),
        gutterText: color(0),
        cursorActive: color(10),
        cursorPassive: color(180),
        selection: color(181, 213, 255),
        default: color(0),
        number: color(0, 0, 205),
        operator: color(104, 118, 135),
        boolean: color(88, 92, 246),
        comment: color(76, 136, 107),
        string: color(3, 106, 7),
        keyword: color(0, 0, 255),
        _function: color(0, 0, 255),
        parameter: color(49, 132, 149),
        _this: color(49, 132, 149),
        attribute: color(6, 150, 14),
        multilineComment: color(0, 102, 255),
        _document: color(128, 159, 191),
        functionName: color(0, 0, 162)
    },
    sublime: {
        background: color(29, 30, 25),
        header: color(18, 19, 16),
        headerStroke: color(47, 46, 43),
        gutter: color(29, 30, 25),
        gutterHighlight: color(38, 38, 31),
        gutterText: color(124, 126, 119),
        cursorActive: color(255),
        cursorPassive: color(180),
        selection: color(40, 40, 33),
        default: color(255),
        number: color(157, 96, 255),
        operator: color(245, 0, 93),
        boolean: color(157, 96, 255),
        string: color(224, 215, 90),
        _function: color(80, 209, 237),
        keyword: color(245, 0, 93),
        parameter: color(253, 133, 0),
        _this: color(255),
        attribute: color(80, 209, 237),
        comment: color(90, 98, 75),
        multilineComment: color(90, 98, 75),
        _document: color(90, 98, 75),
        functionName: color(150, 227, 9)
    }
};

// How we tokenise the code
var patterns = [
    { regex: /^\s*\/\//, tokens: ['comment'] },
    { regex: /^\s*\/\*/, tokens: ['multilineComment'] },
    { regex: /^\s*\*\//, tokens: ['multilineCommentEnd'] },
    { regex: /^\s*(?:-?\d+(?:\.\d+)?)\b/, tokens: ['number'] },
    { regex: /^\s*(?:\+|-|\*|\/|&|\||\=|<|>)/, tokens: ['operator'] },
    { regex: /^(?:true|false|null|undefined|Infinity)/, tokens: ['boolean'] },
    { regex: /^\s*(?:"[^"]*")|^(?:'[^']*')/, tokens: ['string'] },
    { regex: /^(\s*\w+)(\s*=\s*)(function)(\()([\s\w,]*)\b/, tokens: ['functionName', 'default', '_function', 'default', 'parameter'] },
    { regex: /^\s*\b(?:var)\b/, tokens: ['_function'] },
    { regex: /^\s*\b(?:TODO)\b/, tokens: ['_document'] },
    { regex: /^\s*\b(?:if|else|for|in|continue|break|while|function|return|switch|delete|case|default)\b/, tokens: ['keyword'] },
    { regex: /^(\s*\.)(length|x|y|push|pop|splice|slice|shift|split|unshift|lineHeight)\b/, tokens: ['default', 'attribute'] },
    { regex: /^\s*(?:this)\b/, tokens: ['_this'] },
    { regex: /^\s*\w+/, tokens: ['default'] },
];

// Given a line of code return an array of arrays 
// In the form [text, token]
var parseCode = function(code) {
    var coloredCode = [];
    var index = 0;
    
    var regexMatch, chars, i, pattern, result;
    var n = patterns.length;
    
    while (index < code.length) {
        regexMatch = false;
        chars = code.slice(index);
        
        // TODO: don't parse multiline comment content
        if (patterns[0].regex.exec(chars)) {
            // Test for comment
            index += chars.length;
            coloredCode.push([chars, 'comment']);
            regexMatch = true;
        } else {
            // Test remaining code with each regex
            for (i = 1; i < n; i++) {
                pattern = patterns[i];
                result = pattern.regex.exec(chars);
                if (result) {
                    index += result[0].length;
                    if (result.length === 1) {
                        coloredCode.push([result[0], pattern.tokens[0]]);
                    } else {
                        for (var j = 1; j < result.length; j++) {
                            coloredCode.push([result[j], pattern.tokens[j - 1]]);
                        }
                    }
                    regexMatch = true;
                    break;
                }
            }
        }
        
        if (!regexMatch) {
            index++;
            coloredCode.push([chars[0], 'default']);
        }
    }
    
    return coloredCode;
};

// Given an array of arrays in the form [text, token],
// and an object mapping tokens to colors,
// write the text in those colors, starting at position, (x, y)
// Assume the text is monospace and the character width is given by w
var writeColoredCode = function(code, colors, x, y, w) {
    for (var i = 0; i < code.length; i++) {
        var c = code[i];
        fill(colors[c[1]] || colors.default);
        text(c[0], x, y);
        //println(c[0]);
        x += w * c[0].length;
    }
};

// Get a monospace font, Monaco or fallback
var monospaceFont = createFont('Monaco', 13);
textFont(monospaceFont);
if (textWidth('lllll') !== textWidth('mmmmm')) {
    monospaceFont = createFont('monospace', 14);
}

/*******************************************************
 *      Button object
********************************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.font = createFont("sans", 15);
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.textColor = color(255);
    this.selected = false;
    this.transition = 0;
};

Button.prototype.draw = function() {
    fill(this.textColor);
    textFont(this.font, 15);
    textAlign(CENTER, CENTER);
    this.w = textWidth(this.name);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
    
    if (this.mouseOver()) {
        cursor(HAND);
        strokeWeight(1);
        stroke(this.textColor);
        line(this.x -1, this.y + this.h, this.x + this.w + 2, this.y + this.h);
    }
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

Button.prototype.mouseDragged = function() {};

Button.prototype.mouseReleased = function() {
    if (this.selected && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

Button.prototype.trigger = function() {
    // To be over-written
};

Button.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/**********************************************
 *      Page object
 * Main object - deals with keypresses and 
 * mouse events, also displaying text
***********************************************/

var Page = function(title, code) {
    this.title = title;
    this.code = code || [];
    this.cursorX = 0;
    this.cursorY = 0;
    this.cursorT = 0;   // Controls blinking
    this.mouseIsOut = true;
    
    this.codeX = 30;
    this.codeY = 40;
    this.lineHeight = 19;
    
    this.font = monospaceFont;
    textAlign(LEFT, CENTER);
    textFont(this.font);
    var testText = " abcdefghijklmnopqrstuvwxyz0123456789[]{};.,";
    this.charWidth = textWidth(testText) / testText.length;
    
    this.colorScheme = 'standard';
    this.getColoredCode();
    
    this.clipboard = [];
    
    var buttonY = this.codeY - 22;
    this.buttons = [
        new Button(200, buttonY, 80, 17, "Cut", this.cut.bind(this)),
        new Button(240, buttonY, 80, 17, "Copy", this.copy.bind(this)),
        new Button(290, buttonY, 80, 17, "Paste", this.paste.bind(this)),
        new Button(340, buttonY, 80, 17, "Colors", this.changeColorScheme.bind(this))
    ];
};

Page.prototype.getColoredCode = function() {
    var colorScheme = colorSchemes[this.colorScheme];
    this.coloredCode = [];
    
    for (var i = 0; i < this.code.length; i++) {
        this.coloredCode.push(parseCode(this.code[i]));
    }
};

Page.prototype.draw = function() {
    if (mouseX < this.codeX || mouseY < this.codeY) {
        cursor(ARROW);
    } else {
        cursor(TEXT);
    }
    
    var colorScheme = colorSchemes[this.colorScheme];

    background(colorScheme.background);
    
    this.drawCode(colorScheme);
    this.drawCursor(this.codeX + 5, this.codeY, colorScheme);
    this.drawGutter(this.codeX, this.codeY, colorScheme);
    this.drawHeader(this.codeX, this.codeY, colorScheme);
    
    this.buttons.forEach(function(el) { el.draw(); });
};

Page.prototype.drawHeader = function(x, y, colors) {
    fill(colors.header);
    if (colors.headerStroke) {
        strokeWeight(1);
        stroke(colors.headerStroke);
    } else {
        noStroke();
    }
    rect(0, 0, width + 1, this.codeY);
    
    fill(255);
    textAlign(LEFT, CENTER);
    textFont(createFont('Proxima Nova', 24));
    text(this.title, 20, this.codeY / 2);
};

Page.prototype.drawGutter = function(x, y, colors) {
    noStroke();
    fill(colors.gutter);
    rect(0, y + 1, x, height);
    
    textAlign(RIGHT, CENTER);
    textFont(this.font);
    y += this.lineHeight * 0.5;
    
    for (var i = 0; i < this.code.length; i++) {
        // Highlight current line
        if (i === this.cursorY) {
            fill(colors.gutterHighlight);
            noStroke();
            rect(0, y - this.lineHeight / 2, x, this.lineHeight);
        }

        fill(colors.gutterText);
        text(i + 1, x - 3, y);
        y += this.lineHeight;
    }
};

Page.prototype.drawTextSelection = function() {
    fill(colorSchemes[this.colorScheme].selection);
    
    var x = this.codeX + 5;
    var y = this.codeY + this.startY * this.lineHeight;
    var startY = this.startY;
    
    if (startY <= this.cursorY) {
        // Downward selection
        var x1 = x + this.startX * this.charWidth;
        while (startY <= this.cursorY) {
            var x2 = startY === this.cursorY ? x + this.cursorX * this.charWidth : width;
            rect(x1, y, x2 - x1, this.lineHeight);
            x1 = x;
            startY++;
            y += this.lineHeight;
        }
    } else {
        // Upward selection
        var x2 = x + this.startX * this.charWidth;
        while (startY >= this.cursorY) {
            var x1 = startY === this.cursorY ? x + this.cursorX * this.charWidth : x;
            rect(x1, y, x2 - x1, this.lineHeight);
            x2 = width;
            startY--;
            y -= this.lineHeight;
        }
    }
};

Page.prototype.drawCode = function(colors) {
    noStroke();
    textAlign(LEFT, CENTER);
    textFont(this.font);
    
    var multilineComment = false;
    var y = this.codeY + this.lineHeight * 0.5;
    
    // Draw text selection
    if (this.startX !== false) {
        this.drawTextSelection();
    }

    for (var i = 0; i < this.coloredCode.length; i++) {
        var code = this.coloredCode[i];
        var x = this.codeX + 5;
        
        for (var j = 0; j < code.length; j++) {
            var token = code[j];
            if (multilineComment) {
                if (token[1] !== '_document') {
                    fill(colors.multilineComment || colors.default);
                } else {
                    fill(colors[token[1]] || colors.default);
                }
                multilineComment = token[1] !== 'multilineCommentEnd';
            } else {
                fill(colors[token[1]] || colors.default);
                multilineComment = token[1] === 'multilineComment';
            }
            text(token[0], x, y);
            //println(token[0]);
            x += this.charWidth * token[0].length;
        }
        y += this.lineHeight;
    }

};

Page.prototype.drawCursor = function(x, y, colors) {
    x += this.cursorX * this.charWidth;
    y += this.cursorY * this.lineHeight;

    strokeWeight(2);
    this.cursorT++;

    if (this.mouseIsOut) {
        stroke(colors.cursorPassive);
        line(x, y + 2, x, y + 16);
    } else if (floor((this.cursorT % 80) / 40) === 0) {
        stroke(colors.cursorActive);
        line(x, y + 2, x, y + 16);
    }

};

Page.prototype.startSelection = function() {
    if (this.startX === false) {
        this.startX = this.cursorX;
        this.startY = this.cursorY;
    }
};

Page.prototype.mouseToCharacter = function() {
    var x = mouseX - this.codeX;
    var y = mouseY - this.codeY;
    
    if (y < 0) { return; }
    return [floor(max(0, x / this.charWidth)), floor(y / this.lineHeight)];
};

Page.prototype.changeColorScheme = function() {
    if (this.colorScheme === 'standard') {
        this.colorScheme = 'sublime';
    } else {
        this.colorScheme = 'standard';
    }
};

Page.prototype.mousePressed = function() {
    // Click to position mouse
    var position = this.mouseToCharacter();
    if (position) {
        if (this.shiftIsPressed) {
            if (!this.startX) {
                this.startX = this.cursorX;
                this.startY = this.cursorY;
            }
        } else {
            // Deselect
            this.startX = false;
            this.startY = false;
        }
        this.cursorY = min(position[1], this.code.length - 1);
        this.cursorX = min(position[0], this.code[this.cursorY].length);
    } else {
        this.buttons.forEach(function(el) { el.mousePressed(); });
    }
    this.mouseIsOut = false;
    this.cursorT = 0;
};

Page.prototype.mouseDragged = function() {
    // Get mouse position
    var position = this.mouseToCharacter();
    if (position) {
        this.startSelection();
        this.cursorY = min(position[1], this.code.length);
        this.cursorX = min(position[0], this.code[this.cursorY].length);
    }
    this.cursorT = 0;
};

Page.prototype.mouseReleased = function() {
    this.buttons.forEach(function(el) { el.mouseReleased(); });
};

Page.prototype.mouseOut = function() {
    // Click to position mouse
    this.mouseIsOut = true;
};

Page.prototype.getSelection = function() {
    var x1 = this.startX;
    var y1 = this.startY;
    var x2 = this.cursorX;
    var y2 = this.cursorY;
    
    // If selection is backwards, flip everything
    if (y1 === y2) {
        if (x1 > x2) {
            x1 = this.cursorX;
            x2 = this.startX;
        }
    } else if (this.startY > this.cursorY) {
        x1 = this.cursorX;
        y1 = this.cursorY;
        x2 = this.startX;
        y2 = this.startY;
    }
    
    return { x1: x1, y1: y1, x2: x2, y2: y2 };
};

Page.prototype.deleteSelection = function() {
    if (this.startX === false) { return; }
    
    var sel = this.getSelection();
    
    // Delete the second half of the first line and
    // add to start of final line
    
    this.code[sel.y1] = this.code[sel.y1].slice(0, sel.x1) + this.code[sel.y2].slice(sel.x2);
    
    // Completely delete middle lines
    if (sel.y2 !== sel.y1) {
        var lines = this.code.splice(sel.y1 + 1, sel.y2 - sel.y1);
    }
    
    // Move cursor to beginning of selection
    this.cursorY = sel.y1;
    this.cursorX = sel.x1;
    
    // Mark that we are not selecting anything now
    this.startX = false;
    this.startY = false;
    
    this.cursorT = 0;
    this.getColoredCode();
};

Page.prototype.cut = function() {
    this.copy();
    this.deleteSelection();
};

Page.prototype.copy = function() {
    if (this.startX === false) { return; }
    
    var sel = this.getSelection();
    
    if (sel.y1 === sel.y2) {
        this.clipboard = [this.code[sel.y1].slice(sel.x1, sel.x2)];
    } else {
        this.clipboard = [this.code[sel.y1].slice(sel.x1)];
        
        // Add full lines to clipboard
        var lines = this.code.slice(sel.y1 + 1, sel.y2 - sel.y1);
        this.clipboard = this.clipboard.concat(lines);
        
        // Reduce the length of the final line
        this.clipboard.push(this.code[sel.y2].slice(0, sel.x2));
    }
};

Page.prototype.paste = function() {
    this.deleteSelection();
    if (!this.clipboard.length) { return; }
    
    var endOfLine = this.code[this.cursorY].slice(this.cursorX);
    this.code[this.cursorY] = this.code[this.cursorY].slice(0, this.cursorX) + this.clipboard[0];
    
    // Add additional lines
    for (var i = 1; i < this.clipboard.length; i++) {
        this.code.splice(this.cursorY + i, 0, this.clipboard[i]);
    }

    this.cursorY += this.clipboard.length - 1;
    this.cursorX = this.code[this.cursorY].length;
    this.code[this.cursorY] += endOfLine;
    this.getColoredCode();
};

Page.prototype.keyPressed = function() {
    //println(keyCode);
    var codeLine = this.code[this.cursorY];
    var x = this.cursorX;
    var y = this.cursorY;
    
    if (keyCode >= 37 && keyCode <= 40) {
        // Either select text or unselect it
        if (this.shiftIsPressed) {
            this.startSelection();
        } else {
            this.startX = false;
        }
        
        if (keyCode === DOWN) {
            if (this.controlIsPressed) {
                y = this.code.length - 1;
                x = this.code[y].length;
            } else {
                y++;
            }
        } else if (keyCode === UP) {
            if (this.controlIsPressed) {
                y = 0;
                x = 0;
            } else {
                y--;
            }
        } else if (keyCode === LEFT) {
            x = this.controlIsPressed ? 0 : x - 1;
            if (x < 0) {
                y--;
                x = y ? this.code[y].length : 0;
            }
        } else if (keyCode === RIGHT) {
            x = this.controlIsPressed ? codeLine.length : x + 1;
            if (x > codeLine.length) {
                y++;
                if (y <= this.code.length) {
                    x = 0;
                }
            }
        }
        
        this.cursorY = constrain(y, 0, this.code.length);
        this.cursorX = min(x, this.code[this.cursorY].length);
    } else if (keyCode === 32 || (keyCode > 47 && keyCode < 91) || (keyCode > 185 && keyCode < 223)) {
        if (this.controlIsPressed) {
            if (key.toString() === 'd') {
                // Delete line - doesn't work as browser takes control.
                // this.code.splice(y, 1);
            }
        } else {
            if (this.startX !== false) {
                this.deleteSelection();
                codeLine = this.code[this.cursorY];
            }
            // Add character
            this.code[this.cursorY] = codeLine.slice(0, this.cursorX) + key.toString() + codeLine.slice(this.cursorX);
            this.cursorX++;
        }
    } else if (keyCode === DELETE || keyCode === BACKSPACE) {
        if (this.startX !== false) {
            this.deleteSelection();
        } else if (x) {
            // Delete back on this line
            if (this.controlIsPressed) {
                this.code[y] = codeLine.slice(x);
                this.cursorX = 0;
            } else {
                this.code[y] = codeLine.slice(0, x - 1) + codeLine.slice(x);
                this.cursorX--;
            }
        } else if (y) {
            // Combine this line with the previous one
            x = this.code[y - 1].length;
            this.code[y - 1] += codeLine;
            this.code.splice(y, 1);
            this.cursorY--;
            this.cursorX = min(x, this.code[this.cursorY].length);
        }
    } else if (keyCode === CONTROL || keyCode === 157) {
        this.controlIsPressed = true;
    } else if (keyCode === SHIFT) {
        this.shiftIsPressed = true;
    } else if (keyCode === ENTER || keyCode === RETURN) {
        // Find intention level
        var indentation = codeLine.match(/^\s*/)[0];
        // Get text from here to the end of the line
        var endOfLine = codeLine.slice(x);
        // Add a new line containing this text
        this.code.splice(y + 1, 0, indentation + endOfLine);
        // Set of the only to only be equal to the text before that point
        this.code[y] = codeLine.slice(0, x);
        this.cursorY++;
        this.cursorX = indentation.length;
    }

    this.cursorT = 0;
    this.getColoredCode();
};

Page.prototype.keyReleased = function() {
    if (keyCode === CONTROL || keyCode === 157) {
        this.controlIsPressed = false;
    } else if (keyCode === SHIFT) {
        this.shiftIsPressed = false;
    }
};

/**********************************************
 *      Make page here
***********************************************/

var page = new Page("Test Program", code);

/**********************************************
 *      Main loop
***********************************************/

draw = function() {
    page.draw();
};

/**********************************************
 *      Event handling
***********************************************/

mousePressed = function() {
    page.mousePressed();
};

mouseDragged = function() {
    page.mouseDragged();
};

mouseReleased = function() {
    page.mouseReleased();
};

mouseOut = function() {
    page.mouseOut();
};

keyPressed = function() {
    page.keyPressed();
};

keyReleased = function() {
    page.keyReleased();
};