  // Global variables - trying to keep these to a minimum
var keys = [];
var ship, weapons, enemies;

var BACKGROUND = color(0, 0, 0);

/*************************************************
 *      Linear algebra stuff for 3D effects
**************************************************/

var vectorLength = function(v) {
    return sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
};

var normaliseVector = function(v) {
    var d = vectorLength(v);
    return [v[0]/d, v[1]/d, v[2]/d];
};

// Given two vectors return a vector representing the normal
var normalOfTwoVectors = function(v1, v2) {
    return [[v1[1] * v2[2] - v1[2] * v2[1]],
            [v1[2] * v2[0] - v1[0] * v2[2]],
            [v1[0] * v2[1] - v1[1] * v2[0]]];
};

var drawArc = function(x, y, a, a1, a2, r) {
    var v1 = normaliseVector([cos(a), sin(a), 0]);
    var v2 = normaliseVector([0, 0.1, -1]);
    var normal = normalOfTwoVectors(v1, v2);
    var minor = r * sqrt(1 - normal[0] * normal[0] - normal[1] * normal[1]);
    var angle = atan2(normal[1], normal[0]) + 90;
    
    pushMatrix();
    translate(x, y);
    rotate(angle);
    if (normal[2] < 0) {
        arc(0, 0, r, minor, a1, a2);
    } else {
        arc(0, 0, r, minor, -a2, -a1);
    }
    popMatrix();
};

var drawShield = function(x, y, r, hits, a1, a2) {
    for (var i = hits.length - 1; i >= 0 ; i--) {
        var h = hits[i];
        if (h[1]) {
            var p = 1 - h[1] / 16;
            var r1 = r / 2 * cos(p * 180);
            var r2 = r / 2 * sin(p * 180);
            var x = x - r1 * cos(h[0]);
            var y = y - r1 * sin(h[0]);
            var dx = r2 * cos(h[0] + 90);
            var dy = r2 * sin(h[0] + 90);
            drawArc(x, y, h[0] + 90, a1, a2, r2 * 2);
        }
    }
};

/*************************************************
 *      Define objects
**************************************************/
var Enemy = function(x, y, r) {
    this.x = x;
    this.y = y;
    this.r = r;
     
    this.dx = -2;
    this.dy = -2;
    this.hits = [];
    this.damage = 0;
};

Enemy.prototype.draw = function() {
    stroke(20, 200, 0, 200);
    var c = lerpColor(color(20, 200, 0, 40), color(255, 0, 0), this.damage / 20);
    fill(c);
    //ellipse(this.x, this.y, this.r, this.r);
    
    noFill();
    stroke(20, 200, 0, 200);
    drawShield(this.x, this.y, this.r, this.hits, 0, 180);
    
    noStroke();
    fill(255, 0, 0);
    quad(this.x - 12, this.y, this.x + 10, this.y - 10,
         this.x + 4, this.y, this.x + 10, this.y + 10);
         
    noFill();
    stroke(20, 200, 0, 200);
    drawShield(this.x, this.y, this.r, this.hits, -180, 0);

};

Enemy.prototype.update = function() {
    // Move
    this.x += this.dx;
    this.y += this.dy;
    
    // Change direction
    if (this.y < 100) {
        this.dy = 2;
    } else if (this.y > 300) {
        this.dy = -2;
    }
    
    if (this.damage) {
        this.damage--;
    }
    
    for (var i = this.hits.length - 1; i >= 0 ; i--) {
        var h = this.hits[i];
        if (h[1]) {
            h[1]--;
        } else {
            this.hits.splice(i, 1);
        }
    }
    
    // Remove if projectile is off screen
    if (this.x > 500 || this.x < -100 || this.y > 500 || this.y < -100) {
        this.remove = true;
    }
};

/******************************************************
 *      Projection object
 * Something fired from the ship that moves constantly
*******************************************************/
// Generic projectile object has a position and a velocity
var Projectile = function(x, y, dx, dy) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
};

Projectile.prototype.update = function() {
    this.move();
    
    // Test to see if we hit an enemy
    for (var i = 0; i < enemies.length; i++) {
        if (dist(this.x, this.y, enemies[i].x, enemies[i].y) <= enemies[i].r / 2) {
            this.remove = true;
            enemies[i].damage = 20;
            var angle = atan2(enemies[i].y - this.y, enemies[i].x - this.x);
            enemies[i].hits.push([angle, 16]);
        }
    }
};

// Basic collide function
Projectile.prototype.move = function() {
    this.x += this.dx;
    this.y += this.dy;
    
    // Remove if projectile is off screen
    if (this.x > 500 || this.x < 0 || this.y > 500 || this.y < 0) {
        this.remove = true;
    }
};

Projectile.prototype.draw = function() {
    fill(255, 0, 0);
    ellipse(this.x, this.y, 5, 5);
};

// A basic weapon
var Weapon = function(reloadTime) {
    this.reloadTime = reloadTime || 20;
    this.reloading = this.reloadTime;
};

// Move the projectiles
Weapon.prototype.update = function() {
    if (this.reloading < this.reloadTime) {
        this.reloading++;
    }
};

Weapon.prototype.fire = function() {
    if (this.reloading === this.reloadTime) {
        this.addProjectile();
        this.reloading = 0;
    }
};

// When the weapon fires, a new projectile is created
Weapon.prototype.addProjectile = function() {
    ship.projectiles.push(new Projectile(ship.x, ship.y, 10, 0));
};

/******************************************************
 * Different weapon types
*******************************************************/

// A basic weapon that fire multiple projectiles
var ScatterWeapon = function() {
    Weapon.call(this, 30);    // Make the reload time slower
};
ScatterWeapon.prototype = Object.create(Weapon.prototype);

// Create 3 projectiles when we fire
ScatterWeapon.prototype.addProjectile = function() {
    ship.projectiles.push(new Projectile(ship.x + 20, ship.y, 10, 0));
    ship.projectiles.push(new Projectile(ship.x + 20, ship.y, 9, 1));
    ship.projectiles.push(new Projectile(ship.x + 20, ship.y, 9, -1));
};

// Create a new projectile type
var Laser = function(x, y, dx, dy) {
    Projectile.call(this, x, y, dx, dy);
};
Laser.prototype = Object.create(Projectile.prototype);

Laser.prototype.draw = function() {
    fill(0, 255, 255, 200);
    rect(this.x - 20, this.y, 20, 3);
    stroke(0, 50, 255);
    line(this.x - 20, this.y, this.x, this.y);
};

// Laser weapon has a faster reload time and uses laser projectile type
var LaserWeapon = function() {
    Weapon.call(this, 10);    // Reload time
};
LaserWeapon.prototype = Object.create(Weapon.prototype);
LaserWeapon.prototype.addProjectile = function() {
    ship.projectiles.push(new Laser(ship.x + 20, ship.y, 20, 0));
};

// Projectile that explodes when something gets close
var ProximityMine = function(x, y, dx, dy) {
    Projectile.call(this, x, y, dx, dy);
    this.angle = 0;
    this.explode = 0;
};
ProximityMine.prototype = Object.create(Projectile.prototype);

ProximityMine.prototype.draw = function() {
    if (!this.explode) {
        this.angle += 5;
        translate(this.x, this.y);
        rotate(this.angle);
        
        stroke(200);
        line(-4, -4, 4,  4);
        line(-4,  4, 4, -4);
        resetMatrix();
        
        noStroke();
        fill(255, 0, 0);
        ellipse(this.x, this.y, 6, 6);
    } else {
        noStroke();
        var c = lerpColor(color(255, 0, 0), color(255, 0, 0, 0), this.explode / 20);
        fill(c);
        ellipse(this.x, this.y, 6 + this.explode * 5, 6 + this.explode * 5);
    }
};

ProximityMine.prototype.update = function() {
    if (!this.explode) {
        this.move();
        
        // Test to see if we hit an enemy
        for (var i = 0; i < enemies.length; i++) {
            if (dist(this.x, this.y, enemies[i].x, enemies[i].y) <= enemies[i].r / 2 + 20) {
                this.explode = 1;
            }
        }
    } else {
        this.explode++;
        if (this.explode > 20) {
            this.remove = true;
        }
        
        // Test to see if explosion hits an enemy
        var d = 6 + this.explode * 5;
        for (var i = 0; i < enemies.length; i++) {
            if (dist(this.x, this.y, enemies[i].x, enemies[i].y) <= (enemies[i].r + d) / 2) {
                enemies[i].damage = 20;
            }
        }
    }
};

var MineWeapon = function() {
    Weapon.call(this, 60);    // Reload time
};
MineWeapon.prototype = Object.create(Weapon.prototype);
MineWeapon.prototype.addProjectile = function() {
    ship.projectiles.push(new ProximityMine(ship.x, ship.y, 4, 0));
};

/*************************************************
 *   A circle, which if the ship hits, changes
 * the weapon the ship has
**************************************************/

var weaponBonus = function(x, y, r, weapon) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.weapon = weapon;
    this.dx = -2;
    this.dy = 2;
};

weaponBonus.prototype.draw = function() {
    noStroke();
    fill(255, 221, 0);
    ellipse(this.x, this.y, this.r, this.r);
};

weaponBonus.prototype.update = function() {
    // Move
    this.x += this.dx;
    this.y += this.dy;
    
    // Change direction
    if (this.y < 100) {
        this.dy = 2;
    } else if (this.y > 300) {
        this.dy = -2;
    }
    
    // Remove if projectile is off screen
    if (this.x > 500 || this.x < -100 || this.y > 500 || this.y < -100) {
        this.remove = true;
    }
    
    if (dist(this.x, this.y, ship.x, ship.y) < this.r + 20) {
        ship.weapon = weapons[this.weapon];
    }
};

weapons = {
    basic: new Weapon(),
    scatter: new ScatterWeapon(),
    laser: new LaserWeapon(),
    mine: new MineWeapon()
};

/*************************************************
 *      The ship object
 *  Has a position and a weapon
**************************************************/

var Ship = function(x, y) {
    this.x = x;
    this.y = y;
    this.weapon = weapons.basic;
    this.projectiles = [];
};

Ship.prototype.draw = function() {
    for (var i = 0; i < this.projectiles.length; i++) {
        this.projectiles[i].draw();
    }
    
    stroke(0, 0, 0);
    fill(133, 133, 133);
    ellipse(this.x, this.y, 30, 17);
    fill(224, 224, 224);
    ellipse(this.x, this.y - 3, 22, 15);
};

Ship.prototype.update = function() {
    ship.weapon.update();
    
    for (var i = 0; i < this.projectiles.length; i++) {
        this.projectiles[i].update();
    }
    
    // Remove projectiles that have gone off the screen
    for (var i = this.projectiles.length - 1; i >= 0; i--) {
        if (this.projectiles[i].remove) {
            this.projectiles.splice(i, 1);
        }
    }
};

// Create ship
ship = new Ship(40, 200);

// Create enemies
enemies = [
    new Enemy(360, 180, 40)
];

// Create weapon bonuses
var weaponBonuses = [];

var keyHandling = function() {
    if (keys[UP]) { ship.y -= 6; }
    if (keys[DOWN]) { ship.y += 6; }
    //if (keys[LEFT]) { ship.x -= 6; }
    //if (keys[RIGHT]) { ship.x += 6; }
    if (keys[32]) { ship.weapon.fire(); }
};

var drawReloadBar = function() {
    fill(200);
    noStroke();
    rect(100, 370, 200, 20, 8);
    fill(140, 0, 255);
    var d = ship.weapon.reloading / ship.weapon.reloadTime;
    rect(105, 372, 190 * d, 16, 4);
};

var draw = function() {
    background(BACKGROUND);
    keyHandling();

    if (random(100) < 2) {
        enemies.push(new Enemy(450, floor(random(300)) + 50, 40));
    }

    for (var i = 0; i < enemies.length; i++) {
        enemies[i].draw();
        enemies[i].update();
    }

    for (var i = enemies.length - 1; i >= 0; i--) {
        if (enemies[i].remove) {
            enemies.splice(i, 1);
        }
    }

    if (random(100) < 0.5) {
        var type = ["basic", "scatter", "laser", "mine"][floor(random(4))];
        weaponBonuses.push(new weaponBonus(450, floor(random(300)) + 50, 20, type));
    }
    
    for (var i = 0; i < weaponBonuses.length; i++) {
        weaponBonuses[i].draw();
        weaponBonuses[i].update();
    }
    
    for (var i = weaponBonuses.length - 1; i >= 0; i--) {
        if (weaponBonuses[i].remove) {
            weaponBonuses.splice(i, 1);
        }
    }

    ship.draw();
    ship.update();
    
    drawReloadBar();
};

var keyPressed= function() { keys[keyCode] = true; };
var keyReleased= function() { keys[keyCode] = false; };   