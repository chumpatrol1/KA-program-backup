/*************************************************
 * Also know as igo, weiqi or baduk
 * 
***************************************************/

// Display parameters
var backgroundColour = color(199, 233, 252);

var boardSize = 360;
var DIRS = [[-1,0], [1,0], [0,-1], [0,1]];
var mouseOverChain = false;

var Chain = function(colour, stone, liberties) {
    this.colour = colour;
    this.stones = [stone];
    this.liberties = liberties;
    
    this.addStone = function(x, y, liberties) {
        this.stones.push([x, y]);
        this.removeLiberty(x, y);
        this.addLiberties(liberties);
    };
    
    this.addChain = function(chain) {
        if (this !== chain) {
            this.stones = this.stones.concat(chain.stones);
            this.addLiberties(chain.liberties);   
        }
    };
    
    this.addLiberties = function(liberties) {
        for (var i=0; i<liberties.length; i++) {
            var lib = liberties[i];
            if (this.liberties.indexOf(lib) === -1) {
                this.liberties.push(lib);
            }
        }
    };
    
    this.removeLiberty = function(x, y) {
        var i = this.liberties.indexOf(x + "," + y);
        if (i > -1) {
            this.liberties.splice(i,1);
        }
    };
};

// The board on which the game is played
// Must be 9x9, 13x13 or 19x19
var Goban = function(size) {
    if (size !== 9 && size !== 13 && size !== 19) {
        throw {
            message: "Board size must be 9, 13 or 19"
        };
    }
    
    this.size = size;
    this.border = 0;
    this.x = (400 - boardSize) / 2;
    this.y = (400 - boardSize) / 2;
    
    this.box = floor((boardSize - 2 * this.border) / (this.size + 1));
    this.border = (boardSize - (this.size-1) * this.box)/2;
    
    var stoneSize = 32;
    this.stoneColour = 1;
    var stoneColours = [color(0, 0, 0), color(250, 250, 250)];
    
    //Star points
    var hoshii = { 9: [2, 6],
                  13: [3, 6, 9],
                  19: [3, 9, 15] }[this.size];
    
    // Create board array
    var edge = [];
    for (var i=0; i<=size+1; i++){
        edge.push(-1);
    }
    this.stones = [edge];
    
    for (var y=0; y < this.size; y++) {
        var row = [-1];
        for (var x=0; x < this.size; x++) {
            row.push(0);
        }
        row.push(-1);
        this.stones.push(row);
    }
    this.stones.push(edge);
    
    // Create an image of the board
    this.drawBoard = function() {
        // Shadow
        noStroke();
        fill(10, 10, 10, 100);
        rect(this.x + 3, this.y + 3, boardSize, boardSize, 3);
        
        stroke(10, 10, 10);
        fill(222, 179, 126);
        rect(this.x, this.y, boardSize, boardSize, 3);
        
        stroke(56, 36, 2);
        noFill();
        var end = boardSize - this.border;
        rect(this.x + this.border - 1, this.y + this.border - 1,
             end - this.border + 2, end - this.border + 2);
        
        //Grid lines
        for (var i = 0; i < this.size; i++) {
            var p = this.border + i * this.box;
            line(this.x + p, this.y + this.border, this.x + p, this.y + end);
            line(this.x + this.border, this.y + p, this.x + end, this.y + p);
        }

        for (var i = 0; i < 3; i++) {
            for (var j=0; j<hoshii.length; j++) {
                var x = this.x + this.border + hoshii[i]*this.box - 1;
                var y = this.y + this.border + hoshii[j]*this.box - 1;
                rect(x, y, 2, 2);
            }
        }
    };
    
    this.draw = function() {
        this.drawBoard(this.x, this.y);
        stroke(10, 10, 10);
        
        for (var i=1; i <= this.size; i++) {
            for (var j=1; j <= this.size; j++) {
                if (this.stones[j][i] !== 0) {
                    var c = this.stones[j][i].colour;
                    fill(stoneColours[c - 1]);
                    var x = this.border + (j-1) * this.box;
                    var y = this.border + (i-1) * this.box;
                    ellipse(this.x + x, this.y + y,
                            stoneSize, stoneSize);
                }
            }
        }
    };
    
    // Convert pixel coordinate to board coordinate
    this.coordToBoard = function(x, y) {
        var bx = 1 + round((x-this.x-this.border)/this.box);
        var by = 1 + round((y-this.y-this.border)/this.box);
        return [bx, by];
    };
    
    this.click = function() {
        var coord = this.coordToBoard(mouseX, mouseY);
        
        if (this.addStone(coord)) {
            // Change to other colour
            this.stoneColour = 3 - this.stoneColour;
        }
    };
    
    this.mouseOver = function() {
        var coord = this.coordToBoard(mouseX, mouseY);
        var x = coord[0];
        var y = coord[1];

        if (x>0 && x<=this.size && y>0 && y<=this.size &&
            this.stones[x][y] !== 0){
            mouseOverChain = this.stones[x][y];
        } else {
            mouseOverChain = false;
        }

    };
    
    this.drawLiberties = function(liberties) {
        fill(255, 0, 0, 100);
        noStroke();
        for (var i=0; i<liberties.length; i++) {
            var coord = liberties[i].split(',');
            var x = parseInt(coord[0], 10) - 1;
            var y = parseInt(coord[1], 10) - 1;
            var bx = this.x + this.border + x * this.box;
            var by = this.y + this.border + y * this.box;
            ellipse(bx, by, stoneSize/2, stoneSize/2);
        }
    };
    
    this.addStone = function(coord) {
        var x = coord[0];
        var y = coord[1];
        
        if (this.stones[x][y] !== 0) {
            return false; // Position occupied
        }
        
        // Check neighbours
        var liberties = [];
        var friends = [];
        var enemies = [];
        
        for (var d=0; d<4; d++) {
            var dx = x + DIRS[d][0];
            var dy = y + DIRS[d][1];
            var neighbour = this.stones[dx][dy];
            if (neighbour === 0) {
                liberties.push(dx + "," + dy);
            } else if (neighbour !== -1) {
                var col = neighbour.colour;
                if (col === this.stoneColour) {
                    friends.push(neighbour);
                } else {
                    enemies.push(neighbour);
                }
            }
        }
        
        var e, f;
        // Check for suicide
        // No liberties and no kills and
        // no friends with liberties beyond this space
        if (liberties.length === 0) {
            var chances = 0;
            for (e=0; e<enemies.length; e++) {
                if (enemies[e].liberties.length === 1) {
                    chances++;
                }
            }
            
            for (f=0; f<friends.length; f++) {
                if (friends[f].liberties.length > 1) {
                    chances++;
                }
            }
            
            if (chances === 0) {
                return false; // suicide
            }
        }
        
        // Place stone
        var chain;
        
        // New Chain
        if (friends.length === 0) {
            chain = new Chain(this.stoneColour,
                              [x, y],
                              liberties);
        } else {
            // Add to existing chain
            chain = friends[0];
            chain.addStone(x, y, liberties);
            
            // Join chain
            for (f=1; f<friends.length; f++) {
                var friend = friends[f];
                friend.removeLiberty(x, y);
                chain.addChain(friend);
                this.changeChain(friend, chain);
            }
        }
        
        this.stones[x][y] = chain;
        
        // Remove enemy liberties
        for (e=0; e<enemies.length; e++) {
            var enemy = enemies[e];
            enemy.removeLiberty(x, y);
            
            // Remove dead chains
            if (enemy.liberties.length === 0) {
                this.changeChain(enemy, 0);
            }
        }
        
        return true;
    };
    
    // Change the value of a chain to the new value
    // If newValue is 0, chain will be removed
    // and liberties added to other chains
    this.changeChain = function(chain, newValue) {
        var stones = chain.stones;
        for (var i=0; i<stones.length; i++) {
            var x = stones[i][0];
            var y = stones[i][1];
            this.stones[x][y] = newValue;
            
            // Add liberties
            if (newValue === 0) {
                for (var d=0; d<4; d++) {
                    var dx = x + DIRS[d][0];
                    var dy = y + DIRS[d][1];
                    var neighbour = this.stones[dx][dy];
                    if (neighbour !== 0 && neighbour !== -1){
                        neighbour.addLiberties([x + ','+ y]);
                    }
                }
            }
        }
    };
};

var board = new Goban(9);

var drawChainInfo = function(chain) {
    fill(10, 10, 10);
    var txt = chain.stones.length + " stone chain";
    txt += " with " + chain.liberties.length + " liberties";
    text(txt, board.x + 8, board.y + boardSize - 10);
    
    board.drawLiberties(chain.liberties);
};

var draw = function() {
    background(backgroundColour);
    board.draw();
    if (mouseOverChain) { drawChainInfo(mouseOverChain); }
};

var mouseMoved = function() {
    board.mouseOver();
};

var mouseClicked = function() {
    board.click();
};