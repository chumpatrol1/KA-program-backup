/***************************************************
 * Using noise to create a different effects
 * Based on the article here:
 *    http://lodev.org/cgtutor/randomnoise.html
****************************************************/

var noiseScale = 0.025;
noiseDetail(3, 0.6);
textSize(14);
textAlign(CENTER, BASELINE);

var plainNoise = function(px, py, w, h) {
    var x, y;
    for (y = h; y; y--) {
        for (x = w; x; x--) {
            stroke(255 * noise(x * noiseScale, y * noiseScale));
            point(x + px, y + py);
        }
    }
};

var exaggeratedNoise = function(px, py, w, h) {
    var x, y, n;
    
    for (y = h; y; y--) {
        for (x = w; x; x--) {
            n = noise(x * noiseScale, y * noiseScale);
            // Based on https://www.khanacademy.org/computer-programming/sphere/1744699339
            n *= n * (3 - 2 * n);
            n *= n * (3 - 2 * n);
            //n *= n * (3 - 2 * n);
            stroke(255 * n);
            point(x + px, y + py);
        }
    }
};

var turbPower = 1600;
var marbleEffect = function(px, py, w, h) {
    var xPeriod = 2;
    var yPeriod = 2;
    
    var c1 = color(161, 153, 153);
    var c2 = color(240);
    var x, y, z, position, d1, d2;
    
    for (y = h; y; y--) {
        for (x = w; x; x--) {
            d1 = (x * x + y * y);
            d2 = ((w - x) * (w - x) + (h - y) * (h - y));
            
            position = (d1 - d2) / 100;
            z = sqrt(abs(sin(position)));
            //z = 0.5 + sin(position) / 2;
            stroke(lerpColor(c1, c2, z));
            point(x + px, y + py);
        }
    }
    
    turbPower = 400;
};

var woodEffect = function(px, py, w, h, noiseFactor) {
    var xyPeriod = 4 * 360;
    var x, y, xValue, yValue, distValue, sineValue;
    
    var w2 = 1 / w;
    var h2 = 1 / h;
    
    for (y = h; y; y--) {
        yValue = (y - h /2) * h2;
        yValue *= yValue;
        
        for (x = w; x; x--) {
            xValue = (x - w / 2) * w2;
            distValue = sqrt(xValue * xValue + yValue);
            distValue += noiseFactor * (noise(x * noiseScale, y * noiseScale) - 0.5);
            sineValue = 255 * abs(sin(xyPeriod * distValue));
            stroke(80 + sineValue, 30 + sineValue, 30);
            
            //sineValue = 128 + 128 * sin(xyPeriod * distValue);
            stroke(sineValue);
            
            point(x + px, y + py);
        }
    }
};

var spotEffect = function(px, py, w, h) {
    var xyPeriod = 360 * 3;
    var turbPower = 0.2;
    var x, y, xValue, yValue, d1, d2, value;
    
    var w2 = 1 / w;
    var h2 = 1 / h;
    var c0 = color(0, 0, 0);
    var c1 = color(220, 200, 50);
    var c2 = color(120, 90, 70);
    
    for (y = h; y; y--) {
        yValue = (y - h / 2) * h2;
        
        for (x = w; x; x--) {
            xValue = (x - w / 2) * w2;
            d1 = turbPower * noise(x * noiseScale, y * noiseScale);
            d2 = turbPower * noise((w - x) * noiseScale, (h - y) * noiseScale);
            value = sin(xyPeriod * (xValue + d1)) + sin(xyPeriod * (yValue + d2));
            value = abs(value * 0.7);
        
            if (value > 1) {
                stroke(lerpColor(c1, c2, 1.5 * value - 1));
            } else {
                stroke(lerpColor(c0, c1, value));
            }
            
            point(x + px, y + py);
        }
    }
};

var drawTile = function(title, f, x, y, w, h) {
    noFill();
    stroke(0);
    rect(x, y, w + 1, h + 1);
    f(x, y, w, h);
    
    fill(0);
    text(title, x + w / 2, y - 5);
};


//woodEffect(20, 20, 200, 200, 0);
noiseScale = 0.025;
woodEffect(20, 20, 200, 200, 0.6);

draw = function() {
    noLoop();
};
