// For Tounching Point exercise
// https://www.khanacademy.org/partner-content/pixar/environment-modeling-2/mathematics-of-parabolas2-ver2/e/touching-point

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var PURPLE = color(157, 56, 189);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var serifFont = createFont("Times", 22);
var sansFont = createFont("sans", 15);

var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 20;
var RESOLUTION = 40;

var toolbar;
var toolbarWidth = 128;

var showing = {
    'Control points': true,
    'Control arms': true,
    Parabola: true,
    Strings: true,
    Intersection: true,
    Labels: true,
//    Equation: false
};

// Given the end points of two lines (x1, y1) to (x2, y2) and (x3, y3) to (x4, y4),
// return the point where they intersect
// Assume lines do intersect (i.e. are not parallel and are not segments)
var findIntersection = function(x1, y1, x2, y2, x3, y3, x4, y4) {
    var dx1 = (x1 - x2);
    var dx2 = (x3 - x4);
    var dy1 = (y1 - y2);
    var dy2 = (y3 - y4);
    var d = dx1 * dy2 - dy1 * dx2;
    return [(dx2 * (x1 * y2 - y1 * x2) - dx1 * (x3 * y4 - y3 * x4)) / d,
            (dy2 * (x1 * y2 - y1 * x2) - dy1 * (x3 * y4 - y3 * x4)) / d];
};

/**************************************
 *  Generic GUI component from which
 * other elements inherit
 * 
 * The default object is basically a
 * button
***************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};
}
/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/*********************************************************************
 * GUI Slider to vary parameters
**********************************************************************/
{
var Slider = function(x, y, w, minValue, maxValue, nowValue, name, colour) {
    GUI_Component.call(this, x, y, w, 12, name);
    
    this.x2 = x + w;
    this.ballR = 12;
    this.ballD = this.ballR * 2;
    this.color = colour || PINK;
    
    this.min = minValue;
    this.max = maxValue;
    this.val = nowValue === undefined ? minValue : nowValue;
    this.setValue(this.val);
    
    this.held = false;
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(TEXTCOL);
        textFont(sansFont);
        textAlign(CENTER, BASELINE);
        text(this.name + " = " + this.val / 100,  this.x + this.w / 2, this.y - 15);
    }
    
    strokeWeight(2);
    stroke(this.color);
    line(this.x, this.y, this.x2, this.y);

    strokeWeight(1);
    stroke(255);
    fill(GREY);
    
    var d = this.ballR;
    var x = this.bx;
    var y = this.y;
    quad(x, y - d, x + d, y, x, y + d, x - d, y);

};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max));
        this.trigger();
        return true;
    }
};

Slider.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
};
}
/**************************************
 *      Toolbar
 *  Contains other GUI elements
***************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, updateF) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    var button = new Button(x, y, w, h, name, updateF);
    
    this.buttons.push(button);
    this.components.push(button);
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = name ? 28 : 10;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    var slider = new Slider(x, y, w, minX, maxX, nowX, name, updateF);
    
    this.sliders.push(slider);
    this.components.push(slider);
    this.h += h + 16;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.buttons.push(button);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].mouseDragged()) {
            return true;
        }
    }
};
}
/*********************************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
*********************************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.selected = false;
};

DraggablePoint.prototype.draw = function() {
    if (this.selected || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

/*********************************************************
*   Curve between by two points at (x1, y1) and (x2, y2),
*    with a control point at (x3, y3)
*********************************************************/
{
var Curve = function(x1, y1, x2, y2, x3, y3) {
    this.p1 = new DraggablePoint(x1, y1);
    this.p2 = new DraggablePoint(x2, y2);
    this.p3 = new DraggablePoint(x3, y3);
    this.controlPoints = [this.p1, this.p2, this.p3];
    this.selected = false;
    
    this.update();
};

Curve.prototype.getPoints = function(p) {
    var x1 = lerp(this.p3.x, this.p1.x, p);
    var y1 = lerp(this.p3.y, this.p1.y, p);
    var x2 = lerp(this.p2.x, this.p3.x, p);
    var y2 = lerp(this.p2.y, this.p3.y, p);
    var x3 = lerp(x2, x1, p);
    var y3 = lerp(y2, y1, p);
    
    return [
        { x : x1, y: y1 },
        { x : x2, y: y2 },
        { x : x3, y: y3 },
    ];
};

Curve.prototype.update = function() {
    var t = toolbar.sliders[0].val / 100;
    var s = toolbar.sliders[1].val / 100;
    
    var coords = this.getPoints(t);
    this.r1 = coords[0];
    this.q1 = coords[1];
    this.pp1 = coords[2];
    
    var coords = this.getPoints(s);
    this.r2 = coords[0];
    this.q2 = coords[1];
    this.pp2 = coords[2];
    
    if (t !== s) {
        this.pp3 = findIntersection(
            this.q1.x, this.q1.y, this.r1.x, this.r1.y,
            this.q2.x, this.q2.y, this.r2.x, this.r2.y
        );
    } else {
        this.pp3 = [
            lerp(this.r1.x, this.q1.x, 1 - t),
            lerp(this.r1.y, this.q1.y, 1 - t)
        ];
    }
};

Curve.prototype.draw = function() {
    if (showing.Parabola) {
        this.drawTrueParabola();   
    }
    
    // Lines to control points
    if (showing['Control arms']) {
        strokeWeight(2);
        stroke(BLUE);
        line(this.p1.x, this.p1.y, this.p3.x, this.p3.y);
        line(this.p2.x, this.p2.y, this.p3.x, this.p3.y);
    }
    
    if (showing['Control points']) {
        this.drawControlPoints();
    }
    
    if (showing.Strings) {
        this.drawStrings();
    }
    
    if (showing.Intersection) {
        this.drawIntersection();
    }
    
    /*
    // Points touching the parabola
    stroke(255);
    fill(GREY);
    strokeWeight(1);
    ellipse(this.pp1.x, this.pp1.y, pointR - 2, pointR - 2);
    ellipse(this.pp2.x, this.pp2.y, pointR - 2, pointR - 2);
    */
};

Curve.prototype.drawStrings = function() {
    strokeWeight(2);
    stroke(PINK);
    line(this.r1.x, this.r1.y, this.q1.x, this.q1.y);
    stroke(PURPLE);
    line(this.r2.x, this.r2.y, this.q2.x, this.q2.y);
    
    var d = 5;
    strokeWeight(1);
    stroke(255);
    fill(GREY);
    var points = [this.r1, this.r2, this.q1, this.q2];
    for (var i = 0; i < points.length; i++) {
        var p = points[i];
        quad(p.x, p.y - d, p.x + d, p.y, 
             p.x, p.y + d, p.x - d, p.y);
        
    }
    
    if (showing.Labels) {
        textFont(serifFont, 18);
        textAlign(CENTER, CENTER);
        fill(PINK);
        this.drawLabel("R", this.r1, this.q1);
        this.drawLabel("Q", this.q1, this.r1);
        fill(PURPLE);
        this.drawLabel("R'",this.r2, this.q2);
        this.drawLabel("Q'",this.q2, this.r2);   
    }
};

Curve.prototype.drawTrueParabola = function() {
    var x1 = this.p1.x;
    var y1 = this.p1.y;
    var x2 = this.p2.x;
    var y2 = this.p2.y;
    var x3 = this.p3.x;
    var y3 = this.p3.y;
    
    strokeWeight(4);
    stroke(GREEN);
    noFill();
    
    beginShape();
    for (var i = 0; i <= RESOLUTION; i++) {
        var p = i / RESOLUTION;
        var q = 1 - p;
        var rx = p * x1 + q * x3;
        var ry = p * y1 + q * y3;
        var sx = p * x3 + q * x2;
        var sy = p * y3 + q * y2;
        vertex(p * rx + q * sx, p * ry + q * sy);
    }
    endShape();
};

Curve.prototype.drawControlPoints = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        this.controlPoints[i].draw();
    }
    
    if (showing.Labels) {
        textFont(serifFont, 18);
        textAlign(CENTER, CENTER);
        
        var x = (this.p1.x + this.p2.x) / 2;
        var y = (this.p1.y + this.p2.y) / 2;
        
        fill(ORANGE);
        this.drawLabel("C", this.p1, this.p3);
        this.drawLabel("A", this.p2, this.p3);
        this.drawLabel("B", this.p3.x, this.p3.y, x, y);
    }
};

Curve.prototype.drawIntersection = function() {
    fill(GREEN);
    ellipse(this.pp3[0], this.pp3[1], 10, 10);
    
    if (showing.Labels) {
        fill(GREEN);
        this.drawLabel("P", this.pp3[0], this.pp3[1],
                      (this.r2.x + this.q1.x) / 2,
                      (this.r2.y + this.q1.y) / 2);            
    }

    /*
    var angle = atan2(this.r1.y - this.q1.y, this.r1.x - this.q1.x);
    var px = this.pp1.x - sin(angle);
    var py = this.pp1.y + cos(angle);
    this.drawLabel("P", this.pp1.x, this.pp1.y, px, py);
    */
};

// Can pass in two points or four coordinates
Curve.prototype.drawLabel = function(name, x1, y1, x2, y2) {
    if (!x2) {
        var p1 = x1;
        var p2 = y1;
        x1 = p1.x;
        y1 = p1.y;
        x2 = p2.x;
        y2 = p2.y;
    }
    
    var dx = x1 - x2;
    var dy = y1 - y2;
    var d = sqrt(dx * dx + dy * dy);
    dx /= d;
    dy /= d;
    
    text(name, x1 + dx * 15, y1 + dy * 15);
};

Curve.prototype.mousePressed = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseOver()) {
            this.selected = this.controlPoints[i];
            this.selected.selected = true;
        }
    }
};

Curve.prototype.mouseReleased = function() {
    if (this.selected) {
        this.selected.selected = false;
        this.selected = false;
    }
};

Curve.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.x += mouseX - pmouseX;
        this.selected.y += mouseY - pmouseY;
        this.update();
    }
};
}
/*********************************************
 * Creation of objects
**********************************************/

toolbar = new Toolbar(width * 0.01, width * 0.01, toolbarWidth);
toolbar.addSlider(0, 100, 25, "t", PINK);
toolbar.addSlider(0, 100, 60, "s", PURPLE);
//toolbar.addOptions(showing);

var myCurve = new Curve(
    width * 0.85, height / 8,
    width * 0.85, height * 7 / 8,
    width * 0.25, height / 2);

/*********************************************************************
 *  Draw functions
*********************************************************************/

var colorText = function(txtArr, x, y) {
    for (var i = 0; i < txtArr.length; i++) {
        fill(txtArr[i][1]);
        var txt = txtArr[i][0];
        text(txt, x, y);
        x += textWidth(txt);
    }
};

var drawEquation = function() {
    var border = width * 0.01;
    var tx = border + 8;
    var tdy = 30;
    var equationH = tdy * 6 + 4;
    var equationW = 270;
    var ty = height - equationH - border + 24;
    
    noStroke();
    fill(TOOLBAR);
    rect(width * 0.01, height - equationH - border, equationW, equationH, 8);
    
    textFont(serifFont);
    textAlign(LEFT, BASELINE);
    
    var t = toolbar.sliders[0].val / 100;
    var s = toolbar.sliders[1].val / 100;
    var colours1 = [PINK, PINK, PURPLE, PURPLE, GREEN, GREEN];
    var colours2 = [PINK, PINK, PURPLE, PURPLE, PURPLE, PINK];
    var colours3 = [ORANGE, ORANGE, ORANGE, ORANGE, PINK, PURPLE];
    var colours4 = [PINK, PINK, PURPLE, PURPLE, PURPLE, PINK];
    var labels = ["Q", "R", "Q'", "R'", "P", "P"];
    var p1 = ["A", "B", "A", "B", "R", "R'"];
    var p2 = ["B", "C", "B", "C", "Q", "Q'"];
    var p = [t, t, s, s, s, t];
    
    for (var i = 0 ;i < 6; i++){
        colorText([
            [labels[i], colours1[i]],
            [" = ", GREY],
            ["(1 - " + p[i] + ")(", colours2[i]],
            [p1[i], colours3[i]],
            [")", colours2[i]],
            [" + ", GREY],
            [p[i] + "(", colours4[i]],
            [p2[i], colours3[i]],
            [")", colours4[i]],
        ], tx, ty);
        ty += tdy;
    }
};

/*********************************************************************
 * Main loop
*********************************************************************/

draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    toolbar.draw();
    if (showing.Equation) {
        drawEquation();
    }
};

/*********************************************************************
 * Event handling
*********************************************************************/

mousePressed = function() {
    myCurve.mousePressed();
    toolbar.mousePressed();
};

mouseReleased = function() {
    myCurve.mouseReleased();
    toolbar.mouseReleased();
};

mouseDragged = function() {
    myCurve.mouseDragged();
    toolbar.mouseDragged();
    myCurve.update();
};