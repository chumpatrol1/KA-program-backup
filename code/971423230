/*********************************************************
    Draws a line object of nodes and edges.
    You can rotate it about the centre of the screen
    using the arrow keys or by holding the mouse down.
    
    Surface from:
    www.khanacademy.org/math/calculus/multivariable-calculus/v/double-integrals-2
    
*********************************************************/

// Equation of the surface, f(x,y)
//var surface = function(x, y) { return x * y * y; };
var surface = function(x, y) {
    var z = 0.5 * sin(x * 90) + cos(180 * y) + 1;
    return z;
};

var rangeX = [0, 2.2];
var rangeY = [0, 1];
var resolution = 16;

var x, y, z;
var axisX = -100;
var axisY = 100;
var axisZ = 100;
var axisWidth = 200;
var axisHeight = 200;
var surfaceColor = color(5,5,150);

var createSurface= function() {
    var maxX = rangeX[1] - rangeX[0];
    var maxY = rangeY[1] - rangeY[0];
    var dx = maxX / resolution;
    var dy = maxY / resolution;
    var scaleX = axisWidth / maxX;
    var scaleY = axisHeight / maxY;
    
    var nodes = [];
    for (y=rangeY[0]; y<=rangeY[1]; y+=dy) {
        for (x=rangeX[0]; x<=rangeX[1]; x+=dx) {
            nodes.push([axisX + scaleX * x,
                        axisY - scaleY * y,
                        axisZ - scaleX * surface(x, y)]);
        }
    }
    
    var edges = [];
    for (x=0; x<resolution; x++) {        
        for (y=0; y<=resolution; y++) {
            edges.push([x+(resolution+1)*y, x+(resolution+1)*y+1]);
            edges.push([y+(resolution+1)*x, y+(resolution+1)*(x+1)]);
        }
    }

    var grid = {nodes: nodes,
                edges: edges,
                stroke: surfaceColor,
                stroke_width: 1
    };
    return grid;
};

var grid = createSurface();

// Coordinates for object
var axis = {
    stroke: color(5,5,5),
    stroke_width: 2,
    nodes: [[axisX,     axisY,     axisZ],
            [axisX+axisWidth, axisY,     axisZ],
            [axisX,     axisY-axisWidth, axisZ],
            [axisX,     axisY,     axisZ-axisWidth],
            [axisX+axisWidth, axisY-axisWidth,     axisZ]],
    edges: [[0,1],[0,2],[0,3]]
};

var my_objects = [axis, grid];

var rotateAngle = 2;
var currentX = false;
var currentY = false;

var rotateY3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var x;
    var y;
    var z;
    
    for (var obj in my_objects) {
            var nodes = my_objects[obj].nodes;
        for (var i = 0; i < nodes.length; i+=1) {
            x = nodes[i][0];
            y = nodes[i][1];
            z = nodes[i][2];
            nodes[i] = [ct*x + st*z, y, -st*x + ct*z];
        }
    }
};

var rotateX3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var x;
    var y;
    var z;
    
    for (var obj in my_objects) {
        var nodes = my_objects[obj].nodes;
        for (var i = 0; i < nodes.length; i+=1) {
            x = nodes[i][0];
            y = nodes[i][1];
            z = nodes[i][2];
            nodes[i] = [x, ct*y - st*z, st*y + ct*z];
        }
    }
};

var drawFloor = function() {
    stroke(0, 0, 0);
    var x1 = axis.nodes[0][0];
    var y1 = axis.nodes[0][1];
    
    var x2 = axis.nodes[1][0];
    var y2 = axis.nodes[1][1];
    
    var x3 = axis.nodes[4][0];
    var y3 = axis.nodes[4][1];
    
    var x4 = axis.nodes[2][0];
    var y4 = axis.nodes[2][1];
    quad(x1, y1, x2, y2, x3, y3, x4, y4);
};

fill(214, 214, 214);
var draw = function() {
    var i;
    var node1;
    var node2;
    
    background(255, 255, 255);
    drawFloor();
    
    for (var obj in my_objects) {
        stroke(my_objects[obj].stroke);
        strokeWeight(my_objects[obj].stroke_width);
        var edges = my_objects[obj].edges;
        var nodes = my_objects[obj].nodes;
        
        for (i = 0; i < edges.length; i+=1) {
            node1 = nodes[edges[i][0]];
            node2 = nodes[edges[i][1]];
            line(node1[0], node1[1], node2[0], node2[1]);
        }
    }
    
    // Rotate with mouse
    if (mouseIsPressed) {
        if (currentX !== false) {
            rotateY3D(-(currentX - mouseX)*PI/10);
            rotateX3D((currentY - mouseY)*PI/10);
        }
        currentX = mouseX;
        currentY = mouseY;
    } else {
        currentX = false;
    }  
};

var keyPressed = function() { 
    if (keyCode === LEFT) { rotateY3D(rotateAngle); }
    else if (keyCode === RIGHT) { rotateY3D(-rotateAngle); }
    else if (keyCode === UP) { rotateX3D(-rotateAngle); }
    else if (keyCode === DOWN) { rotateX3D(rotateAngle); }
};

// Move to centre of screen and tilt
translate(200, 200);  
rotateX3D(250);
rotateY3D(40);