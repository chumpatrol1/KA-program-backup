/**********************************
 * Based on Slam: http://store.steampowered.com/app/377940
 * 
 * 22/5/15 {
 *  Create Level object
 *  Draw walls and floor
 *  Draw goal
 * }
 * 23/5/15 {
 *  Colour scheme (important!)
 *  Draw toolbar
 *  Draw ball
 * }
 * 25/5/15 {
 *  Restructure how the grid is stored
 *  Add tilt logic
 *  Animate ball movement
 * }
 * 26/5/15 {
 *  Add test for win state
 *  Create Game object to store moves and tilt direction
 *  Draw arrows in direction of tilt
 *  Prevent board tilting while ball in motion
 *  Multiple levels
 *  Multiple sliding objects including obstacles
 *  Restructure how the grid is stored again
 * }
 * 27/5/15 {
 *  Use images to draw map
 * }
 * 
 * TODO:
 *   Fix: showing arrows
 *   Fix: ordering of images 
 *   Show Par
 *   Win screen
 *   Tutorial dialogues
 *   Arrow buttons
 *   Restart button
 * 
 * Lava / hole (destroys ball and obstacles)
 * Buttons (weights open doors)
 * Teleporters
 * Multiple balls and goals
***********************************/

var B0 = color(180, 202, 255);
var B1 = color(120, 135, 170);
var B2 = color(79, 98, 142);
var B3 = color(46, 65, 114);
var B4 = color(22, 41, 85);
var B5 = color(6, 21, 57);

var O1 = color(255, 227, 170);
var O2 = color(212, 177, 106);
var O3 = color(170, 132, 57);
var O4 = color(128, 92, 21);
var O5 = color(85, 57, 0);

var BACKGROUND = B5;
var WALL_FILL = O3;
var WALL_STROKE = O5;
var FLOOR = O1;
var GOAL = B3;
var BALL = B2;
var BALL_HIGHLIGHT = B1;

/*****************************
  Key to the maps:
    . Empty
    O Ball
    X Goal
    * Wall
******************************/

var levels = [
        {
        par: 5,
        map: [
            "*******",
            "*.....*",
            "*.***.*",
            "*.*X*.*",
            "*O*...*",
            "*******"
        ]
    },{
        par: 6,
        map: [
            "***********",
            "*O.**...*.**",
            "*.........X*",
            "*......*..**",
            "*.**......*",
            "*.....*...*",
            "***********"
        ]
    },
    {
        par: 8,
        map: [
            "*********",
            "*O....*X*",
            "*.*.*...*",
            "*...*...*",
            "**....*.*",
            "*....*..*",
            "**.**...*",
            "*......**",
            "******** "
        ]
    },
    {
        par: 6,
        map: [
            "******",
            "*O@..*",
            "****.*",
            "   *.*",
            "  **.*",
            "  *.X*",
            "  ****"
        ]
    },
    {
        par: 6,
        map: [
            "********",
            "*@O....*",
            "***....*",
            "  *....*",
            "  ***.**",
            "    *X*",
            "    ***"
        ]
    },
    {
        par: 6,
        map: [
            "*******",
            "*.!..X*",
            "*.....*",
            "*....@*",
            "**...O*",
            "*******"
        ]
    }
];
 
/**********************************************
 *      Tile Object
 * Tiles are either walls, floors or empty
***********************************************/

var Tile = function(x, y) {
    this.x = x;
    this.y = y;
    this.blocked = true;
};

Tile.prototype.draw = function(d) {
};

var Wall = function(x, y) {
    Tile.call(this, x, y);
    this.img = getImage("cute/StoneBlockTall");
};
Wall.prototype = Object.create(Tile.prototype);

Wall.prototype.draw = function(size) {
    fill(WALL_FILL);
    strokeWeight(2);
    stroke(WALL_STROKE);
    //rect(this.x * size, this.y * size, size, size, size * 0.25);
    image(this.img, this.x * size, (this.y - 0.5) * size, size, size * 2);
};

var Floor = function(x, y, item) {
    Tile.call(this, x, y);
    this.item = item;
    this.element = false;
    this.blocked = false;
    this.img = getImage("cute/DirtBlock");
    this.star = getImage("cute/Selector");
};
Floor.prototype = Object.create(Tile.prototype);

Floor.prototype.draw = function(size) {
    fill(FLOOR);
    noStroke();
    //rect(this.x * size - 5, this.y * size - 5, size + 10, size + 10);
    
    if (this.item === 'goal') {
        //this.drawGoal(size);
        image(this.star, this.x * size, (this.y - 1) * size + 2, size, size * 2);
    } else if (this.item === 'hole') {
        // Hole is nothing
    } else{    
        image(this.img, this.x * size, (this.y - 0.5) * size, size, size * 2);
    }
    
    this.drawElements(size);
};

Floor.prototype.drawElements = function(size) {
    if (this.element) {
        this.element.draw(size);
    }
};

Floor.prototype.drawGoal = function(size) {
    var cx = (this.x + 0.5) * size;
    //var cy = (this.y + 0.5 + sin(frameCount * 3) * 0.2) * d;
    var cy = (this.y + 0.5) * size;
    var r1 = size * 0.32;
    
    stroke(GOAL);
    strokeWeight(3);
    pushMatrix();
    translate(cx, cy);
    rotate(frameCount);
    for (var i = 0; i < 12; i++) {
        var angle = 360 * i / 10 + frameCount * 3;
        point(r1 * cos(angle), r1 * sin(angle) * 0.5);
    }
    popMatrix();
};

/**********************************************
 *      Ball Object
 * A ball that moves when the board is tilted.
 * Ball can be obstacles, which means they do 
 * no enter goals.
***********************************************/

var Ball = function(x, y, tile) {
    this.x = x;
    this.y = y;
    this.drawX = x;
    this.drawY = y;
    this.tile = tile;
    
    this.img = getImage("creatures/Winston");
    this.img2 = getImage("avatars/spunky-sam");
    this.type = 'ball';
    this.passable = false;
    this.speed = 0;
    this.acceleration = 0.008;
};

Ball.prototype.draw = function(size) {
    noStroke();
    if (this.obstacle) {
        //fill(80);
        image(this.img2, (this.drawX + 0.1) * size, this.drawY* size, size * 0.8, size * 0.8);
    } else {
        //fill(BALL);
        fill(255, 255, 0);
        ellipse((this.drawX + 0.5) * size + 1, (this.drawY + 0.4) * size, size * 0.8, size * 0.8);
        image(this.img, (this.drawX + 0.1) * size, this.drawY* size, size * 0.8, size * 0.8);
    }
    /*
    ellipse((this.drawX + 0.5) * size, (this.drawY + 0.5)* size, size * 0.7, size * 0.7);
    fill(255, 255, 255, 160);
    ellipse((this.drawX + 0.4) * size, (this.drawY + 0.4)* size, size * 0.2, size * 0.2);
    */
};

Ball.prototype.moveX = function() {
    this.speed += this.acceleration;
    
    if (this.drawX + this.speed / 2 < this.x) {
        this.drawX += this.speed;
    } else if (this.drawX - this.speed / 2 > this.x) {
        this.drawX -= this.speed;
    } else {
        this.drawX = this.x;
        this.move = false;
    }
};

Ball.prototype.moveY = function() {
    this.speed += this.acceleration;
    
    if (this.drawY + this.speed / 2 < this.y) {
        this.drawY += this.speed;
    } else if (this.drawY - this.speed / 2 > this.y) {
        this.drawY -= this.speed;
    } else {
        this.drawY = this.y;
        this.move = false;
    }
};

Ball.prototype.findDestination = function(grid, dx, dy) {
    if (!this.moved) {
        this.moved = true;
        
        // Move ball as far as it can go in the given direction
        while (true) {
            var tile = grid[this.y + dy][this.x + dx];
            var element = tile.element;
            
            if (tile.blocked) {
                break;
            } else if (element && element.type === 'ball') {
                // Another ball in the way, so check whether that one needs to be moved
                element.findDestination(grid, dx, dy);
                this.x = element.x - dx;
                this.y = element.y - dy;
                break;
            } else {
                this.x += dx;
                this.y += dy;
            }
        }
        
        // Move the ball to the new tile on the grid
        this.tile.element = false;
        var newTile = grid[this.y][this.x];
        newTile.element = this;
        this.tile = newTile;
        
        // If the new position is not the same as the old, 
        // then we will need to move the ball
        if (this.x !== this.drawX) {
            this.move = this.moveX;
        } else if (this.y !== this.drawY) {
            this.move = this.moveY;
        }
    }
};

/****************************************
 *      Level Object
 * Keeping track of where things are.
****************************************/

var Level = function(x, y, params) {
    this.x = x;
    this.y = y;
    this.width = params.map[0].length;
    this.height = params.map.length;
    this.init(params.map);
};

Level.prototype.init = function(grid) {
    // Convert the map into an object
    
    this.grid = [];
    this.floor = [];
    this.walls = [];
    this.moveableElements = [];
    
    var tile;
    for (var y = 0; y < grid.length; y++) {
        var row = grid[y];
        var newRow = [];
        
        for (var x = 0; x < row.length; x++) {
            switch (row[x]) {
                case ' ':
                    tile = new Tile(x, y);
                    break;
                case '*':
                    tile = new Wall(x, y);
                    this.walls.push(tile);
                    break;
                case '.':
                    tile = new Floor(x, y);
                    this.floor.push(tile);
                    break;
                case 'X':
                    tile = new Floor(x, y, 'goal');
                    this.floor.push(tile);
                    break;
                case '!':
                    tile = new Floor(x, y, 'hole');
                    this.floor.push(tile);
                    break;
                case 'O':
                case '@':
                    tile = new Floor(x, y);
                    this.floor.push(tile);
                    
                    var ball = new Ball(tile.x, tile.y, tile);
                    tile.element = ball;
                    
                    if (row[x] === '@') { ball.obstacle = true; }
                    
                    this.moveableElements.push(ball);
                    break;
            }
            newRow.push(tile);
        }
        this.grid.push(newRow);
    }
};

Level.prototype.draw = function(size) {
    pushMatrix();
    translate((width + this.x - this.width * size) / 2, (height + this.y - this.height * size) / 2);
    
    for (var y = 0; y < this.grid.length; y++) {
        var row = this.grid[y];
        for (var x = 0; x < row.length; x++) {
            row[x].draw(size);
        }
    }
    
    popMatrix();
};

Level.prototype.tilt = function(direction) {
    // Tilt board in the direction
    // 0 - 3 represents LEFT, UP, RIGHT, DOWN
    
    // Loop through this.balls
    // Find where they should move to
    
    var deltas = [[-1, 0], [0, -1], [1, 0], [0, 1]];
    var dx = deltas[direction][0];
    var dy = deltas[direction][1];
    
    this.moving = true;
    
    // None of the balls have moved so far this turn
    for (var i = 0; i < this.moveableElements.length; i++) {
        this.moveableElements[i].moved = false;
        this.moveableElements[i].speed = 0;
    }

    // Find where each ball can move
    for (var i = 0; i < this.moveableElements.length; i++) {
        var ball = this.moveableElements[i];
        ball.findDestination(this.grid, dx, dy) ;
    }

};

Level.prototype.update = function() {
    this.moving = false;
    
    for (var i = 0; i < this.moveableElements.length; i++) {
        var ball = this.moveableElements[i];
        if (ball.move) {
            ball.move();
            this.moving = true;
            if (!ball.obstacle && this.testForGoal(ball)) {
                this.win = true;
            }
        }
    }
};

Level.prototype.testForGoal = function(ball) {
    var x = ball.drawX;
    var y = ball.drawY;
    if (x === round(x) && y === round(y)) {
        var tile = this.grid[y][x];
        return tile.goal;
    }
};

/*****************************
 *      Game object
******************************/

var Game = function(n) {
    this.levelNumber = n || 0;
    this.toolbarHeight = 22;
    this.startLevel(this.levelNumber);
};

Game.prototype.startLevel = function(n) {
    var levelData = levels[this.levelNumber];
    this.level = new Level(0, this.toolbarHeight, levelData);
    this.win = false;
    
    this.moveCount = 0;
    
    // Direction that the board is tilted
    // -1 means it is not tilted at all
    // Other values are 0 - 3 for LEFT, UP, RIGHT, DOWN
    this.direction = -1;
};

Game.prototype.nextLevel = function(n) {
    if (this.levelNumber < levels.length - 1) {
        this.startLevel(++this.levelNumber);
    }
};

Game.prototype.draw = function() {
    background(BACKGROUND);
    
    // Draw arrow
    if (this.direction !== -1) {
        fill(200, 0, 0);
        noStroke();
        pushMatrix();
        translate(200, 200);
        rotate(this.direction * 90);
        triangle(-180, 0, -160, 10, -160, -10);
        popMatrix();
    }
    
    this.level.draw(36);
    
    this.drawToolbar();
};

Game.prototype.drawToolbar = function() {
    var h = this.toolbarHeight;
    
    fill(B1);
    strokeWeight(1);
    stroke(240);
    rect(-1, -1, width + 2, h);
    
    textAlign(LEFT, CENTER);
    textSize(14);
    fill(255);
    text("Level: " + (this.levelNumber + 1), 10, h / 2);
    text("Moves: " + this.moveCount, 120, h / 2);
};

Game.prototype.update = function() {
    if (!this.win && this.level.moving) {
        this.level.update();
        this.win = this.level.win;
    }
    
    if (this.win) {
        this.nextLevel();
    }
};

Game.prototype.keyPressed = function() {
    var directions = [LEFT, UP, RIGHT, DOWN];
    
    // Don't allow tilting while the ball is still rolling
    if (this.level.moving) { return; }
    
    for (var i = 0; i < directions.length; i++) {
        if (i !== this.direction && keyCode === directions[i]) {
            this.direction = i;
            this.moveCount++;
            this.level.tilt(i);
            break;
        }
    }
};

var game = new Game(5);

/*****************************
 *      Main loop
******************************/

draw = function() {
    game.draw();
    game.update();
};

/*****************************
 *  Event handling
******************************/
 keyPressed = function() {
    game.keyPressed();
 };
