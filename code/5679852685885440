// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var GREEN_ALPHA = color(28, 173, 123, 128);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);

var pointR = 10;
var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 200;
var RESOLUTION = 40;

var toolbarX = width * 0.01;
var toolbarWidth = 120;
var toolbarHeight = 155;

var showing = {
    'Control points': true,
    'Control arms': true,
    Curve: true,
    Fill: true
};

var draggingPoint = false;
var myCurve;

/***************************************************************
 * GUI Slider to vary parameters
****************************************************************/

var Slider = function(x, y, width, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;

    this.draw = function() {
        noStroke();
        fill(180);
        rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);
    
        strokeWeight(1);
        stroke(0, 0, 0, 120);
        fill(180, 180, 250);
        ellipse(this.bx, this.y, this.ballD, this.ballD);
        noStroke();
        fill(255, 255, 255, 150);
        ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);

    };
    
    this.selected = function() {
        this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + round((x - this.x) * this.scale);
            return true;
        }
    };
  
    // This is used if you want to update the value in a way other
    // than using the slider (but want the slider to update).
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

/********************************************************
 *  GUI Button
*********************************************************/

var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(220, 220, 220, 250);
    this.highlightCol = color(250, 50, 50, 250);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
};

Button.prototype.mouseover = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseover() || this.selected) {
        fill(this.defaultCol);
    } else {
        noFill();
    }
    strokeWeight(1);
    stroke(200);
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    fill(10);
    textSize(15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    noStroke();
    if (this.mouseover() || this.selected) {
        fill(this.defaultCol);
    } else {
        noFill();
    }
    rect(this.x, this.y, this.w, this.h + 1, 5);
    
    fill(10);
    textSize(13);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.x + 4, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.x + 4, this.y + 3, this.x + this.box + 4, this.y + 3 + this.box);
        line(this.x + this.box + 5, this.y + 3, this.x + 5, this.y + 3 + this.box);
    }
};

/*********************************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
*********************************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (draggingPoint === this || this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

/*********************************************************
 *  Project mouseX, mouseY onto a line from p1 to p2
*********************************************************/

var projectMouseOntoLine = function(p1, p2) {
    // Project (mouseX, mouseY) onto line
    var lx = p1.x - p2.x;
    var ly = p1.y - p2.y;
    var mx = mouseX - p2.x;
    var my = mouseY - p2.y;
    
    var w = (mx * lx + my * ly ) / (lx * lx + ly * ly);
    if (w > 0 && w < 1) {
        var x = p1.x * w + p2.x * (1 - w);
        var y = p1.y * w + p2.y * (1 - w);
        return [x, y];
    }
    return false;
};

/*********************************************************
 *      Curve
 * A collection of points, joined by control arms
 * A curve is drawn between the points
*********************************************************/

var Curve = function(points) {
    this.controlPoints = [];
    this.selectedPoint = false;
    this.resolution = 0;
    this.addPointCoord = false;
    
    // Add control points
    for (var i = 0; i < points.length; i++) {
        var p = new DraggablePoint(points[i][0], points[i][1]);
        this.controlPoints.push(p);
    }
    
    this.draw = function() {
        strokeWeight(4);
        stroke(GREEN);
        
        // Lines to control points
        if (showing['Control arms']) {
            this.drawControlArms();
        }
        
        if (showing.Curve) {
            this.drawCurve();   
        }
       
        if (showing['Control points']) {
            this.drawControlPoints();
        }
        
        var d = 6;
        if (this.addPointCoord) {
            /*
            strokeWeight(3);
            stroke(GREY);
            line(this.addPointCoord[0], this.addPointCoord[1] - 6,
                 this.addPointCoord[0], this.addPointCoord[1] + 6);
            line(this.addPointCoord[0] - 6, this.addPointCoord[1],
                 this.addPointCoord[0] + 6, this.addPointCoord[1]);
            */
            strokeWeight(2);
            stroke(ORANGE);
            noFill();
            ellipse(this.addPointCoord[0], this.addPointCoord[1], pointR, pointR);
        }
    };
    
    this.drawControlArms = function() {
        stroke(GREY);
        strokeWeight(1);
        
        var n = this.controlPoints.length;
        for (var i = 0; i < n; i++) {
            var p1 = this.controlPoints[i];
            var p2 = this.controlPoints[(i + 1) % n];
            line(p1.x, p1.y, p2.x, p2.y);
        }
    };
    
    this.drawControlPoints = function() {
        for (var i = 0; i < this.controlPoints.length; i++) {
            this.controlPoints[i].draw();
        }
    };
    
    this.drawCurve = function() {
        stroke(GREEN);
        strokeWeight(4);
        noFill();

        var res = pow(2, this.resolution);
        var n = this.controlPoints.length;

        if (showing.Fill) {
            fill(GREEN_ALPHA);
        } else {
            noFill();
        }

        beginShape();
        for (var i = 0; i < n; i++) {
            var p1 = this.controlPoints[(i + n - 1) % n];
            var p2 = this.controlPoints[i % n];
            var p3 = this.controlPoints[(i + 1) % n];
            
            for (var t = 0; t <= res; t++) {
                var a = t / res;
                var b = 1 - a;
                var a2 = a * a * 0.5;
                var b2 = b * b * 0.5;
                var c = 2 * a * b + a2 + b2;
                var x = b2 * p1.x + c * p2.x + a2 * p3.x;
                var y = b2 * p1.y + c * p2.y + a2 * p3.y;
                vertex(x, y);
            }
        }
        endShape();
    };
    
    this.drawCurvePoints = function() {
        for (var i = 0; i < this.curvePoints.length; i++) {
            this.curvePoints[i].draw();
        }
    };

    // Add a new control point after the selected point
    // It is the average of the selected point and the next one
    this.addPoint = function() {
        if (this.selectedPoint !== false) {
            var i = this.selectedPoint;
            var p1 = this.controlPoints[i];
            var p2 = this.controlPoints[(i + 1) % this.controlPoints.length];
            var x = (p1.x + p2.x) * 0.5;
            var y = (p1.y + p2.y) * 0.5;
            var newPoint = new DraggablePoint(x, y);
            this.controlPoints.splice(i + 1, 0, newPoint);
            this.reset();
        }
    };
    
    this.addPointAt = function(coord) {
        var newPoint = new DraggablePoint(coord[0], coord[1]);
        this.controlPoints.splice(coord[2] + 1, 0, newPoint);
    };
    
    this.deletePoint = function() {
        if (this.selectedPoint !== false && this.controlPoints.length > 3) {
            this.controlPoints.splice(this.selectedPoint, 1);
            this.reset();
        }
    };
    
    // Select a point for editing
    this.mouseReleased = function() {
        draggingPoint = false;
        
        for (var i = 0; i < this.controlPoints.length; i++) {
            if (this.controlPoints[i].mouseover()) {
                this.selectedPoint = i;
                this.controlPoints[i].selected = true;
            } else {
                this.controlPoints[i].selected = false;
            }
        }
        
        if (!draggingPoint && this.addPointCoord) {
            this.addPointAt(this.addPointCoord);
        }
    };
    
    // Select a point for dragging
    this.dragPoint = function() {
        for (var i = 0; i < this.controlPoints.length; i++) {
            if (this.controlPoints[i].mouseover()) {
                draggingPoint = i;
            }
        }
    };
    
    // Move a dragged point
    this.mouseDrag = function() {
        if (draggingPoint !== false) {
            var p = this.controlPoints[draggingPoint];
            p.x += mouseX - pmouseX;
            p.y += mouseY - pmouseY;
        }
    };
    
    // Check for mouseover a line
    this.mouseMove = function() {
        if (draggingPoint) { return; }
        
        this.addPointCoord = false;
        var n = this.controlPoints.length;

        for (var i = 0; i < n; i++) {
            var p1 = this.controlPoints[i];
            if (dist(mouseX, mouseY, p1.x, p1.y) <= CONTROL_POINT_SIZE) {
                return;
            }
        }

        for (var i = 0; i < n; i++) {
            var p1 = this.controlPoints[i];
            var p2 = this.controlPoints[(i + 1) % n];
            var d = projectMouseOntoLine(p1, p2);
            
            if (d) {
                var x = d[0];
                var y = d[1];
                if (dist(mouseX, mouseY, x, y) < 5) {
                    this.addPointCoord = [x, y, i];
                    break;
                }
            }
        }
    };
};

/********************************************************
 * Creation of objects
*********************************************************/

myCurve = new Curve([
    [width * 0.5, height * 0.3],
    [width * 0.8, height * 0.8],
    [width * 0.2, height * 0.8]
]);

var createButtons = function() {
    var buttons = [];
    var x = toolbarX + 8;
    var y = toolbarX + 50;
    var w = 102;
    var h = 15;

    // Functions to attach to buttons
    var subdivide = function() {
        if (myCurve.curvePoints.length < MAX_RESOLUTION) {
            myCurve.split();
            myCurve.average();   
        }
    };
    
    //var addPoint = function() { myCurve.addPoint(); };
    var deletePoint = function() { myCurve.deletePoint(); };
    
    //var resetCurve = function() { myCurve.reset(); };
    //buttons.push(new Button(x, y, w, h, "Add point", addPoint));
    //y += 25;
    buttons.push(new Button(x, y, w, h, "Delete point", deletePoint));
    y += 25;
    
    for (var opt in showing) {
        buttons.push(new CheckBox(x, y, w, h, opt));
        y += 20;
    }
    
    return buttons;
};

var buttons = createButtons();
var sliders = [new Slider(toolbarX + 19, toolbarX + 30, 80, 0, 5, 0)];

/********************************************************
 *  Draw functions
*********************************************************/

var drawGUI = function() {
    noStroke();
    fill(240, 240, 240, 200);
    rect(toolbarX, toolbarX, toolbarWidth, toolbarHeight, 8);
    
    textAlign(CENTER, CENTER);
    fill(10);
    var s = sliders[0];
    text("Resolution: " + s.val,  s.x + s.width / 2, s.y - 18);
    for (var i = 0; i < sliders.length; i++) {
        sliders[i].draw();
    }
    
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].draw();
    }
};

/********************************************************
 *  Main loop
*********************************************************/

draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    drawGUI();
};

/********************************************************
 *  Event handling
*********************************************************/

mousePressed = function() {
    myCurve.dragPoint();
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].selected();
    }
};

mouseReleased = function() {
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].held = false;
    }
    
    // Clicking a button won't affect the curve
    var buttonClicked = false;
    for (var b = 0; b < buttons.length; b++) {
        if (buttons[b].mouseover()) {
            buttons[b].click();
            buttonClicked = true;
        }
    }
    
    if (!buttonClicked) {
        myCurve.mouseReleased();   
    }
};

mouseMoved = function() {
    myCurve.mouseMove();
};

mouseDragged = function() {
    myCurve.mouseDrag();
    for (var s = 0; s < sliders.length; s++) {
        if (sliders[s].drag()) {
            myCurve.resolution = sliders[s].val;
        }
    }
};
