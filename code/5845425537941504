/***************************************************************
 * Dungeon exploring game (In progress)
 * 
 * Dynamic map generation based on:
 * http://gamedevelopment.tutsplus.com/tutorials/create-a-procedurally-generated-dungeon-cave-system--gamedev-10099
 * 
 * To do:
 *  Fix field of view
 *  Allow map to move independently of player
 *  Click to move
 *  Make working info button
 *  Add action button
 *  Add map button
 *  Add combat
***************************************************************/

var creatures = {
    "Leaf sprite": {
        image: getImage("avatars/leafers-seed"),
        height: 1,
        attack: 1,
        defense: 2,
        agility: 5,
        'hit point': 3
    },
    "Leaf nymph": {
        image: getImage("avatars/leafers-seedling"),
        height: 1.8,
        strength: 5
    }
};

var mode = 'game';
var action = 'Action';
//var mode = "map";

var FLOOR = color(180, 160, 160);
var WALL = color(100, 100, 120);
var PLAYER = getImage("cute/CharacterHornGirl");
var FLOOR_TILE = getImage("cute/DirtBlock");
var WALL_TILE = getImage("cute/StoneBlockTall");
var WALL_TILE2 = getImage("cute/StoneBlock");

imageMode(CORNER);

var ANIMATE_MOVE = 12;

var myMap = {
    points: [],
    rooms: [],
    tile: 8,
    width: 50,
    height: 50,
    minRoomtile: 3,
    maxRoomtile: 12
};

var Creature = function(name, x, y) {
    this.name = name;
    this.x = x;
    this.y = y;
    this.height = creatures[name].height;
    this.image = creatures[name].image;
};

Creature.prototype.draw = function(x, y, tile) {
    var a = sin(frameCount * 5) * 20;
    var size = tile * this.height;
    pushMatrix();
    translate(x + tile / 2, y + tile - size / 2);
    //rotate(a);
    image(this.image, -size/2, -size/2, size, size);
    popMatrix();
};

var Player = function(x, y) {
    this.name = "You";
    this.x = x;
    this.y = y;
    this.moveX = 0;
    this.moveY = 0;
    this.animateMove = 0;
    this.visited = {};
    
    this.draw = function(x, y, s) {
        var tile = s / PLAYER.width;
        var px = x;
        var py = y - 0.55;
        
        if (this.animateMove > 0) {
            this.animateMove--;
            var p = 1 - this.animateMove / ANIMATE_MOVE;
            px += p * this.moveX;
            py += p * this.moveY - abs(sin(p * 540)) * 0.1;
            
            if (this.animateMove === 0) {
                this.x += this.moveX;
                this.y += this.moveY;
                this.calculateVisible();
            }
        }
        image(PLAYER, px * s, py * s, s, PLAYER.height * tile);
    };
    
    // Move if there is an empty space
    this.move = function(dx, dy) {
        // Can't move if already animating a move
        if (this.animateMove) {
            return;
        }
        var newX = this.x + dx;
        var newY = this.y + dy;
        if (newX >= 0 && newY >= 0 && myMap.points[newY][newX] === 0) {
            this.moveX = dx;
            this.moveY = dy;
            this.animateMove = ANIMATE_MOVE;
        }
    };
    
    this.isVisible = function(dx, dy) {
        if (this.x + dx < 0 || this.y + dy < 0) {
            return;
        }
        
        var x = this.x + dx;
        var y = this.y + dy;
        
        if (dx > 0) {
            x--;
        } else if (dx < 0) {
            x++;
        }
        if (dy > 0) {
            y--;
        } else if (dy < 0) {
            y++;
        }
        
        if (this.visible[x + "," + y] && myMap.points[y][x] !== 1) {
            this.visible[(this.x + dx) + "," + (this.y + dy)] = true;
        }
    };
    
    // Calculate what the player can see
    this.calculateVisible = function() {
        this.visible = {};
        this.visible[this.x + "," + this.y] = true;
        var visualRange = 4;
        
        for (var d = 1; d <= visualRange; d++) {
            for (var dx = -d; dx <= d; dx++) {
                var x = this.x + dx;
                this.isVisible(dx, d);
                this.isVisible(dx, -d);
            }
            for (var dy = -d; dy <= d; dy++) {
                var y = this.y + dy;
                this.isVisible(d, dy);
                this.isVisible(-d, dy);
            }
        }


        for (var i in this.visible) {
            this.visited[i] = true;
        }

    };
    this.calculateVisible();
};

var Room = function(x, y, width, height) {
    this.x1 = x;
    this.y1 = y;
    this.x2 = x + width;
    this.y2 = y + height;
    this.width = width;
    this.height = height;
    this.cx = x + floor(width/2);
    this.cy = y + floor(height/2);
    
    this.carve = function() {
        for (var x = this.x1; x < this.x2; x++) {
            for (var y = this.y1; y < this.y2; y++) {
                myMap.points[y][x] = 0;
            }
        }
    };
    
    this.intersect = function(room) {
        return this.x1 <= room.x2 && this.x2>= room.x1 && 
               this.y1 <= room.y2 && this.y2>= room.y1;
    };
};

// Create a corridor in the direction, between p1 and p2, at p3
var addCorridor = function(dir, p1, p2, axis) {
    if (dir === 'horizontal') {
        var x1 = min(p1, p2);
        var x2 = max(p1, p2);
        for (var x = x1; x <= x2; x++) {
           myMap.points[axis][x] = 0;
        }
    } else {
        var y1 = min(p1, p2);
        var y2 = max(p1, p2);
        for (var y = y1; y <= y2; y++) {
            myMap.points[y][axis] = 0;
        }
    }
};

var generateMap = function(maxRooms) {
    myMap.points = [];
    
    // Set up grid to be full of walls
    for (var y = 0; y < myMap.height; y++) {
        var row = [];
        for (var x = 0; x < myMap.width; x++) {
            row.push(1);
        }
        myMap.points.push(row);
    }
    
    // First room
    myMap.rooms.push(new Room(2, 2, 4, 3));
    
    // First corridor
    addCorridor('horizontal', 0, 1, 3);
    
    var currentWidth = 10;
    var currentHeight = 10;
    var maxtile = 4;
    
    // Create rooms
    for (var i = 0; i < maxRooms; i++) {
        var w = floor(random() * (maxtile - myMap.minRoomtile)) + myMap.minRoomtile;
        var h = floor(random() * (maxtile - myMap.minRoomtile)) + myMap.minRoomtile;
        var x = floor(random() * (currentWidth - w - 2)) + 1;
        var y = floor(random() * (currentHeight - h - 2)) + 1;
        
        var room = new Room(x, y, w, h);
        
        var intersection = false;
        for (var j = 0; j < myMap.rooms.length; j++) {
            if (room.intersect(myMap.rooms[j])) {
                intersection = true;
                break;
            }
        }
        
        if (!intersection) {
            myMap.rooms.push(room);
        }
        
        // Expand usable area
        currentWidth = min(myMap.width, currentWidth + w + 1);
        currentHeight = min(myMap.width, currentHeight + h + 1);
        maxtile = min(myMap.maxRoomtile, maxtile + 1);
    }
    
    // Carve out rooms and add corridors
    for (var i = 0; i < myMap.rooms.length; i++) {
        var room = myMap.rooms[i];
        room.carve();
        
        if (i > 0) {
            var room2 = myMap.rooms[i - 1];
            if (random() < 0.5) {
                if (abs(room.cx - room2.cx) > 4) {
                    // S-shape
                    var x = floor((room.cx + room2.cx) / 2);
                    addCorridor('horizontal', room.cx, x, room.cy);
                    addCorridor('vertical', room.cy, room2.cy, x);
                    addCorridor('horizontal', x, room2.cx, room2.cy);
                } else {
                    addCorridor('horizontal', room.cx, room2.cx, room.cy);
                    addCorridor('vertical', room.cy, room2.cy, room2.cx);
                }
            } else {
                if (abs(room.cy - room2.cy) > 4) {
                    // S-shape
                    var y = floor((room.cy + room2.cy) / 2);
                    addCorridor('vertical', room.cy, y, room.cx);
                    addCorridor('horizontal', room.cx, room2.cx, y);
                    addCorridor('vertical', y, room2.cy, room2.cx);
                } else {
                    addCorridor('vertical', room.cy, room2.cy, room.cx);
                    addCorridor('horizontal', room.cx, room2.cx, room2.cy);
                }
            }
        }
    }
};

var addCreature = function(type, x, y) {
    myMap.points[y][x] = new Creature(type, x, y);
};

var addCreatures = function(n) {
    for (var i = 0; i < n; i++) {
        var r = floor(random(myMap.rooms.length - 1)) + 1;
        var room = myMap.rooms[r];
        var x = room.x1 + floor(random(room.width));
        var y = room.y1 + floor(random(room.height));
        addCreature('Leaf sprite', x, y);
    }
};


// Create things
generateMap(12);
addCreatures(20);

addCreature('Leaf sprite', 4, 3);
addCreature('Leaf nymph', 4, 2);
var player = new Player(0, 3);

// View determines how the world is displayed
// tiles is the number of tiles horizontally and vertically
var View = function(tiles) {
    this.tiles = tiles;
    this.size = width / tiles;
    this.update();
    this.tooltip = false;
};
View.prototype.update = function() {
    this.startX = max(0, player.x - floor(this.tiles / 2));
    this.startY = max(0, player.y - floor(this.tiles / 2));
};
View.prototype.mouseToMap = function() {
    return {
        x: floor(mouseX / this.size) + this.startX,
        y: floor(mouseY / this.size) + this.startY
    };
};
View.prototype.visibleObj = function() {
    var coord = this.mouseToMap();
    if (player.x === coord.x && player.y === coord.y) {
        return player;
    } else if (player.visible[coord.x + "," + coord.y]) {
        return myMap.points[coord.y][coord.x];
    } else {
        return false;
    }
};
var view = new View(8);

// Draw the whole map
var drawMap = function() {
    background(FLOOR);
    noStroke();
    var s = myMap.tile;
    
    for (var y = 0; y < myMap.points.length; y++) {
        for (var x = 0; x < myMap.points[0].length; x++) {
            if (myMap.points[y][x] === 1) {
                fill(WALL);
                rect(x * s, y * s, s, s);
            } else if (myMap.points[y][x].name) {
                fill(255, 0, 0);
                ellipse((x + 0.5) * s, (y + 0.5) * s, s - 2, s - 2);
            }
        }
    }
};

var Button = function(type, x, y) {
    this.type = type;
    this.x = x;
    this.y = y;
    this.r = 25;
};

Button.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) < this.r / 2;
};

Button.prototype.draw = function() {
    var c = this.mouseOver() || action === this.type ? 255: 120;
    
    fill(0);
    stroke(c);
    strokeWeight(2);
    ellipse(this.x, this.y, this.r, this.r);
    fill(c);
    
    if (this.type === 'Info') {
        textAlign(CENTER, CENTER);
        textSize(20);
        text("?", this.x, this.y);   
    } else if (this.type === 'Action') {
        strokeWeight(3);
        line(this.x - this.r/2 + 4, this.y, this.x + this.r/2 - 10, this.y);
        noStroke();
        triangle(this.x + this.r/2 - 3, this.y,
                 this.x + this.r/2 - 12, this.y - 4,
                 this.x + this.r/2 - 12, this.y + 5);
    }
};

var buttons = [
    new Button('Action', 352, 16),
    new Button('Info', 382, 16)
];

var drawMenuBar = function() {
    noStroke();
    fill(0, 0, 0, 220);
    rect(0, 0, 400, 32);
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].draw();
    }
    
    // Tooltip
    fill(220);
    textAlign(LEFT, BASELINE);
    textSize(16);
    text(action + " mode", 6, 18);
    
    if (view.tooltip) {
        textSize(13);
        text(view.tooltip, 100, 18);
    }

};

// Draw the map where the player is
var drawGame = function() {
    background(0);
    noStroke();
    
    var startX = view.startX;
    var startY = view.startY;
    var tile = view.size;
    
    var coord = view.mouseToMap();
    var target = view.visibleObj();
    
    // Background
    for (var y = 0; y <= view.tiles; y++) {
        var py = y + startY;
        var ty = (y - 0.6) * tile;
        
        for (var x = 0; x <= view.tiles; x++) {
            var px = x + startX;
            var tx = x * tile;
            var s = px + "," + py;

            if (player.visited[s]) {
                var short = false;
                if (myMap.points[py][px] === 1) {
                    // Draw short walls on the lower side
                    if (player.visible[px + "," + (py - 1)] && myMap.points[py - 1][px] !== 1) {
                        image(WALL_TILE2, tx, ty, tile, tile * 2);
                        short = true;
                    } else {
                        image(WALL_TILE, tx, ty, tile, tile * 2);
                    }
                } else {
                    image(FLOOR_TILE, tx, ty, tile, tile * 2);
                    if (px === coord.x && py === coord.y) {
                        fill(0, 0, 255, 120);
                        if (target.name && target.name !== "You") {
                            fill(255, 0, 0, 120);
                        }
                        ellipse(tx + tile/2, ty + tile * 1.2, tile * 0.8, tile * 0.5);
                    }
                }
                
                // Shadow
                if (!player.visible[s]) {
                    fill(0, 0, 0, 100);
                    noStroke();
                    if (myMap.points[py][px] === 1) {
                        //stroke(255, 0, 0);
                        if (short) {
                            rect(tx, ty + tile/2 + 3, tile, tile * 1.5 - 2);
                        } else {
                            rect(tx, ty + 5, tile, tile * 2 - 4);   
                        }
                    } else {
                        //stroke(255, 255, 0);
                        rect(tx + 1, ty + tile / 2 + 4, tile - 1, tile);
                    }
                }
            }
        }
    }
    
    player.draw(player.x - startX, player.y - startY, tile, tile);
    
    // Creatures
    for (var x = 0; x < tile; x++) {
        for (var y = 0; y < tile; y++) {
            var px = x + startX;
            var py = y + startY;
            var tx = x * tile;
            var ty = y * tile;
            var s = px + "," + py;
            
            if (player.visited[s] && myMap.points[py][px].name) {
                myMap.points[py][px].draw(tx, ty, tile);
            }
        }
    }
    
};

/******************************
 *      Main Game Loop
******************************/

var draw = function() {
    if (mode === 'game') {
        drawGame();
        drawMenuBar();
    } else {
        drawMap();
    }
};

/******************************
 *      Event handling
******************************/

var keyReleased = function() {
    switch(keyCode) {
        case UP:
            player.move(0, -1);
            break;
        case DOWN:
            player.move(0, 1);
            break;
        case LEFT:
            player.move(-1, 0);
            break;
        case RIGHT:
            player.move(1, 0);
            break; 
    }
    view.update();
};

var mouseReleased = function() {
    for (var i = 0; i < buttons.length; i++) {
        if (buttons[i].mouseOver()) {
            action = buttons[i].type;
            view.tooltip = false;
            return;
        }
    }
    /*
    if (action === 'info') {
        var obj = view.visibleObj();
    }
    */
};

var mouseMoved = function() {
    if (action === 'Info') {
        var obj = view.visibleObj();
        if (obj === false) {
            view.tooltip = "Not visible";
        } else {
            if (obj === 0) {
                view.tooltip = "Dirt floor";
            } else if (obj === 1) {
                view.tooltip = "Stone wall";
            } else if (obj.name) {
                view.tooltip = obj.name + " (click for more information)";
            }
        }
    }
};
