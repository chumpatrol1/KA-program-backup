/********************************************************
* What is the angle subtended by a planet?
* 
* Click and drag to move the planet or observer;
* 
* To do:
*   - Drag to change planet radius
*   - Prevent planet getting too close
*********************************************************/

var myFont = createFont("Times", 20);

var planetX = width * 0.8;
var planetY = height * 0.2;
var planetD = 64;
var planetR = planetD / 2;
var planetC = color(212, 95, 17);

var eyeX = width * 0.2;
var eyeY = height * 0.8;

var arcSize = 80;

var selected = false;

var drawVision = function() {
    var d = dist(planetX, planetY, eyeX, eyeY);
    
    if (d <= planetR) {
        return;
    }
    
    var angle = atan2(planetY - eyeY, planetX - eyeX);
    var theta = asin(planetR / d);
    var t1 = angle - theta;
    var t2 = angle + theta;
    var h = sqrt(d * d - planetR * planetR);
    
    var surfaceX = eyeX + h * cos(t2);
    var surfaceY = eyeY + h * sin(t2);
    
    noStroke();
    fill(255, 255, 255, 50);
    triangle(eyeX, eyeY, surfaceX, surfaceY,
             eyeX + h * cos(t1), eyeY + h * sin(t1));
    
    strokeWeight(1);
    stroke(255, 255, 255, 200);
    
    // Distance from eye to planet
    line(eyeX, eyeY, planetX, planetY);
    
    // Planet radius
    line(planetX, planetY, surfaceX, surfaceY);
    
    // Right angle marker
    pushMatrix();
    translate(surfaceX, surfaceY);
    rotate(t2);
    rect(-10, -10, 9, 9);
    popMatrix();
    
    // Subtended angle marker
    arc(eyeX, eyeY, arcSize, arcSize, t1, t2);
    
    fill(255);
    textSize(13);
    textAlign(CENTER, CENTER);
    
    var textX = eyeX + arcSize/2 * cos(angle + theta + 20);
    var textY = eyeY + arcSize/2 * sin(angle + theta + 20);
    text(round(20 * theta) / 10 + "Â°", textX, textY);
    
    textX = eyeX + (d+12) * cos(angle + theta/4);
    textY = eyeY + (d+12) * sin(angle + theta/4);
    text(planetR, textX, textY);
    
    pushMatrix();
    translate(eyeX + d/2 * cos(angle), eyeY + d/2 * sin(angle));
    rotate(angle);
    textAlign(CENTER, BASELINE);
    text("" + round(d * 10) / 10, 0, -3);
    popMatrix();
    
    if (dist(eyeX, eyeY, mouseX, mouseY) < 16) {
        fill(255, 255, 255, 20);
        stroke(255);
        strokeWeight(2);
        ellipse(eyeX, eyeY, 20, 20);
    }
};

var draw = function() {
    background(0);
    
    fill(planetC);
    noStroke();
    ellipse(planetX, planetY, planetD, planetD);
    
    drawVision();

};

var mousePressed = function() {
    if (dist(planetX, planetY, mouseX, mouseY) < planetR) {
        selected = "planet";
    } else if (dist(eyeX, eyeY, mouseX, mouseY) < 16) {
        selected = "eye";
    }
};

var mouseDragged = function() {
    if (selected === "planet") {
        planetX += mouseX - pmouseX;
        planetY += mouseY - pmouseY;
    }
    if (selected === "eye") {
        eyeX += mouseX - pmouseX;
        eyeY += mouseY - pmouseY;
    }
};

var mouseReleased = function() {
    selected = false;
};

var mouseOut = function() {
    selected = false;
};