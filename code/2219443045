/*********************************************************
 * When do the sun, the Earth and Mars align?
 * Calculating the oppositions from year 1877 onwards.
 * 
 * Distances in giga-meters (millions of km)
 * 
 * Slightly inaccurate since procession not taken into account.
 * Planet and sun sizes not to scale.
 * 
 * Spacebar: pause
 * s: toggle show orbit shape
*********************************************************/
var speed = 2;          // Change in days per update
var resolution = 20;    // How accurate orbit speed is

var rotateRate = 1; // Speed of rotation using mouse

// Position and size or sun
var sunX = 0;
var sunY = 0;
var sunZ = 0;
var sunR = 8;

translate(200.5, 200.5);

var marsData = {
    name: "Mars",
    size: 15,
    colour: color(212, 95, 17),
    perihelion: 207,        // million km
    aperihelion: 249,       // million km
    peri_longitude: 336,    // degrees
    asc_longitude: 49.6,    // degrees
    inclination: 1.85,      // degrees
    year: 686.98,           // earth days
    mass: 0.64              // 10^24 kg
};

// At 6pm 28th August 2003, Earth and Mars in opposition
var _year = 2003;
var _day = 239.75;

// Angles from ellipse centres, not sun (angle from sun = 335.0)
var earthAngle = 335.6;
var marsAngle = 335.1;

// Other variables
var scalingFactor = 0.6;
var running = true;
var showCycles = true;
var showAxes = false;

var rotateXAngle = 0;
var rotateYAngle = 0;

var Sun = function() {
    this.x = sunX;
    this.y = sunY;
    this.mass = 330000;
    this.previous_points = [];
    
    this.update = function(t) {
    };
    
    this.draw = function() {
        noStroke();
        fill(255, 255, 0);
        ellipse(this.x, this.y, sunR, sunR);
        fill(255, 89, 0, 100);
        ellipse(this.x, this.y, sunR + 3, sunR + 3);
    };
    
    this.drawCenter = function(){
        fill(255, 255, 255);
        ellipse(this.x, this.y, 2, 2);
    };
};

var Planet = function(data, angle) {
    var t = 0;
    this.year = data.year;
    this.oldPositions = [];
    
    // Distance from ellipse centre to sun
    var focusDist = scalingFactor * (data.aperihelion - data.perihelion) / 2;
    
    // Ellipse axes
    this.major = scalingFactor * data.aperihelion - focusDist;
    this.minor = sqrt(this.major*this.major - focusDist * focusDist);
    
    // Store these to save repeatedly calculating them
    var phi = data.peri_longitude;
    var cosPhi = cos(phi);
    var sinPhi = sin(phi);
    
    // Angle relative the perihelion
    this.angle = angle - phi;
    
    // Center of ellipse
    this.cx = sunX - focusDist * cosPhi;
    this.cy = sunY + focusDist * sinPhi;
    this.cz = sunZ;
    
    // Handy properties for calculations
    var eccentricity = focusDist / this.major;
    var angleConstant = 360 * this.major * this.minor / data.year;
    
    // Add a numbers of days to the orbit
    this.update = function(days) {        
        var sign = days < 0 ? -1 / resolution : 1 / resolution;
        var speed = 0;

        for (var d = 0; d < abs(days) * resolution; d++) {
            // Distance from sun
            var r = this.major * (1 - eccentricity * eccentricity) /
                                 (1 + eccentricity * cos(this.angle));
            
            // Update angle around sun
            this.angle += sign * angleConstant / (r * r);
            speed += angleConstant / (r * r);
        }
        
        var r = this.major * (1 - eccentricity * eccentricity) /
                             (1 + eccentricity * cos(this.angle));
                        
        // Position based on non-rotated ellipse
        var x = r * cos(this.angle) + focusDist;
        var y = r * sin(this.angle);
        var dAngle = (this.angle - data.asc_longitude + 540) % 360;
        dAngle -= 180;
        var z = r * sin(data.inclination * sin(dAngle));
        
        // Rotate based on ellipse rotation
        this.x = this.cx + x * cosPhi - y * sinPhi;
        this.y = this.cy - x * sinPhi - y * cosPhi;
        this.z = this.cz + z;
        
        // Store old position
        t++;
        if (t % 5 === 0) {
            this.oldPositions.push([this.x, this.y, z]);
            if (this.oldPositions.length > 138) {
                this.oldPositions.shift();
            }
        }
    };
    this.update(0);
    
    this.drawCycle = function() {
        var ct = cos(rotateXAngle);
        var st = sin(rotateXAngle);
            
        fill(lerpColor(data.colour, color(0, 0, 0, 0.5), 0.4));
        for (var i = 0; i<this.oldPositions.length; i++) {
            var p = this.oldPositions[i];
            var y = ct * p[1] - st * p[2];
            ellipse(p[0], y, 3, 3);
        }
    };
    
    
    this.draw = function() {
        noStroke();
        fill(data.colour);
        
        var y = cos(rotateXAngle)*this.y - sin(rotateXAngle)*this.z;
        ellipse(this.x, y, data.size, data.size);
    };
};

/********************************************************
 *               Make planets here
*********************************************************/
var sun = new Sun();
var mars = new Planet(marsData, marsAngle);
var bodies = [sun, mars];

/********************************************************
 *               Handy functions
*********************************************************/

var getKM = function(d) {
    return round(d / scalingFactor);
};

var getMiles = function(d) {
    return round(10 * d / (scalingFactor * 1.6093)) / 10;
};

var months = {
    January: 31,
    February: 28,
    March: 31,
    April: 30,
    May: 31,
    June: 30,
    July: 31,
    August: 31,
    September: 30,
    October: 31,
    November: 30,
    December: 31
};

var isLeapYear = function(y) {
    return (y % 4 === 0 && (y % 100 !== 0 || y % 400 === 0));
};

var dayToDate = function(d, y) {
    for (var m in months) {
        var days = months[m];
        if (m === 'February' && isLeapYear(y)) {
            days++;
        }
        if (d <= days) {
            return [d, m];
        } else {
            d -= days;
        }
    }
};

var convertDayToYear = function(days) {
    var y = 0;
    
    if (days > 365) {
        while (true) {
            var n = 365 + isLeapYear(_year + y);
            if (days > n) {
                days -= n;
                y++;
            } else {
                break;
            }
        }   
    }
    return [y, days];
};

var updateDate = function(days) {
    _day += days;
    var y = convertDayToYear(_day);
    _day = y[1];
    _year += y[0];
};

/********************************************************
 *               Display functions
*********************************************************/

var draw = function() {    
    if (running) {
        for (var i = 0; i<speed; i++) {
            mars.update(1);
            updateDate(1);
        }
    }
    
    background(0);
    
    // Axes
    strokeWeight(1);
    stroke(255, 255, 255, 20);
    line(0, -200, 0, 200);
    line(-200, 0, 200, 0);
    
    // Axes
    stroke(255, 255, 255, 120);
    var p = marsData.perihelion * scalingFactor;
    var a = marsData.aperihelion * scalingFactor;
    var cp = cos(marsData.peri_longitude);
    var sp = sin(marsData.peri_longitude);
    var x1 = sunX + p * cp;
    var y1 = sunY - p * sp;
    var x2 = sunX - a * cp;
    var y2 = sunY + a * sp;
    
    // Major axis
    line(x1, y1, x2, y2);
    
    // Horizontal
    var r = mars.major;
    line(mars.cx, mars.cy, mars.cx + r, mars.cy);
    
    // Perihelion longitude
    noFill();
    arc(mars.cx, mars.cy, 40, 40, 360 - marsData.peri_longitude, 360);
    
    fill(250);
    textAlign(RIGHT, CENTER);
    text("Perihelion", sunX + p * cp/1.5, sunY - p * sp /1.5 + 6);
    text("Aperihelion", sunX - a * cp / 2, sunY + a * sp/2 + 3);
    textAlign(LEFT, CENTER);
    text("Longitude of perihelion", sunX - 25, sunY - 34);
    
    if (showCycles) {
        noFill();
        strokeWeight(2);
        stroke(212, 95, 17, 36);
        mars.drawCycle();
    }
    
    mars.draw();
    sun.draw();
};


/********************************************************
 *               Event handling
*********************************************************/

var mouseDragged = function() {    
    // Rotate universe
    rotateYAngle += -(pmouseX - mouseX) * rotateRate;
    rotateXAngle += (pmouseY - mouseY) * rotateRate;
};

var keyPressed = function() {
    // Spacebar toggles animation
    if (keyCode === 32) { running = !running; }
    if (keyCode === 83) { showCycles = !showCycles; }
};