/****************************************************
 * Building robots
 *  - Click and drag the parts onto the screen.
 *  - How many combinations are there?
 *
 * To do
 *  - Snapping should not force items off screen
 *  - Improve snapping
 *  - Bin connected items
 *  - Dropping part on existing part of the same
 *      type swaps them
 *  - Generate all combinations
 *  - Variable toolbar heights or reorganise toolbars
*****************************************************/ 

var BACKGROUND = color(250, 250, 250);
var BACKGROUND = color(230, 240, 255);
var GREY = color(160, 160, 160);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TOOLBAR = color(245, 245, 245);

var selected = false;
var showBin = false;
var toolbarHeight = 60;
var onScreenParts = [];
var toolbarParts = [];

var drawConnections = false;

// Each toolbar contains an array of draw functions (currently ugly placeholder images)
var toolbars = {
    bodies: [
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(100);
            fill(200);
            rect(x - w / 2, y - h / 2, w, h, w / 5);
        },
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(0, 100, 0);
            fill(60, 180, 60);
            ellipse(x - h * 0.3, y + w  * 0.35, w * 0.3, h * 0.3);
            ellipse(x + h * 0.3, y + w  * 0.35, w * 0.3, h * 0.3);
            ellipse(x, y, w * 0.9, h * 0.9);
        }
    ],
    
    arms: [
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(100);
            fill(200);
            rect(x - w * 0.5, y - h * 0.15, w * 0.35, h * 0.3);
            rect(x + w * 0.15, y - h * 0.15, w * 0.35, h * 0.3);
        },
        function(x, y, w, h) {
            strokeWeight(w * 0.08);
            stroke(60, 180, 60);
            noFill();
            bezier(x + w * 0.25, y + h * 0.4,
                   x + w * 0.65, y + h * 0.15,
                   x + w * 0.2, y + h * -0.3,
                   x + w * 0.5, y + h * -0.4);
            bezier(x - w * 0.25, y + h * 0.4,
                   x - w * 0.65, y + h * 0.15,
                   x - w * 0.2, y + h * -0.3,
                   x - w * 0.5, y + h * -0.4);
        }
    ],
    
    heads: [
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(200, 0, 0);
            fill(200, 90, 10);
            rect(x - w * 0.15, y - 1, w * 0.3, h / 2 + 1);
            rect(x - w / 2, y - h / 2, w, h / 2, w / 10);
            fill(255, 255, 255);
            rect(x - w * 0.35, y - h * 0.45, w * 0.2, h * 0.3, w * 0.2);
            rect(x + w * 0.15, y - h * 0.45, w * 0.2, h * 0.3, w * 0.2);
        },
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(100);
            fill(200);
            rect(x - w / 2, y - h / 2, w, h, w / 5);
            fill(255);
            rect(x - w * 0.4, y - h * 0.4, w * 0.8, h * 0.3, w / 5);
        },
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(0, 100, 0);
            fill(60, 180, 60);
            ellipse(x, y, w, h);
            
            fill(255, 255, 255);
            ellipse(x, y - h * 0.1, w * 0.4, h * 0.5);
            fill(0);
            noStroke();
            ellipse(x, y - h * 0.1, w * 0.3, h * 0.2);
        },
        function(x, y, w, h) {
            strokeWeight(1);
            stroke(0, 0, 100);
            fill(60, 100, 180);
            ellipse(x, y + h * 0.1, w, h * 0.8);
            
            fill(255, 255, 255);
            arc(x - w * 0.25, y - h * 0.25, w * 0.4, h * 0.35, 120, 360);
            arc(x + w * 0.25, y - h * 0.25, w * 0.4, h * 0.35, 180, 420);
        }
    ]
};

// Move given item to the front of an array
// used to ensure that heads are drawn in front of bodies
var moveToFront = function(arr, item) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] === item) {
            arr.splice(i, 1);
            break;
        }
    }
    arr.push(item);
};

// Move item1 in front of (i.e. after in array) item2 in array
var moveInFrontOf = function(item1, item2, arr) {
    var index1 = arr.indexOf(item1);
    var index2 = arr.indexOf(item2);
    
    if (index1 === -1 || index1 > index2) {
        return;
    }
    
    arr.splice(index1, 1);
    arr.splice(index2, 0, item1);
};

/***************************************************
 *      Generic part object
 * Deals with drawing mouseover events
***************************************************/ 

var Part = function(x, y, drawFunc) {
    this.x = x;
    this.y = y;
    this.drawFunction = drawFunc;
    this.connectedTo = [];
};

Part.prototype.draw = function() {
    if (this.drawFunction) {
        this.drawFunction(this.x, this.y, this.width, this.height);
    }
    
    // Draw connections for debugging
    if (drawConnections) {
        noStroke();
        fill(0);
        for (var cxn in this.connections) {
            var coords = this.connections[cxn];
            ellipse(this.x + coords[0], this.y + coords[1], 3, 3);  
        }
    }
};

Part.prototype.mouseover = function() {
    return mouseX >= this.x - this.width / 2 && mouseX <= this.x + this.width / 2 &&
           mouseY >= this.y - this.height / 2 && mouseY <= this.y + this.height / 2;
};

Part.prototype.overlap = function(that) {
    return this.x + this.width / 2 >= that.x - that.width / 2 &&
           this.x - this.width / 2 <= that.x + that.width / 2 &&
           this.y + this.height / 2 >= that.y - that.height / 2 &&
           this.y - this.height / 2 <= that.y + that.height / 2;
};

// Connect part and organise
Part.prototype.connectTo = function(that) {
    if (this.connections[that.type] && this.connectedTo.indexOf(that) === -1) {
        //println("Connect " + this.type + " to " + that.type);
        this.connectedTo.push(that);
        that.connectedTo.push(this);
    
        // Make sure order of parts is correct
        if (this.type === 'head' && that.type === 'body') {
            moveInFrontOf(this, that, onScreenParts);
        } else if (this.type === 'body' && that.type === 'head') {
            moveInFrontOf(that, this, onScreenParts);
        }
        
        if (this.type === 'arms' && that.type === 'body') {
            moveInFrontOf(that, this, onScreenParts);
        } else if (this.type === 'arms' && that.type === 'head') {
            moveInFrontOf(this, that, onScreenParts);
        }
    
    }
};

// If part are near to something it is connected to,
// move to the connection point.
Part.prototype.snapTo = function(that) {
    this.connectTo(that);
    
    //this.x += cxn2[0] - cxn1[0];
    //this.y += cxn2[1] - cxn1[1];
};

Part.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};

Part.prototype.update = function() {
    for (var i = 0; i < this.connectedTo.length; i++) {
        var part = this.connectedTo[i];
        var coords1 = this.connections[part.type];
        var coords2 = part.connections[this.type];
        
        if (!coords1 || !coords2) {
            return;
        }
        
        var x1 = this.x + coords1[0];
        var y1 = this.y + coords1[1];
        var x2 = part.x + coords2[0];
        var y2 = part.y + coords2[1];
        
        // If connected part moves too far away then break bond
        if (dist(x1, y1, x2, y2) > 30) {
            part.connectedTo = [];  // Should break properly
            this.connectedTo.splice(i, 1);
            return;
        }
        
        // Otherwise connected parts move towards each other
        var midX = (x1 + x2) * 0.5;
        var midY = (y1 + y2) * 0.5;
        
        if (x1 - 1 >= midX) {
            this.x--;
        } else if (x1 + 1 <= midX) {
            this.x++;
        }
        
        if (y1 - 1 >= midY) {
            this.y--;
        } else if (y1 + 1 <= midY) {
            this.y++;
        }
    }
};

/***************************************************
 *      Head object
***************************************************/ 

var Head = function(x, y, f) {
    this.type = 'head';
    this.width = 30;
    this.height = 30;
    
    // Where do we connect to other parts
    this.connections = {
        body: [0, this.height * 0.4]
    };
    
    Part.call(this, x, y, f);
};
Head.prototype = Object.create(Part.prototype);

Head.prototype.copy = function() {
    return new Head(this.x, this.y, this.drawFunction);
};

/***************************************************
 *      Arm object
***************************************************/ 

var Arm = function(x, y, f) {
    this.type = 'arms';
    this.width = 80;
    this.height = 30;
    
    // Where do we connect to other parts
    this.connections = {
        body: [0, 0]
    };
    
    Part.call(this, x, y, f);
};
Arm.prototype = Object.create(Part.prototype);

Arm.prototype.copy = function() {
    return new Arm(this.x, this.y, this.drawFunction);
};

/***************************************************
 *      Body object
***************************************************/ 

var Body = function(x, y, f) {
    this.type = 'body';
    this.width = 50;
    this.height = 50;
    
    // Where do we connect to other parts
    this.connections = {
        head: [0, this.height * -0.4],
        arms: [0, this.height * -0.2]
    };
    
    Part.call(this, x, y, f);
};
Body.prototype = Object.create(Part.prototype);

Body.prototype.copy = function() {
    return new Body(this.x, this.y, this.drawFunction);
};

Body.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
    
    for (var i = 0; i < this.connectedTo.length; i++) {
        var part = this.connectedTo[i];
        part.x += dx;
        part.y += dy;
    }
};

/***************************************************
 *      Initialising objects
***************************************************/ 

var generateParts = function(type, y, data) {
    var parts = [];
    var dx = width / (data.length + 1);
    
    for (var i = 0; i < data.length; i++) {
        var x = dx * (i + 1);
        if (type === 'heads') {
            parts.push(new Head(x, y, data[i]));   
        } else if (type === 'arms') {
            parts.push(new Arm(x, y, data[i]));   
        } else {
            parts.push(new Body(x, y, data[i]));
        }
    }
    
    return parts;
};

var toolbarCount = 0;
for (var toolbar in toolbars) {
    var y = height - (toolbarCount + 0.5) * toolbarHeight;
    toolbarParts = toolbarParts.concat(generateParts(toolbar, y, toolbars[toolbar]));
    toolbarCount++;
}

/***************************************************
 *      Draw functions
***************************************************/ 

var drawToolBar = function(y, name) {
    strokeWeight(1);
    stroke(200);
    fill(TOOLBAR);
    rect(-1, y, width + 1, toolbarHeight);
    
    stroke(120);
    line(0, y + 1, width, y + 1);
    
    textAlign(CENTER, CENTER);
    textSize(14);
    fill(10);
    
    pushMatrix();
    translate(10, y + toolbarHeight / 2);
    rotate(270);
    text(name, 0, 0);
    popMatrix();
};

var drawBin = function() {
    var h = toolbarHeight * toolbarCount;
    noStroke();
    fill(200, 200, 200, 220);
    rect(-1, height - h, width + 1, h);
    
    var x = width / 2;
    var y = height - h / 2;
    
    fill(80);
    quad(x - h * 0.25, y - h * 0.15, x + h * 0.25, y - h * 0.15,
         x + h * 0.2, y + h * 0.4, x - h * 0.2, y + h * 0.4);
    
    quad(x - h * 0.28, y - h * 0.17, x + h * 0.28, y - h * 0.17,
         x + h * 0.25, y - h * 0.25, x - h * 0.25, y - h * 0.25);
    
};

/********************************************************
 *      Main loop
*********************************************************/

draw = function() {
    background(BACKGROUND);
    
    for (var i = 0; i < onScreenParts.length; i++) {
        onScreenParts[i].update();
        onScreenParts[i].draw();
    }
    
    var h = toolbarHeight;
    for (var toolbar in toolbars) {
        drawToolBar(height - h, toolbar.toUpperCase());
        h += toolbarHeight;
    }
    
    for (var i = 0; i < toolbarParts.length; i++) {
        toolbarParts[i].draw();
    }
    
    if (selected) {
        if (showBin) {
            drawBin();   
        }
        selected.draw();
    }
};

/********************************************************
 *      Event handling
*********************************************************/

mousePressed = function() {
    // Are we selecting an object on the screen?
    for (var i = onScreenParts.length - 1; i >= 0; i--) {
        if (onScreenParts[i].mouseover()) {
            // Selected item is removed from screen so it can be drawn separately and move to the front
            selected = onScreenParts.splice(i, 1)[0];
            showBin = true;
            return;
        }
    }
    
    // Are we selecting a part from the toolbar?
    // If so, create a copy
    for (var i = 0; i < toolbarParts.length; i++) {
        var part = toolbarParts[i];
        if (part.mouseover()) {
            var newPart = part.copy();
            selected = newPart;
            showBin = false;
            break;
        }
    }
};

mouseDragged = function() {
    if (selected) {
        selected.move(mouseX - pmouseX, mouseY - pmouseY);
    }
};

mouseReleased = function() {
    if (selected) {
        if (selected.y + selected.height / 2 < height - toolbarHeight * toolbarCount) {
            // Put down on screen
            onScreenParts.push(selected);
            
            // Test for overlap
            for (var i = 0; i < onScreenParts.length; i++) {
                var part = onScreenParts[i];
                if (part.type !== selected.type && selected.overlap(part)) {
                    selected.connectTo(part);
                }
            }
        }
        selected = false;   
    }
};