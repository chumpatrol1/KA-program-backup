/*****************************************************
 *          Encrypting passwords
 * A lot of programs test whether the user has a
 * password. The problem is that it's normally quite
 * easy to search their code for the password.
 * 
 * This program uses a simple hashing function to 
 * encrypt the password. In this example, the password
 * is 'password', which is hashed to the value 523314,
 * which is all that needs to be saved. Another
 * password might have the value -769720 and there would
 * be no easy way for someone to work out what the 
 * password was.
 * 
 * To find the hash value for a given string, set
 * showHash = true
 * 
 * There are more secure ways to do this, but this way
 * should be good enough for most purposes.
******************************************************/

// This is the value that the password generates when it's hashed.
// There's no easy way to convert this back to the original string
// even if you look at the code
var hashedPassword = 523314;

// Use this to find the hash value for a given string
var showHash = false;

// Function for encrypting a string into a number
var hashPassword = function(password) {
    // Bucket size (number of possible outputs)
    // This should be prime and the bigger, the better
    var m = 999331;
    var A = 0.5 * (sqrt(5) - 1);
    
    // So small values still scrambled
    var h = m + 1;
    
    for (var i = 0; i < password.length; i++) {
        var k = password.charCodeAt(i);
        var s = A * k;
        var x = s - floor(s);
        var k2 = floor(256 * x);
        
        var highorder = h & 0xf8000000;
        h = h << 5;
        h = h ^ (highorder >> 27);
        h = h ^ k2;
    }
    
    return h % m;
};

var state;

/*****************************************************
 *      Button Object
******************************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.defaultCol = color(250, 250, 250);
    this.highlightCol = color(210, 210, 210, 250);
    this.font = createFont("sans", 15);
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(20);
    }
    
    textFont(this.font, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(3);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(this.font, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

Button.prototype.mouseDragged = function() {};

Button.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

Button.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

Button.prototype.makeFilled = function(col) {
    this.draw = this.drawFilled;
    this.defaultCol = color(255, 255, 255, 255);
    this.highlightCol = col;
};
}
/*****************************************************
 *      Textbox Object
******************************************************/
{
var TextBox = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.textBefore = [];
    this.textAfter = [];
    this.focussed = false;
    
    // Display parameters
    this.cursorBlink = 36;
    this.font = createFont("monospace", 18);
};

TextBox.prototype.draw = function() {
    if (focused && this.focussed) {
        fill(255);
        stroke(10);
    } else {
        fill(220);
        stroke(40);
    }
    
    strokeWeight(3);
    rect(this.x, this.y, this.w, this.h, 6);
    
    fill(20, 20, 20);
    textFont(this.font, 18);
    textAlign(LEFT, BASELINE);
    
    var ty = this.y + textAscent() + 8;
    var strBefore = this.textBefore.join("");
    text(strBefore, this.x + 5, ty - 1);
    
    var x = this.x + textWidth(strBefore) + 6;
    if (focused && this.focussed &&
        frameCount % this.cursorBlink < this.cursorBlink / 2) {
        stroke(20);
        strokeWeight(1);
        line(x, ty, x, ty - textAscent() - 2);
    }
    
    text(this.textAfter.join(""), x, ty - 1);
};

TextBox.prototype.getString = function() {
    return this.textBefore.concat(this.textAfter).join("");
};

TextBox.prototype.keyPress = function() {
    // Press enter
    if (keyCode === ENTER || keyCode === RETURN) {
        var str = this.textBefore.join("") + this.textAfter.join("");
        this.focussed = false;
    }
    
    if (!this.focussed) { return; }
    
    state = undefined;
    
    if ((keyCode > 47 && keyCode < 91) || (keyCode > 186 && keyCode < 223)) {
        // Add number or lowercase letter
        this.textBefore.push(key.toString());
        // Remove character if string is too long
        textFont(this.font, 20);
        if (textWidth(this.getString()) > this.w - 12) {
            this.textBefore.pop();
        }
    } else if (keyCode === 32){
        this.textBefore.push(" ");
    } else if (keyCode === DELETE || keyCode === BACKSPACE) {
        if (this.textBefore.length > 0) {
            this.textBefore.splice(this.textBefore.length - 1, 1);
        }
    } else if (keyCode === LEFT) {
        if (this.textBefore.length > 0) {
            var letter = this.textBefore.pop();
            this.textAfter.unshift(letter);
        }
    } else if (keyCode === RIGHT) {
        if (this.textAfter.length > 0) {
            var letter = this.textAfter.shift();
            this.textBefore.push(letter);
        }
    }
    
    if (showHash) {
        println(hashPassword(this.getString()));
    }
};

TextBox.prototype.mouseReleased = function() {
    if (mouseX > this.x && mouseX < this.x + this.w &&
        mouseY > this.y && mouseY < this.y + this.h) {
        this.focussed = true;
    } else {
        this.focussed = false;
    }
};
}
/*****************************************************
 *      Create objects
******************************************************/
var txtBox = new TextBox(160, 200, 120, 28);

var checkPassword = function() {
    state = hashPassword(txtBox.getString()) === hashedPassword ? "pass" : "fail";
};

var enterButton = new Button(180, 235, 80, 22, "Enter", checkPassword);
enterButton.makeFilled(color(67, 122, 57));

/*****************************************************
 *  Draw functions
******************************************************/

var drawState = function() {
    var message;
    
    if (state === 'pass') {
        message = "Access Granted";
        fill(0, 200, 0);
    } else if (state === 'fail') {
        message = "Access Denied";
        fill(220, 0, 0);
    }
    
    if (message) {
        textFont(createFont('Impact', 56));
        textAlign(CENTER, CENTER);
        text(message, 200, 100);
    }
};

draw = function() {
    background(61, 55, 61);
    
    fill(255);
    textFont(createFont('sans', 16));
    textAlign(RIGHT, CENTER);
    text("Password:", txtBox.x - 4, txtBox.y + txtBox.h / 2);
    
    txtBox.draw();
    enterButton.draw();
    drawState();
};

/*****************************************************
 *  Event handling
******************************************************/

keyPressed = function() {
    txtBox.keyPress();
};

mousePressed = function() {
    enterButton.mousePressed();
};

mouseReleased = function() {
    txtBox.mouseReleased();
    enterButton.mouseReleased();
};



