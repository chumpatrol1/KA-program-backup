/*********************************************************
 * The orbit of Earth and Mars. How does the distance
 * between the planets change over time?
 * 
 * Planet and sun sizes not to scale.
 * 
 * Spacebar: run/pause
 *  c: toggle show orbit shape and major axis
 *  s: launch shuttle
*********************************************************/
var speed = 1;          // Change in days per update
var resolution = 20;    // How accurate orbit speed is

var GRAVITY = 0.001105;     // Because it works
var launchSpeed = 0.06;     // millions of km per day

var sunX = 220;
var sunY = 225;
var sunR = 28;

var marsData = {
    size: 8,
    colour: color(212, 95, 17),
    perihelion: 207,        // million km
    aperihelion: 249,       // million km
    longitude: 336,         // degrees
    year: 686.98,           // earth days
    mass: 0.64              // 10^24 kg
};

var earthData = {
    size: 15,
    colour: color(61, 100, 255),
    perihelion: 147,        // million km
    aperihelion: 152,       // million km
    longitude: 102,         // degrees
    year: 365.25,           // earth days
    mass: 5.97              // 10^24 kg
};

// At 6pm 28th August 2003, Earth and Mars in opposition
var startEarthAngle = -0.681;
var startMarsAngle = 23.632;

var _year = 2000;
var _month = "January";
var _day = 1;
var _time = 240 * 18 / 24;  // Scale to 240
var totalDays = 0;

// Angles from ellipse centres, not sun
var earthAngle = startEarthAngle;
var marsAngle = startMarsAngle;

// Other variables
var scalingFactor = 0.76;
var running = false;
var showCycles = true;
var showLabel = true;
var mode = "choice";

var Sun = function() {
    this.x = sunX;
    this.y = sunY;
    this.mass = 330000;
    
    this.draw = function() {
        fill(255, 255, 0);
        ellipse(this.x, this.y, sunR, sunR);
        fill(255, 89, 0, 100);
        ellipse(this.x, this.y, sunR + 3, sunR + 3);
    };
};

var Planet = function(data, angle) {
    this.year = data.year;
    this.mass = data.mass;
    
    // Distance from ellipse centre to sun
    var focusDist = scalingFactor * (data.aperihelion - data.perihelion) / 2;
    
    // Ellipse axes
    var major = scalingFactor * data.aperihelion - focusDist;
    var minor = sqrt(major * major - focusDist * focusDist);
    
    // Store these to save repeatedly calculating them
    var phi = data.longitude;
    var cosPhi = cos(phi);
    var sinPhi = sin(phi);
    
    // Angle relative the perihelion
    this.angle = angle - phi;
    
    // Center of ellipse
    var cx = sunX - focusDist * cosPhi;
    var cy = sunY + focusDist * sinPhi;
    
    // Handy properties for calculations
    var eccentricity = focusDist / major;
    var angleConstant = 360 * major * minor / this.year;
    
    // Add a numbers of days to the orbit
    this.update = function(days) {        
        var sign = days < 0 ? -1 / resolution : 1 / resolution;
        var speed = 0;

        for (var d = 0; d < abs(days) * resolution; d++) {
            // Distance from sun
            var r = major * (1 - eccentricity * eccentricity) /
                            (1 + eccentricity * cos(this.angle));
            
            // Update angle around sun
            this.angle += sign * angleConstant / (r * r);
            speed += angleConstant / (r * r);
        }
        
        this.angle %= 360;
        var r = major * (1 - eccentricity * eccentricity) /
                        (1 + eccentricity * cos(this.angle));
                        
        // Position based on non-rotated ellipse
        var x = r * cos(this.angle) + focusDist;
        var y = r * sin(this.angle);
        
        // Rotate based on ellipse rotation
        var newX = cx + x * cosPhi - y * sinPhi;
        var newY = cy - x * sinPhi - y * cosPhi;
        this.dx = newX - this.x;
        this.dy = newY - this.y;
        this.x = newX;
        this.y = newY;
    };
    this.update(0);
    
    this.drawCycle = function() {
        translate(cx, cy);
        rotate(data.longitude);
        ellipse(0, 0, major*2, minor*2);
        resetMatrix();
    };
    
    this.draw = function() {
        fill(data.colour);
        ellipse(this.x, this.y, data.size, data.size);
    };
};

/********************************************************
 *               Make planets here
*********************************************************/
var sun = new Sun();
var mars = new Planet(marsData, marsAngle);
var earth = new Planet(earthData, earthAngle);
var bodies = [sun, earth, mars];

/********************************************************
 *               Shuttle code
*********************************************************/

var shuttles;
var Shuttle = function(x, y, dx, dy) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.oldPositions = [];
    
    this.draw = function() {
        fill(255);
        ellipse(this.x, this.y, 2, 2);
        
        fill(160);
        for (var i = 0; i < this.oldPositions.length; i++) {
            var p = this.oldPositions[i];
            ellipse(p[0], p[1], 1, 1);
        }
    };
    
    this.update = function() {
        if (_day % 4 === 1) {
            this.oldPositions.push([this.x, this.y]);
            if (this.oldPositions.length > 200) {
                this.oldPositions.shift();
            }   
        }
        
        this.x += this.dx;
        this.y += this.dy;
        
        for (var i in bodies) {
            var b = bodies[i];
            var dx = this.x - b.x;
            var dy = this.y - b.y;
            var d2 = dx * dx + dy * dy;
            var f = GRAVITY * b.mass / d2;
            var theta = atan2(dy, dx);
            this.dx -= f * cos(theta);
            this.dy -= f * sin(theta);
        }
    };
};

/********************************************************
 *               Date functions
*********************************************************/

var months = {
    January: 31,
    February: 28,
    March: 31,
    April: 30,
    May: 31,
    June: 30,
    July: 31,
    August: 31,
    September: 30,
    October: 31,
    November: 30,
    December: 31
};

var isLeapYear = function(y) {
    return (y % 4 === 0 && (y % 100 !== 0 || y % 400 === 0));
};

var dayToDate = function(d, y) {
    for (var m in months) {
        var days = months[m];
        if (m === 'February' && isLeapYear(y)) {
            days++;
        }
        if (d <= days) {
            return [d, m];
        } else {
            d -= days;
        }
    }
};

var monthToNumber = function(month) {
    var i = 0;
    for (var m in months) {
        if (month === m) {
            return i;
        }
        i++;
    }
};

var convertDayToYear = function(days) {
    var y = 0;
    
    if (days > 365) {
        while (true) {
            var n = 365 + isLeapYear(_year + y);
            if (days > n) {
                days -= n;
                y++;
            } else {
                break;
            }
        }   
    } else if (days < 0) {
        while (true) {
            if (days < 0) {
                var n = 365 + isLeapYear(_year - 1 - y);
                days += n;
                y--;   
            } else {
                break;
            }
        }
    }
    
    return [y, days];
};

var updateDate = function(days) {
    _day += days;
    var y = convertDayToYear(_day);
    _day = y[1];
    _year += y[0];
};

var changeDay = function(change) {
    for (var i = 1; i < bodies.length; i++) {
        if (change > 0) {
            // A complete year doesn't affect the angle
            var years = floor(change / bodies[i].year);
            var days = change - bodies[i].year * years;
            bodies[i].update(days);
        } else {
            var years = floor(-change / bodies[i].year);
            var days = -change - bodies[i].year * years;

            bodies[i].update(bodies[i].year - days); 
        }
    }
    updateDate(change);
};

// Get to launch date
//changeDay(3012);
//_time = 225;

/********************************************************
 *               Slider and functions
*********************************************************/
var Slider = function(x, y, w, min_v, max_v, current_v, setF) {
    this.x = x;
    this.y = y;
    this.width = w; 
    this.held = false;

    // Use when min and max (re)defined
    this.calibrate = function(min_v, max_v) {
        this.min = min_v;
        this.max = max_v;
        this.scale = (max_v - min_v) / w;
        this.val = current_v === undefined ? min_v : current_v;
        this.bx = this.x + (this.val - min_v) / this.scale;          
    };
    this.calibrate(min_v, max_v);

    this.draw = function() {
        noStroke();
        fill(250, 250, 250, 120);
        rect(this.x-8, this.y-6, this.width+16, 12, 8);
    
        noStroke();
        fill(0, 0, 0, 100);
        ellipse(this.bx, this.y, 18, 18);
        fill(180);
        ellipse(this.bx, this.y, 16, 16);
    };
    
    this.selected = function() {
        this.held = mouseX > this.bx - 8 && mouseX < this.bx + 8 && 
                    mouseY > this.y - 8 && mouseY < this.y + 8;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + (x - this.x) * this.scale;
            
            if (setF) {
                setF(this);
            }
        }
    };
    
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

var slider = false;

// Convert property to position on slider
var getYear = function() { return (_year - 2000) * 5; };
var getMonth = function() {
    var month = dayToDate(_day, _year)[1];
    return monthToNumber(month) * 20;
};
var getDate = function() {
    var date = dayToDate(_day, _year)[0];
    return (date - 1) * 240 / (months[_month] - 1);
};
var getTime = function() { return _time; };

var setYear = function(self) {
    changeDay((2000 + round(self.val / 5) - _year) * 365.25);
};

var setDate = function(self) {
    changeDay(1 + round(self.val * (months[_month]-1) / 240) - _day);
};

var setMonth = function(self) {
    changeDay(self.val - _day);
};

var setTime = function(self) {
    _time = self.val;
};

var writeYear = function() {
    return _year;
};

var writeDate = function() {
    var date = dayToDate(round(_day), _year);
    return date[0];
};

var writeMonth = function() {
    var date = dayToDate(round(_day), _year);
    return date[1];
};

var writeTime = function() {
    var _hour = floor(_time / 10);
    var _min = round((_time - _hour * 10) * 6);
    if (_hour === 24) {
        _hour = 0;
    }
    if (_min < 10) {
        _min = "0" + _min;
    }
    return _hour + ":" + _min;
};

/********************************************************
 *               Buttons
*********************************************************/

var Button = function(x, y, w, h, name, clickF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(220, 220, 220, 250);
    this.highlightCol = color(250, 50, 50, 250);
    this.showing = true;
    
    this.mouseover = function() {
        return (mouseX >= this.x && mouseX <= this.x + this.w &&
                mouseY >= this.y && mouseY <= this.y + this.h);
    };
    
    this.click = function() {

    };
    
    this.draw = function() {
        if (!this.showing) { return; }
        
        noStroke();
        if (this.mouseover() || this.selected) {
            fill(this.highlightCol);
        } else {
            fill(this.defaultCol);
        }
        rect(this.x, this.y, this.w, this.h, 5);
        
        fill(10);
        textSize(24);
        textAlign(CENTER, CENTER);
        text(this.name, this.x + this.w/2, this.y + this.h/2);
    };
};

var OptionBox = function(x, y, w, h, name, getF, setF, writeF, range) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.selected = false;
    
    this.min = range[0];
    this.max = range[1];
    
    this.draw = function() {
        noStroke();
        if (this.selected || this.mouseover()) {
            fill(220, 220, 220, 250);
        } else {
            fill(200, 200, 200, 100);
        }
        rect(this.x, this.y, this.w, this.h, 5);
        
        fill(0);
        textAlign(CENTER, BASELINE);
        textSize(14);
        text(this.name, this.x + this.w/2, this.y + this.h/2 - 1);
        
        textSize(11);
        text(writeF(), this.x + this.w/2, this.y + this.h - 4);
    };
    
    this.mouseover = function() {
        return (mouseX >= this.x && mouseX <= this.x + this.w &&
                mouseY >= this.y && mouseY <= this.y + this.h);
    };
    
    this.addSlider = function()  {
        slider = new Slider(16, 48, 240, 0, 240, getF(), setF);
    };
};

var createOptions = function() {
    var options = [];
    var names = ['Year', 'Month', 'Date', 'Time'];
    var getFunc = [getYear, getMonth, getDate, getTime];
    var setFunc = [setYear, setMonth, setDate, setTime];
    var writeFunc = [writeYear, writeMonth, writeDate, writeTime];
    var ranges = [[2000, 2200], [1, 12], [1, 365], [0, 359]];
    
    var x = 5;
    var w = 58;
    var h = 30;
    var y = 5;
    
    for (var i = 0; i < names.length; i++) {
        var b = new OptionBox(x, y, w, h, names[i], getFunc[i],
                              setFunc[i], writeFunc[i], ranges[i]);
        options.push(b);
        x += w + 5;
    }
    
    return options;
};

var options = createOptions();
var launchButton = new Button(280, 5, 108, 30, "LAUNCH");
var retryButton = new Button(280, 5, 72, 30, "Retry");

/********************************************************
 *               Shuttle functions
*********************************************************/

// Launch shuttle
var launch = function() {
    var angle = atan2(earth.y - sunY, earth.x - sunX) + _time;
    
    // Find Earth's current speed by going forward a day
    earth.update(1);
    var dx = launchSpeed * cos(angle) + earth.dx;
    var dy = launchSpeed * sin(angle) + earth.dy;
    earth.update(-1);   // Go back to original day
    
    shuttles = new Shuttle(earth.x + dx, earth.y + dy, dx, dy);
    running = true;
    mode = "running";
};

// Check whether shuttle is close to Mars
var findOrbit = function() {
    if (dist(mars.x, mars.y, shuttles.x, shuttles.y) < 2) {
        running = false;
        mode = "success";
    }
};

var reset = function() {
    mode = "choice";
    running = false;
};

/********************************************************
 *               Display functions
*********************************************************/

var draw = function() {
    if (running) {
        changeDay(1);
        if (shuttles) {
            shuttles.update();   
        }
        findOrbit();
    }
    
    background(0);
    
    noFill();
    strokeWeight(2);
    if (showCycles) {
        stroke(61, 100, 255, 60);
        earth.drawCycle();
        stroke(212, 95, 17, 36);
        mars.drawCycle();
    }
    
    noStroke();
    for (var i in bodies) {
        bodies[i].draw();
    }
 
    if (mode === "running") {
        shuttles.draw();   
    }
    
    // Draw launch angle
    strokeWeight(1);
    stroke(250);
    var d = 10;
    var angle = atan2(earth.y - sunY, earth.x - sunX) + _time;
    line(earth.x, earth.y,
         earth.x + d * cos(angle),
         earth.y + d * sin(angle));
    
    if (mode === "success") {
        stroke(255);
        strokeWeight(2);
        fill(200, 200, 200, 200);
        var w = 190;
        var h = 80;
        rect(sunX - w/2, sunY - h/2, w, h, 5);
        
        strokeWeight(1);
        fill(0);
        textSize(20);
        textAlign(CENTER, TOP);
        text("Mission successful!", sunX, sunY - h/2 + 3);
        textAlign(LEFT, TOP);
        textSize(14);
        text("Orbit achieved on:", sunX - w/2 + 8, sunY - 5);
        textAlign(CENTER, TOP);
        text(writeDate() + " " + _year, sunX, sunY + 16);
    }
    
    // GUI
    for (var i in options) { options[i].draw(); }
    if (slider) { slider.draw(); }
    
    if (mode === 'choice') {
        launchButton.draw();   
    } else {
        retryButton.draw();
    }
    
    if (showLabel) {
        var x = 85;
        var y = 316;
        noStroke();
        fill(0, 0, 0, 100);
        rect(x, y, 240, 28, 8);
        fill(220);
        textSize(16);
        textAlign(LEFT, TOP);
        /*
        text("Click to select a time for launch.", x + 8, y + 4);
        
        stroke(255);
        strokeWeight(2);
        line(x + 4, y + 14, 60, 285);
        line(x + 4, y + 14, 60, 315);
        line(x + 4, y + 14, 60, 350);
        line(x + 4, y + 14, 60, 380);
        */
    }
};

/********************************************************
 *               Event handling
*********************************************************/

var mouseClicked = function() {
    slider = false;
};

var mousePressed = function() {
    if (slider) { slider.selected(); }
};

var mouseReleased = function() {
    showLabel = false;
    if (mode === "choice") {
        if (slider) { slider.held = false; }
        if (launchButton.mouseover()) {
            launch();
        }
        
        for (var i in options) {
            if (options[i].mouseover()) {
                options[i].selected = true;
                options[i].addSlider();
            } else {
                options[i].selected = false;
            }
        }
    } else {
        if (retryButton.mouseover()) {
            reset();
        }
    }
};

var mouseOut = function() {
    if (slider) { slider.held = false; }
};

var mouseDragged = function() {
    if (slider) { slider.drag(); }
};

var keyPressed = function() {
    if (keyCode === 32) {
        if (mode === "running") {
            running = !running;   
        }
    }
    if (keyCode === 67) { showCycles = !showCycles; }
    if (keyCode === 83) {
        //launch();
    }
};