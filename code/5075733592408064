/**************************************************************
 * Representing the path of the sun across the sky
 * 
 * This site was a great help
 * http://notesfromnoosphere.blogspot.co.uk/2012/05/simple-geometry-of-sun-paths.html
 * 
 * Fix ordering
 * Shadow
**************************************************************/

// Move to centre of screen
var translateX = 200.5;
var translateY = 235.5;
translate(translateX, translateY);

// Colours
var BACKGROUND = color(0, 0, 0);
var AXES = color(225, 225, 225);
var SKY1 = color(120, 160, 255, 180);
var SKY2 = color(80, 40, 200, 180);
var GRASS1 = color(100, 190, 70);
var GRASS2 = color(10, 35, 0);
var GRASS_STROKE = color(15, 40, 5);
var GROUND = color(120, 70, 20);
var GROUND_STROKE = color(80, 40, 10);

// Sizes
var sphereR = 140;
var sphereD = sphereR * 2;
var sun, ground;
var lightIntensity = 0;

// Sun and Earth parameters
var rotationTilt = 23.4;
// Latitude: 0 = equation, positive = North
var latitude = 50;

// Icon sizes
var iconR = 45;
var iconY = iconR/2 + 6 - translateY;
var iconX = 75 - translateX;
var iconDX = 60;

// Degree around solar orbit (ecliptic longitude)
// eg. 0 = Vernal equinox; 90 = winter solstices; 180 = Spring equinox
var orbit = 0;

var earthRotation = 180;      // Degrees around Earth's rotation (0 degrees = midnight)
var earthRotationSpeed = 1; // Degrees spun per update
var running = true;

var convertSphericalCoordinatesToCartesian = function(phi, theta) {
    var r = sphereR * sin(theta);
    var x = r * cos(phi - 90);
    var y = r * sin(phi - 90);
    var z = sphereR * cos(theta);
    return [x, y, z];
};

/*******************************************
 * Camera set-up
********************************************/

var _camera = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];

// Return the position of an object at position (x, y)
// given the current camera
var applyCamera = function(x, y, z) {
    return [x * _camera[0][0] + y * _camera[1][0] + z * _camera[2][0],
            x * _camera[0][1] + y * _camera[1][1] + z * _camera[2][1],
            x * _camera[0][2] + y * _camera[1][2] + z * _camera[2][2]];
};

// Return [x', y', z'], the coords of a node [x, y, z] as seen from the _camera
var applyCameraToNode = function(node) {
    return [node[0] * _camera[0][0] + node[1] * _camera[1][0] + node[2] * _camera[2][0],
            node[0] * _camera[0][1] + node[1] * _camera[1][1] + node[2] * _camera[2][1],
            node[0] * _camera[0][2] + node[1] * _camera[1][2] + node[2] * _camera[2][2]];
};

/*******************************************
 * Linear algebra functions
 * All assume vector has 3 dimensions
********************************************/
var addVectors = function(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
};

var subtractVectors = function(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
};

var vectorTimesScalar = function(v, s) {
    return [v[0] * s, v[1] * s, v[2] * s];
};

var vectorLength = function(v) {
    return sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
};

var normaliseVector = function(v) {
    var d = vectorLength(v);
    return [v[0]/d, v[1]/d, v[2]/d];
};

var dotProduct = function(v1, v2) {
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
};

// Given a fac
var normalOfPlane = function(face, nodes) {
    var n1 = nodes[face[0]];
    var n2 = nodes[face[1]];
    var n3 = nodes[face[2]];
    
    var v1 = subtractVectors(n1, n2);
    var v2 = subtractVectors(n1, n3);
    
    var v3 = [[v1[1]*v2[2] - v1[2]*v2[1]],
              [v1[2]*v2[0] - v1[0]*v2[2]],
              [v1[0]*v2[1] - v1[1]*v2[0]]];
              
    return v3;
};

// Given two vectors return a vector representing the normal
var normalOfTwoVectors = function(v1, v2) {
    return [[v1[1] * v2[2] - v1[2] * v2[1]],
            [v1[2] * v2[0] - v1[0] * v2[2]],
            [v1[0] * v2[1] - v1[1] * v2[0]]];
};

/*******************************************
 * Camera transformations
********************************************/

var rotateY3D = function(theta) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;

    for (var i = 0; i < _camera.length; i++) {
        x = _camera[i][0];
        y = _camera[i][1];
        z = _camera[i][2];
        _camera[i] = [ct*x + st*z, y, -st*x + ct*z];
    }
};

var rotateX3D = function(theta) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, y, z;
    
    for (var i = 0; i < _camera.length; i++) {
        x = _camera[i][0];
        y = _camera[i][1];
        z = _camera[i][2];
        _camera[i] = [x, ct*y - st*z, st*y + ct*z];
    }
};

/*******************************************
 * Define display objects
********************************************/

var skySphere = function() {
    this.z = -0.001; // Not quite zero to ensure Earth is draw over the top
    
    this.update = function() {
        // The sky is at the center so never changes
    };
    
    this.draw = function() {
        noStroke();
        if (lightIntensity < 0) {
            fill(SKY2);
        } else {
            fill(lerpColor(SKY2, SKY1, lightIntensity));
        }
        ellipse(0, 0, sphereD + 2, sphereD + 2);
    };
};

//     A circular disc
// center:      center of the disc
// v1 and v2:   two vector in the plane of the disc
// diameter:    diameter
var Ground = function(center, v1, v2, diameter) {
    this.update = function() {
        this.normal = normalOfTwoVectors(applyCameraToNode(v1), applyCameraToNode(v2));
        this.normal = normaliseVector(this.normal);
        var d1 = this.normal[0];
        var d2 = this.normal[1];
        this.minor = diameter * sqrt(1 - d1 * d1 - d2 * d2);
        this.angle = atan2(d2, d1) + 90;
        
        var coords = applyCameraToNode(center);
        this.x = coords[0];
        this.y = coords[1];
        this.z = coords[2];
    };
    this.update();
    
    // Set the drawing style
    this.style = function() {
        strokeWeight(2);
        if (this.normal[2] > 0) {
            if (lightIntensity < 0) {
                fill(GRASS2);
            } else {
                fill(lerpColor(GRASS2, GRASS1, lightIntensity));
            }
        } else {
            fill(GROUND);
        }
        noStroke();
    };
    
    this.draw = function() {
        this.style();
        pushMatrix();
        translate(this.x, this.y);
        rotate(this.angle);
        ellipse(0, 0, diameter, this.minor);
        popMatrix();
    };
};

// A line and a label representing an axis
var Axis = function(name, v1) {
    var r1 = sphereR + 2;
    var r2 = sphereR + 16;
    var r3 = sphereR + 25;
    
    this.update = function() {
        var coord = applyCameraToNode(v1);
        this.x = coord[0];
        this.y = coord[1];
        this.z = coord[2];
    };
    this.update();
    
    this.draw = function() {
        stroke(AXES);
        strokeWeight(1);
        line(this.x * r1, this.y * r1, this.x * r2, this.y * r2);
        
        fill(250);
        textSize(14);
        textAlign(CENTER, CENTER);
        text(name, this.x * r3, this.y * r3);
    };
};

var Winston = function(center, v1, v2, diameter) {
    this.update = function(){
        this.normal = normalOfTwoVectors(applyCameraToNode(v1), applyCameraToNode(v2));
        var d1 = this.normal[0];
        var d2 = this.normal[1];
        this.minor = diameter * sqrt(1 - d1 * d1 - d2 * d2);
        this.angle = atan2(d2, d1) + 90;
        
        var coords = applyCameraToNode(center);
        this.x = coords[0];
        this.y = coords[1];
        this.z = coords[2];
    };
    this.update();
    
    this.draw = function() {
        // Shadow
        noStroke();
        fill(0, 0, 0, 100);
        
        if (lightIntensity > 0) {
            var normal = normalOfTwoVectors(applyCameraToNode([1, 0, 0]), applyCameraToNode([0, 1, 0]));
            var d1 = normal[0];
            var d2 = normal[1];
            var minor = diameter * sqrt(1 - d1 * d1 - d2 * d2);
            var angle = atan2(d2, d1) + 90;
            
            var shadowLength = sphereR;
            if (diameter < sun.trueZ) {
                var d = dist(0, 0, sun.trueX, sun.trueY);
                shadowLength = min(sphereR, d * diameter / (sun.trueZ - diameter));
            }
            
            var shadowAngle = 180 + atan2(sun.y, sun.x);
            var coords = applyCameraToNode([cos(shadowAngle), sin(shadowAngle), 0]);
            
            line(0, 0, shadowLength * coords[0], shadowLength * coords[1]);
            
            pushMatrix();
            //translate(shadowLength * coords[0]/2, shadowLength * coords[1]/2);
            var center = applyCamera(0, -diameter/2, 0);
            translate(center[0], center[1]);
            
            rotate(angle);
                noStroke();
                fill(0, 0, 0, 100);
                //ellipse(0, 0, diameter, minor);
            popMatrix();
        }

        
        // Face
        pushMatrix();
        translate(this.x, this.y);
        rotate(this.angle);
            strokeWeight(1);
            stroke(255);
            fill(255, 255, 0);
            ellipse(0, 0, diameter, this.minor);
        popMatrix();
        
        // Mouth
        pushMatrix();
        var coords = applyCameraToNode([3, 0, 7]);
        translate(coords[0], coords[1]);
        rotate(this.angle);
            noStroke();
            fill(252, 65, 65);
            ellipse(0, 0, 8, 8 * this.minor / diameter);
        popMatrix();

        // Eyes
        var r = 3 * this.minor / diameter;
        fill(46);
        
        var coords = applyCameraToNode([-1, 0, 14]);
        pushMatrix();
        translate(coords[0], coords[1]);
        rotate(this.angle);
            ellipse(0, 0, 3, r);
        popMatrix();
        
        var coords = applyCameraToNode([6, 0, 14]);
        pushMatrix();
        translate(coords[0], coords[1]);
        rotate(this.angle);
            ellipse(0, 0, 3, r);
        popMatrix();

    };
};

var Sun = function(r) {
    this.update = function() {
        var obliquity = sin(orbit) * rotationTilt;
        var dy = sphereR * sin(obliquity);
        var cy = -dy * cos(-latitude);
        var cz = dy * sin(-latitude);
        
        var r = sphereR * cos(obliquity);
        this.trueX = r * sin(earthRotation + 180);
        var y1 = r * cos(earthRotation + 180);
        this.trueY = cy + y1 * sin(-latitude);
        this.trueZ = cz + y1 * cos(-latitude);
        
        var coord = applyCamera(this.trueX, this.trueY, this.trueZ);
        this.x = coord[0];
        this.y = coord[1];
        this.z = coord[2];
        
        lightIntensity = dotProduct(normaliseVector(coord), ground.normal);
    };
    
    this.draw = function() {
        noStroke();
        ellipse (this.x, this.y, r, r);
        fill(255, 255, 0);
        ellipse(this.x, this.y, r, r);
        fill(255, 89, 0, 100);
        ellipse(this.x, this.y, r + 3, r + 3);
    };
};

/*******************************************
 * Create objects
********************************************/

ground = new Ground([0, 0, 0], [1, 0, 0], [0, 1, 0], sphereD);
sun = new Sun(16);

var displayObjects = [
    new skySphere(),
    ground,
    new Axis("N", [0, -1, 0]),
    new Axis("E", [-1, 0, 0]),
    new Axis("S", [0, 1, 0]),
    new Axis("W", [1, 0, 0]),
    new Winston([0, 0, 10], [1, 0, 0], [0, 0, 1], 20),
    sun
];


/*******************************************
 * Functions for updating display objects
********************************************/

var sortByZ = function(a, b) {
    return a.z - b.z;
};

// After moving the camera, we need to update the coordinates of all displayed object.
// We also resort them by z-coordinate so we can draw them in the correct order.
var updateDisplayObjects = function() {
    for (var i = 0; i < displayObjects.length; i++) {
        displayObjects[i].update();
    }
    displayObjects.sort(sortByZ);
};

/*******************************************
 * Display
********************************************/

// Draw a 180 degree arc between angles a1 and a2, with diameter d
var drawArc = function(center, v1, v2, a1, a2, d) {
    var coords = applyCameraToNode(center);
    var normal = normalOfTwoVectors(applyCameraToNode(v1), applyCameraToNode(v2));
    var minor = d * sqrt(1 - normal[0] * normal[0] - normal[1] * normal[1]);
    var angle = atan2(normal[1], normal[0]) + 90;
    
    pushMatrix();
    translate(coords[0], coords[1]);
    rotate(angle);
    if (normal[2] < 0) {
        arc(0, 0, d, minor, a1, a2);
    } else {
        arc(0, 0, d, minor, -a2, -a1);
    }
    popMatrix();
};

// Draw the meridians and the path of the sun
var drawArcs = function(a1, a2) {
    noFill();
    stroke(AXES);
    strokeWeight(1);
    
    // North-South meridian
    drawArc([0, 0, 0], [0, 1, 0], [0, 0, 1], a1, a2, sphereD);
    // East-West meridian
    drawArc([0, 0, 0], [-1, 0, 0], [0, 0, 1], a1, a2, sphereD);
    
    // Sun Path 
    stroke(255, 200, 0);
    strokeWeight(2);
    noFill();
    
    var sl = sin(-latitude);
    var cl = cos(-latitude);
    var obliquity = sin(orbit) * rotationTilt;
    var dy = sphereR * sin(obliquity);
    
    drawArc([0, -dy * cl, dy * sl], [1, 0, 0], [0, sl, cl], a1, a2, sphereD * cos(obliquity));
};

/*******************************************************************
 * Display information and time and position of person on Earth
********************************************************************/

var drawPlayButton = function(x, y) {
    // Play / Pause
    var r = 27;
    var c;
    
    if (dist(mouseX, mouseY, x + translateX, y + translateY) <= r/2 + 4) {
        c = 250;
    } else {
        c = 180;
    }
    
    noFill();
    stroke(c);
    strokeWeight(2);
    ellipse(x, y, r, r);
    
    noStroke();
    fill(c);
    if (running) {
        rect(x - 5, y - 6, 3, 12, 5);
        rect(x + 1, y - 6, 3, 12, 5);
    } else {
        triangle(x - 4, y - 6, x - 4, y + 6, x + 8, y);
    }
};

var writeTime = function(t) {
    t *= 24 / 360;
    var _hour = floor(t);
    var _min = floor((t - _hour) * 60);
    
    if (_hour === 24) {
        _hour = 0;
    }
    if (_min < 10) {
        _min = "0" + _min;
    }
    if (_hour > 12) {
        return (_hour - 12) + ":" + _min + " PM";
    } else if (_hour === 12) {
        return _hour + ":" + _min + " PM";
    } else {
        return _hour + ":" + _min + " AM";
    }
};

var months = {
    January: 31,
    February: 28,
    March: 31,
    April: 30,
    May: 31,
    June: 30,
    July: 31,
    August: 31,
    September: 30,
    October: 31,
    November: 30,
    December: 31
};

var dayToDate = function(d) {
    d = ceil(d) % 365;
    for (var m in months) {
        var days = months[m];
        if (d <= days) {
            return [d, m];
        } else {
            d -= days;
        }
    }
};

var drawClock = function(x, y, r, c) {
    var t = earthRotation * 24 / 360;
    var hourAngle = earthRotation * 2 - 90;
    var minAngle = (t - floor(t)) * 360 - 90;
    
    strokeWeight(2);
    stroke(c);
    noFill();
    ellipse(x, y, r, r);
    
    // Hour hand
    line(x, y, x + 9 * cos(hourAngle), y + 9 * sin(hourAngle));
    // Minute hand
    strokeWeight(1);
    line(x, y, x + 16 * cos(minAngle), y + 16 * sin(minAngle));
    
    fill(c);
    textSize(12);
    textAlign(CENTER, TOP);
    text(writeTime(earthRotation), x, y + r/2 + 2);
};

var drawOrbit = function(x, y, r, c) {
    r--;
    strokeWeight(1);
    stroke(c);
    noFill();
    ellipse(x, y, r, r);
    
    // Sun
    noStroke();
    fill(c);
    ellipse(x, y, 9, 9);
    stroke(c);
    for (var i = 0; i < 6; i++) {
        var ci = cos(i * 30);
        var si = sin(i * 30);
        var r2 = 6;
        line(x - r2 * ci, y - r2 * si, x + r2 * ci, y + r2 * si);
    }
    
    // Earth
    var ex = x + r * cos(orbit) / 2;
    var ey = y + r * sin(orbit) / 2;
    var er = 8;
    stroke(c);
    fill(0);
    ellipse(ex, ey, er, er);
    fill(c);
    noStroke();
    arc(ex, ey, er, er, orbit - 270, orbit - 90);
    
    // Date
    var date = dayToDate(265 + orbit * 365.25/360);
    fill(c);
    textSize(12);
    textAlign(CENTER, TOP);
    text(date[0] + " " + date[1].slice(0, 3), x, y + r/2 + 2);
};

var drawLatitude = function(x, y, r, c) {
    strokeWeight(2);
    stroke(c);
    noFill();
    ellipse(x, y, r, r);
    
    noFill();
    stroke(c);
    strokeWeight(1);
    // Longitude
    ellipse(x, y, r/5, r-1);
    ellipse(x, y, r/2, r-1);
    ellipse(x, y, r * 0.8, r-1);
    //Latitude
    var ly = latitude * iconR / 180;
    var lr = sqrt(iconR * iconR / 4 - ly * ly);
    line(x - lr, y - ly, x + lr, y - ly);
    
    fill(c);
    textSize(12);
    textAlign(CENTER, TOP);
    if (latitude < 0) {
        text(-latitude + "° S", x, y + r/2 + 2);
    } else {
        text(latitude + "° N", x, y + r/2 + 2);
    }
};

var drawTilt = function(x, y, r, c) {
    var ty = y + r/2 + 2;
    r -= 6;
    strokeWeight(2);
    stroke(c);
    noFill();
    ellipse(x, y, r, r);
    
    // Longitude
    strokeWeight(1);
    pushMatrix();
    translate(x, y);
    rotate(-rotationTilt);
    ellipse(0, 0, r/5, r-1);
    ellipse(0, 0, r/2, r-1);
    ellipse(0, 0, r * 0.8, r-1);
    line(-r/2, 0, r/2, 0);
    strokeWeight(2);
    line(0, r/2, 0, r/2 + 5);
    line(0, -r/2, 0, -r/2 - 5);
    popMatrix();
    
    fill(c);
    textSize(12);
    textAlign(CENTER, TOP);
    text(rotationTilt + "°", x, ty);
};

var drawIconFunctions = [drawClock, drawOrbit, drawLatitude, drawTilt];

var drawInfo = function() {
    // Background
    noStroke();
    fill(0, 0, 0, 220);
    rect(-translateX, -translateY, width, 60);
    
    drawPlayButton(26 - translateX, iconY);
    
    var mx = mouseX - translateX;
    var my = mouseY - translateY;
    for (var i = 0; i < drawIconFunctions.length; i++) {
        var col = dist(mx, my, iconX + i * iconDX, iconY) <= 5 + iconR / 2 ? 250 : 180;
        drawIconFunctions[i](iconX + iconDX * i, iconY, iconR, col);
    }
    
    fill(250);
    textSize(13);
    textAlign(LEFT, TOP);
    text("Click on an icon to change a parameter",
            iconX + iconDX * (i-0.4), 6 - translateY, 100, 100);
    var txt = "Light intensity: " + max(0, round(lightIntensity * 100)) + "%";
    text(txt, 5 - translateX, height - translateY - 20);
};

/*******************************************************************
 * Icon functions - called when an icon is clicked
********************************************************************/

// Time set to be in the range midnight to midday
var setTime = function(dx, dy) {
    var angle = (atan2(dy, dx) + 450) % 360;
    earthRotation = angle / 2 + 180;
};

var setDate = function(dx, dy) {
    orbit = atan2(-dy, -dx) + 180;
};

var setLatitude = function(dx, dy) {
    latitude = constrain(round(-180 * dy / iconR), -90, 90);
};

var setTilt = function(dx, dy) {
    var angle = (atan2(dy, dx) + 450) % 180;
    rotationTilt = round(180 - angle);
    if (rotationTilt === 180) {
        rotationTilt = 0;
    }
};

/*******************************************************************
 * Update function - called every tick that simulation is running
********************************************************************/

var update = function() {
    earthRotation += earthRotationSpeed;
    if (earthRotation > 360) {
        earthRotation -= 360;
        orbit += 365.25 / 360;
        if (orbit > 360) {
            orbit -= 360;
        }
    } 
    sun.update();
    displayObjects.sort(sortByZ);
};

var draw = function() {
    background(BACKGROUND);
    
    drawArcs(0, 180);
    displayObjects.forEach(function(obj) {
        obj.draw();
    });
    drawArcs(-180, 0);
    
    drawInfo();
    
    if (running) {
       update(); 
    }
};

/// Initial rotation
rotateX3D(60);
rotateY3D(20);
updateDisplayObjects();

/*******************************************
 * Event handling
********************************************/

var mouseDragged = function() {
    var theta1 = -(pmouseX - mouseX) * PI / 10;
    var theta2 = (pmouseY - mouseY) * PI / 10;
    rotateY3D(theta1);
    rotateX3D(theta2);
    updateDisplayObjects();
};

var iconFunctions = [setTime, setDate, setLatitude, setTilt];
var mouseReleased = function() {
    if (mouseY < 60) {
        var mx = mouseX - translateX;
        var my = mouseY - translateY;
        
        for (var i = 0; i < iconFunctions.length; i++) {
            if (dist(mx, my, iconX + i * iconDX, iconY) <= 5 + iconR / 2) {
                iconFunctions[i](mx - iconX - i * iconDX, my - iconY);
                running = false;
                updateDisplayObjects();
                break;
            }
        }
        
        if (dist(mx, my, 26 - translateX, iconY) <= 5 + 26 / 2) {
            running = !running;
        }
    }
};

// Spacebar toggles animation
var keyPressed = function() {
    if (keyCode === 32) { running = !running; }
};