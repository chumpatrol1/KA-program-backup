
// Coordinates for cylinder midline ends
var x1 = 40;
var y1 = 70;
var x2 = 220;
var y2 = 160;

// Coordinates for knee sphere
var kcx = 238;
var kcy = 169;
var kr = 36;
var kr2 = kr * kr;

// Calculate unit vector for l
var ldx = x2 - x1;
var ldy = y2 - y1;
var length = sqrt(ldx * ldx + ldy * ldy);
ldx /= length;
ldy /= length;

// Width at either end
var w1 = 100;
var w2 = 60;

// Calculate coordinates of vertices of outline
var vx1 = x1 + w1 * ldy / 2;
var vx2 = x1 - w1 * ldy / 2;
var vx3 = x2 - w2 * ldy / 2;
var vx4 = x2 + w2 * ldy / 2;
var vy1 = y1 - w1 * ldx / 2;
var vy2 = y1 + w1 * ldx / 2;
var vy3 = y2 + w2 * ldx / 2;
var vy4 = y2 - w2 * ldx / 2;

// Vector values for boundary calculation
var dx1 = vx2 - vx1;
var dy1 = vy2 - vy1;
var dx2 = vx3 - vx2;
var dy2 = vy3 - vy2;
var dx3 = vx4 - vx3;
var dy3 = vy4 - vy3;
var dx4 = vx1 - vx4;
var dy4 = vy1 - vy4;

// Calculate bounding box coordinate
/*
var bx1 = min.call(null, vx1, vx2, vx3, vx4);
var bx2 = max.call(null, vx1, vx2, vx3, vx4);
var by1 = min.call(null, vy1, vy2, vy3, vy4);
var by2 = max.call(null, vy1, vy2, vy3, vy4);
*/
// Might as well hard code these
var bx1 = vx2;
var bx2 = vx4;
var by1 = vy1;
var by2 = vy3;

// Return a 400 x 400 x 3 array of normals for each pixel
// Each normal is a 3D vector and corresponds to three entries in the array (x, y, z)
var normMap = new Array(400 * 400 * 3);
var getNormalMap = function() {
    var x, y, z, w, mx, my, ix, iy, d, pixelIndex;
    var leg, dx, dy;
    
    for (y = 0; y < 400; y++) {
        // Upper leg
        leg = y > by1 && y < by2;
        for (x = 0; x < 400; x++) {
            // Test whether points on the upper leg midline
            if (leg && x > bx1 && x < bx2) {
                // Test whether point projects to line
                mx = x - x1;
                my = y - y1;
                w = mx * ldx + my * ldy;
                
                if (w >= 0 && w <= length) {
                    // Find where point is on line
                    ix = x1 + w * ldx - x;
                    iy = y1 + w * ldy - y;
                    
                    // Ratio of distance from midline to width at that point
                    w = 2 * length * sqrt(ix * ix + iy * iy) / (w1 * (length - w) + w2 * w);
                    
                    if (w < 1) {
                        pixelIndex = (x + y * 400) * 3;
                        z = 1 - w;
                        normMap[pixelIndex] = 175 * z + 80;
                    }
                }
                
            }
            
            // Test whether points on the knee
            dx = x - kcx;
            dy = y - kcy;
            d = dx * dx + dy * dy;
            if (d <= kr2) {
                pixelIndex = (x + y * 400) * 3;
                w = 175 * (1 - d / kr2) + 80;
                if (!normMap[pixelIndex]) {
                    normMap[pixelIndex] = w;
                }
            }
        }
    }
};
getNormalMap();

var lightZ = 80;
var lightZ2 = lightZ * lightZ;

var _noise = noise;
// TODO: cache noise

draw = function() {
    background(0);
    loadPixels();
    
    var p = this.imageData.data;
    var ms = millis();
    
    // Calculate normalised light vector
    var lightXNorm = mouseX - 200;
    var lightYNorm = mouseY - 200;
    var lightDist = sqrt(lightXNorm * lightXNorm + lightYNorm * lightYNorm + lightZ2);
    lightXNorm /= lightDist;
    lightYNorm /= lightDist;
    var lightZNorm = lightZ / lightDist;
    
    var x, y, dx, light, yp, xp, zp;
    var drawY, pixelIndex;
    
    
    for (y = 0; y < 300; y++) {
        for (x = 0; x < 300; x++) {
            pixelIndex = x + y * 300;
            if (normMap[pixelIndex * 3]) {
                p[pixelIndex * 4 + 1] = normMap[pixelIndex * 3];
            }
        }
    }
    
    ms = millis() - ms;
    updatePixels();
    
    // Test speed
    fill(200);
    text(ms, 370, 390);
    //text(d, 370, 370);
    noLoop();
    
    
    // Draw outline
    /*
    stroke(255);
    strokeWeight(2);
    line(x1, y1, x2, y2);
    strokeWeight(1);
    noFill();
    quad(vx1, vy1, vx2, vy2, vx3, vy3, vx4, vy4);
    ellipse(kcx, kcy, kr * 2, kr * 2);
    */
};

mouseClicked = function() {
    println(mouseX + " " + mouseY);
    println(normMap[(mouseX + mouseY * 300) * 3]);
};