/*********************************************************
 * Simulation of telescope on Earth looking at the night
 * sky (ignoring the rotation of the Earth).
*********************************************************/
var telescopeAngle = 40;

// Sizes
var sun_size = 20;
var mars_size = 7;
var earth_size = 13;

// Colours
var SUN_COL = color(255, 255, 0);
var MARS_COL = color(212, 95, 17);
var EARTH_COL = color(61, 100, 255);

// Earth days for orbit
var mars_year = 687;
var earth_year = 365;

// Orbit ellipse radii in millions of km (x, y)
var mars_orbit_r = [228, 227];
var earth_orbit_r = [150, 150];

// Other variables for the display
var scaling_factor = 0.6;
var orbit_plots = 5;

var t = 0;
var running = true;

// Put (0, 0) in the centre to make things easier
translate(200, 160);

var Sun = function(r, colour) {
    this.x = 0;
    this.y = 0;
    
    this.update = function() {
    };
    
    this.draw = function() {
        var x = this.x;
        var y = this.y;
        
        fill(colour);
        fill(colour);
        ellipse(x, y, r, r);
        fill(255, 89, 0, 100);
        ellipse(x, y, r+3, r+3);
    };
};

var Planet = function(cx, cy, major, minor, year, r, colour) {
    this.x = 0;
    this.y = 0;
    this.r = r;
    this.theta = 0;
    cx *= scaling_factor;
    cy *= scaling_factor;
    major *= scaling_factor;
    minor *= scaling_factor;
    
    this.previous_points = [];
    
    this.update = function(t) {
        this.theta = (this.theta + 360/year) % 360;
        this.x = cx + major * cos(this.theta);
        this.y = cy + minor * sin(this.theta);
        
        if (t % orbit_plots === 0) {
            var x = this.x;
            var y = this.y;
            this.previous_points.push([x, y]);
            if (this.previous_points.length > year/orbit_plots) {
                this.previous_points.shift();
            }
        }
    };
    
    this.display = function(x, y) {
        fill(colour);
        ellipse(x, y, r, r);
    };
    
    this.draw = function() {
        fill(colour);
        
        /*
        for (var i in this.previous_points) {
            var p = this.previous_points[i];
            ellipse(p[0], p[1], 2, 2);
        }
        */
        this.display(this.x, this.y);
    };
};

/********************************************************
 *               Make planets here
*********************************************************/
var sun = new Sun(sun_size, SUN_COL);

var mars = new Planet(21, 0,        // Centre of orbit (x, y)
                      mars_orbit_r[0], mars_orbit_r[1],
                      mars_year, mars_size, MARS_COL);

var earth = new Planet(2.5, 0,       // Centre of orbit (x, y)
                       earth_orbit_r[0], earth_orbit_r[1],
                       earth_year, earth_size, EARTH_COL);
                       
var bodies = [sun, earth, mars];
mars.theta += 60;

var createRandomStars = function(n) {
    var stars = [];
    for (var i=0; i<n; i++) {
        var x = random() * 360;
        var y = random() * 80;
        var c = random() * 200 + 50;
        stars.push([x, y, c]);
    }
    return stars;
};
var stars = createRandomStars(160);

/********************************************************
 *               Telescope
*********************************************************/

var Telescope = function(base, angle) {
    this.angle = angle;
    this.max_a = telescopeAngle;
    this.fixed_a = false;
    var t = 800;
    this.x = base.x;
    this.y = base.y;
    var r = base.r;
    this.angle = base.theta + angle;
    
    this.draw = function() {
        fill(200, 200, 200, 50);
        var x1 = this.x + t * cos(this.angle + this.max_a)/2;
        var y1 = this.y + t * sin(this.angle + this.max_a)/2;
        var x2 = this.x + t * cos(this.angle - this.max_a)/2;
        var y2 = this.y + t * sin(this.angle - this.max_a)/2;
        triangle(this.x, this.y, x1, y1, x2, y2);
    };
    
    this.fixAngle = function() {
        this.fixed_a = true;
        this.angle += 90 - telescopeAngle;
        this.angle %= 360;
    };
    
    this.update = function() {
        this.x = base.x + r * cos(base.theta)/2;
        this.y = base.y + r * sin(base.theta)/2;
        if (this.fixed_a) {
            var d = (this.angle - base.theta + 540) % 360 - 180;
            if (abs(d) > 120 - this.max_a) {
                this.fixed_a = false;
            }
        } else {
            var d = (mars.theta - base.theta + 540) % 360 - 180;
            if (d > 0 && d < 38) {
                this.fixAngle();
            } else {
                this.angle = base.theta + angle;   
            }
        }
    };
};

var telescope = new Telescope(earth, 0);
/********************************************************
 *               Display functions
*********************************************************/
var drawView =function () {
    fill(0);
    stroke(255);
    rect(-201, 160, 401, 80);
    
    fill(220);
    textSize(14);
    if (telescope.fixed_a) {
        text("Telescope fixed on stars", -190, 180);   
    } else {
        text("View through telescope", -190, 180);   
    }

    // Stars
    for (var i=0; i<stars.length; i++) {
        var s = stars[i];
        var x = (360 + s[0] - telescope.angle) % 360;
        if (x > 180) { x = x-360; }
        
        if (x < telescopeAngle) {
            stroke(s[2]);
            point(x * 200 / telescopeAngle, 161 + s[1]);
        }
    }

    var dTheta = 180+atan2(telescope.y-mars.y, telescope.x-mars.x);
    var d = (360 + telescope.angle - dTheta) % 360;

    // Circles are annoying.
    if (d > 180) { d = d-360; } 
    
    noStroke();
    if (abs(d) <= telescopeAngle) {
        //text(200*d/telescopeAngle, -180, 230);
        mars.display(-200*d/telescopeAngle, 200);
    }
};

var draw = function() {    
    if (running) {
        t++;
        for (var i in bodies) {
            bodies[i].update(t);
        }
        telescope.update();
    }
    
    background(0, 0, 0);
    noStroke();
    for (var i in bodies) {
        bodies[i].draw();
    }
    
    telescope.draw();
    
    drawView();
    
};

/********************************************************
 *               Event handling
*********************************************************/

var mousePressed = function() {
    if (telescope.fixed_a) {
        telescope.fixed_a = false;
    } else {
        telescope.fixAngle();
    }
};

var keyPressed = function() {
    // Spacebar toggles animation
    if (keyCode === 32) { running = !running; }
};