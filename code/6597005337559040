/*********************************************************
 * Drag the focus (orange dot) or directrix (orange line)
 * to define the parabola.
 * 
 * Drag to blue dot on the directrix to see which two
 * tangents to the curve intersect at that point.
*********************************************************/

var BACKGROUND = color(250, 250, 250);
var PINK = color(255, 0, 175);
var BLUE = color(64, 95, 237);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

textSize(14);
var CONTROL_POINT_SIZE = 10;

var directrixY = 200;

var sites = [
    [80, 50],
    [120, 160],
    [300, 100],
];

/*********************************************************
 *      Draw functions
*********************************************************/

var drawSite = function(site) {
    point(site[0], site[1]);
};

var drawParabola = function(site) {
    // Vertical distance between focus and directrix
    var d = site[1] - directrixY;
    
    if (d > 0) { return; }
    
    // Coeffiecient on x squared term
    var a = 0.5 / d;
    
    var y1 = directrixY + 0.5 * d;
    
    var dx = 4;
    var px, py;
    
    // Parabola
    beginShape();
    for (var x = 0; x <= width; x += dx) {
        px = x - site[0];
        py  = a * px * px + y1;
        vertex(x, py);
    }
    endShape();
};

var findCircle = function(points) {
    var d1 = dist(points[0][0], points[0][1], points[1][0], points[1][1]);
    var d2 = dist(points[1][0], points[1][1], points[2][0], points[2][1]);
    
    // Perpendicular bisector vectors
    var dx1 = -(points[0][1] - points[1][1]) / d1;
    var dy1 = (points[0][0] - points[1][0]) / d1;
    var dx2 = -(points[1][1] - points[2][1]) / d2;
    var dy2 = (points[1][0] - points[2][0]) / d2;
    
    var dot = dx2 * dy1 - dy2 * dx1;
    
    // If points are colinear(ish), draw a straight line
    if (abs(dot) < 0.04) {
        stroke(BLUE);
        strokeWeight(2);
        line(points[0][0] + 600 * dy1, points[0][1] - 600 * dx1,
             points[0][0] - 600 * dy1, points[0][1] + 600 * dx1);
        return;
    }
    
    // Mid-point coordinates
    var mx1 = (points[0][0] + points[1][0]) / 2;
    var my1 = (points[0][1] + points[1][1]) / 2;
    var mx2 = (points[1][0] + points[2][0]) / 2;
    var my2 = (points[1][1] + points[2][1]) / 2;
    
    // Draw perpendicular bisector
    strokeWeight(1);
    //line(mx1 - dx1, my1 - dy1, mx1 + dx1, my1 + dy1);
    //line(mx2 - dx2, my2 - dy2, mx2 + dx2, my2 + dy2);
    
    // Find intersection of lines in terms of position along 2 bisector
    var s = (dx1 * (my2 - my1) - dy1 * (mx2 - mx1)) / dot;
    
    var ix = mx2 + s * dx2;
    var iy = my2 + s * dy2;

    // Find radius
    var r = dist(ix, iy, points[0][0], points[0][1]);

    // Draw circle center
    stroke(PINK);
    strokeWeight(8);
    point(ix, iy);
    
    // Draw circle
    noFill();
    strokeWeight(2);
    ellipse(ix, iy, r * 2, r * 2);
};

/*********************************************************
 *      Main Loop
*********************************************************/

var draw = function() {
    background(BACKGROUND);
    
    // Draw sites
    stroke(BLUE);
    strokeWeight(CONTROL_POINT_SIZE);
    sites.forEach(drawSite);
    
    // Directrix
    strokeWeight(2);
    line(0, directrixY, width, directrixY);
    
    // Parabolas
    stroke(GREEN);
    noFill();
    sites.forEach(drawParabola);
    
    directrixY = mouseY;
    
    findCircle(sites);
};

/*********************************************************
 *      Event handling
*********************************************************/

var mousePressed = function() {
};

var mouseReleased = function() {
};

var mouseDragged = function() {
};
