/*********************************************************
 * When do the sun, the Earth and Mars align?
 * Calculating the oppositions from year 1877 onwards.
 * 
 * Distances in giga-meters (millions of km)
 * 
 * Slightly inaccurate since procession not taken into account.
 * Planet and sun sizes not to scale.
 * 
 * Spacebar: pause
 * s: toggle show orbit shape
*********************************************************/
var speed = 2;          // Change in days per update
var resolution = 20;    // How accurate orbit speed is

// Position and size or sun
var sunX = 215;
var sunY = 210;
var sunR = 28;

var marsData = {
    size: 8,
    colour: color(212, 95, 17),
    perihelion: 207,        // million km
    aperihelion: 249,       // million km
    longitude: 336,         // degrees
    year: 686.98,           // earth days
    mass: 0.64              // 10^24 kg
};

var earthData = {
    size: 15,
    colour: color(61, 100, 255),
    perihelion: 147,        // million km
    aperihelion: 152,       // million km
    longitude: 102,         // degrees
    year: 365.25,           // earth days
    mass: 5.97              // 10^24 kg
};

// At 6pm 28th August 2003, Earth and Mars in opposition
var _year = 2003;
var _day = 239.75;

// Angles from ellipse centres, not sun (angle from sun = 335.0)
var earthAngle = 335.6;
var marsAngle = 335.1;

// Other variables
var scalingFactor = 0.65;
var running = true;
var showCycles = true;
var showAxes = false;

var oppositions = [];
var dAngle1, dAngle2;

var Sun = function() {
    this.x = sunX;
    this.y = sunY;
    this.mass = 330000;
    this.previous_points = [];
    
    this.update = function(t) {
    };
    
    this.draw = function() {
        noStroke();
        fill(255, 255, 0);
        ellipse(this.x, this.y, sunR, sunR);
        fill(255, 89, 0, 100);
        ellipse(this.x, this.y, sunR + 3, sunR + 3);
    };
    
    this.drawCenter = function(){
        fill(255, 255, 255);
        ellipse(this.x, this.y, 2, 2);
    };
};

var Planet = function(data, angle) {
    this.year = data.year;
    
    // Distance from ellipse centre to sun
    var focusDist = scalingFactor * (data.aperihelion - data.perihelion) / 2;
    
    // Ellipse axes
    var major = scalingFactor * data.aperihelion - focusDist;
    var minor = sqrt(major * major - focusDist * focusDist);
    
    // Store these to save repeatedly calculating them
    var phi = data.longitude;
    var cosPhi = cos(phi);
    var sinPhi = sin(phi);
    
    // Angle relative the perihelion
    this.angle = angle - phi;
    
    // Center of ellipse
    var cx = sunX - focusDist * cosPhi;
    var cy = sunY + focusDist * sinPhi;
    
    // Handy properties for calculations
    var eccentricity = focusDist / major;
    var angleConstant = 360 * major * minor / data.year;
    
    // Add a numbers of days to the orbit
    this.update = function(days) {        
        var sign = days < 0 ? -1 / resolution : 1 / resolution;
        var speed = 0;

        for (var d = 0; d < abs(days) * resolution; d++) {
            // Distance from sun
            var r = major * (1 - eccentricity * eccentricity) /
                            (1 + eccentricity * cos(this.angle));
            
            // Update angle around sun
            this.angle += sign * angleConstant / (r * r);
            speed += angleConstant / (r * r);
        }
        
        var r = major * (1 - eccentricity * eccentricity) /
                        (1 + eccentricity * cos(this.angle));
                        
        // Position based on non-rotated ellipse
        var x = r * cos(this.angle) + focusDist;
        var y = r * sin(this.angle);
        
        // Rotate based on ellipse rotation
        this.x = cx + x * cosPhi - y * sinPhi;
        this.y = cy - x * sinPhi - y * cosPhi;
    };
    this.update(0);
    
    this.display = function(x, y) {
        noStroke();
        fill(data.colour);
        ellipse(this.x, this.y, data.size, data.size);
    };
    
    this.drawCycle = function() {
        translate(cx, cy);
        rotate(phi);
        ellipse(0, 0, major*2, minor*2);
        resetMatrix();
    };
    
    this.drawCenter = function() {
        stroke(255, 255, 255, 100);
        var dx = major * cosPhi;
        var dy = major * sinPhi;
        line(cx + dx, cy - dy, cx - dx, cy + dy);
        fill(data.colour);
        ellipse(cx, cy, 2, 2);
    };
    
    this.draw = function() {
        fill(data.colour);
        
        for (var i in this.previous_points) {
            var p = this.previous_points[i];
            ellipse(p[0], p[1], 2, 2);
        }
        
        this.display(this.x, this.y);
    };
};

/********************************************************
 *               Make planets here
*********************************************************/
var sun = new Sun();
var mars = new Planet(marsData, marsAngle);
var earth = new Planet(earthData, earthAngle);
var bodies = [sun, earth, mars];

/********************************************************
 *               Handy functions
*********************************************************/

var getKM = function(d) {
    return round(d / scalingFactor);
};

var getMiles = function(d) {
    return round(10 * d / (scalingFactor * 1.6093)) / 10;
};

var months = {
    January: 31,
    February: 28,
    March: 31,
    April: 30,
    May: 31,
    June: 30,
    July: 31,
    August: 31,
    September: 30,
    October: 31,
    November: 30,
    December: 31
};

var isLeapYear = function(y) {
    return (y % 4 === 0 && (y % 100 !== 0 || y % 400 === 0));
};

var dayToDate = function(d, y) {
    for (var m in months) {
        var days = months[m];
        if (m === 'February' && isLeapYear(y)) {
            days++;
        }
        if (d <= days) {
            return [d, m];
        } else {
            d -= days;
        }
    }
};

var convertDayToYear = function(days) {
    var y = 0;
    
    if (days > 365) {
        while (true) {
            var n = 365 + isLeapYear(_year + y);
            if (days > n) {
                days -= n;
                y++;
            } else {
                break;
            }
        }   
    } else if (days < 0) {
        while (true) {
            if (days < 0) {
                var n = 365 + isLeapYear(_year - 1 - y);
                days += n;
                y--;   
            } else {
                break;
            }
        }
    }
    
    return [y, days];
};

var updateDate = function(days) {
    _day += days;
    var y = convertDayToYear(_day);
    _day = y[1];
    _year += y[0];
};

var changeDay = function(change) {
    for (var i = 1; i < bodies.length; i++) {
        if (change > 0) {
            // A complete year doesn't affect the angle
            var years = floor(change / bodies[i].year);
            var days = change - bodies[i].year * years;
            bodies[i].update(days);
        } else {
            var years = floor(-change / bodies[i].year);
            var days = -change - bodies[i].year * years;
            bodies[i].update(bodies[i].year - days); 
        }
    }
    updateDate(change);
};

var setYear = function(newYear) {
    changeDay((newYear - _year) * 365.25);
};

// Get to 1st Janurary 1877
changeDay(126);
setYear(1877);

// Get to 1st Janurary 2000
//changeDay(-1335);

// Get to 1st Janurary 1877
//changeDay(-44924);

/********************************************************
 *               Display functions
*********************************************************/

var drawInfo = function() {
    var d = dist(mars.x, mars.y, earth.x, earth.y);
    
    fill(255);
    textSize(13);
    textAlign(LEFT, BASELINE);
    var date = dayToDate(round(_day), _year);
    text(date[0] + " " + date[1] + " " + _year, 8, 18);
    //text(round(100 * dAngle1)/100 + " degrees", 8, 36);
    
    /*
    text("Distance between Earth and Mars: " + getKM(d) +
         " million km", x + 4, y + 18);
    */
};

// Record an opposition between theta1 and theta
var drawOppositions = function(theta1, theta2) {
    fill(255, 255, 255, 200);
    stroke(255, 255, 255, 80);
    textSize(11);
    textAlign(CENTER, CENTER);
    
    strokeWeight(1);
    for (var i in oppositions) {
        var opp = oppositions[i];
        var data = opp.day + " " + opp.month;
        data += "\n" + opp.year;
        data += "\n" + getKM(opp.dist) + " Gm"; 
        var x = opp.x - 30 * cos(opp.angle);
        var y = opp.y - 30 * sin(opp.angle);
        
        line(sunX, sunY, opp.x, opp.y);
        text(data, x, y);
    }
};

/***********************************************************
* Check whether the change in angle between the Earth
* and Mars has changed from decreasing to increasing
* In which case record an opposition
**********************************************************/
var checkForOpposition = function() {
    var theta1 = 360 + atan2(sunY - earth.y, sunX - earth.x);
    var theta2 = 360 + atan2(sunY - mars.y, sunX - mars.x);
    dAngle2 = dAngle1;
    dAngle1 = (540 + (theta1 % 360) - (theta2 % 360)) % 360 - 180;
    
    if (dAngle2 && dAngle1 < 0 && dAngle2 > 0) {
        var date = dayToDate(_day, _year);
        var close = dist(mars.x, mars.y, earth.x, earth.y);
        oppositions.push({
            x: mars.x,
            y: mars.y,
            angle: theta2,
            year: _year,
            dist: close,
            day: round(date[0]),
            month: date[1].slice(0, 3)
        });
        if (oppositions.length > 15) {
            oppositions.shift();
        }
    }
};

var draw = function() {    
    if (running) {
        for (var i = 0; i<speed; i++) {
            changeDay(1);
            checkForOpposition();
        }
    }
    
    background(0);
    
    noFill();
    strokeWeight(2);
    if (showCycles) {
        stroke(61, 100, 255, 60);
        earth.drawCycle();
        stroke(212, 95, 17, 36);
        mars.drawCycle();
    }
    
    drawOppositions();
    
    for (var i in bodies) {
        bodies[i].draw();
    }
    
    if (showAxes) {
        for (var i in bodies) {
            bodies[i].drawCenter();
        }
    }
    
    drawInfo();
};

/********************************************************
 *               Event handling
*********************************************************/

var mousePressed = function() { 
};

var keyPressed = function() {
    // Spacebar toggles animation
    if (keyCode === 32) { running = !running; }
    if (keyCode === 83) { showCycles = !showCycles; }
};