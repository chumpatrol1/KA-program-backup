/********************************************
 * Show a 3D shape that can be rotated with
 * the mouse
*********************************************/

var BACKGROUND = color(100, 200, 250);
var SHADE = color(40, 40, 40);
var WHITE = color(255, 255, 255);

var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

var WALL_YELLOW = color(255, 255, 115);
var WALL_ORANGE = color(255, 175, 75);
var WALL_GREEN = color(220, 235, 16);
var WALL_PINK = color(255, 180, 200);
var WALL_BLUE = color(175, 195, 235);
var ROOF = color(190, 110, 88);
var BASE = color(80, 80, 80);
var DOOR = color(210, 45, 10);

var drawNodes = false;
var showImage = false;

var translateX = width / 2 + 0.5;
var translateY = height / 2 + 0.5;

var ambientInts = 0.3;

var showing = {
    Light: false,
    Camera: true,
    'Camera direction': true,
    //'Image plane': true,
    'Pixel grid': true,
    //Pixel: true,
    'All rays': false,
    Ray: false,
    Image: true,
};

/********************************************
 *      Linear algebra
*********************************************/

var addVectors = function(v1, v2) {
    return {
        x: v1.x + v2.x,
        y: v1.y + v2.y,
        z: v1.z + v2.z
    };
};

var subtractVectors = function(v1, v2){
    return {
        x: v1.x - v2.x,
        y: v1.y - v2.y,
        z: v1.z - v2.z
    };
};

var multiplyVector = function(v, s) {
    return {
        x: v.x * s,
        y: v.y * s,
        z: v.z * s
    };
};

var averageVectors = function(v1, v2) {
    return {
        x: (v1.x + v2.x) / 2,
        y: (v1.y + v2.y) / 2,
        z: (v1.z + v2.z) / 2
    };
};

var vectorLength = function(v) {
    return sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
};

var normaliseVector = function(v) {
    var d = vectorLength(v);
    return { x: v.x / d, y: v.y / d, z: v.z / d };
};

// Starting at v1, go along to v2 by t
// t = 0, returns v1, t = 1, returns v2
var alongVectors = function(v1, v2, t) {
    var v3 = subtractVectors(v2, v1);
    return {
        x: v1.x + t * v3.x,
        y: v1.y + t * v3.y,
        z: v1.z + t * v3.z
    };
};

var dist3D = function(v1, v2) {
    var v = subtractVectors(v1, v2);
    return vectorLength(v);
};

var printVector = function(v) {
    println(v.x + " " + v.y + " " + v.z);
};

// Given a node, return a vector of its
// original coordinates
var originalNode = function(node) {
    return { x: node.sx, y: node.sy, z: node.sz };
};

// Assume vectors are 3D with attributes, x, y, z
var crossProduct = function(v1, v2) {
    return {
        x: v1.y * v2.z - v1.z * v2.y,
        y: v1.z * v2.x - v1.x * v2.z,
        z: v1.x * v2.y - v1.y * v2.x
    };
};

var crossProduct2D = function(v1, v2) {
    return v1.x * v2.y - v2.x * v1.y;
};

// Assume everything has 3 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
};

var dotProduct2D = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

// Given at least 3 nodes, find the normal to the plane they define
// Only the first 3 nodes are used.
var normalOfPlane = function(nodes) {
    var edge1 = subtractVectors(nodes[0], nodes[1]);
    var edge2 = subtractVectors(nodes[0], nodes[2]);
    return crossProduct(edge1, edge2);
};

var multiplyMatrices = function(m1, m2) {
    var newMatrix = [];

    for (var i = 0; i < 3; i++) {
        var row = [];
        
        for (var j = 0; j < 3; j++) {
            var v = 0;
            
            for (var k = 0; k < 3; k++) {
                v += m1[i][k] * m2[k][j];
            }
            
            row.push(v);
        }
        
        newMatrix.push(row);
    }
    
    return newMatrix;
};

// Calculate whether a vector given by
// an origin and a direction,
// intersects with a triangle,
// given by 3 nodes/vectors
// From: http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
var triangleIntersection = function(vOrigin, vDirection, nodes) {
    var n1 = nodes[0];
    var n2 = nodes[1];
    var n3 = nodes[2];
    var edge1 = subtractVectors(n2, n1);
    var edge2 = subtractVectors(n3, n1);
    
    // Begin calculating determinant
    var p = crossProduct(vDirection, edge2);
    var det = dotProduct(edge1, p);
  
    // If determinant is near zero, ray lies in plane of triangle
    if (det > -EPSILON && det < EPSILON) { return 0;}
    var inv_det = 1 / det;
    
    // Calculate distance from V1 to ray origin
    var t = subtractVectors(vOrigin, n1);
 
    // Calculate u parameter and test bound
    var u = dotProduct(t, p) * inv_det;
    // The intersection lies outside of the triangle
    if (u < 0 || u > 1) { return 0; }
    
    // Prepare to test v parameter
    var q = crossProduct(t, edge1);
 
    // Calculate v parameter and test bound
    var v = dotProduct(vDirection, q) * inv_det;
    // The intersection lies outside of the triangle
    if (v < 0 || u + v > 1) { return 0; }
 
    var t = dotProduct(edge2, q) * inv_det;
 
    // Ray intersection
    // (length along direction from origin)
    if (t > EPSILON) { return t; }
};

// Test whether point, p, is inside the 
// triangle, t, defined by an array of points
var pointInTriangle = function(p, t) {
    // Calculate vectors BA and BC, and BM
    var v1 = subtractVectors(t.nodes[0], t.nodes[1]);
    var v2 = subtractVectors(t.nodes[2], t.nodes[1]);
    var v3 = subtractVectors(p, t.nodes[1]);
    
    // Calculate dot products
    var dot11 = dotProduct2D(v1, v1);
    var dot12 = dotProduct2D(v1, v2);
    var dot13 = dotProduct2D(v1, v3);
    var dot22 = dotProduct2D(v2, v2);
    var dot23 = dotProduct2D(v2, v3);
    
    // Calculate barycentric coordinates
    var d = 1 / (dot11 * dot22 - dot12 * dot12);
    var u = (dot22 * dot13 - dot12 * dot23) * d;
    var v = (dot11 * dot23 - dot12 * dot13) * d;
    
    if (u >= 0 && v >= 0 && u + v < 1) {
        // Return the point on t where they cross
        return addVectors(t.nodes[1],
               addVectors(multiplyVector(v1, u),
                          multiplyVector(v2, v)));
    }
};

var lineLineIntersection = function(p1, p2, p3, p4) {
    var r = subtractVectors(p2, p1);
    var s = subtractVectors(p4, p3);
    
    var rs = crossProduct2D(r, s);
    var qp = subtractVectors(p3, p1);
    var qpr = crossProduct2D(qp, r);
   
    if (rs !== 0) {
        var t = crossProduct2D(qp, s) / rs;
        var u = qpr / rs;
        if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {
            var i1 = addVectors(p1, multiplyVector(r, t));
            var i2 = addVectors(p3, multiplyVector(s, u));
            //ellipse(i1.x, i1.y, 12, 12);
            return i2.z - i1.z;
        }
    }
    return 0;
};

// Calculate whether vectors r and s intersect
// a is the vector between the starting points of r and s
var vectorVectorIntersection = function(r, s, a) {
    var rs = crossProduct2D(r, s);
    var ar = crossProduct2D(a, r);
    
    if (rs !== 0) {
        var t = crossProduct2D(a, s) / rs;
        var u = ar / rs;
        return (t >= 0 && t <= 1 && u >= 0 && u <= 1);
    }
};

// Return null if no intersection
// Return +ve if t1 in front of t2 otherwise -ve
var triangleTriangleIntersection = function(t1, t2) {
    // Calculate bounding box exclusion
    
    fill(ORANGE);
    noStroke();
    var p;
    
    // Are any of the triangle vertices in the other triangle?
    for (var i = 0; i < 3; i++) {
        p = pointInTriangle(t1.nodes[i], t2);
        if (p) {
            //println(t1.nodes[i].x + " " + t1.nodes[i].y);
            //ellipse(t1.nodes[i].x + translateX, t1.nodes[i].y + translateY, 12, 12);
            //printVector(t1.nodes[i]);
            //printVector(p);
            return p.z - t1.nodes[i].z;
        }
        
        p = pointInTriangle(t2.nodes[i], t1);
        if (p) {
            //println(t1.nodes[i].x + " " + t1.nodes[i].y);
            //ellipse(t2.nodes[i].x + translateX, t2.nodes[i].y + translateY, 12, 12);
            //printVector(t2.nodes[i]);
            //printVector(p);
            return t2.nodes[i].z - p.z;
        }
    }
    
    // Edge - edge intersections
    var t1a = t1.nodes[0];
    var t1b = t1.nodes[1];
    var t1c = t1.nodes[2];
    var t2a = t2.nodes[0];
    var t2b = t2.nodes[1];
    var t2c = t2.nodes[2];
    
    var sides1 = [[t1a, t1b], [t1a, t1c], [t1b, t1c]];
    var sides2 = [[t2a, t2b], [t2a, t2c], [t2b, t2c]];
    
    var z, s1, s2, i, j;
    for (i = 0; i < sides1.length; i++) {
        s1 = sides1[i];
        for (j = 0; j < sides2.length; j++) {
            s2 = sides2[j];
            z = lineLineIntersection(s1[0], s1[1], s2[0], s2[1]);
            if (abs(z) > EPSILON) { return z; }
        }    
    }
    return 0;
};

var sortByZ = function(a, b) {
    return b.z - a.z;
};

var sortByPZ = function(a, b) {
    return b.pz - a.pz;
};

// Call update function for all elements in an array
var updateArray = function(arr) {
    for (var i = 0; i < arr.length; i++) {
        arr[i].update();
    }
};

/********************************************
 *      Rotate functions
*********************************************/

var rotateZ3D = function(nodes, theta) {
    var st = sin(theta);
    var ct = cos(theta);
    var x, y;
    
    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i].x;
        y = nodes[i].y;
        nodes[i].x = ct * x - st * y;
        nodes[i].y = ct * y + st * x;
    }
};

var rotateY3D = function(nodes, theta) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, z;

    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i].x;
        z = nodes[i].z;
        nodes[i].x =  ct * x + st * z;
        nodes[i].z = -st * x + ct * z;
    }
};

var rotateX3D = function(nodes, theta){
    var ct = cos(theta);
    var st = sin(theta);
    var y, z;
    
    for (var i = 0; i < nodes.length; i++) {
        y = nodes[i].y;
        z = nodes[i].z;
        nodes[i].y = ct * y - st * z;
        nodes[i].z = st * y + ct * z;
    }
};

var getRotateXMatrix = function(theta) {
    var c = cos(theta);
    var s = sin(theta);
    return [[1, 0, 0], [0, c, -s], [0, s, c]];
};

var getRotateYMatrix = function(theta) {
    var c = cos(theta);
    var s = sin(theta);
    return [[c, 0, s], [0, 1, 0], [-s, 0, c]];
};

var applyMatrixToNodes = function(m, nodes) {
    for (var i = 0; i < nodes.length; i++) {
        var n = nodes[i];
        var x = n.x;
        var y = n.y;
        var z = n.z;
        n.x = m[0][0] * x + m[0][1] * y + m[0][2] * z;
        n.y = m[1][0] * x + m[1][1] * y + m[1][2] * z;
        n.z = m[2][0] * x + m[2][1] * y + m[2][2] * z;
    }
};

/********************************************
 *      Node object
 * A node is an point in 3D space
*********************************************/

var Node = function(x, y, z, color) {
    // Initial value
    this.sx = x;
    this.sy = y;
    this.sz = z;
    
    // Value after rotation
    this.x = x;
    this.y = y;
    this.z = z;
    
    this.toDraw = (color !== undefined);
    this.r = 7;
    this.color = color || ORANGE;
};

Node.prototype.draw = function() {
    fill(this.color);
    noStroke();
    ellipse(this.x, this.y, this.r, this.r);
};

Node.prototype.update = function(persp, mat) {
    // Apply rotation
    this.x = mat[0][0] * this.sx + 
             mat[0][1] * this.sy +
             mat[0][2] * this.sz;

    this.y = mat[1][0] * this.sx + 
             mat[1][1] * this.sy +
             mat[1][2] * this.sz;

    this.z = mat[2][0] * this.sx + 
             mat[2][1] * this.sy +
             mat[2][2] * this.sz;
    
    // Apply perspective
    //var p = persp / (this.z + persp);
    //this.px *= p;
    //this.py *= p;
};

Node.prototype.getZ = function() {
    return this.pz;
};

Node.prototype.info = function() {
    println(this.x  + " " + this.y + " " + this.z);
};

/*********************************************
 *      Edge object
 *  An edge is a line that join two nodes.
**********************************************/

var Edge = function(node1, node2, color, thickness) {
    this.node1 = node1;
    this.node2 = node2;
    this.update();
    this.color = color || WHITE;
    this.thickness = thickness || 1;
};

Edge.prototype.draw = function() {
    stroke(this.color);
    strokeWeight(this.thickness);
    line(this.x1, this.y1, this.x2, this.y2);
};

Edge.prototype.info = function() {
    println("Edge");
    this.node1.info();
    this.node2.info();
};

Edge.prototype.update = function() {
    this.x1 = this.node1.x;
    this.y1 = this.node1.y;
    this.x2 = this.node2.x;
    this.y2 = this.node2.y;
};

/*********************************************
 *      Face object
 * A face is a surface that joins
 * an array of nodes.
 * Its colour depends on its orientation
 * relative to a light source.
**********************************************/

var Face = function(nodes, color) {
    this.nodes = nodes;
    this.update();
    this.color = color || GREEN;
    this.light = this.color;
    
    if (this.nodes.length === 3) {
        this.drawShape = this.triangle;
    } else {
        this.drawShape = this.quad;
    }
};

Face.prototype.update = function() {
    // Face normal - used for determining diffuse lighting
    this.normal = normaliseVector(
        crossProduct({
            x: this.nodes[0].x - this.nodes[1].x,
            y: this.nodes[0].y - this.nodes[1].y,
            z: this.nodes[0].z - this.nodes[1].z
        }, {
            x: this.nodes[0].x - this.nodes[2].x,
            y: this.nodes[0].y - this.nodes[2].y,
            z: this.nodes[0].z - this.nodes[2].z
        }
    ));
};

Face.prototype.updateLights = function(lights) {
    // Normal, ignoring rotation of scene
    var normal = normaliseVector(normalOfPlane(this.nodes)); 
    
    var intensity = ambientInts;
    for (var i = 0; i < lights.length; i++) {
        intensity += lights[i].intensity * dotProduct(lights[i].normal, normal);    
    }
    
    intensity = constrain(intensity + ambientInts, ambientInts, 1);
    this.light = lerpColor(SHADE, this.color, intensity);
};

Face.prototype.info = function() {
    println("Face (" + this.nodes.length + ")");
    for (var i = 0; i < this.nodes.length; i++) {
        this.nodes[i].info();
    }
};

Face.prototype.draw = function() {
    strokeWeight(1);
    fill(this.light);
    stroke(this.light);
    this.drawShape();
};

Face.prototype.triangle = function() {
    triangle(this.nodes[0].x, this.nodes[0].y,
             this.nodes[1].x, this.nodes[1].y,
             this.nodes[2].x, this.nodes[2].y);
};

/********************************************
 *      Light object
 * A position and a direction vector.
 * TODO: add intensity
*********************************************/

var Light = function(x1, y1, z1, x2, y2, z2, int) {
    this.intensity = int;
    this.nodes = [
        new Node(x1, y1, z1, WHITE),
        new Node(x2, y2, z2),
    ];
    
    this.getNormal();
    
    // Add node for display
    var len = -40 * this.intensity;
    this.nodes.push(new Node(
        this.nodes[0].x + len * this.normal.x,
        this.nodes[0].y + len * this.normal.y,
        this.nodes[0].z + len * this.normal.z
    ));
    
    this.edges = [
        new Edge(this.nodes[0], this.nodes[2])
    ];
};

Light.prototype.getNormal = function() {
    this.normal = normaliseVector(
        subtractVectors(
            this.nodes[0], this.nodes[1]
        )
    );
};

/*********************************************
 *      Viewer object
 * Consists of a camera object and a scene.
 * Allows both to be rotated and shows rays
 * from the camera intersecting with the scene.
**********************************************/

var Viewer = function(lights, scene) {
    // Add Scene
    this.scene = scene;
    
    // Add lights
    this.lights = lights;
    this.updateLights();
    
    // Get initial scene
    this.perspective = 1000;
    this.matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
    this.objects = this.lights.concat([scene]);
    this.collectParts();
};

Viewer.prototype.update = function() {
    for (var i = 0; i < this.objects.length; i++) {
        this.updateObject(this.objects[i]);    
    }
    this.sort();
};

Viewer.prototype.updateObject = function(obj) {
    var nodes = obj.nodes;
    var faces = obj.faces;

    for (var i = 0; i < nodes.length; i++){
        nodes[i].update(this.perspective, this.matrix);
    }

    if (obj.edges) { updateArray(obj.edges); }
    if (obj.faces) { updateArray(obj.faces); }
};

Viewer.prototype.sort = function() {
    var n = this.parts.length;
    
    for (var i = 0; i < n; i++) {
        this.parts[i].inFront = 0;
        this.parts[i].behind = [];
    }
    
    for (var i = 0; i < n - 1; i++) {
        var p1 = this.parts[i];
        if (!p1.normal) { continue; }
        
        for (var j = i + 1; j < n; j++) {
            var p2 = this.parts[j];
            if (!p2.normal) { continue; }
            
            var z = triangleTriangleIntersection(p1, p2);
            if (z < 0) {
                // p1 is behind p2
                p2.inFront++;
                p1.behind.push(p2);
            } else if (z > 0) {
                // p2 is behind p1
                p1.inFront++;
                p2.behind.push(p1);
            }
        }
    }

    var parts = this.parts.sort(function(a, b) {
        return b.inFront - a.inFront;
    });
    
    var sorted = [];
    var c = 0;
    while (sorted.length < n) {
        for (var i = parts.length - 1; i >= 0; i--) {
            var part = parts[i];
            
            if (part.inFront === 0) {
                sorted.push(parts.splice(i, 1)[0]);
                for (var j = 0; j < part.behind.length; j++) {
                    part.behind[j].inFront--;
                }
            }
        }
        c++;
        if (c > n) { break; }
    }
    
    println(n);
    println(sorted.length);
    this.parts = sorted;

};

Viewer.prototype.updateLights = function() {
    var faces = this.scene.faces;
    
    for (var j = 0; j < faces.length; j++) {
        faces[j].updateLights(this.lights);
    }

};

Viewer.prototype.draw = function() {
    pushMatrix();
    translate(translateX, translateY);
    
    for (var i = 0; i < this.parts.length; i++) {
        if (this.parts[i].z !== null) {
            this.parts[i].draw();   
        }
    }
    
    popMatrix();
};

Viewer.prototype.mouseDragged = function() {
    var d = 0.4;
    var dx = -d * (mouseX - pmouseX);
    var dy = d * (mouseY - pmouseY);
    
    var m = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
    
    if (dx) {
        m = getRotateYMatrix(dx);
    }
    
    if (dy) {
        m = multiplyMatrices(getRotateXMatrix(dy), m);
    }
    
    if (dx || dy) {
        this.matrix = multiplyMatrices(m, this.matrix);
    }
    
    this.collectParts();
};

Viewer.prototype.collectParts = function() {
    this.parts = [];
    
    // Add scene nodes and faces
    if (drawNodes) {
        this.parts = this.parts.concat(this.scene.nodes);
    }
    
    // Add house
    for (var i = 0; i < this.scene.faces.length; i++) {
        if (this.scene.faces[i].normal.z < 0) {
            this.parts.push(this.scene.faces[i]);
        }
    }
    
    if (showing.Light) {
        for (var i = 0; i < this.lights.length; i++) {
            this.parts.push(this.lights[i].nodes[0]);
            this.parts.push(this.lights[i].edges[0]);   
        }
    }
    
    this.update();
};

/********************************************
 *      Create objects
*********************************************/

var createFaceObjects = function(nodeIds, nodes, col) {
    var faces = [];
    
    for (var f = 0; f < nodeIds.length; f++) {
        var face = nodeIds[f];
        faces.push(
            new Face(
                [
                    nodes[face[0]],
                    nodes[face[1]],
                    nodes[face[2]]
                ],
                col
            )
        );
    }
    
    return faces;
};

var addFaces = function(ids, nodes, faces, col) {
    for (var i = 0; i < ids.length; i++) {
        var face = ids[i];
        var n1 = nodes[face[0]];
        
        for (var f = 1; f < face.length - 1; f++) {
            var n2 = nodes[face[f]];
            var n3 = nodes[face[f + 1]];
            faces.push(
                new Face([n1, n2, n3], col)
            );
        }
    }
};

var createHouse = function(s) {
    var nodes = [];
    var faces = [];
    
    // Depth
    var d = 150;
    // Depth step for left side, front
    var d2 = 24;
    // Depth of porch
    var d3 = 30;
    // Depth step for left side, back
    var d4 = d - 15;
    // Inset for right front part
    var d5 = 15;
    
    var j = 60 + 32 * 0.8;
    
    var cx = 124 / 2;
    var cy = 135 / 2;
    var cz = d / 2;
    
    var coords = [
        // Front step
        [0, 0, d2], [60, 0, d2],
        [60, 5, d2], [0, 5, d2],
        
        // Inset front
        [0, 5, d2 + d3], [60, 4, d2 + d3],
        [60, 45, d2 + d3], [0, 45, d2 + d3],
        
        // Porch top
        [0, 45, d2], [60, 45, d2],
        [60, 60, d2], [0, 60, d2],
        
        // Front wall, right
        [60 + d5, 0, 0], [124 - d5, 0, 0],
        [124, 0, d2], [124, 60, d2],
        [124 - d5, 60, 0], [60 + d5, 60, 0],
        [60, 60, 0], [124, 60, 0],
        
        // Back wall, left
        [60, 0, d4], [0, 0, d4],
        [0, 60, d4], [60, 60, d4],
        
        // Back wall, right
        [124, 0, d], [60, 0, d],
        [60, 60, d], [124, 60, d],
        
        // Left roof
        [0, 120, d / 2], [j, 120, d / 2],

        // Right roof
        [92, 135, 0], [92, 135, d],
    ];
    
    for (var i = 0; i < coords.length; i++) {
        var node = coords[i];
        nodes.push(
            new Node(
                (node[0] - cx) * s,
                (cy - node[1]) * s,
                (node[2] - cz) * s
        ));
    }
    
    // Front step
    addFaces([
        [0, 1, 2, 3], [3, 2, 5, 4]],
        nodes, faces, WALL_PINK);
    
    // Inset front
    addFaces([[4, 5, 6, 7]],
             nodes, faces, WALL_ORANGE);
    
    // Front right underhang
    addFaces([[10, 17, 18], [15, 19, 16]],
             nodes, faces, WALL_ORANGE);
    
    // Porch top
    addFaces([
        [8, 9, 10, 11], [7, 6, 9, 8]],
        nodes, faces, WALL_BLUE);
    
    // Front wall, right
    addFaces([
        [1, 12, 17, 10], [12, 13, 16, 17],
        [13, 14, 15, 16], [5, 2, 9, 6]
        ], nodes, faces, WALL_GREEN);
    
    // Right gables
    addFaces([[18, 19, 30], [27, 26, 31]],
             nodes, faces, WALL_YELLOW);
    
    // Left side
    addFaces([
        [0, 3, 4], [0, 4, 21], [4, 7, 21],
        [7, 22, 21], [7, 8, 11], [7, 11, 22],
        [22, 11, 28]
        ], nodes, faces, WALL_ORANGE);

    // Right wall
    addFaces([[14, 24, 27, 15]],
             nodes, faces, WALL_PINK);
 
    // Back wall, left
    addFaces([[20, 21, 22, 23]],
             nodes, faces, WALL_ORANGE);
      
    // Back wall, right
    addFaces([
        [24, 25, 26, 27], [20, 23, 26, 25]
        ], nodes, faces, WALL_GREEN);
   
    // Roof
    addFaces([
        // Left
        [11, 10, 29, 28], [23, 22, 28, 29],
        // Join
        [10, 18, 30], [10, 30, 29],
        [26, 23, 31], [23, 29, 31],
        [29, 30, 31],
        // Right
        [19, 27, 31, 30]
        ], nodes, faces, ROOF);
        
    // Base
    addFaces([
        [0, 21, 20, 1], [25, 24, 14, 1],
        [1, 14, 13, 12]
        ], nodes, faces, BASE);
    
    return { nodes: nodes, faces: faces };
};

var createTriangles = function() {
    var nodes = [
        new Node(-100, 0, -80),
        new Node(100, 0, -80),
        new Node(0, -100, 0),
        new Node(0, 100, 80)
    ];
    var faces = [
        new Face([nodes[0], nodes[1], nodes[2]], GREEN),
        new Face([nodes[0], nodes[3], nodes[1]], PINK),
        new Face([nodes[0], nodes[2], nodes[3]], ORANGE),
        new Face([nodes[1], nodes[3], nodes[2]], BLUE),
    ];
    
    return { nodes: nodes, faces: faces };
};

var createTriangles = function() {
    var nodes = [
        new Node(-80, 0, 0),
        new Node(80, 0, 0),
        new Node(0, -80, 0),
        new Node(60, 0, -80),
        new Node(-120, 0, 120),
        new Node(0, 0, 120),
    ];
    var faces = [
        new Face([nodes[0], nodes[1], nodes[2]], GREEN),
        new Face([nodes[0], nodes[2], nodes[1]], GREEN),
        new Face([nodes[3], nodes[4], nodes[5]], PINK),
        new Face([nodes[3], nodes[5], nodes[4]], PINK),
    ];
    
    faces[0].n = 0;
    faces[1].n = 1;
    faces[2].n = 2;
    faces[3].n = 3;
    
    return { nodes: nodes, faces: faces };
};

// Create the light, camera and scene
var myLights = [
    new Light(40, -80, -120, 0, 0, 0, 0.7),
    new Light(-160, -10, -50, 0, 0, 0, 0.25),
];
var viewer = new Viewer(myLights, createHouse(1));

/********************************************
 *      Main loop
*********************************************/

draw = function() {
    background(BACKGROUND);

    viewer.draw();
};

/********************************************
 *      Event handling
*********************************************/

mousePressed = function() {
};

mouseDragged = function() {
    viewer.mouseDragged(); 
};

mouseReleased = function() {
};

mouseOut = function() {
    mouseReleased();
};

