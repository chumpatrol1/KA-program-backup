// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var serifFont = createFont("Times", 22);
var sansFont = createFont("sans", 15);
var toolbar;

var pointR = 10;
var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 20;
var RESOLUTION = 40;

var toolbarX = width * 0.01;
var toolbarWidth = 128;
strokeCap(ROUND);

var showing = {
    'Control points': true,
    'Control arms': true,
    Parabola: true,
    Labels: true,
    Equation: true
};

var selected = false;
var sliders;

// Given the end points of two lines (x1, y1) to (x2, y2) and (x3, y3) to (x4, y4),
// return the point where they intersect
// Assume lines do intersect (i.e. are not parallel and are not segments)
var findIntersection = function(x1, y1, x2, y2, x3, y3, x4, y4) {
    var dx1 = (x1 - x2);
    var dx2 = (x3 - x4);
    var dy1 = (y1 - y2);
    var dy2 = (y3 - y4);
    var d = dx1 * dy2 - dy1 * dx2;
    return [(dx2 * (x1 * y2 - y1 * x2) - dx1 * (x3 * y4 - y3 * x4)) / d,
            (dy2 * (x1 * y2 - y1 * x2) - dy1 * (x3 * y4 - y3 * x4)) / d];
};

/**************************************
 *  Generic GUI component from which
 * other elements inherit
 * 
 * The default object is basically a
 * button
***************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};
}
/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/******************************************************
 * GUI Slider to vary parameters
*******************************************************/
{
var Slider = function(x, y, w, minValue, maxValue, nowValue, name, updateFunction) {
    GUI_Component.call(this, x, y, w, 12, name, updateFunction);
    
    this.x2 = x + w;
    this.ballR = 6;
    this.ballD = this.ballR * 2;
    
    this.min = minValue;
    this.max = maxValue;
    this.val = nowValue === undefined ? minValue : nowValue;
    this.setValue(this.val);
    
    this.held = false;
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(TEXTCOL);
        textFont(serifFont, 15);
        textAlign(CENTER, BASELINE);
        text(this.name + " = " + this.val / 100,  this.x + this.w / 2, this.y - 16);
    }
    
    strokeWeight(2);
    stroke(PINK);
    line(this.x, this.y, this.bx, this.y);

    stroke(BLUE);
    line(this.bx, this.y, this.x2, this.y);

    strokeWeight(1);
    stroke(255);
    fill(GREEN);
    ellipse(this.bx, this.y, this.ballD, this.ballD);

};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max));
        this.trigger();
        return true;
    }
};

Slider.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
};
}
/**************************************
 *      Toolbar
 *  Contains other GUI elements
***************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, updateF) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    var button = new Button(x, y, w, h, name, updateF);
    
    this.buttons.push(button);
    this.components.push(button);
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = name ? 26 : 12;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    var slider = new Slider(x, y, w, minX, maxX, nowX, name, updateF);
    
    this.sliders.push(slider);
    this.components.push(slider);
    this.h += h + 18;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.buttons.push(button);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].mouseDragged()) {
            return true;
        }
    }
};
}
/*********************************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
*********************************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};


// Curve between by two points at (x1, y1) and (x2, y2),
// with a control point at (x3, y3)
var Curve = function(x1, y1, x2, y2, x3, y3) {
    this.p1 = new DraggablePoint(x1, y1);
    this.p2 = new DraggablePoint(x2, y2);
    this.p3 = new DraggablePoint(x3, y3);
    this.controlPoints = [this.p1, this.p2, this.p3];
    
    this.draw = function() {
        var p = toolbar.sliders[0].val * 0.01;
        var q = 1 - p;
        var x1 = this.p1.x * p + this.p3.x * q;
        var y1 = this.p1.y * p + this.p3.y * q;
        var x2 = this.p2.x * q + this.p3.x * p;
        var y2 = this.p2.y * q + this.p3.y * p;
        
        if (showing.Parabola) {
            this.drawTrueParabola();   
        }
        
        // Lines to control points
        if (showing['Control arms']) {
            strokeWeight(2);
            stroke(BLUE);
            line(this.p1.x, this.p1.y, x1, y1);
            line(x2, y2, this.p3.x, this.p3.y);
            stroke(PINK);
            line(x1, y1, this.p3.x, this.p3.y);
            line(this.p2.x, this.p2.y, x2, y2);
        }
        
        if (showing['Control points']) {
            this.drawControlPoints();
        }
        
        // String
        var x3 = x1 * p + x2 * q; 
        var y3 = y1 * p + y2 * q;
        
        strokeWeight(2);
        stroke(PINK);
        line(x2, y2, x3, y3);
        stroke(BLUE);
        line(x1, y1, x3, y3);
        
        strokeWeight(1);
        stroke(255);
        fill(GREY);
        var d = 4;
        quad(x1, y1 - d, x1 + d, y1, x1, y1 + d, x1 - d, y1);
        quad(x2, y2 - d, x2 + d, y2, x2, y2 + d, x2 - d, y2);
        
        stroke(255);
        fill(GREEN);
        strokeWeight(1);
        ellipse(x3, y3, pointR, pointR);
    };
    
    this.drawTrueParabola = function() {
        var x1 = this.p1.x;
        var y1 = this.p1.y;
        var x2 = this.p2.x;
        var y2 = this.p2.y;
        var x3 = this.p3.x;
        var y3 = this.p3.y;
        
        strokeWeight(4);
        stroke(GREEN);
        noFill();
        
        beginShape();
        for (var i = 0; i <= RESOLUTION; i++) {
            var p = i / RESOLUTION;
            var q = 1 - p;
            var rx = p * x1 + q * x3;
            var ry = p * y1 + q * y3;
            var sx = p * x3 + q * x2;
            var sy = p * y3 + q * y2;
            vertex(p * rx + q * sx, p * ry + q * sy);
        }
        endShape();
    };
    
    this.drawControlPoints = function() {
        for (var i = 0; i < this.controlPoints.length; i++) {
            this.controlPoints[i].draw();
        }
        
        if (showing.Labels) {
            this.drawLabels();
        }
    };

    this.drawLabels = function() {
        textFont(serifFont, 18);
        textAlign(CENTER, CENTER);
        
        var x1 = this.p1.x;
        var y1 = this.p1.y;
        var x2 = this.p2.x;
        var y2 = this.p2.y;
        var x3 = this.p3.x;
        var y3 = this.p3.y;
        
        this.drawLabel("C", x1, y1, x3, y3);
        this.drawLabel("A", x2, y2, x3, y3);
        this.drawLabel("B", x3, y3, (x1 + x2)/2, (y1 + y2)/2);
        
        var p = toolbar.sliders[0].val * 0.01;
        var q = 1 - p;
        x1 = this.p1.x * p + this.p3.x * q;
        y1 = this.p1.y * p + this.p3.y * q;
        x2 = this.p2.x * q + this.p3.x * p;
        y2 = this.p2.y * q + this.p3.y * p;
        x3 = x1 * p + x2 * q; 
        y3 = y1 * p + y2 * q;
        
        fill(GREY);
        this.drawLabel("R", x1, y1, x2, y2);
        this.drawLabel("Q", x2, y2, x1, y1);
        
        fill(GREEN);
        var angle = atan2(y1 - y2, x1 - x2) - 90;
        this.drawLabel("P", x3, y3, x3 + cos(angle), y3 + sin(angle));
    };
    
    this.drawLabel = function(name, x1, y1, x2, y2) {
        var dx = x1 - x2;
        var dy = y1 - y2;
        var d = sqrt(dx * dx + dy * dy);
        dx /= d;
        dy /= d;
        
        text(name, x1 + dx * 15, y1 + dy * 15);
    };
    
    this.selectPoint = function() {
        for (var i = 0; i < this.controlPoints.length; i++) {
            if (this.controlPoints[i].mouseover()) {
                selected = i;
            }
        }
    };
    
    this.mouseDrag = function() {
        if (selected !== false) {
            var p = this.controlPoints[selected];
            p.x += mouseX - pmouseX;
            p.y += mouseY - pmouseY;
        }
    };
};

/*********************************************************************
 * Creation of objects
*********************************************************************/

toolbar = new Toolbar(width * 0.01, width * 0.01, toolbarWidth);
toolbar.addSlider(0, 100, 50, "t");
toolbar.addOptions(showing);

var myCurve = new Curve(
    width * 0.8, height / 8,
    width * 0.8, height * 7 / 8,
    width * 0.4, height / 2);

//var myCurve = new Curve(170, 50, 570, 50, 370, 350);

/*********************************************************************
 *  Draw functions
*********************************************************************/

var colorText = function(txtArr, x, y) {
    for (var i = 0; i < txtArr.length; i++) {
        fill(txtArr[i][1]);
        var txt = txtArr[i][0];
        text(txt, x, y);
        x += textWidth(txt);
    }
};

var drawEquation = function() {
    var equationH = 80;
    var equationW = 210;
    
    var tx = toolbarX + 12;
    var tdy = 24;
    var ty = height - 8 - tdy * 2 - toolbarX;
    
    noStroke();
    fill(TOOLBAR);
    rect(toolbarX, height - equationH - toolbarX, equationW, equationH, 8);
    
    textFont(serifFont);
    textAlign(LEFT, BASELINE);
    
    colorText([
        ["Q = ", GREY],
        ["(1 - t)(", BLUE],
        ["A", ORANGE],
        [")", BLUE],
        [" + ", GREY],
        ["t(", PINK],
        ["B", ORANGE],
        [")", PINK],
        ], tx, ty);
        
    ty += tdy;
    colorText([
        ["R = ", GREY],
        ["(1 - t)(", BLUE],
        ["B", ORANGE],
        [")", BLUE],
        [" + ", GREY],
        ["t(", PINK],
        ["C", ORANGE],
        [")", PINK],
        ], tx, ty);
        
    ty += tdy;
    colorText([
        ["P", GREEN],
        [" = ", GREY],
        ["(1 - t)(", BLUE],
        ["Q", ORANGE],
        [")", BLUE],
        [" + ", GREY],
        ["t(", PINK],
        ["R", ORANGE],
        [")", PINK],
        ], tx, ty);
};

/*********************************************************************
 * Main loop
*********************************************************************/

draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    toolbar.draw();
    
    if (showing.Equation) {
        drawEquation();
    }
};

/*********************************************************************
 * Event handling
*********************************************************************/

mousePressed = function() {
    myCurve.selectPoint();
    toolbar.mousePressed();
};

mouseReleased = function() {
    selected = false;
    toolbar.mouseReleased();
};

mouseDragged = function() {
    myCurve.mouseDrag();
    toolbar.mouseDragged();
};

