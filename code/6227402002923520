/*************************************
 *  Players take turns to colour a 
 * tile either red or blue, buy clicking
 * on the grid.
 * 
 * The aim for red is to join the two
 * red sides, and for blue to join the
 * two blue sides.
 * 
 * TODO:
 *  Create a nice menu
 *  AI
**************************************/

var BACKGROUND = color(250, 250, 250);
var TILE_COLOUR = color(230, 230, 220);
var PLAYER_COLOURS = [color(64, 95, 237), color(200, 0, 0)];

// Square root of 3 is very useful for hexagons
var R3 = sqrt(3);

var tileText = "distanceX";

/*************************************
 *  A hexagonal tile on the grid
**************************************/

var HexTile = function(x, y, r, row, col) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.row = row;
    this.col = col;
    this.tilt = true;
    
    // Coordinates for drawing tile
    this.coords = [];
    this.getCoords(this.x, this.y, this.r, this.tilt);
    
    // Which player has this tile
    this.chain = false;
    
    // Which tiles touch this one
    this.neighbours = [];
};

HexTile.prototype.draw = function(highlight) {
    if (this.chain) {
        fill(this.chain.colour);
    } else if (highlight) {
    } else {
        fill(TILE_COLOUR);
    }
    
    beginShape();
    for (var i = 0; i < this.coords.length; i++) {
        vertex(this.coords[i][0], this.coords[i][1]);
    }
    endShape(CLOSE);
    
    textAlign(CENTER, CENTER);
    fill(20);
    textSize(9);
    
    if (tileText === 'coords') {
        text(this.col + "," + this.row, this.x, this.y);
    } else if (tileText === 'neighbours') {
        text(this.neighbours.length, this.x, this.y);
    } else if (tileText === 'distanceX') {
        if (this.chain) {
            text(this.chain.distanceX, this.x, this.y);
        }
    }
};

HexTile.prototype.getCoords = function(x, y, r, tilt) {
    for (var theta = tilt ? 30 : 0; theta < 360; theta += 60) {
        this.coords.push([x + r * cos(theta), y + r * sin(theta)]);
    }
};

/*************************************
 *  A group of contiguous tiles
 * belonging to the same player
**************************************/

var Chain = function(player, tile, x, y) {
    this.player = player;
    this.colour = PLAYER_COLOURS[this.player];
    this.tiles = [tile];
    
    // Min distance to left, right, above and below
    this.distances = [tile.col, x - tile.col - 1, tile.row, y - tile.row - 1];
};

Chain.prototype.join = function(that) {
    if (this === that || this.player !== that.player) { return; }
    
    this.tiles = this.tiles.concat(that.tiles);

    // Update distances
    for (var i = 0; i < this.distances.length; i++) {
        this.distances[i] = min(this.distances[i], that.distances[i]);
    }
    
    // Loop through that.tiles updating their chain properties
    for (var i = 0; i < that.tiles.length; i++) {
        that.tiles[i].chain = this;
    }
};

Chain.prototype.isWinner = function() {
    var p = this.player;
    return this.distances[p * 2] === 0 && this.distances[p * 2 + 1] === 0;
};

/*************************************
 *  A grid of hexagonal tiles
**************************************/

var Grid = function(n, m, tileSize) {
    this.n = n;
    this.m = m;
    this.tileSize = tileSize;
    this.tileWidth = tileSize * R3;
    this.rowHeight = tileSize * 1.5;
    
    this.player = 0;
    this.winner = -1;
    
    // Get board dimensions
    this.width = (this.n + (this.m - 1) / 2) * this.tileWidth;
    this.height = this.m * this.rowHeight + this.tileSize * 0.5;
    
    // Put board in the center of the screen
    this.x = (width - this.width) / 2;
    this.y = (height - this.height) / 2;
    
    this.makeTiles();
};

Grid.prototype.makeTiles = function() {
    this.tiles = [];
        
    var y = this.y + this.tileSize;
    
    for (var i = 0; i < this.n; i++) {
        var row = [];
        var x = this.x + (i + 1) * this.tileWidth / 2;
        
        for (var j = 0; j < this.m; j++) {
            var tile = new HexTile(x, y, this.tileSize, i, j);
            row.push(tile);
            x += this.tileWidth;
        }
        
        y += this.rowHeight;
        this.tiles.push(row);
    }
    
    // Add neighbours
    var deltas = [[1, -1], [1, 0], [0, 1]];
    
    for (var i = 0; i < this.n; i++) {
        for (var j = 0; j < this.m; j++) {
            var tile1 = this.tiles[i][j];
            
            for (var k = 0; k < deltas.length; k++) {
                var d = deltas[k];
                var tile2 = this.getTile([j + d[1], i + d[0]]);
                if (tile2) {
                    tile1.neighbours.push(tile2);
                    tile2.neighbours.push(tile1);
                }
            }
            
        }
    }
};

Grid.prototype.draw = function() {
    this.drawBoard();
    
    stroke(40);
    strokeWeight(1);
    
    for (var i = 0; i < this.tiles.length; i++) {
        var row = this.tiles[i];
        for (var j = 0; j < row.length; j++) {
            row[j].draw();
        }
    }
    
    var highlight = this.getTile(this.pixelToHex(mouseX, mouseY));
    if (highlight) {
        strokeWeight(3);
        fill(PLAYER_COLOURS[this.player] + (80 << 24));
        highlight.draw(true);
    }
    
    if (this.winner > -1) {
        textAlign(CENTER, TOP);
        textSize(16);
        fill(PLAYER_COLOURS[this.winner]);
        text("Player " + (this.winner + 1) + " wins!", width / 2, 30);
    }
};

Grid.prototype.drawBoard = function() {
    /*
    strokeWeight(1);
    stroke(30);
    noFill();
    rect(this.x - 1, this.y - 1, this.width + 1, this.height + 1);
    */
    
    // Top
    var t1 = this.tiles[0][0];
    var t2 = this.tiles[0][this.m - 1];
    var t3 = this.tiles[this.n - 1][0];
    var t4 = this.tiles[this.n - 1][this.m - 1];
    
    var d1 = this.tileSize + 24;
    var d2 = d1 / R3;
    var d3 = d1 / 2;
    
    strokeWeight(1);
    stroke(BACKGROUND);
    fill(PLAYER_COLOURS[0]);
    quad(t2.x + d3, t2.y - d2, t2.x, t2.y, t4.x, t4.y, t4.x + d1, t4.y + d2);
    quad(t1.x, t1.y, t1.x - d1, t1.y - d2, t3.x - d3, t3.y + d2, t3.x, t3.y);
    
    fill(PLAYER_COLOURS[1]);
    quad(t1.x, t1.y, t1.x - d1, t1.y - d2, t2.x + d3, t2.y - d2, t2.x, t2.y);
    quad(t3.x, t3.y, t3.x - d3, t3.y + d2, t4.x + d1, t4.y + d2, t4.x, t4.y);

    noFill();
    stroke(60);
    strokeWeight(2);
    quad(t1.x - d1, t1.y - d2,
         t2.x + d3, t2.y - d2,
         t4.x + d1, t4.y + d2,
         t3.x - d3, t3.y + d2);
};

Grid.prototype.pixelToHex = function(x, y) {
    var boardY = y - this.y;
    
    if (boardY >= 0 && boardY <= this.height) {
        var tileY = boardY / this.rowHeight;
        var fTileY = floor(tileY);
        var boardX = x - this.x - fTileY * (this.tileWidth / 2);
        
        if (boardX >= 0 && boardX <= this.width) {
            var tileX = boardX / this.tileWidth;
            var fTileX =  floor(tileX);
            
            // Take into account jagged edge
            var dx = 0.5 + fTileX - tileX;
            var fTileY2 = floor(tileY - abs(dx) * R3 / 3);
            
            // If we move up a row, check whether we should move along a tile
            if (fTileY2 !== fTileY && dx < 0) {
                fTileX++;
            }
            
            return [fTileX, fTileY2];
        }
    }
    
    return [-1, -1];
};

Grid.prototype.getTile = function(coord) {
    var row = this.tiles[coord[1]];
    if (!row) {
        return false;
    } else {
        return row[coord[0]];
    }
};

Grid.prototype.playAtTile = function(tile) {
    // Check whether tile occupied
    if (tile.chain) { return; }
    
    tile.chain = new Chain(this.player, tile, this.n, this.m);
    
    // Check for neighbours
    for (var i = 0; i < tile.neighbours.length; i++) {
        var tile2 = tile.neighbours[i];
        if (tile2.chain) {
            tile.chain.join(tile2.chain);
            if (tile.chain.isWinner()) {
                this.winner = this.player;
            }
        }
    }
    
    // Swap player
    this.player = 1 - this.player;
};

Grid.prototype.mouseClicked = function() {
    if (this.winner === -1) {
        var tile = this.getTile(this.pixelToHex(mouseX, mouseY));
        
        if (tile) {
            this.playAtTile(tile);
        }
    }
};

/*************************************
 *  Setup
**************************************/

var grid = new Grid(11, 11, 12);

/*************************************
 *      Main loop
**************************************/

var draw = function() {
    background(BACKGROUND);
    grid.draw();    
};

/*************************************
 *      Event handling
**************************************/

mouseMoved = function() {
    //grid.mouseMoved();
};

mouseClicked = function() {
    grid.mouseClicked();
};
