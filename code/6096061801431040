/****************************************
 * Parabolic interpolation joined together 
*****************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 240);

var CONTROL_POINT_SIZE = 12;
var RESOLUTION = 20;

var point1, point2, point3;
var selected = false;

/*********************************************************************
 *      Draggable point
*********************************************************************/

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    var oldX = this.x;
    var oldY = this.y;
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
    
    // Check points aren't too close
    if (dist (point1.x, point1.y, point2.x, point2.y) < 50) {
        this.x = oldX;
        this.y = oldY;
    }
};

draggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    var r = CONTROL_POINT_SIZE + this.animation;
    
    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);    
    ellipse(this.x, this.y, r, r);
};

var selectables = [
    new draggablePoint(40, 250),
    new draggablePoint(160, 120),
    new draggablePoint(250, 300),
    new draggablePoint(360, 200),
];

/****************************************
 *      Display functions
****************************************/

var drawLine = function() {
    stroke(BLUE);
    strokeWeight(2);
    
    var p1x = selectables[0].x;
    var p1y = selectables[0].y;
    
    for (var i = 1; i < selectables.length; i++) {
        var p2x = selectables[i].x;
        var p2y = selectables[i].y;
        line(p1x, p1y, p2x, p2y);
        p1x = p2x;
        p1y = p2y;
    }
};

var getMidpoint = function(p1, p2) {
    return { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };
};

var drawArc = function() {
    strokeWeight(4);
    stroke(GREEN);
    noFill();
    
    beginShape();
    var p1, p2, p3;
    for (var j = 0; j < selectables.length - 2; j++) {
        p2 = selectables[j + 1];
        p1 = j > 0 ? getMidpoint(selectables[j], p2) : selectables[j];
        p3 = j < selectables.length - 3 ? getMidpoint(selectables[j + 2], p2) : selectables[j + 2];
    
        for (var i = 0; i <= RESOLUTION; i++) {
            var p = i / RESOLUTION;
            var q = 1 - p;
            var rx = q * p1.x + p * p2.x;
            var ry = q * p1.y + p * p2.y;
            var sx = q * p2.x + p * p3.x;
            var sy = q * p2.y + p * p3.y;
            vertex(q * rx + p * sx, q * ry + p * sy);
        }    
    }
    endShape();
};

/****************************************
 *      Main loop
****************************************/

draw = function() {
    background(BACKGROUND);

    //drawLine();
    drawArc();
    
    for (var i = 0; i < selectables.length; i++) {
        selectables[i].draw();
    }
};

/****************************************
 *      Event handling
****************************************/

mousePressed = function() {
    for (var i = 0; i < selectables.length; i++) {
        if (selectables[i].mouseover()) {
            selected = selectables[i];
        }
    }
};

mouseReleased = function() {
    selected = false;
};

mouseDragged = function() {
    if (selected) {
        selected.move();
    }
};
