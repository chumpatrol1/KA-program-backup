
var ORANGE = color(255, 165, 0);
var BLUE = color(64, 95, 237);
var GREEN = color(28, 173, 123);
var BACKGROUND = (0);

var thresholdR, threshold, thresholdRa, thresholdR2, thresholda, thresholdd;
var setThreshold = function(t) {
    threshold = t * 0.00001;
    thresholdR = 1 / threshold;
    
    thresholdRa = thresholdR + 1.2;
    thresholdR2 = thresholdR * thresholdR;
    thresholda = 1 / (thresholdRa * thresholdRa);
    thresholdd = 1 / (threshold - thresholda);
};
setThreshold(40);

var selected = false;
var contours = [];
var showing = {
    Fill: true,
    Outline: true
};

{
var sansFont = createFont("sans", 15);
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = color(255, 255, 255, 240);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(20);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/*******************************************************
 *      GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, 240);
    rect(this.x, this.y, this.w, this.h, 8);
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseDragged();
    }
};
}
}   // GUI

/*************************************************
 *      DraggablePoint
 *  A point that can be dragged
**************************************************/
{
var DraggablePoint = function(x, y, id) {
    this.x = x;
    this.y = y;
    this.r = 8;
    this.id = id;
    this.color = ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (this.selected || (!this.selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
        cursor(MOVE);
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = this.r * 2 + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r + 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x = mouseX + dx;
    this.y = mouseY + dy;
};
}
/*************************************************
 *      Set-up
**************************************************/

var points = [
    new DraggablePoint(80, 180, 1),
    new DraggablePoint(340, 280, 2),
    new DraggablePoint(280, 80, 3),
  // new DraggablePoint(80, 280),
];

var joints = [];
var curves = [];
var nPoints = points.length;

var lastCalculation = -1000;

/*************************************************
 *      Calculations
**************************************************/


var drawMetaBalls = function() {
    loadPixels();
    
    var p = imageData.data;
    if (!p) { return; }
    
    var p1 = points[0];
    var p2 = points[1];
    var n = points.length;
    var x, y, t, i, pi, a, d;
    
    for (x = 0; x < width; x++) {
        for (y = 0; y < height; y++) {
            t = 0;
            for (i = 0; i < n; i++) {
                pi = points[i];
                d = (x - pi.x) * (x - pi.x) + (y - pi.y) * (y - pi.y);
                t += 1 / (1 + d);
            }
            if (t > thresholda) {
                i = x + y * width << 2;
                
                a = threshold - t;
                if (a > 0) {
                    // Anti-alias
                    a = 1 - a * thresholdd;
                  
                    p[i++] = 64 * a;
                    p[i++] = 150 * a;
                    p[i] = 250 * a;
                } else {
                    //a = 1;
                    t = 1 / (thresholdR2 * t);
                    p[i++] = 64 * t + 255 * (1 - t);
                    p[i++] = 150 * t + 255 * (1 - t);
                    p[i] = 250 * t + 255 * (1 - t);
                }
                

            }
        }
    }
    
    updatePixels();
};

var findValue = function(x, y) {
    var dx, dy, i, t = 0;
    
    for (i = nPoints; i--;) {
        dx = x - points[i].x;
        dy = y - points[i].y;
        t += 1 / (1 + dx * dx + dy * dy);
    }
    
    return t;
};

var findContourPoint = function(x, y, dx, dy) {
    var t = 0;
    var dt = 0.5;
    var v = findValue(x, y);
    var v2;
    
    // If values start decreasing and then increase, quit.
    var decreasing = false;

    do {
        v2 = findValue(x + (t + dt) * dx, y + (t + dt) * dy);
        if (v2 < v) {
            decreasing = true;
        }
        
        if (v2 < threshold || (decreasing && v2 > v)) {
            dt *= 0.5;
        } else {
            t += dt;
            v = v2;
        }
        //v = findValue(x + (t + dt) * dx, y + (t + dt) * dy);

    } while (abs(v - threshold) > 1e-8 && thresholdR * dt > 0.01);
    
    return t;
};

// Return an array of points around a given point
var getCurveAroundParticle = function(p, start, stop) {
    var x = p.x;
    var y = p.y;
    
    if (stop < start) { stop += 360; }
    
    //println("Curve " + start + " " + stop);
    
    // We want angle every 5 degrees or less
    var dAngle = stop - start;
    var nAngles = ceil(dAngle / 10);
    dAngle /= nAngles;
    
    var curve = [];
    for (var angle = start; angle < stop; angle += dAngle) {
        var dx = cos(angle);
        var dy = sin(angle);
        var t = findContourPoint(x, y, dx, dy);
        curve.push([x + t * dx, y + t * dy]);
    }
    return curve;
};

var getCurveAlongLine = function(p1, p2) {
    var x1 = p1.x;
    var y1 = p1.y;
    var x2 = p2.x;
    var y2 = p2.y;
    
    var dx = x2 - x1;
    var dy = y2 - y1;
    var d = sqrt(dx * dx + dy * dy);
    
    // Perpendicular vectors
    var pdx = dy / d;
    var pdy = -dx / d;
    var nPoints = ceil(d / 6);
    dx /= nPoints;
    dy /= nPoints;
    //println(nPoints);
    var curve = [];
    
    for (var i = 0; i < nPoints; i++) {
        x1 += dx;
        y1 += dy;
        var t = findContourPoint(x1, y1, pdx, pdy);
        curve.push([x1 + t * pdx, y1 + t * pdy]);
    }
    
    return curve;
};

// Given a point and an angle, draw an arc
var getArcAndConnection = function(currentPoint, startAngle, curve) {
    // TODO: Test whether an angle covers this joint?
    
    var joints = currentPoint.joints;
    var n = joints.length;
    currentPoint.visited++;
    
    // Go through the joints in p to find the first one after this angle
    for (var i = 0; i < n; i++) {
        if (joints[i][0] > startAngle) { break; }
    }
    
    var nextJoint = joints[i % n];
    var nextPoint = nextJoint[1];
    var endAngle = (nextJoint[0] + 270) % 360;
    
    //println("Point " + currentPoint.id);
    //println("Arc from " + startAngle + " to " + endAngle);
    //println("Then move to " + nextPoint.id);
    
    // Add arc of around p1 until this next joint
    var curvePoints = getCurveAroundParticle(currentPoint, startAngle + 90, endAngle);
    Array.prototype.push.apply(curve, curvePoints);
    
    // TODO: Check whether joints overlap
    
    // Project last point on the line from currentPoint to nextPoint
    var lastPoint = curve[curve.length - 1];
    
    var x = currentPoint.x;
    var y = currentPoint.y;
    var dx = nextPoint.x - x;
    var dy = nextPoint.y - y;
    var d = sqrt(dx * dx + dy * dy);
    var dot = (lastPoint[0] - x) * dx + (lastPoint[1] - y) * dy;
    
    println(dot);
    
    // Add curved line to next point
    curvePoints = getCurveAlongLine(x, y, nextPoint.x, nextPoint.y);
    Array.prototype.push.apply(curve, curvePoints);
    
    return nextJoint;
};

// Project point p3 onto the vector from p1 to p2
// TODO: move to getCurveAlongLine to avoid recalculating length
// TODO: what to do when projection off line?
var projectPoint = function(p1, p2, p3) {
    var dx = p2.x - p1.x;
    var dy = p2.y - p1.y;
    var d = sqrt(dx * dx + dy * dy);
    dx /= d;
    dy /= d;
    
    var dot = dx * p3.x + dy * p3.y;

    if (dot < d) {
        return {
            x: p1.x + dx * dot,
            y: p1.y + dy * dot
        };
    }
};

// Given a point and an angle, draw an arc
var getConnectionAndArc = function(previousPoint, currentJoint, curve) {
    var currentPoint = currentJoint[1];
    var joints = currentPoint.joints;
    var n = joints.length;
    
    //println(previousPoint.id + " to " + currentPoint.id);
    //println("c1 " + currentJoint.length);
    currentPoint.visited++;
    
    var startAngle = (currentJoint[0] + 180) % 360;
    var startPoint = previousPoint;
    var curvePoints;
    
    // Check whether we need to truncate this join
    var overlapPoint = currentJoint[2];
    if (overlapPoint) {
        startPoint = projectPoint(previousPoint, currentPoint, overlapPoint);
    }
    
    // Add end point curve and go back the way we came
    if (n === 1) {
        // Curve between points
        if (startPoint) {
            curvePoints = getCurveAlongLine(startPoint, currentPoint);
            Array.prototype.push.apply(curve, curvePoints);
        }
        
        // Curve around end point
        curvePoints = getCurveAroundParticle(currentPoint, startAngle + 90, startAngle - 90);
        Array.prototype.push.apply(curve, curvePoints);
        
        return joints[0];
    }
    
    // Go through the joints in p to find the first one after this angle
    // TODO: Could use points rather than angles for easier test
    for (var i = 0; i < n; i++) {
        if (joints[i][0] > startAngle + 1e-5) { break; }
    }
    
    var nextJoint = joints[i % n];
    var endAngle = nextJoint[0];
    overlapPoint = nextJoint[2];

    if (overlapPoint) {
        // We have an overlap, so project onto connection to truncate it
        var endPoint = projectPoint(currentPoint, previousPoint, overlapPoint);

        // Add curved line from previous point to this one
        if (endPoint) {
            curvePoints = getCurveAlongLine(previousPoint, endPoint);
            Array.prototype.push.apply(curve, curvePoints);
        }
    } else {
        // Add curved line from previous point to this one
        var curvePoints = getCurveAlongLine(previousPoint, currentPoint);
        Array.prototype.push.apply(curve, curvePoints);
        
        startAngle = (startAngle + 90) % 360;
        endAngle = (endAngle + 270) % 360;
        
        // Add arc of around this point until this next joint
        var curvePoints = getCurveAroundParticle(currentPoint, startAngle, endAngle);
        Array.prototype.push.apply(curve, curvePoints);
    }
    
    return nextJoint;
};

var sortByAngle = function(a, b) { return a[0] - b[0]; };

var findConnectedParticles = function() {
    joints = [];
    
    var i, j, k, p1, p2, p3, dx, dy, mx, my, d, d2, t, closerPoint;
    
    // Find which particles are connected, by checking whether the midpoint
    // between them is above the threshold, and there is no other point
    // nearer to the midpoint
    for (i = 0; i < nPoints - 1; i++) {
        p1 = points[i];
        
        for (j = i + 1; j < nPoints; j++) {
            p2 = points[j];
            
            dx = (p2.x - p1.x) * 0.5;
            dy = (p2.y - p1.y) * 0.5;
            mx = p1.x + dx;
            my = p1.y + dy;
            //point(mx, my);
            
            // Initial threshold is squared distance from p1 
            // plus the squared distance from p2.
            // In both cases this is dx * dx + dy * dy
            d = dx * dx + dy * dy;
            t = 2 / (1 + d);

            // If the point (mx, my) is above the threshold and no point 
            // is closer than the two other points then join p1 and p2.
            closerPoint = false;
            
            for (k = nPoints; k--;) {
                p3 = points[k];
                if (p3 !== p1 && p3 !== p2) {
                    d2 = (p3.x - mx) * (p3.x - mx) + (p3.y - my) * (p3.y - my);
                    if (d2 < d) {
                        closerPoint = true;
                        break;
                    }
                    t += 1 / (1 + d2);
                }
            }
            
            if (!closerPoint && t > threshold) {
                joints.push([i, j]);
            }
        }
    }
    
    // Clear current joints
    for (var i = nPoints; i--;) {
        points[i].joints = [];
    }
    
    // Add joints to points, containing angle of joint and which point is joined
    for (var i = 0; i < joints.length; i++) {
        var p1 = points[joints[i][0]];
        var p2 = points[joints[i][1]];
        var angle = atan2(p2.y - p1.y, p2.x - p1.x);
        
        // Add joint angle and connecting point
        p1.joints.push([(angle + 360) % 360, p2]);
        p2.joints.push([(angle + 540) % 360, p1]);
    }

    // Sort each joint based on its angle
    for (var i = 0; i < nPoints; i++) {
        var p = points[i];
        p.visited = 0;
        p.joints.sort(sortByAngle);
        
        var joints = p.joints;
        var n = joints.length;
        
        if (n < 2) { continue; }
        
        // Find gaps between angles?
        for (var j = 0; j < n; j++) {
            var j1 = joints[j];
            var j2 = joints[(j + 1) % n];
            
            var angle1 = j1[0];
            var angle2 = j2[0];
            if (angle2 < angle1) { angle2 += 360; }
            
            var d = angle2 - angle1;
            
            // If joins overlap, find the point where they meet
            if (d < 180) {
                // Angle where joins meet
                var angle = angle1 + d / 2;
                var dx = cos(angle);
                var dy = sin(angle);
                var t = findContourPoint(p.x, p.y, dx, dy);
                //var x = p.x + dx * t;
                //var y = p.y + dy * t;
                
                // Vector from particle to point where joins meet
                j2.push({ x: dx * t, y: dy * t });
            }
        }
        
    }
    
    /*
    for (var i = 0; i < nPoints; i++) {
        var p = points[i];
        var joints = p.joints;
        println("F" + p.id);
        for (var j = 0; j < joints.length; j++) {
            if (joints[j].length === 3) {
                println(joints[j][1].id);
            }
        }
    }
    */
    
};

var calculateSurfaces = function() {
    // Avoid recalculating too frequently
    var m = millis();
    
    if (m - lastCalculation > 20) {
        lastCalculation = m;
    } else {
        return;
    }
    
    findConnectedParticles();

    curves = [];
    
    for (var i = 0; i < nPoints; i++) {
        var currentPoint = points[i];
        if (currentPoint.visited) { continue; }
        //println(i);
        var n = currentPoint.joints.length;
        var curve = [];
        
        if (n === 0) {
            // Draw curve around lone point
            curve = getCurveAroundParticle(currentPoint, 0, 360);
        } else {
            var joints = currentPoint.joints;
            var currentJoint;
            
            if (joints.length === 1) {
                currentJoint = joints[0];
            } else {
                // Find a joint which follows a gap between joints
                var previousJoint = joints[n - 1];
                
                for (var j = 0; j < n; j++) {
                    currentJoint = joints[j];
                    var currentAngle = currentJoint[0];
    
                    if (currentAngle < previousJoint[0]) {
                        currentAngle += 360;
                    }
                    
                    // Check whether there is a gap between angles
                    if (currentAngle - previousJoint[0] > 180) { break; }
                    previousJoint = currentJoint;
                }
            
                // No gap between any angle, so try another particle    
                if (j === n) { continue; }
            }

            
            while (currentJoint[1].visited < currentJoint[1].joints.length) {
                //println("From " + currentPoint.id + " to " + currentJoint[1].id);
                var joint = getConnectionAndArc(currentPoint, currentJoint, curve);
                currentPoint = currentJoint[1];
                currentJoint = joint;
            }
        }
        
        curves.push(curve);
    }

};

var drawSurfaces = function() {
    if (showing.Outline) {
        strokeWeight(3);
        stroke(255, 255, 0);
    } else {
        noStroke();
    }
    
    if (showing.Fill) {
        fill(BLUE);
    } else {
        noFill();
    }
    
    // Draw surfaces
    for (var i = 0; i < curves.length; i++) {
        var curve = curves[i];
        var n = curve.length;
        
        beginShape();
        curveVertex(curve[0][0], curve[0][1]);
        for (var j = n; j--;) {
            curveVertex(curve[j][0], curve[j][1]);
            //vertex(curve[j][0], curve[j][1]);
        }
        curveVertex(curve[n - 1][0], curve[n - 1][1]);
        endShape(CLOSE);
    }
    
    /*
    strokeWeight(6);
    for (var i = 0; i < curves.length; i++) {
        var curve = curves[i];
        var n = curve.length;
        
        for (var j = 0; j < n; j++) {
            var p = j / n;
            stroke(255 * p, 0, 255 * (1 - p));
            point(curve[j][0], curve[j][1]);
        }
    }
    */
    
    // Projection points
   /*
    strokeWeight(6);
    stroke(255,0,0);
    for (var i = 0; i < nPoints; i++) {
        var p = points[i];
        var joints = p.joints;
        for (var j = 0; j < joints.length; j++) {
            if (joints[j].length === 3) {
                point(p.x + joints[j][2].x, p.y + joints[j][2].y);
            }
        }
    }
    */
};

/*************************************************
 *      Create GUI
**************************************************/

var toolbar = new Toolbar(5, 5, 120);
toolbar.add(Slider, {
    name: 'Heat',
    min: 10,
    now: 40,
    max: 200,
    trigger: function() {
        if (this.val !== thresholdR) {
            setThreshold(this.val);
            calculateSurfaces();
        }
    }
});
toolbar.addOptions(showing);

/*************************************************
 *      Main loop
**************************************************/

calculateSurfaces();

draw = function() {
    background(BACKGROUND);
    cursor('default');

    if (showing.Outline) {
        drawSurfaces();
    }
    
    for (var i = 0; i < nPoints; i++) {
        points[i].draw();
        //println(points[i].x + " " + points[i].y);
    }

    toolbar.draw();    
};

/*********************************************
 *      Event handling
**********************************************/
{
mousePressed = function() {
    for (var i = points.length; i--;) {
        if (points[i].mouseOver()) {
            selected = points[i];
            return;
        }
    }
    toolbar.mousePressed();
};

mouseReleased = function() {
    selected = false;
    toolbar.mouseReleased();
};

mouseDragged = function() {
    if (selected) {
        selected.move(mouseX - pmouseX, mouseY - pmouseY);
        calculateSurfaces();
    } else {
        toolbar.mouseDragged();
    }
};

mouseOut = mouseReleased;
}
