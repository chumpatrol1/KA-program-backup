/**
Based on Jeff Thomas's "Fluid Simulation"
http://codepen.io/aecend/pen/WbONyK

This script creates a grid of cells and a separate layer of particles that
float on top of the grid. Each cell of the grid holds X and Y velocity 
(direction and magnitude) values and a pressure value. 

Whenever the user holds down and moves their mouse over the canvas, the velocity 
of the mouse is calculated and is used to influence the velocity and pressure in 
each cell that was within the defined range of the mouse coordinates. Then, the 
pressure change is communicated to all of the neighboring cells of those affected, 
adjusting their velocity and pressure, and this is repeated over and over until
the change propogates to all of the cells in the path of the direction of movement.

The particles are randomly placed on the canvas and move according to the 
velocity of the grid cells below, similar to grass seed floating on the surface 
of water as it's moving. Whenever the particles move off the edge of the canvas,
they are "dropped" back on to the canvas in a random position. The velocity, 
however, is "wrapped" around to the opposite edge of the canvas. The slowing 
down of the movement is simulated viscosity, which is basically frictional drag
in the liquid.
**/

// Width and height of each cell
var resolution = 10;
var resolutionI = 1 / resolution;
var num_cols = floor(width / resolution);
var num_rows = floor(height / resolution);

// Radius around the mouse cursor to reach when stirring
var pen_size = 40;
var pen_size2 = pen_size * pen_size;

var speck_count = 2000;
var speed = 0.02;

var vec_cells = []; //The array that will contain the grid cells
var particles = []; //The array that will contain the particles

// particle color
stroke(0, 255, 255);

// text
fill(255, 255, 255);
textSize(18);
textAlign(CENTER, CENTER);

// allows us to clear the message once the user clicks
var clicked = false;
var mousePressed = function() { clicked = true; };

/*
This function updates the position of the particles according to the velocity
of the cells underneath, and also draws them to the canvas.
*/
var update_particle = function() {
    var i, p, col, row, cell, ax, ay, dx, dy;
    
    for (i = speck_count; i--;) {
        p = particles[i];

        if (p.x >= 0 && p.x < width && p.y >= 0 && p.y < height) {

            // Find which cell the particle is in
            //col = floor(p.x * resolutionI);
            //row = floor(p.y * resolutionI);
            col = (p.x * resolutionI) | 1;
            row = (p.y * resolutionI) | 1;
            cell = vec_cells[col][row];
            
            // How far across the cell the particle is
            ax = (p.x - col * resolution) * resolutionI;
            ay = (p.y - row * resolution) * resolutionI;
            
            // Update velocity based on current cell's velocity
            p.xv += (1 - ax) * cell.xv;
            p.yv += (1 - ay) * cell.yv;
            
            // Update velocity based on neighbouring cells' velocities
            p.xv += ax * cell.right.xv + ay * cell.down.xv;
            p.yv += ax * cell.right.yv + ay * cell.down.yv;
            
            // Update velocity
            p.x += p.xv;
            p.y += p.yv;
            
            // Get distance between the old position and new position.
            dx = p.px - p.x;
            dy = p.py - p.y;
            
            if (dx * dx + dy * dy > 0.25) {
                line(p.x, p.y, p.px, p.py);
            } else {
                point(p.x, p.y);
            }
            
            // Record this position
            p.px = p.x;
            p.py = p.y;
            
            // Friction
            p.xv *= 0.5;
            p.yv *= 0.5;
        }
        else {
            // If out of bounds, randomly place particle
            p.x = p.px = random(0, width);
            p.y = p.py = random(0, height);
            p.xv = 0;
            p.yv = 0;
        }
    }
};

// Change cell velocity based on mouse moving
var change_cell_velocity = function(cell_data, mvelX, mvelY) {
    var dx = cell_data.x - mouseX;
    var dy = cell_data.y - mouseY;
    var d = dy * dy + dx * dx;
    
    //If the distance is less than the radius...
    if (d < pen_size2) {

        // If the distance is very small, set it to the pen_size.
        if (d < 16) { d = pen_size2; }
        
        // Calculate the magnitude of the mouse's effect (closer is stronger)
        var power = speed * pen_size / sqrt(d);

        cell_data.xv += mvelX * power;
        cell_data.yv += mvelY * power;
    }
};

/*
This function updates the pressure value for an individual cell using the 
pressures of neighboring cells.
*/
var update_pressure = function(cell) {
    cell.pressure = 0.25 * (cell.left.xv - cell.right.xv + cell.up.yv - cell.down.yv);
    cell.pressure += 0.125 * (
        cell.up_left.xv + cell.down_left.xv - cell.up_right.xv - cell.down_right.xv +
        cell.up_left.yv + cell.up_right.yv - cell.down_left.yv - cell.down_right.yv
    );
};


// Updates the velocity of cells using the pressure of neighboring cells.
var update_velocity = function(cell) {
    cell.xv += 0.25 * (cell.left.pressure - cell.right.pressure) + 
        0.125 * (
            cell.up_left.pressure +
            cell.down_left.pressure -
            cell.up_right.pressure -
            cell.down_right.pressure
        );
    
    cell.yv += 0.25 * (cell.up.pressure - cell.down.pressure) +
        0.125 * (
            cell.up_left.pressure +
            cell.up_right.pressure -
            cell.down_left.pressure -
            cell.down_right.pressure
        );
    
    // Reduce velocity due to friction
    cell.xv *= 0.99;
    cell.yv *= 0.99;
};


//This function is used to create a cell object.
var Cell = function(x, y) {
    this.x = x;
    this.y = y;
    this.xv = 0;
    this.yv = 0;
    this.pressure = 0;
};


//This function is used to create a particle object.
var Particle = function(x, y) {
    this.x = this.px = x;
    this.y = this.py = y;
    this.xv = this.yv = 0;
};

var init = function() {
    // Create particles
    for (var i = 0; i < speck_count; i++) {
        particles.push(new Particle(random(0, width), random(0, height)));
    }

    // Create 2D grid of cells
    for (var col = 0; col < num_cols; col++) { 
        vec_cells[col] = [];
        for (var row = 0; row < num_rows; row++) { 
            vec_cells[col][row] = new Cell(col * resolution, row * resolution);
        }
    }
    
    // Store neighbours of cells
    for (var col = 0; col < num_cols; col++) { 
        for (var row = 0; row < num_rows; row++) { 
            var cell_data = vec_cells[col][row];

            var row_up = (row >= 1) ? row - 1 : num_rows - 1;
            var col_left = (col >= 1) ? col - 1 : num_cols - 1;
            var col_right = (col + 1 < num_cols) ? col + 1 : 0;

            //Get the reference to the cell on the row above.
            var up = vec_cells[col][row_up];
            var left = vec_cells[col_left][row];
            var up_left = vec_cells[col_left][row_up];
            var up_right = vec_cells[col_right][row_up];
            
            cell_data.up = up;
            cell_data.left = left;
            cell_data.up_left = up_left;
            cell_data.up_right = up_right;

            up.down = cell_data;
            left.right = cell_data;
            up_left.down_right = cell_data;
            up_right.down_left = cell_data;

        }
    }
};

draw = function() {
    var mouse_xv = mouseX - pmouseX;
    var mouse_yv = mouseY - pmouseY;
    var i, j, row;
    
    // If the mouse button is down, updates the cell velocity using the mouse velocity
    for (i = num_rows; i--;) {
        row = vec_cells[i];
        for (j = num_cols; j--;) {
            if (mouseIsPressed) {
                change_cell_velocity(row[j], mouse_xv, mouse_yv);
            }
            update_velocity(row[j]);
        }
    }
    
    // Update pressures
    for (i = num_rows; i--;) {
        row = vec_cells[i];
        for (j = num_cols; j--;) {
            update_pressure(row[j]);
        }
    }
    
    background(0);

    // Update the particle positions and draw them.
    update_particle();
    
    if (!clicked) {
        text('Click and drag', width / 2, height / 2);
    }
};

init();
