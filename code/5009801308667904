var buzz = getImage('pixar/buzz');
var treeImage = getImage("cute/TreeTall");
var bush = getImage("cute/TreeUgly");

var treeHeight = treeImage.height;
var treeWidth = treeImage.width;

imageMode(CENTER);

var getBlurredImage = function(img, height, blur) {
    var width = height * img.width / img.height;
    blur = ceil(blur);
    var d = blur * 4;
    
    var g = createGraphics(width + d, height + d, JAVA2D);
    g.background(0, 0, 0, 0);
    g.imageMode(CENTER);
    g.image(img, width / 2 + d, height / 2 + d, width, height);
    if (blur) {
        g.filter(BLUR, blur);
    }
    
    return g;
};

var g = getBlurredImage(buzz, 200, 0);

// Create a range of pre-blurred trees
/*
var treeImages = [];

for (var i = 0; i < 10; i += 2) {
    var img = createGraphics(400, 400, JAVA2D);
    img.background(0, 0, 0, 0);
    img.image(buzz, 5 + i * 2.2, 15 + i * 2.2);
    img.filter(BLUR, i);
    treeImages.push(img);
}
*/
// Create random trees
/*
var trees = [];
for (var i = 0; i < 20; i++) {
    var z = random(200, 1000);
    var x = random(-z * 2, z  * 2);
    trees.push({ x: x, z: z });
}
*/
// Create avenue of trees
var trees = [];
for (var i = 0; i < 20; i++) {
    var z = 150 + i * 80;
    trees.push({ x: -150, z: z });
    trees.push({ x: 150, z: z });
}


trees = trees.sort(function(a, b) { return b.z - a.z; });

// Background sky and grass
background(155, 220, 230);
noStroke();
fill(80, 160, 80);
rect(0, 200, 400, 200);

image(g, 200, 200);

/*
var lensAngle = 60;
var tanAngle = tan(lensAngle);

imageMode(CORNER);
for (var i = 0; i < treeImages.length; i++) {
    image(treeImages[i], i * 70 - 20, 120, 160, 160);
}
*/
// Draw trees
/*
pushMatrix();
translate(200, 200);
for (var i = 0; i < trees.length; i++) {
    var tree = trees[i];
    
    // Width that can camera can view at given z position
    var fieldWidth = tree.z * tanAngle;
    
    // Map tree's x coordinate to screen coordinate
    var _scale = 250 / fieldWidth;
    var img = treeImages[4 - floor(_scale * 5)];
    var n = 275000;
    fieldWidth *= fieldWidth;
    var img = treeImages[floor(5 * fieldWidth / (fieldWidth + n))];
    image(img, tree.x * _scale, 0, 200 * _scale, 200 * _scale);
}
popMatrix();
*/