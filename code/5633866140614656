//  Click and drag the orange sites to move them
//  Increase the radius to expand the area around each site
//  The area increases until two areas meet at a boundary

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);

var AREA_FILL = color(208, 215, 250);
var CONTROL_POINT_SIZE = 12;

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var POINT_SIZE = 5;

{
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};
}
/*******************************************************
 *      GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 14);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
}
/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};
}
/*******************************************************
 *      Edge object
 *  A line between two sites that runs perpendicular to
 * both.
********************************************************/

var Edge = function(site1, site2) {
    this.site1 = site1;
    this.site2 = site2;
    
    // Distance between sites
    var dx = site1.x - site2.x;
    var dy = site1.y - site2.y;
    this.distance2 = dx * dx + dy * dy;
    this.distance = sqrt(this.distance2);
    
    // Edge starts at the midpoint of its two sites
    this.x = (site1.x + site2.x) / 2;
    this.y = (site1.y + site2.y) / 2;
    
    // Perpendicular unit vector
    this.vx = -dy / this.distance;
    this.vy = dx / this.distance;
};

Edge.prototype.draw = function() {
    stroke(GREEN);
    strokeWeight(3);
    line(this.x1, this.y1, this.x2, this.y2);
};

/*******************************************************
 *      Diagram object
 *  High level object wrapping all the parts for the 
 * diagram (sites and edges).
********************************************************/
{
var Diagram = function() {
    this.sites = [
        new DraggablePoint(width * 0.35, height / 2 - 20),
        new DraggablePoint(width * 0.65, height / 2),
    ];
    
    this.edge = null;
    this.setDiameter(20);
};

Diagram.prototype.draw = function() {
    // Draw sites
    var d = this.diameter;
    
    for (var i = 0; i < this.sites.length; i++) {
        var site = this.sites[i];
        
        // Area
        strokeWeight(2);
        stroke(BLUE);
        fill(AREA_FILL);
        
        if (this.edge) {
            if (site.a1) {
                arc(site.x, site.y, d, d, site.a1, site.a2);
                stroke(AREA_FILL);
                triangle(site.x, site.y, this.edge.x1, this.edge.y1, this.edge.x2, this.edge.y2);
            }
        } else {

            ellipse(site.x, site.y, d, d);
        }
        
        // Site
        site.draw();
    }
    
    if (this.edge) {
        stroke(PINK);
        strokeWeight(4);
        line(this.edge.x1, this.edge.y1, this.edge.x2, this.edge.y2);
    }
};

Diagram.prototype.setDiameter = function(diameter) {
    this.diameter = diameter;
    this.diameter2 = diameter * diameter;
    this.findEdge();
};

Diagram.prototype.findEdge = function() {
    // Calculate intersection
    var s1 = this.sites[0];
    var s2 = this.sites[1];
    
    var dx = s1.x - s2.x;
    var dy = s1.y - s2.y;
    var d2 = dx * dx + dy * dy;
    
    // No edge
    if (this.diameter2 < d2) {
        this.edge = null;
        return;
    }
    
    // Create edge
    var mx = (s1.x + s2.x) / 2;
    var my = (s1.y + s2.y) / 2;
    var length = sqrt(this.diameter2 - d2) / 2;
    var d = sqrt(d2);
    
    var pdx = dy / d;
    var pdy = -dx / d;
    var x1 = mx + length * pdx;
    var x2 = mx - length * pdx;
    var y1 = my + length * pdy;
    var y2 = my - length * pdy;
    
    this.edge = {
        x: mx, y: my,
        x1: x1, y1: y1,
        x2: x2, y2: y2
    };
    
    // Calculate angles relative to site
    var a1 = atan2(y1 - s1.y, x1 - s1.x);
    var a2 = atan2(y2 - s1.y, x2 - s1.x);
    var a3 = atan2(y1 - s2.y, x1 - s2.x);
    var a4 = atan2(y2 - s2.y, x2 - s2.x);
    
    a2 += 360;
    a4 = (a4 > 0) ? a4 - 360 : a4;
    a3 = (a3 < a4) ? a3 + 360 : a3;
    
    s1.a1 = a1;
    s1.a2 = a2 + 360;
    s2.a1 = a4;
    s2.a2 = a3;
};

Diagram.prototype.mousePressed = function() {
    for (var i = 0; i < this.sites.length; i++) {
        if (this.sites[i].mouseOver()) {
            this.selected = this.sites[i];
            break;
        }
    }
};

Diagram.prototype.mouseReleased = function() {
    this.selected = false;
};

Diagram.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
        this.findEdge();
    }
};
}
/*******************************************************
 *      Create diagram
********************************************************/

var diagram = new Diagram();

/*******************************************************
 *      Create interface
********************************************************/

var toolbar = new Toolbar(10, 10, 120);
toolbar.add(Slider, {
    name: 'Radius',
    min: 10,
    now: 20,
    max: 300,
    trigger: function() {
        diagram.setDiameter(this.val * 2);
    }
});

/*******************************************************
 *      Draw functions
********************************************************/

var drawIntersections = function(intersections) {
    //strokeWeight(6);
    strokeWeight(1);
    stroke(GREEN);
    
    var p, dx, dy;
    var d = 30;
    for (var i = 0; i < intersections.length; i++) {
        p = intersections[i];
        dx = p[3] * cos(p[2]);
        dy = p[3] * sin(p[2]);
        //point(p[0], p[1]);
        line(p[0] + dx, p[1] + dy, p[0] - dx, p[1] - dy);
    }
};

/*******************************************************
 *      Main loop
********************************************************/

draw = function() {
    background(BACKGROUND);
    diagram.draw();
    toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    diagram.mousePressed();
    toolbar.mousePressed();
};

mouseDragged = function() {
    diagram.mouseDragged();
    toolbar.mouseDragged();
};

mouseReleased = function() {
    diagram.mouseReleased();
    toolbar.mouseReleased();
};

mouseOut = function() {
    toolbar.mouseReleased();
};
