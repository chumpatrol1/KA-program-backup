 /****************************************************
 * Plot two inequalities
 * 
 * Write equations in the form Ay > Bx + C
 * A = Ycoefficient
 * B = Xcoefficient
 * C = constant
 * inequality = '>', '<', '>=' or '<='
 * 
 *      --- To Do ---
 * Parse inequalities as strings
 * Allow axes to be negative
 *****************************************************/

// Equations
var equation1 = {
    Ycoefficient: 3,
    Xcoefficient: 2,
    constant: 8,
    inequality: '>='
};

var equation2 = {
    Ycoefficient: 2.5,
    Xcoefficient: 4,
    constant: -3,
    inequality: '<'
};

// Graph display parameters
var originX = 68;
var originY = 240;
var graphWidth = 280;
var graphHeight = 200;
var maxX = 10;
var maxY = 10;
var dx = 1;
var dy = 1;
var scaleX = graphWidth / maxX;
var scaleY = graphHeight / maxY;

// Convert an equation as a string into a equation objects
// (Without using regex!)
var parseEquation = function(s) {
    var eq1, eq2, inequality;

// Split equation into two halves
    for (var i=0; i<s.length; i++) {
        if (s.charAt(i) === '>' || s.charAt(i) === '<') {
            inequality = s.charAt(i);
            eq1 = s.slice(0, i-1);
            if (s.charAt(i+1) === '=') {
                inequality += '=';
                eq2 = s.slice(i+2, s.length);
            } else {
                eq2 = s.slice(i+1, s.length);
            }
        }
    }
};

parseEquation("3y > 3x + 4");

// Given an equation as an object, build a line for it
var convertEquationToLine = function(e) {
    var x1 = 0;
    var y1 = e.constant / e.Ycoefficient;
    var x2 = maxX;
    var y2 = (maxX * e.Xcoefficient + e.constant) / e.Ycoefficient;    

    x1 = originX + x1 * scaleX;
    x2 = originX + x2 * scaleX;
    y1 = originY - y1 * scaleY;
    y2 = originY - y2 * scaleY;
    
    var limit;
    if (e.inequality === '>' || e.inequality === '>=') {
        limit = originY - maxY * scaleY;
    } else {
        limit = originY;
    }

    // Create function for line
    if (e.inequality[1] === '=' ) {
        e.draw = function() {
            strokeWeight(2);
            line(x1, y1, x2, y2);
        }; 
    } else {
        // Draw dashed line
        var dx = x2 - x1;
        var dy = y2 - y1;
        var length = sqrt(dx * dx + dy * dy);
        var n = parseInt(length / 8, 1);
        
        dx /= n;
        dy /= n;
        
        e.draw = function() {
            strokeWeight(2);
            for (var i=0; i<n; i+=2) {
                line(x1 + dx*i, y1 + dy*i,
                     x1 + dx*(i+1), y1 + dy*(i + 1));
            }
        };  
    }
    
    e.drawArea = function () {
        noStroke();
        quad(originX, limit,
             originX, y1,
             x2, y2,
             x2, limit);
    };

};

var convertEquationToString = function(e) {
    e.string = e.Ycoefficient + "y " + e.inequality + " " + e.Xcoefficient + "x ";
    if (e.constant > 0) {
        e.string += "+ " + e.constant;
    } else if (e.constant < 0) {
        e.string += "- " + -e.constant;
    }
};

convertEquationToLine(equation1);
convertEquationToLine(equation2);
convertEquationToString(equation1);
convertEquationToString(equation2);

var draw = function() {
    var x, y, x1, y1, x2, y2;
    background(0, 0, 0);
    
    // gridlines
    stroke(30, 30, 32);
    for (x = 0; x <= maxX; x += dx) {
        x1 = originX + scaleX * x;
        line(x1, originY-graphHeight, x1, originY);
    }
    
    for (y = 0; y <= maxY; y += dy) {
        y1 = originY - scaleY * y;
        line(originX, y1, originX+graphWidth, y1);
    }
    
    // Draw series
    fill(220, 0, 220, 100);
    equation1.drawArea();
    stroke(220, 0, 220);
    equation1.draw();
    
    fill(10, 220, 10, 100);
    equation2.drawArea();
    stroke(10, 220, 10);
    equation2.draw();
    
    // Remove any overlap caused by line thickness
    fill(0, 0, 0);
    noStroke();
    rect(0, originY+1, 400, 400);
    rect(originX + scaleX * maxX + 1, 0, 400, 400);
    rect(0, 0, originX, 400);
    rect(0, 0, 400, originY - scaleY * maxY);
    
    // Axes
    stroke(250, 250, 255);
    strokeWeight(1);
    line(originX, originY - graphHeight, originX, originY);
    line(originX, originY, originX + graphWidth, originY);
    
    // Axis units
    textSize(12);
    textAlign(CENTER, 1);
    fill(250, 250, 255);
    
    for (x = 0; x <= maxX; x += dx) {
        x1 = originX + scaleX * x;
        text(x, x1, originY + 17);
        line(x1, originY, x1, originY + 4);
    }
    
    textAlign(RIGHT, 1);
    for (y = 0; y <= maxY; y += dy) {
        y1 = originY - scaleY * y;
        text(y, originX - 7, y1 + 4);
        line(originX, y1, originX - 3, y1);
    }
    
    // Axis labels
    textAlign(CENTER, 1);
    textSize(16);
    text("X", originX + graphWidth/2, originY + 42);
    
    translate(originX - 40, originY - graphHeight/2);
    rotate(270);
    text("Y", 0, 0);
    resetMatrix();
    
    // Equations
    fill(220, 0, 220);
    text(equation1.string, 200, 320);
    fill(10, 220, 10);
    text(equation2.string, 200, 350);
};