/*******************************************************
 * Using a mass-spring system to simulate hair.
 * 
 * Click and drag the face to move it
*******************************************************/

var BACKGROUND = color(230, 230, 255);
var TEXTCOL = color(20, 20, 20);

var sansFont = createFont("sans", 15);

var showing = {
    Nodes: false,
    'Hair springs': true,
    'Support springs': false
};

var running = true;

var callForEach = function(arr, func) {
    var i, n = arr.length;
    for (i = 0; i < n; i++) {
        arr[i][func]();
    }
};

/*******************************************************
 *  Generic GUI component from which other elements
 * inherit
 * 
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};

GUI_Component.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *  GUI Button
********************************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = color(235, 235, 235, 240);
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var FilledButtonDraw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function(col) {
    this.draw = FilledButtonDraw.bind(this);
    this.defaultCol = color(0, 0, 0, 1);
    this.highlightCol = col;
};

// Circular button
var CircleButton = function(x, y, w, h, clickFunction, drawFunction) {
    Button.call(this, x, y, w, h, "", clickFunction);
    this.drawIcon = drawFunction;
    this.cx = this.x + this.w / 2;
    this.cy = this.y + this.w / 2;
};
CircleButton.prototype = Object.create(Button.prototype);

CircleButton.prototype.draw = function() {
    var c;
    if (this.mouseOver()) {
        c = color(20, 20, 20);
        fill(235, 235, 235, 240);
    } else {
        c = color(40, 40, 40);
        fill(255);
    }
    
    stroke(c);
    strokeWeight(2);
    ellipse(this.cx, this.cy, this.w, this.w);
    
    if (this.drawIcon) {
        fill(c);
        this.drawIcon(this.cx, this.cy, this.w / 2);   
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/**************************************
 * GUI Slider to vary parameters
***************************************/
{
var Slider = function(x, y, w, minValue, maxValue, nowValue, name, updateFunction) {
    GUI_Component.call(this, x, y, w, 4, name, updateFunction);
    
    this.x2 = x + w;
    this.ballR = 10;
    this.ballD = this.ballR * 2;
    
    this.min = minValue || 0;
    this.max = maxValue === undefined ? 1 : maxValue;
    this.val = nowValue === undefined ? this.min : nowValue;
    this.setValue(this.val);
    
    this.held = false;
    this.decimalPlaces = 0;
    if (this.max - this.min < 8) {
        this.decimalPlaces = 1;
    }
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(TEXTCOL);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(240), color(180), this.transition / 10));
    stroke(180);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 *      GUI
 * Contains and coordinates all the GUI elements.
********************************************************/
{
var GUI = function() {
    this.elements = [];
};

GUI.prototype.draw = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].draw();
    }
};

GUI.prototype.addElement = function(element) {
    this.elements.push(element);
};

GUI.prototype.mousePressed = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mousePressed();
    }
};

GUI.prototype.mouseReleased = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mouseReleased();
    }
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
    this.components = [];
};

Toolbar.prototype.draw = function() {
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, updateF, options) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    var button = new Button(x, y, w, h, name, updateF);
    
    if (options) {
        for (var opt in options) {
            button[opt] = options[opt];
        }
    }
    
    this.buttons.push(button);
    this.components.push(button);
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = name ? 24 : 10;
    var x = this.x + 15;
    var y = this.y + this.h + h;
    var w = this.w - 30;
    var slider = new Slider(x, y, w, minX, maxX, nowX, name, updateF);
    
    this.sliders.push(slider);
    this.components.push(slider);
    this.h += h + 16;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.buttons.push(button);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].mouseDragged()) {
            return true;
        }
    }
};
}
/*******************************************************
 *      Body object
 * Bodies are Particles that move under gravity
********************************************************/
{
var Body = function(system, x, y, r, mass, style) {
    this.system = system;
    this.position = new PVector(x, y);
    this.r = r;
    this.mass = mass || 1;
    this.velocity = new PVector(random(), random());
    this.acceleration = new PVector(0, 0);
    
    style = style || {};
    this.fill = style.fill || color(255);
    this.stroke = style.stroke || color(80, 80, 250);
    this.strokeWeight = style.strokeWeight || 2;
};

Body.prototype.draw = function() {
    strokeWeight(this.strokeWeight);
    stroke(this.stroke);
    fill(this.fill);
    ellipse(this.position.x, this.position.y, this.r * 2, this.r * 2);
};

Body.prototype.update = function() {
    this.applyForce(this.system.gravity);
    this.velocity.mult(1 - this.system.drag);
    
    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);
    // Now we make sure to clear acceleration each time
    this.acceleration.mult(0);
    this.bounce();
};

Body.prototype.bounce = function() {
    var boundary = height - this.r;
    if (this.position.y > boundary) {
        this.velocity.mult(new PVector(1, -1));
        this.position.y = 2 * boundary - this.position.y;
    }
    
    boundary = this.r;
    if (this.position.x < boundary) {
        this.velocity.mult(new PVector(-1, 1));
        this.position.x = 2 * boundary - this.position.x;
    }
    
    boundary = width - this.r;
    if (this.position.x > boundary) {
        this.velocity.mult(new PVector(-1, 1));
        this.position.x = 2 * boundary - this.position.x;
    }
};

Body.prototype.applyForce = function(force) {
  var f = PVector.div(force, this.mass);
  this.acceleration.add(f);
};

Body.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.position.x, this.position.y) <= this.r;
};
}
/*******************************************************
 *      Spring object
 * Generates a force that acts to move two bodies to
 * a specific distance apart.
********************************************************/
{
var Spring = function(p1, p2, restLength, strength) {
    this.p1 = p1;
    this.p2 = p2;
    this.restLength = restLength;
    this.strength = strength;
    
    // Display attributes
    this.thickness = 10;
    this.kinks = 12;
};

Spring.prototype.draw = function() {
    strokeWeight(2);
    stroke(60);
    line(this.p1.position.x, this.p1.position.y, this.p2.position.x, this.p2.position.y);
};

Spring.prototype.update = function() {
    // Contract
    var difference = PVector.sub(this.p1.position, this.p2.position);
    var distance = difference.mag();
    difference.div(distance);
    
    var force = (this.restLength - distance) * this.strength;
    difference.mult(force);

    this.p1.applyForce(difference);
    difference.mult(-1);
    this.p2.applyForce(difference);
    
    //this.p1.acceleration.mult(this.damping);
    //this.p2.acceleration.mult(this.damping);
};

Spring.prototype.mouseOver = function() {
    // Spring are unselectable (could change at a later date)
    return false;
};
}
/*******************************************************
 *      Chain object
 * A fixed point at (x, y) followed by n springs of a
 * given length and strength.
********************************************************/
{
var Chain = function(system, x, y, n, length, strength) {
    this.system = system;
    
    // Fixed point
    this.bodies = [new Body(system, x, y, 5)];
    this.springs = [];
    
    // Dynamic bodies
    for (var i = 0; i < n; i++) {
        var angle = random(45, 135);
        x += length * cos(angle);
        y += length * sin(angle);
        this.bodies.push(new Body(system, x, y, 2, 100));
        this.springs.push(new Spring(this.bodies[i], this.bodies[i + 1], length, strength));
        
        // Extra springs of length 2 to make curves
        if (i) {
            this.springs.push(new Spring(this.bodies[i - 1], this.bodies[i + 1], length * 1.6, strength / 4));
        }
    }
    
    this.color = color(random(180, 200), random(80, 120), random(0, 20), 250);
};

Chain.prototype.drawBase = function() {
    for (var i = 0; i < this.bodies.length; i++) {
        this.bodies[i].draw();
    }
    
    for (var i = 0; i < this.springs.length; i++) {
        this.springs[i].draw();
    }
};

Chain.prototype.draw = function() {
    //this.drawBase();
    
    stroke(this.color);
    strokeWeight(2);
    noFill();
    beginShape();
    
    // Calculate point before the first one
    var p0 = PVector.add(this.bodies[0].position, PVector.sub(this.bodies[0].position, this.bodies[1].position));
    curveVertex(p0.x, p0.y);
    
    for (var i = 0; i < this.bodies.length; i++) {
        curveVertex(this.bodies[i].position.x, this.bodies[i].position.y);
    }
    endShape();
};

Chain.prototype.update = function() {
    for (var i = 0; i < this.springs.length; i++) {
        this.springs[i].update();
    }
    
    // First body is fixed so skip it
    for (var i = 1; i < this.bodies.length; i++) {
        this.bodies[i].update();
    }
};

Chain.prototype.mouseOver = function() {
    // Spring are unselectable (could change at a later date)
    return false;
};
}
/*******************************************************
 *      System object
 * This is the top-level object which contains all the
 * objects in the universe.
 * It handles gravity, drag and mouse events.
********************************************************/
{
var System = function() {
    // All elements
    this.elements = [];
    
    this.fixedBodies = [];
    this.dynamicBodies = [];
    this.springs = [];
    
    this.gravity = new PVector(0, 10);
    this.drag = 0.99;
    
    this.selected = false;
};

System.prototype.addFixedPoint = function(x, y, r) {
    var body = new Body(this, x, y, r);
    this.fixedBodies.push(body);
    this.elements.push(body);
};

System.prototype.addBody = function(x, y, r, mass) {
    var body = new Body(this, x, y, r, mass);
    this.dynamicBodies.push(body);
    this.elements.push(body);
};

System.prototype.addSpring = function(n1, n2, length, strength) {
    var p1 = this.elements[n1];
    var p2 = this.elements[n2];
    var spring = new Spring(p1, p2, length, strength);
    this.springs.push(spring);
    this.elements.push(spring);
};

System.prototype.addChain = function(x, y, n, length, strength) {
    var chain = new Chain(this, x, y, n, length, strength);
    this.springs.push(chain);
    this.elements.push(chain);
};

System.prototype.draw = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].draw();
    }
};

System.prototype.update = function() {
    for (var i = 0; i < this.springs.length; i++) {
        this.springs[i].update();
    }
    
    for (var i = 0; i < this.dynamicBodies.length; i++) {
        this.dynamicBodies[i].update();
    }
};

// Model movement of the head
System.prototype.updateFixedPoints = function() {
    var dx = cos(4 * frameCount);
    
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].bodies[0].position.x += dx;
       // this.elements[i].bodies[0].position.y += dx;
    }
};

System.prototype.mousePressed = function() {
    // Go in inverse order, so we select the top object;
    for (var i = this.elements.length - 1; i >= 0; i--) {
        if (this.elements[i].mouseOver()) {
            this.selected = this.elements[i];
            break;
        }
    }
};

System.prototype.mouseDragged = function() {
    if (this.selected) {
        var mouseVector = new PVector(mouseX - pmouseX, mouseY - pmouseY);
        this.selected.position.add(mouseVector);
        this.selected.velocity = mouseVector;
    }
};

System.prototype.mouseReleased = function() {
    this.selected = false;
};
}
/*******************************************************
 *      Head object
 * This is the top-level object which contains all the
 * objects in the universe.
 * It handles gravity, drag and mouse events.
********************************************************/
{
var Head = function(x, y, r) {
    this.face = new Body(this, x, y, r, 10, {
        fill: color(240, 202, 190),
        stroke: color(205, 170, 155),
    });
    
    // Initial values
    this.hairNumber = 20;
    this.hairAngle = 80;
    this.sectionNumber = 5;
    this.sectionLength = 20;
    this.hairStrength = 5;
    this.hairMass = 200;
    this.supportLength = 1;
    this.supportStrength = 5;
    
    // All elements
    this.elements = [this.face];
    this.follicles = [];
    this.hairNodes = [];
    this.hairChains = [];
    this.hairSprings = [];
    this.supportSprings = [];
    
    this.addHair();
    
    this.gravity = new PVector(0, 10);
    this.drag = 0.04;
    
    this.selected = false;
};

Head.prototype.addHair = function() {
    var dAngle = 2 * this.hairAngle / this.hairNumber;
    var fx = this.face.position.x;
    var fy = this.face.position.y;
    var fr = this.face.r;
    
    this.follicles = [];
    this.hairNodes = [];
    this.hairChains = [];
    
    var angle = -90 - this.hairAngle + dAngle / 2;
    var i, j, len, x, y, cAngle, sAngle, node;
    
    // Add nodes
    for (i = 0; i < this.hairNumber; i++) {
        var chain = [];
        
        cAngle = cos(angle);
        sAngle = sin(angle);
        len = fr - this.sectionLength;
        
        for (j = -1; j < this.sectionNumber + 2; j++) {
            x = fx + len * cAngle;
            y = fy + len * sAngle;
            node = new Body(this, x, y, 4, this.hairMass);
            
            if (j > 0) {
                this.hairNodes.push(node);
            } else {
                this.follicles.push(node);
            }
            chain.push(node);
            len += this.sectionLength + 3 * (random() - 0.5);
        }
        
        this.hairChains.push(chain);
        angle += dAngle;

    }
    
    // Add core springs
    this.hairSprings = [];
    for (i = this.hairChains.length; i--;) {
        var chain = this.hairChains[i];
        for (j = chain.length - 1; j--;) {
            this.hairSprings.push(
                new Spring(
                    chain[j],
                    chain[j + 1],
                    this.sectionLength,
                    this.hairStrength
                )
            );
        }
    }
    
    // Add support springs
    this.supportSprings = [];
    var len = this.sectionLength * this.supportLength * 2;
    
    for (i = this.hairChains.length; i--;) {
        var chain = this.hairChains[i];
        
        for (j = chain.length - 2; j--;) {
            this.supportSprings.push(
                new Spring(
                    chain[j],
                    chain[j + 2],
                    len,
                    this.supportStrength
                )
            );
        }
        
        for (j = chain.length - 3; j--;) {
            this.supportSprings.push(
                new Spring(
                    chain[j],
                    chain[j + 3],
                    len * 1.5,
                    this.supportStrength
                )
            );
        }
    }
    
};

Head.prototype.update = function() {
    callForEach(this.hairNodes, 'update');
    callForEach(this.hairSprings, 'update');
    callForEach(this.supportSprings, 'update');
};

Head.prototype.updateSpringValues = function() {
    for (var i = this.hairSprings.length; i--;) {
        this.hairSprings[i].restLength = this.sectionLength;
        this.hairSprings[i].strength = this.hairStrength;
    }
};

Head.prototype.updateSupportValues = function() {
    var len = this.sectionLength * this.supportLength * 2;
    for (var i = this.supportSprings.length; i--;) {
        this.supportSprings[i].restLength = len;
        this.supportSprings[i].strength = this.supportStrength;
    }
};

Head.prototype.draw = function() {
    this.face.draw();
    if (showing.Nodes) {
        callForEach(this.follicles, 'draw');
        callForEach(this.hairNodes, 'draw');
    }
    if (showing['Hair springs']) {
        this.drawHair();
    }
    if (showing['Support springs']) {
        this.drawSupport();
    }
};

Head.prototype.drawHair = function() {
    stroke(186, 121, 41);
    strokeWeight(2);
    noFill();
    
    var fx = this.face.position.x;
    var fy = this.face.position.y;
    
    for (var i = 0; i < this.hairChains.length; i++) {
        var chain = this.hairChains[i];
        beginShape();

        for (var j = 0; j < chain.length; j++) {
            curveVertex(chain[j].position.x, chain[j].position.y);
        }
        endShape();
    }
};

Head.prototype.drawSupport = function() {
    stroke(0, 0, 0, 100);
    strokeWeight(2);
    noFill();
    
    for (var i = 0; i < this.supportSprings.length; i++) {
        var spring = this.supportSprings[i];
        line(spring.p1.position.x,
             spring.p1.position.y,
             spring.p2.position.x,
             spring.p2.position.y
        );
    }
};

Head.prototype.mousePressed = function() {
    var p = this.face.position;
    if (dist(mouseX, mouseY, p.x, p.y) < this.face.r) {
        this.selected = this.face;
    }
};

Head.prototype.mouseDragged = function() {
    if (this.selected) {
        var mouseVector = new PVector(mouseX - pmouseX, mouseY - pmouseY);
        this.selected.position.add(mouseVector);
        this.selected.velocity = mouseVector;
        for (var i = 0; i < this.follicles.length; i++) {
            this.follicles[i].position.add(mouseVector);
            this.follicles[i].velocity = mouseVector;
        }
    }
};

Head.prototype.mouseReleased = function() {
    this.selected = false;
};
}
/*****************************************************
 * Function for drawing the background
******************************************************/
{
var BACKGROUND1 = color(110, 90, 230);
var BACKGROUND2 = color(35, 20, 110);

var drawBackground = function() {
    background(255);
    var h = 80;
    var h2 = height - h;
    
    strokeWeight(2);
    for (var i = 0; i <= h2; i += 2) {
        stroke(lerpColor(BACKGROUND2, BACKGROUND1, i / h2));
        line(0, i, width, i);
    }
};
}
/*******************************************************
 *      Create objects
********************************************************/

var system = new System();

var faceX = (width + 150) * 0.5;
var faceY = 150;

var head = new Head(faceX, faceY, 50);

/***************************************************
 *      Create interface
****************************************************/
{
var playPause = function() {
    running = !running;
};

var playIcon = function(x, y, r) {
    noStroke();
    if (running) {
        rect(x - 4, y - 5, 3, 10, 5);
        rect(x + 1, y - 5, 3, 10, 5);
    } else {
        triangle(x - r * 0.4, y - r * 0.5, x - r * 0.4, y + r * 0.5, x + r * 0.65, y);
    }
};

var restartProgram = function() {
    Program.restart();
};

var restartIcon = function(x, y, r) {
    textAlign(CENTER, CENTER);
    textSize(20);
    text("↻", x, y);
};

var gui = new GUI();
gui.addElement(new CircleButton(8, height - 32, 24, 24, playPause, playIcon));
gui.addElement(new CircleButton(38, height - 32, 24, 24, restartProgram, restartIcon));
}

var setFaceX = function(val) {
    head.face.position.x = faceX + val;
};

var setFaceY = function(val) {
    head.face.position.y = faceY + val;
};

var setDampening = function(val) {
    head.drag = val;
};

var setHairNumber = function(val) {
    head.hairNumber = val;
    head.addHair();
};

var setSectionNumber = function(val) {
    head.sectionNumber = val;
    head.addHair();
};

var setSpringLength = function(val) {
    head.sectionLength = val;
    head.updateSpringValues();
};

var setSpringLength2 = function(val) {
    head.supportLength = val;
    head.updateSupportValues();
};

var setSpringStrength = function(val) {
    head.hairStrength = val;
    head.updateSpringValues();
};

var setSpringStrength2 = function(val) {
    head.supportStrength = val;
    head.updateSupportValues();
};

var toolbar = new Toolbar(8, 8, 150);
//toolbar.addSlider(-100, 100, 0, "Face X", setFaceX);
//toolbar.addSlider(-100, 100, 0, "Face Y", setFaceY);
toolbar.addSlider(0, 0.2, head.drag, "Dampening", setDampening);
toolbar.addSlider(1, 40, head.hairNumber, "Number of hairs", setHairNumber);
toolbar.addSlider(1, 10, head.sectionNumber, "Springs per hair", setSectionNumber);
toolbar.addSlider(2, 40, head.sectionLength, "Spring length", setSpringLength);
toolbar.addSlider(1, 10, head.hairStrength, "Spring strength", setSpringStrength);
toolbar.addSlider(0.2, 1.5, head.supportLength, "Support length", setSpringLength2);
toolbar.addSlider(1, 10, head.supportStrength, "Support strength", setSpringStrength2);

toolbar.sliders[0].decimalPlaces = 2;
toolbar.sliders[4].decimalPlaces = 1;

toolbar.addOptions(showing);

/*******************************************************
 *      Main loop
 * This is where the system is updated.
*******************************************************/

draw = function() {
    drawBackground();
    head.draw();
    gui.draw();
    toolbar.draw();
    
    if (running) {
        head.update();
    }
};

/*******************************************************
 * Event handling
********************************************************/

mousePressed = function() {
    head.mousePressed();
    gui.mousePressed();
    toolbar.mousePressed();
};

mouseReleased = function() {
    head.mouseReleased();
    gui.mouseReleased();
    toolbar.mouseReleased();
};

mouseDragged = function() {
    head.mouseDragged();
    toolbar.mouseDragged();
};

mouseOut = function() {
    head.mouseReleased();
};

keyPressed = function() {
    if (keyCode === 32) {
        running = !running;
    }
};
