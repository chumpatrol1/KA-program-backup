// Control for amplitude
// Sum images
// Colour bar?

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);

strokeJoin(ROUND);
var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var amplitude = 1;

var showing = {
    Polygon: true,
    'Control points': true
};

/******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
*******************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/******************************************************
 *  GUI Button
*******************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/****************************************************
 * GUI Slider
*****************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = 12;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*****************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
*****************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
/****************************************************
 *      DraggablePoint
 * A freely draggable point with a position and
 * colour.
*****************************************************/
{
var DraggablePoint = function(x, y, name) {
    this.x = x;
    this.y = y;
    this.color = ORANGE;
    this.animation = 0;
    this.r = 16;
    this.name = name || "";
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = this.r + this.animation;
    ellipse(this.x, this.y, r, r);
    
    fill(0);
    textSize(10);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
    if (this.x1 || this.x2) {
        this.x = constrain(this.x, this.x1, this.x2);
    }
    if (this.y1 || this.y2) {
        this.y = constrain(this.y, this.y1, this.y2);
    }
};
}
/****************************************************
 *      Graph
 * A collection of draggable points constrained
 * to a box
*****************************************************/

var Graph = function(x, y, w, h, n) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.subdivisions = 0;
    this.curvePoints = [];
    this.curvePoints2 = [];
    this.sumPoints = [];
    
    // Constraints for draggable points
    this.y1 = this.y + 12;
    this.y2 = this.y + this.h - 12;
    
    this.dx = (this.w - 24) / (n - 1);
    this.getRandomPoints(n);
};

Graph.prototype.getRandomPoints = function(n) {
    var x = this.x + 12;
    var points = [];
    
    for (var i = 0; i < n; i++) {
        var value = (random() - 0.5) * 0.8;
        var py = lerp(this.y + this.h, this.y, value);
        var p = new DraggablePoint(x, py - this.h / 2, i + 1);
        p.value = value;
        p.y1 = this.y1;
        p.y2 = this.y2;
        points.push(p);
        x += this.dx;
    }
    
    this.points = points;
    this.calculateSubdivisionCurve();
};

Graph.prototype.resetPoints = function() {
    var arr = new Array(this.points.length + 1).join('0').split('').map(parseFloat);
    this.getNonRandomPoints(arr);
};

Graph.prototype.draw = function() {
    this.drawBox(this.x, this.y);
    
    // Control polygon
    if (showing.Polygon) {
        strokeWeight(1);
        stroke(BLUE);
        noFill();
        beginShape();
        for (var i = this.points.length; i--;) {
            vertex(this.points[i].x, this.points[i].y);
        }
        endShape();
    }

    var q = 1 << (this.subdivisions - 1);
    var n = this.curvePoints.length - q + 1;
    this.drawCurve(0, 0, this.curvePoints.slice(q, n));
    
    if (showing['Control points']) {
        this.points.forEach(function(p) {
            p.draw();
        });
    }
    
    // Draw double curve
    var dy = this.y + this.h + 16;
    this.drawBox(this.x, dy);
    this.drawCurve(0, dy, this.curvePoints2);

    // Sum curve  
    var gx = width - this.w - 5;
    this.drawBox(gx, dy / 2, this.sumScale);
    this.drawCurve(gx, dy / 2, this.sumPoints);

    // Draw arrows
    strokeWeight(2);
    stroke(40);
    var ax1 = this.x + this.w + 5;
    var ay = (dy + this.h * 0.75) / 2;
    var h2 = this.h * 0.5;
    
    line(ax1, this.y + h2, gx - 5, ay);
    
    pushMatrix();
    translate(gx - 5, ay);
    rotate(atan2(ay - this.y - h2, gx - 5 - ax1));
    line(0, 0, -10, 5);
    line(0, 0, -10, -5);
    popMatrix();
    
    ay = (dy + this.h * 1.25) / 2;
    line(ax1, dy + h2, gx - 5, ay);
    
    pushMatrix();
    translate(gx - 5, ay);
    rotate(atan2(ay - dy - h2, gx - 5 - ax1));
    line(0, 0, -10, 5);
    line(0, 0, -10, -5);
    popMatrix();
    
    this.drawColorBar(gx, dy / 2 + this.h + 5);
};

Graph.prototype.drawBox = function(x, y, n) {
    fill(250);
    strokeWeight(1);
    stroke(80);
    rect(x, y, this.w, this.h, 2);
    
    n = n || 4;
    var mid = n / 2 - 1;
    var dy = this.h / n;
    var y2 = y;
    
    for (var i = 0; i < n - 1; i++) {
        y2 += dy;
        stroke(i === mid ? 160 : 230);
        line(x + 2, y2, x + this.w - 2, y2);
    }
};

Graph.prototype.drawCurve = function(dx, dy, p) {
    
    pushMatrix();
    translate(dx, dy);
    strokeWeight(3);
    stroke(GREEN);
    noFill();
    
    beginShape();
    for (var i = p.length; i--;) {
        vertex(p[i].x, p[i].y);
    }
    endShape();
    popMatrix();
};

// Show colours along line
Graph.prototype.drawColorBar = function(startX, y1) {
    var p1, p2, d, my, n1;
    var p = this.sumPoints;
    var n = p.length - 1;
    
    var x1 = p[0].x;
    var x2 = p[n].x;
    var y2 = y1 + 90;
    
    strokeWeight(1);
    for (var x = x1; x <= x2; x++) {
        var mx = norm(x, p[0].x, p[n].x) * n;
        // Interpolate along line
        p1 = mx | 0;
        my = lerp(p[p1].value, p[p1 + 1].value, mx - p1);

        stroke(constrain((0.5 + my) * 255, 0, 255));
        line(startX + x, y1, startX + x, y2);
        
    }
};

Graph.prototype.subdivide = function() {
    if (this.subdivisions < 4) {
        this.subdivisions++;
        this.calculateSubdivisionCurve();
    }
};

Graph.prototype.calculateSubdivisionCurve = function(n1, n2) {
    var n1 = n1 || 0;
    var n2 = n2 || this.points.length;
    var q = 1 << this.subdivisions;
    var q2 = q * q;
    var n = this.points.length;
    var p1, p2, p3, a, b, c, s, t, v, index;
    
    var p1 = this.points[(n1 + n - 1) % n];
    var p2 = this.points[n1];
    var x1 = this.points[0].x;
    var h2 = this.h / 2;

    for (var i = n1; i < n2; i++) {
        p3 = this.points[(i + 1) % n];
        
        for (t = 0; t < q; t++) {
            s = q - t - 1;
            a = (s * s + s) >> 1;
            c = (t * t + t) >> 1;
            b = q2 - a - c;
            v = (a * p1.value +
                 b * p2.value +
                 c * p3.value) / q2;
            
            this.curvePoints[i * q + t] = {
                x: x1 + (i + (c - a) / q2) * this.dx,
                y: this.y + lerp(h2, -h2, v),
                value: v
            };
        }
        p1 = p2;
        p2 = p3;
    }
    
    this.calculateHighFreqCurve();
};

Graph.prototype.calculateHighFreqCurve = function() {
    var p = this.curvePoints;
    var n = p.length;
    var x = this.points[0].x;
    var dx = (this.points[this.points.length - 1].x - x) / (n - 4) / 2;
    var h2 = this.h / 2;
    
    var j, value, y1;
    this.curvePoints2 = [];
    this.sumPoints = [];
    
    var minV = -0.4;
    var maxV = 0.4;
    
    for (var i = 7; i < n * 2 - 7; i++) {
        value = p[i % n].value * amplitude;
        this.curvePoints2.push({
            x: x,
            y: lerp(h2, -h2, value),
            value: value
        });
        
        // Find value in original curve
        j = i / 2;
        if (j === (j | 0)) {
            value += p[j].value;
        } else {
            value += (p[j - 0.5].value + 
                      p[j + 0.5].value) / 2;
        }
        
        maxV = max(maxV, value);
        minV = min(minV, value);
        
        this.sumPoints.push({
            x: x,
            value: value,
        });
        x += dx;
    }
    
    // Calculate how to scale the graph
    this.sumScale = ceil(max(-minV, maxV) * 2.5) * 4;

    // Scale the points
    var p;
    var s = 4 / this.sumScale;
    for (var i = 0; i < this.sumPoints.length; i++) {
        p = this.sumPoints[i];
        p.y = lerp(h2, -h2, p.value * s);
    }
    
    //println(maxV);
};

Graph.prototype.mousePressed = function() {
    if (showing['Control points']) {
        for (var i = this.points.length; i--;) {
            if (this.points[i].mouseOver()) {
                this.selected = this.points[i];
                return;
            }
        }
    }
};

Graph.prototype.mouseReleased = function() {
    this.selected = false;
};

Graph.prototype.mouseDragged = function() {
    if (this.selected) {
        // Only move y coordinate and constrain in box
        this.selected.move(0, mouseY - pmouseY);
        this.selected.value = norm(this.selected.y, this.y + this.h, this.y) - 0.5;
        var n = this.selected.index;
        this.calculateSubdivisionCurve(n, n + 2);
    }
};

/***************************************************
 * Set-up page
****************************************************/

var graph = new Graph(5, 5, 300, 200, 12);
graph.subdivide();
graph.subdivide();
graph.subdivide();

var toolbar = new Toolbar(310, 5, 160);
/*toolbar.add(Button, {
    name: "Reset Points",
    trigger: function() {
        graph.resetPoints();
    }
});*/
toolbar.add(Button, {
    name: "Randomize Points",
    trigger: function() {
        graph.getRandomPoints(12);
    }
});
toolbar.addOptions(showing);

var amplitudeSlider = new Slider(75, height - 52, 160, 10, {
    name: 'Amplitude',
    max: 1,
    now: 0.5,
    decimalPlaces: 2,
    trigger : function() {
        amplitude = this.val;
        graph.calculateHighFreqCurve();
    }
});

/******************************************************
 * Main loop
*******************************************************/

draw = function() {
    background(255);
    graph.draw();
    toolbar.draw();
    amplitudeSlider.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    graph.mousePressed();
    toolbar.mousePressed();
    amplitudeSlider.mousePressed();
};

mouseDragged = function() {
    graph.mouseDragged();
    toolbar.mouseDragged();
    amplitudeSlider.mouseDragged();
};

mouseReleased = function() {
    graph.mouseReleased();
    toolbar.mouseReleased();
    amplitudeSlider.mouseReleased();
};

mouseOut = function() {
    mouseReleased();
};
