/**************************************
 * Animated motion of ball for exercise
***************************************/

frameRate(24);
var maxFrames = 60;
var nFrames = 0;

var initialPosition = [40, height * 0.5];
var initialVelocity = [60, -120];
var initialVelocity = [200, 0];
var netForce = [-45, 0];

var initialVelocity = [0, 0];
var netForce = [2500, 0];

// Draw ball using image or plain circle
var useLuxo = false;

var BALL_RADIUS = 40;

// How fast the animation updates
var DELTA_T = 0.01;

var BLUE = color(64, 95, 237);
var GREEN = color(28, 173, 123);
var PINK = color(255, 0, 175);
var BLACK = color(0, 0, 0);
var BACKGROUND = (250);
imageMode(CENTER);

var running = false;

var showing = {
    "Ball": true,
    "Velocity": false,
    "Net force": false,
    "Forces": false
};

var callForEach = function(arr, func) {
    for (var i = 0; i < arr.length; i++) {
        arr[i][func]();
    }
};

{
var sansFont = createFont("sans", 15);
/**************************************
 * Generic GUI component from which
 * other elements inherit
 * It is basically a button
***************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/**************************************
 *      GUI Button
***************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = color(255, 255, 255, 240);
    this.highlightCol = params.highlightCol || color(180, 180, 190, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(20);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
    this.defaultCol = color(220, 220, 230, 230);
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 5);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/**************************************
 *      GUI Slider
***************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/**************************************
 *      Dropdown Menu
***************************************/
{
var Dropdown = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    
    this.options = params.options || [];
    this.selectedOption = params.selectedOption || 0;
    this.dy = 20;
    this.boxW = 85;
    this.boxH = this.dy * (this.options.length + 1);
    this.x2 = this.x + this.w - this.boxW;
    
    this.showDropdown = false;
};
Dropdown.prototype = Object.create(Button.prototype);

Dropdown.prototype.draw = function() {
    this.fade();

    fill(10);
    textFont(sansFont, 13);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + 4, this.y + this.h / 2);
    var y = this.y + this.h / 2;

    textAlign(RIGHT, CENTER);
    var x = this.x2 + this.boxW - 4;
    
    if (this.showDropdown) {
        // Show all options
        strokeWeight(1);
        fill(250);
        rect(this.x2, this.y, this.boxW, this.boxH, 5);
        
        // Highlight selected
        if (this.mouseOver()) {
            if (this.transition) {
                noStroke();
                fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
                var index = this.getOption();
                rect(this.x2 + 1, this.y + index * this.dy + 1, this.boxW - 1, this.dy - 1, 5);
            }
        }
        
        fill(10);
        text(this.options[this.selectedOption], x, y);
        for (var i = 0; i < this.options.length; i++) {
            y += this.dy;
            text(this.options[i], x, y);
        }
        
    } else {
        // Selection box
        if (this.transition) {
            fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        } else {
            fill(250);
        }
        strokeWeight(1);
        stroke(200);
        rect(this.x2, this.y, this.boxW, this.h, 5);
        
        fill(10);
        text(this.options[this.selectedOption], x, y);
    }
};

Dropdown.prototype.getOption = function() {
    return min(floor((mouseY - this.y) / this.dy), this.options.length);
};

Dropdown.prototype.mouseOver = function() {
    return (mouseX >= this.x2 && mouseX <= this.x2 + this.boxW &&
            mouseY >= this.y && mouseY <= this.y + (this.showDropdown ? this.boxH : this.h));
};

Dropdown.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        if (this.showDropdown) {
            var selected = this.getOption();
            if (selected) {
                this.selectedOption = selected - 1;
                this.trigger(this.options[this.selectedOption]);
            }
            this.showDropdown = false;
        } else {
            this.showDropdown = true;
        }
    } else {
        this.showDropdown = false;
    }
    this.selected = false;
};
}
/**************************************
 *      Toolbar
 * Container for buttons and sliders.
***************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(220, 220, 230, 230);
    rect(this.x, this.y, this.w, this.h, 8);
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseDragged();
    }
};
}
}   // GUI
/**************************************
 *  Vectors are arrows with a base and
 * an end.
 * The end can be selected to move it
***************************************/
{
var Vector = function(base, x, y, col) {
    this.base = base;
    this.x = x;
    this.y = y;
    this.color = col || PINK;
    this.fade = lerpColor(this.color, BACKGROUND, 0.5);
    this.getAngle();
};

Vector.prototype.draw = function() {
    if (abs(this.x) < 0.1 && abs(this.y) < 0.1) { return; }
    
    var x = this.base.x;
    var y = this.base.y;
    var x2 = x + this.x;
    var y2 = y + this.y;
    
    strokeWeight(3);
    stroke(this.color);
    line(x, y, x2, y2);
    
    noStroke();
    fill(this.color);
    pushMatrix();
    translate(x2, y2);
    rotate(this.angle);
    triangle(5, 0, -12, -8, -12, 8);
    popMatrix();
};

Vector.prototype.getAngle = function() {
    this.angle = atan2(this.y, this.x);
    this.length = mag(this.x, this.y);
};

Vector.prototype.mouseOver = function() {
    var L = this.length - 4;
    var x = this.base.x + cos(this.angle) * L;
    var y = this.base.y + sin(this.angle) * L;
    return dist(mouseX, mouseY, x, y) < 11;
};

Vector.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
    this.getAngle();
};
}
/**************************************
 *  Ball moves based on its vectors.
***************************************/
{
var Ball = function() {
    this.x = initialPosition[0];
    this.y = initialPosition[1];
    this.color = BLUE;
    this.fade = lerpColor(this.color, BACKGROUND, 0.5);
    
    this.img = getImage("pixar/luxoball");
    this.w = BALL_RADIUS;
    this.h = this.w * this.img.height / this.img.width;
    this.d = this.w * 0.94;
    
    this.velocity = new Vector(this, initialVelocity[0], initialVelocity[1], GREEN);
    this.forces = [];
    this.netForce = new Vector(this, 0, 0, BLACK);
    this.vectors = [this.velocity];
    this.time = millis();
};

Ball.prototype.draw = function() {
    if (showing.Ball) {
        // Shadow
        noStroke();
        fill(0, 0, 0, 120);
        ellipse(this.x + 1, this.y + 1, this.d, this.d);
        
        // Ball
        if (useLuxo) {
            image(this.img, this.x, this.y, this.w, this.h);
        } else {
            fill(this.color);
            ellipse(this.x, this.y, this.d, this.d);
        }
    }
    
    if (showing.Forces) {
        callForEach(this.forces, 'draw');
    }
    if (showing['Net force'] && this.forces.length > 1) {
        this.netForce.draw();
    }
    
    if (showing.Velocity) {
        this.velocity.draw();
    }
};

Ball.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};

Ball.prototype.update = function() {
    // Update velocity
    this.velocity.x += this.netForce.x * DELTA_T;
    this.velocity.y += this.netForce.y * DELTA_T;

    // Update position
    this.x += this.velocity.x * DELTA_T;
    this.y += this.velocity.y * DELTA_T;
};

Ball.prototype.calculateNetForce = function() {
    this.netForce.x = 0;
    this.netForce.y = 0;
    for (var i = 0; i < this.forces.length; i++) {
        var v = this.forces[i];
        this.netForce.x += v.x;
        this.netForce.y += v.y;
    }
    this.netForce.getAngle();
};

Ball.prototype.addForce = function() {
    var angle;
    if (this.vectors.length === 1) {
        // No existing forces so add vector
        angle = 90;
    } else if (this.vectors.length === 2) {
        // One exisiting force, so point in opposite direction
        angle = this.vectors[1].angle + 180;
    } else {
        // Find a vector pointing in a different direction from the other forces
        var sortByAngle = function(a, b) {
            return a.angle - b.angle;
        };
        
        // Sort vectors by angle
        var vectors = this.forces.sort(sortByAngle);
        
        // Find biggest difference between angle
        var n = vectors.length;
        var v1 = vectors[n - 1];
        var maxAngle = 0;
        
        for (var i = 0; i < n; i++) {
            var v2 = vectors[i];
            var dAngle = v2.angle - v1.angle;
            if (dAngle > 180) {
                dAngle -= 360;
            } else if (dAngle < -180) {
                dAngle += 360;
            }
            dAngle = abs(dAngle);
            //println(v1.angle + " " + v2.angle + " " + dAngle);
            if (dAngle > maxAngle) {
                maxAngle = dAngle;
                angle = v1.angle + dAngle * 0.5;
            }
            v1 = v2;
        }
    }
    
    this.addSpecificForce(40 * cos(angle), 40 * sin(angle));
    
};

Ball.prototype.addSpecificForce = function(dx, dy) {
    var force = new Vector(this, dx, dy);
    this.forces.push(force);
    this.vectors.push(force);
    this.calculateNetForce();
};
}
/**************************************
 *      Set-up
***************************************/

var ball = new Ball();

ball.addSpecificForce(netForce[0], netForce[1]);

/**************************************
 *      Create GUI
***************************************/

var toolbar = new Toolbar(5, 5, 100);
toolbar.add(Button, {
    name: 'Play',
    trigger: function() {
        if (!running) {
            running = true;
            this.name = 'Pause';
        } else {
            running = false;
            this.name = 'Play';
        }
    }
});
toolbar.add(Button, {
    name: 'Restart',
    trigger: function() {
        ball.x = initialPosition[0];
        ball.y = initialPosition[1];
        ball.velocity.x = initialVelocity[0];
        ball.velocity.y = initialVelocity[1];
    }
});

var elements = [ball, toolbar];

/**************************************
 *      Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    cursor('default');
    
    ball.draw();
    toolbar.draw();
    
    if (running) {
        if (nFrames < maxFrames) {
            if (++nFrames === maxFrames) {
                toolbar.components[0].trigger();
                toolbar.components[1].trigger();
                nFrames = 0;
            }
            ball.update();
        }
    }
};

/**************************************
 *      Event handling
***************************************/
{
mousePressed = function() {
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
};

mouseReleased = function() {
    toolbar.mouseReleased();
};

mouseOut = mouseReleased;
}
