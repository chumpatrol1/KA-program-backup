var images = [
    getImage("avatars/leafers-seed"),
    getImage("avatars/leafers-seedling"),
    getImage("avatars/leafers-sapling"),
    getImage("avatars/leafers-tree"),
    getImage("avatars/leafers-ultimate"),
];

// GUI element to display images in a scrolling area
var ImageHolder = function(x, y, w, h, images) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.images = images;
    this.initialised = false;
    
    this.scrollPosition = 0;
    this.maxScroll = 0;
    this.br = 8;
    this.bx = this.x + this.w - this.br - 2;
    this.y1 = this.y + this.br + 20;
    this.y2 = this.y + this.h - this.br - 20;
};

ImageHolder.prototype.init = function() {
    this.mask = createGraphics(width, height, P2D);
    this.mask.background(0);
    this.mask.fill(255);
    this.mask.rect(0, this.y, this.w, this.h, 20);
    this.mask = this.mask.get(0, 0, this.w, height);
    this.addImages();
    this.getScrollBall();
};

ImageHolder.prototype.getScrollBall = function() {
    this.by = map(this.scrollPosition, 0, this.maxScroll, this.y1, this.y2);
};

ImageHolder.prototype.addImages = function() {
    this.background = createGraphics(width, height, P2D);
    this.background.background(255, 255, 255);
    
    var x = 0;
    var y = this.y - this.scrollPosition;
    var imageHeight = 0;
    
    for (var i = 0; i < this.images.length; i++) {
        var img = this.images[i];
        this.background.image(img, x, y);
        y += img.height + 10;
        imageHeight += img.height;
    }
    
    this.img = this.background.get(0, 0, this.w, height);
    this.img.mask(this.mask);
    
    this.maxScroll = max(0, imageHeight + 10 * (this.images.length - 1) - this.h);
    this.scrollScale = this.maxScroll / (this.y2 - this.y1);
};

ImageHolder.prototype.draw = function() {
    stroke(0);
    rect(this.x, this.y, this.w, this.h, 20);
    
    fill(0);
    textAlign(CENTER, BASELINE);
    text(this.scrollPosition, this.x + this.w / 2, this.y - 5);
    
    if (!this.initialised) {
        this.initialised = true;
        this.init();
    } else {
        this.drawImages();
    }
    
    strokeWeight(4);
    stroke(160);
    line(this.bx, this.y1, this.bx, this.y2);
    
    noStroke();
    fill(120);
    ellipse(this.bx, this.by, this.br * 2, this. br * 2);
};

ImageHolder.prototype.drawImages = function() {
    image(this.img, this.x, 0);
};

ImageHolder.prototype.scroll = function(d) {
    this.scrollPosition = constrain(this.scrollPosition + d, 0, this.maxScroll);
    this.addImages();
    this.getScrollBall();
};

ImageHolder.prototype.mousePressed = function() {
    this.selected = dist(mouseX, mouseY, this.bx, this.by) <= this.br;
};

ImageHolder.prototype.mouseDragged = function() {
    if (this.selected) {
        this.scroll(this.scrollScale * (mouseY - pmouseY));
    }
};

ImageHolder.prototype.mouseReleased = function() {
    this.selected = false;
};

/**************************************************************
 *  Create objects
***************************************************************/

var ih = new ImageHolder(20, 20, 120, 300, images);

/**************************************************************
 *  Main
***************************************************************/

var draw = function() {
    background(255);
    
    if (!this.loadPixels) {
        return;
    }
    
    ih.draw();
};

/**************************************************************
 *  Event handling
***************************************************************/

keyPressed = function() {
    if (keyCode === DOWN) {
        ih.scroll(5);
    } else if (keyCode === UP) {
        ih.scroll(-5);
    }
};

mousePressed = function() {
    ih.mousePressed();
};

mouseDragged = function() {
    ih.mouseDragged();
};

mouseReleased = function() {
    ih.mouseReleased();
};
