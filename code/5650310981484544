<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Khan Academy Blog 2015</title>
        <link href='https://fonts.googleapis.com/css?family=Alegreya+Sans+SC:900,500' rel='stylesheet' type='text/css'>
        <link href='https://fonts.googleapis.com/css?family=Josefin+Sans:400,600' rel='stylesheet' type='text/css'>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
        
        <style>
            body {
                margin: 0;
                background-color: #f8f8f8;
                font-family: 'Josefin Sans', Arial, sans-serif;
            }
            h1, h2, h3, h4 {
                font-family: 'Alegreya Sans SC', impact;
            }
            h1 {
                color: white;
                text-align: center;
                margin-top: 2px;
                font-size: 3em;
            }
            h2 {
                font-size: 32px;
                color: #222;
                text-shadow: 1px 1px rgb(200, 200, 200);
                margin-bottom: 0;
            }
            h3 {
                font-size: 1.5em;
                margin-bottom: 12px;
            }
            h4 {
                font-size: 20px;
                margin-top: 0;
                margin-bottom: 0;
            }

            a {
                color: #04b;
                font-weight: bold;
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            ul {
                line-height: 22px;
                padding-left: 12px;
                margin-top: 5px;
                list-style-type: none;
            }
            ol {
                counter-reset: my-list-counter;
                list-style-type: none;
                list-style: none;
                padding-left: 4px;
            }
            ol li:before {
                content: counter(my-list-counter) ". ";
                counter-increment: my-list-counter;
                margin-right: 5px;
                font-weight: bold;
            }
            
            #title {
                margin: 0;
                width: 100%;
                height: 60px;
                position: fixed;
                top: 0;
                background-color: #222;
                -webkit-box-shadow: 0px 2px 16px 0px rgba(0,0,0,0.7);
                -moz-box-shadow: 0px 2px 16px 0px rgba(0,0,0,0.7);
                box-shadow: 0px 2px 16px 0px rgba(0,0,0,0.7);
            }
            
            #contents {
                margin: 70px 24px 10px 24px;
            }
            
            #contents-list {
                font-variant: small-caps;
                -webkit-columns: 100px 2;
                -moz-columns: 100px 2;
                columns: 100px 2;
            }
            
            .entry {
                color: #222;
                font-size: 17px;
                border-top: 1px solid #ccc;
                position: relative;
                line-height: 21px;
                padding-left: 10px;
                padding-right: 10px;
            }
            .entry p {
               margin-top: 8px; 
            }
            
            .contents-month {
                margin-bottom: 10px;
            }
            .contents-month>div {
                text-decoration: underline;
                cursor: pointer;
            }
            
            .date {
                font-weight: bold;
                font-size: 16px;
                position: absolute;
                top: 6px;
                right: 16px;
            }
            
            pre {
                background-color: #ddd;
                overflow-x: auto;
            }
            
            code {
                background-color: #ddd;
                font-size: 80%;
                padding: 1px 3px;
            }
            
            .tag-container {
                clear: both;
                line-height: 26px;
            }
            
            #tag-cloud {
                font-size: 14px;
            }
            
            .tag {
                font-family: 'Josefin Sans', sans-serif;
                font-size: 17px;
                line-height: 21px;
                background-color: #686868;
                color: #f8f8f8;
                padding: 3px 6px 1px 6px;
                margin-right: 5px;
                margin-bottom: 4px;
                -moz-border-radius: 10px;
                -webkit-border-radius: 10px;
                border-radius: 16px;
                white-space: nowrap;
                display: inline-block;
            }
            
            .tag:hover {
                background-color: #222;
            }
            
            .tag-count {
                font-size: 12px;
                margin-left: 5px;
            }
            
            #tag-cloud .tag {
                cursor: pointer;
            }
            
            .float-image {
                float: left;
                padding-right: 8px;
                padding-bottom: 8px;
            }
            
            .list-column {
                display: inline-block;
                margin-right: 25px;
            }
        </style>
    </head>
<body>

<div id="contents">
    <div class="content-breakdown">
        <h2>Contents</h2>
        <!-- <div>Show all</div> -->
        <div id="contents-list"></div>
    </div>
    <div class="content-breakdown">
        <h2>Tags</h2>
        <div id="tag-cloud"></div>
    </div>
    <div style="clear:both"></div>
    <div id="entries"></div>
</div>

<div id="title"><h1>Khan Academy Blog 2015</h1></div>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

<!-- Blog entries in JSON -->
<script>
    var data = [
{
    title: "Starting a blog",
    date: [19, 2, 15],
    tags: ["blog"],
    img: "web",
    content: "I started to make this blog, but didn't get much further than a bit of styling. The aim is to keep a record of what I'm up to on Khan Academy. I'm not very good at regularly updating my websites, but if I try to keep things short I might manage."},
{
    title: 'Still styling',
    date: [22, 2, 15],
    tags: ["blog", "work"],
    img: "web",
    content: "Improved the styling of this blog by adding the entry and date classes. I've also started to improve the styling of the [modular arithmetic articles](computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic) because I noticed the mathematical expressions didn't look great. At some point I'd like to improve the images too."},
{
    title: '12 day streak',
    date: [25, 2, 15],
    tags: ["studying", "milestone"],
    img: "/images/badges/earth/10000-year-clock-60x60.png",
    content: "Got my longest streak of 12 days today, after missing a few days on previous streak attempts. I got the badge for getting a 100 day streak a couple of years ago, and at that time, I had to keep track of things with my website, [WhatBadgeNext](http://whatbadgenext.appspot.com), which used the Khan Academy API to find the number of days I'd worked.\nEven before the new streak tracker was added, I started to make an effort to finish all exercises in _World of Math_. I'm currently 97% through _Algebra II_, 99% through _8th grade math_ and 86% through the whole _World of Math_. There are still 102 exercise I have yet to start. For the first time in ages, I have fewer than 100 unstarted exercise (98 in fact)."},
{
    title: 'Adding a table of contents',
    date: [1, 3, 15],
    tags: ["CS-learning", "blog"],
    img: "web",
    content: "I've been working through the newly-added [tutorials on Javascript and HTML](computing/computer-programming/html-css-js). Most of the methods I know how to do using jQuery, but lots I don't really know how to do using native JS. I've used a few methods here to automatically add the table of contents, so I don't need to keep track of things."},
{
    title: 'Algebra II complete',
    date: [1, 3, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: "I've managed to maintain my streak, so I'm up to 16 days. I've finished _Alegbra II_ and am now working through _Geometry_ (83% so far). It seems the exercises I have most trouble with are the ones I helped to make (like the annoying compass constructions). 12% more of _World of Math_ to go."},
{
    title: '1001 Earth badges',
    date: [2, 3, 15],
    tags: ["studying", "badge", "work", "milestone"],
    img: "images/badges/earth-small.png",
    content: 'Today I got my 1000th and 1001th Earth badges - both speed badges - while doing a top secret exercise.'},
{
    title: 'Geometry complete',
    date: [5, 3, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: 'I finished _Geometry_ today and have moved onto _Probability and Statistics_ (84%). This puts my streak at 20 days and my completion of _World of Math_ at 91%. I now have fewer than 100 exercises to master for the first time in ages.'},
{
    title: 'Planned webpage updates',
    date: [5, 3, 15],
    tags: ["blog", "ideas"],
    img: "idea",
    content: "I've been thinking about how to improve this blog, particularly what to do when the number of entries gets higher (assuming I continue to write here). I also want to update my [list of programs](6327297740374016) so it's easier to add programs and organise them with tags. I was browsing some of my older programs and adding them to the list just now. I made some good programs a couple of years ago, which I'd all but forgotten about."},
{
    title: 'Colour converter',
    date: [5, 3, 15],
    tags: ["CS-learning"],
    img: "tinker",
    content: "I saw a help request asking how to convert between the negative number you see if you print a colour in processing.js environment and the three number RGB code. It's something I had previously wondered about and which took me a long time to figure out.\nI had made [a program](5545167588425728), which did the opposite - converting a number to a colour. The motivation was to create an evolution simulation, where the colour of organisms would be stored as a binary string to allow for realistic colour mutations. I improved the code there and added the inverse function as a demonstration. It uses some fun bit-twiddling, which I want to try to use more often."},
{
    title: "Adding alpha",
    date: [6, 3, 15],
    tags: ["CS-learning", "blog"],
    img: "4785323370086400/5766466041282560",
    content: "As a result of looking at this [fun 3D program](5162930016092160) on the hotlist and seeing how it was optimised (and finding a few more ways it could be optimised further), I finally figured out how to add alpha to colour that has already been defined. This is something I've wanted to do many times and I normally end up defining two sets of colours: one transparent and one not. But now I can dynamically add alpha without having to define a new colour: `color(100, 200, 50, alpha)`.\nThe solution is to do something like, `fill(myColor + alpha &lt;&lt; 24)`. This adds the value of alpha times two to the power of 24, which makes sense, since the number is originally 24-bit and alpha is in the next position, up to 32-bit (makes sense to me anyway, although I've not explained it very well).\nIn other news, I've added some `code` styling to this blog."},
{
    title: "Probability and Statistics complete",
    date: [8, 3, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: 'Today I finished _Probability and Statistics_ and got my 182nd Challenge Patch. This brings me up to 92% of _World of Math_ and a streak of 23 days. Next up _Trigonometry_, currently at 56%.'},
{
    title: "Blog restructure",
    date: [8, 3, 15],
    tags: ["blog"],
    img: "web",
    content: "I've restructured by blog, so all the entries are stored as JSON. It mimics the concept of keeping the entries in a database. This should mean that it's easier for me to make changes to how I organise the content. I'm glad I've done it now, before the number of entries made it too much of a pain.\nIt should be possible for me to now only show entries for a given month, which is something I plan to do when the table of contents becomes too long. At the very least it means I don't have to worry about adding st, nd, rd and th to the date.\nI've also added tags, which is something I was thinking about <a href=\"#entry7\">a few days ago</a>. Next I want to be able to filter by tag type."},
{
    title: 'Hacker puzzle #2 released',
    date: [9, 3, 15],
    tags: ["PJS-program"],
    img: "5978397440999424/5764321241989120",
    content: "I finally released [the second level for my hacker puzzle](5978397440999424), over a year after I released [the first](4993855887769600). The second level is significantly more tricky than the first - I hope it's not completed too soon.\nThe new version was written almost from scratch and adds way more functionality that the original. The code is also organised much better so it's easier to expand. It would have been a lot harder to write the second level with the old code. Despite trying to write it in a quite a neat and compact way, it seems this may be the longest, most complex code I've written here."},
{
    title: 'Space trading game',
    date: [9, 3, 15],
    tags: ["PJS-program", "ideas"],
    img: "idea",
    content: 'Now I\'ve finished my hacker puzzle, I\'ve been thinking about all the other projects I\'d like to work on. One idea is a trading game, probably set in space, as it would give me more flexibility as to the types of vehicle and goods.</p>[<img src="https://www.khanacademy.org/computer-programming/infinite-map/6587673208946688/5719570367119360.png" class="float-image">](6587673208946688)<p>I have all sorts of ideas which are probably way too complex for me ever to finish, so I was trying to think of minimal game. I came up with one version (with pen and paper), where the optimal strategy could calculated using simultaneous equations and wondered if I could make the game teach maths whilst still being interesting (and still being a game).\nFirst, I should probably finish up a couple of other projects I started but didn\'t manage to get to a minimal working version, such as my [gene regulation game](5902864482304000) or [infinite RPG](6587673208946688).\nEDIT: I finally [made a start on the space trading game](#entry22).'},
{
    title: 'Women in History contest',
    date: [9, 3, 15],
    tags: ["contest"],
    img: "5848986646478848/5733935958982656",
    content: "I don't normally enter contests as I don't think I'm allowed to win. However, [the latest contest](6675428649205760) is to write about a famous woman in history, and I really want to learn more about, and tell other people about Gertrude Bell. I heard about her on the radio a couple of months ago and was surprised I'd not heard about her before. She sounds like a remarkable woman, who had a role in defining the modern state of Iraq, which is still having consequences to this day. I hope I can make a decent page for her in time for the end of the competition so other people can learn about her too."},
{
    title: 'Bristlecone badge',
    date: [10, 3, 15],
    tags: ["badge", "milestone"],
    img: "images/badges/earth/sequoia-60x60.png",
    content: 'Today I got the _Bristlecone_ badge for being a member of Khan Academy for four years. On one level, this badge required no effort on my part, I just had to sit back and wait, on the other hand, it is quite a hard badge to get - it takes four years work!'},
{
    title: 'Program spotlight: 3D DNA',
    date: [10, 3, 15],
    tags: ["PJS-program", "spotlight"],
    img: "5173837732511744/5709068098338816",
    content: "I came across [this program](5173837732511744) by Xynix, which I thought was very well made (and I'm not just saying that because I got a mention). The user took my 3D tutorial and added a lot more features - and made DNA, a molecule close to my heart (literally). I particularly like the `twistiness` variable, which lets you determine how tightly twisted the DNA is.\nI found the program via [SpongeJr's page of educational programs](4811189652815872). I hope make something similar by continuing to feature programs and users that impress or inspire me on this blog."},
{
    title: '7000 badges',
    date: [10, 3, 15],
    tags: ["badge", "milestone"],
    img: "images/badges/moon/ludicrous-streak-60x60.png",
    content: "Just got my 7000th badge - _Ludicrous Streak_ for and Art History [quiz about a Vermeer painting](humanities/monarchy-enlightenment/baroque-art1/holland/e/vermeer-s-woman-holding-a-balance-quiz). It certainly is ludicrous as there are only four questions in the quiz. Since I also just got _Bristlecone_, that means I have averaged 1750 badges a year, or ~4.8 a day (you can see I've learnt some maths in that time)."},
{
    title: 'Adding images',
    date: [10, 3, 15],
    tags: ["blog"],
    img: "web", 
    content: "I've started to add images to this blog to make it a bit more interesting and add a splash of colour. So far, they're mainly images of badges. I've created some shortcuts for ones I expect to reuse, such as this one for post about update to this blog."},
{
    title: 'Using Javascript libraries',
    date: [11, 3, 15],
    tags: ["blog", "CS-learning"],
    img: "web", 
    content: 'I didn\'t think we could link to external libraries, but I discovered (thanks to [Pamela](computer-programming/_/6675428649205760?qa_expand_key=ag5zfmtoYW4tYWNhZGVteXJkCxIIVXNlckRhdGEiQXVzZXJfaWRfa2V5X2h0dHA6Ly9nb29nbGVpZC5raGFuYWNhZGVteS5vcmcvMTA4NDQyNTA4MzkxMTQ5MjM3MTI0DAsSCEZlZWRiYWNrGICAgPCM-5gKDA) and [Simon Foldvik](4700006424248320)) some have been whitelisted. That means we can use things like jQuery and MathJax, which is super-useful and makes me want to type maths. To use jQuery, add:\n``&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"&gt;&lt;/script&gt;``\nHave a look [here](https://cdnjs.com) for more possibilities.'},
{
    title: 'HTML game',
    date: [13, 3, 15],
    tags: ["blog"],
    img: "idea", 
    content: "I was thinking again about making a trading game set in space, and was wondering about the graphics for the planets and moons. I thought I might be able to use the moon badge (the old one would have been better), and realised I could if I made it as an HTML game. Writing it in HTML would also greatly simplify the need to for making an interface, often the most time-comsuming and always the least fun part of making a game. I'm not sure it's the best option here, but I might try just to demonstrate the principle. At the moment there's so many things I want to do, I don't seem able to start anything."},
{
    title: 'Attempting to organise my programs',
    date: [14, 3, 15],
    tags: ["CS-learning", "work"],
    img: "tinker", 
    content: "I've spent some time today finding a way to organise some of the official programs I've made on Khan Academy. I've come up with a reasonable solution, including a more efficient way to save the program and image URLs. Ideally I'd like to make a textbox on the site itself which would convert a link to a program to the JSON I want. At some point I use these ideas to improve [the page](6327297740374016) I use to keep track of some of my better programs."},
{
    title: 'Making a start on my trading game',
    date: [14, 3, 15],
    tags: ["HTML-program"],
    img: "5183812235165696/5689792285114368", 
    content: "After goodness knows how many months of thinking about it, I finally made a start on my [space trader game](5183812235165696). As I mentioned yesterday, I'm going to try to make it an HTML game, mainly just the change. So far I have spent far too long picking a color and font, both of which I'll probably change at a later date. Work on the game elements first and sort out the look of the thing later.\nWhen looking through some notes I'd made whilst planning this game, I found notes for another, somewhat similar games, which I now want to make too. Must try to focus on one thing at a time."},
{
    title: "Program spotlight: Don't touch the spikes",
    date: [15, 3, 15],
    tags: ["PJS-program", "spotlight"],
    img: "5261614611431424/5647308616105984", 
    content: 'I saw this program on the Hotlist. Whilst the game is just a flappy bird clone it is very well made with a nice, consistent look to it. I particularly like all the icons and options.'},
{
    title: 'Slow progress',
    date: [16, 3, 15],
    tags: ["studying", "exercises"],
    img: "challenge", 
    content: "I'm slowly making my way through _Trigonometry_. I find the questions often very long and keep making careless mistakes. I'm 84% there, so I'm getting there. And on my 31st streak day, so that's a month.\nMy Space Traders game is also progressing slowly as I'm still spending too much time on the layout. I have just about made it possible to buy a vessel, but I need to think about how I'm going to update the page."},
{
    title: 'Blog Spotlight: SparklyGems CS Blog',
    date: [18, 3, 15],
    tags: ["spotlight", "blog"],
    img: "4585420263522304/5747350215589888", 
    content: "This is my first, and quite possibly only, blog spotlight. It's to say congratulations to [SparklyGem](profile/SparklyGem) for writing the 100th blog post today. Seeing their blog was what sparked me to start this one. I hope I can keep mine going for as long."},
{
    title: "Trigonometry complete",
    date: [22, 3, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: "Today I finished _Trigonometry_ (and a couple of new exercises for _Seventh grade math_), and got my 188th Challenge Patch. This brings me fractionally closer to of _World of Math_ at 94% complete and a streak of 37 days. Now I have to start the difficult subjects of _Differential_ and _Integral calculus_, which is going to require me learning new topics for the first time in a while. I'm currently only 57% of the way through _Differential calculus_."},
{
    title: 'Program Spotlight: Tetris',
    date: [25, 3, 15],
    tags: ["spotlight", "PJS-program"],
    img: "5116720859316224/5629499534213120", 
    content: "Several months ago, I realised that I hadn't seen a version of tetris on KA and added it to my list of programs I want to make when I get some time. But now it seems someone has made it, and made it better than I could, with a lot of interesting features, such as showing the outline of the block at the bottom of the screen before it's fallen."},
{
    title: "Learning implicit differentiation",
    date: [31, 3, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: "I'm aiming to complete _World of Math_, and have recently hit _differential equations_. This is the first time I've really hit something that I need to (re)learn. I did a booster challenge and had to say that I didn't know how to do any of the questions.\nSo I've been rewatching videos I've seen before and stopping the videos to work through the questions on my own, which I've not really done before. And it seems to be working: I think I've now cracked implicit differential, which I got stuck on several months ago. It's a good feeling to have learnt something new (although I was able to do it about 12 years ago)."},
{
    title: "50 day streak",
    date: [4, 4, 15],
    tags: ["studying", "exercises", "milestone"],
    img: "challenge",
    content: "I've managed to keep up streak going for 50 days, and feel like I've broken the back of _Differential Equations_ (now at 82% complete). It looks like 8 more exercises have been added to 8th grade math, just to push my target further away, but at least they're easy to complete. There are now 967 exercises in _World of Math_ and I have complete 907, so still 60 to go (see I have learnt subtraction)."},
{
    title: "10,000 votes",
    date: [10, 4, 15],
    tags: ["milestone"],
    content: "At some point in the last day or so, I have given by 10,000th vote. I think most of them have been upvotes. It made me wonder whether I have given or received more votes. A quick look at my questions, answers and tips, makes me think I have received more than I've given, definitely if you include programs. So I still owe more votes."},
{
    title: "Differential calculus complete",
    date: [12, 4, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: "Today I finished _Differential calculus_ and, and got my 191st Challenge Patch. This brings me to 95% through _World of Math_. Next up, is the final, and hardest subject: _Integral calculus_, which, so far, I've done 36% of. Unfortunately, the progress page keeps breaking, so I can't see how many exercise I have completed and how many I have yet to start (I think it's 36)."},
{
    title: 'Analysing program data',
    date: [14, 4, 15],
    tags: ["HTML-program"],
    img: "4547503504621568/5704837555552256", 
    content: "In a discussion with [DY](profile/darrylyeo) on this blog, he asked about using the KA API to get information about user's programs. This is something I've thought about addding to my [WhatBadgeNext](http://www.whatbadgenext.appspot.com) site for some time, but never got around to it. So I quickly mocked something using the KA webpage environment. It worked pretty, especially after Kazza++ pointed out that `getJSON` worked here.\nSo I finally got to see how many votes and spin-offs, I have in total (more than 10,000 votes, even if you ignore the automatic ones). Before I knew it, the program was on the hotlist and had added quite significantly to my vote count. For some reason though, it doesn't work for some people."},
{
    title: "Yet more exercises",
    date: [16, 4, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: "I'm making progress with _Integral calculus_ (43% now). It's not been as hard as I expected - it's seems I had already attempted the hardest exercise. But now I see there are 8 more exercises in algebra I, bringing the total up to 975. So close to 1000. I wonder if I can complete them all before 1000 is reached (I have less than 50 to go)."},
{
    title: "Three steps forward, two steps back",
    date: [21, 4, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: "I'm still inching my way forward through _Integral Calculus_ Several of the mastery challenges I've done have resulted in me losing more skills than I've gained. Normally this is due to careless errors (which have always been my downfall), but some of the sequences and series questions, I just can't do any more. But I'm still moving forward (up to 58% now, and 97% of _World of Math_), and most importantly, I feel like I'm actually learning the material, rather than just learning how to get the exercises right. Context switching definitely makes it harder to get questions right, but helps you to retain the informationin the long run.\nOn top of that, more algebra exercises have been added, which on one hand pushes my goal further away, but on the other, makes it easier on average (since I can quickly do the new exercises)."},
{
    title: 'Program Spotlight: Yahtzee',
    date: [25, 4, 15],
    tags: ["spotlight", "PJS-program"],
    /*img: "5802496983433216/5707702298738688", */
    content: "EDIT: Sadly Brian Duckworth, who made this game has disappeared and taken his game with him.\nThis is another program I saw on the hotlist. It's a relatively simple, but hugely addictive game. I've played it few times before as a real dice game, but it seems much more addictive as a single player computer game. In terms of the coding, it is very well made, with all the variables for styling wrapped up nicely in objects. I could probably learn a lot by looking at the code in more detail."},
{
    title: "1001 exercises",
    date: [30, 4, 15],
    tags: ["studying", "exercises", "milestone"],
    img: "challenge",
    content: "I'm still making slow progress with _Integral calculus_ (59% now). But more exercises have been added to _World of Math_, putting it at over 1000 (still not enough for a Black Hole badge. Luckily all the new exercises, have been very simple, so I can quickly master them. So still 30 exercises to master, but now I'm 97% done."},
{
    title: 'New Program: Hex',
    date: [3, 5, 15],
    tags: ["PJS-program"],
    img: "6227402002923520/5645478960037888", 
    content: "I've been thinking about yet another artifical life program, this time using a hexagonal grid for the cells. Whilst trying out some ideas, I decided to make the game Hex. Once I'd figured out how to convert a pixel position to a position on the board, it was quite easy. One day I'd like to attempt to make an AI for the game."},
{
    title: 'Top Secret Update',
    date: [21, 5, 15],
    tags: ["CS-environment", "work", "Pixar"],
    img: "secret",
    content: "Today there was an update to KA that I'm very excited about, but I can't say what. All will be revealed in a couple of months.\n*EDIT*: The update was the addition of the Pixar images to the CS environment."},
{
    title: '98 day streak',
    date: [23, 5, 15],
    tags: ["studying", "milestone"],
    img: "challenge",
    content: "Yesterday I broke my streak after 98 days. Fortunately, I already have the _10,000 Year Clock_ badge otherwise I'd be very annoyed with myself. There was no particular reason for it either, I spent quite a bit of time working on KA yesterday. To be fair, most of the days recently I've only watched videos rather than getting on with finishing _Integral Calculus_."},
{
    title: '12 million points',
    date: [27, 5, 15],
    tags: ["points", "milestone"],
    img: "images/badges/moon/ludicrous-streak-60x60.png",
    content: "Today I got my 12 millionth energy point. I have to admit, the millions are blurring into one now. I know I got ten million around the end of 2013, but can't remember the 11th. I'm definitely slowing down now. Too busy making things!"},
{
    title: 'Attempting to organise my blog',
    date: [2, 6, 15],
    tags: ["blog"],
    img: "web",
    content: "The number of entries in my blog is (slowly) increasing and has reached the point that merely listing each entry at the top of the page is inefficient. So I've grouped the entries by month, which can be expanded when clicked. It seems I was very keen in March. I'm also working on making the tags more useful, so entries can be filtered by tag. This should be useful when I finally get around to making a page to organise my programs."},
{
    title: 'Attempting to organise my programs',
    date: [15, 6, 15],
    tags: ["HTML-program"],
    img: "6090692692672512/5635415851663360", 
    content: "Having experimented with using tags on this blog (which still need a lot of work), I thought I'd try something similar to organise my programs. Ever since the CS section was introduced, I've wanted a way to organise my programs and the more programs I make, the more they need organising. This is especially true now several of the programs are used in tutorial and I have several versions of each.\nSo I've made a start with a program that uses a JSON variable in place of a database, like I do for this blog. It also uses the same API call I use in my Get Program Data program to automatically get all the images and URLs for my programs. I have added a simple interface to add tags and descriptions, but's it's going to take a long time to tag all 490+ programs as I want. Hopefully by then I will have added a nice interface to search by tag, which I can also use for this blog."},
{
    title: 'Challenge Cam',
    date: [24, 6, 15],
    tags: ["HTML-program", "points"],
    img: "5202442481434624/5756596743307264", 
    content: "[Cameron has launched a challenge](122259720115) to get more energy points than him in a certain time point. Since I'm a sucker for this sort of thing, I've been back collecting points and speed badges. SpongeJr has made a nifty program to help track your and Cameron's progess (click the image on the left). Sadly you have to know how many points you had when the challenge started, but don't think there's a way around this. It may be possible to get the information via the profile page, but it looks like that part of the API is restricted to internal use."},
{
    title: 'Neural network',
    date: [23, 7, 15],
    tags: ["PJS-program"],
    img: "6186227381436416/5707702298738688", 
    content: "Today I came [this article](http://iamtrask.github.io/2015/07/12/basic-python-network) about an 11 line Python neural networks. I've been interested in neural networks for a long time. I tried to implement my own with little success long before I understood how they worked. I still don't really understand how they work, but I have some idea after doing a Coursera course on Machine Learning.\nAnd now I finally have a working Javascript version (which involved writing several more matrix functions, which could come in handy some time). I just need to think of something to do with it. I'm sure there was something I thought it a neural network would be useful for a few weeks ago, but now I can't remember it. I would like to spend more time implementing classic algorithms here, and maybe trying to apply them to some games. When I get some time..."},
{
    title: 'Community explanations',
    date: [2, 8, 15],
    tags: ["news"],
    img: "tinker",
    content: "I saw, via a tweet from SpongeJr, that KA have launched Community Explanations (e.g. [for biology](science/biology/bio-community-explanations)). It seems  they were created as part of this year's hackathon. I think there's a lot of potential here, partly as a way to crowd-sourse answers to common questions, but more importantly to bring essay-writing and critque to Khan Academy. Also I like writing long answers."},
{
    title: 'Pixar in a Box',
    date: [26, 8, 15],
    tags: ["news", "work", "Pixar", "videos"],
    img: "6731187133480960/5738600293466112",
    content: "Finally the [Pixar in a Box](partner-content/pixar) section has been launched on Khan Academy. This is what I've spent the last year and half on and has involved making dozens of programs (I should count how many - lots). Now I don't know what to say about it other than I hope people enjoy it. I suspect there will be lots of small tweaks and edits over the coming days and weeks. Hopefully nothing major."},
{
    title: '2000 answers',
    date: [17, 9, 15],
    tags: ["milestone"],
    img: "images/badges/earth/incredible-answer-60x60.png",
    content: "I just realised that at some point over the last few days I passed 2000 answers (now at 2038). I've answered a lot of questions recently as I've been trying to keep on top on the questions for Pixar in a Box. I like to think my answers are good quality and my 42 _Incredible Answer_ badges are the badges I'm most proud of."},
{
    title: 'Hacking problem solved',
    date: [18, 9, 15],
    tags: ["PJS-program", "news"],
    img: "5978397440999424/5764321241989120",
    content: "Finally someone ([Patrick](profile/patrick809)) has cracked the second part of my [hacker game](5978397440999424). I'm very pleased and slightly relieved. It took a long time to think of puzzle and even longer to think how to make realistic and then convert it into code. At least now somebody (two people since the solution has been revealed to at least one other person), has understood my fiendish machinations."},
{
    title: 'October digest',
    date: [1, 10, 15],
    tags: ["digest", "Pixar"],
    content: "I thought I should keep track of what I'm doing and what I'm planning on doing somewhere. This blog seemed like a good place. I don't know how long I'll keep it up though. The idea is to write what I'm working on for actual work, what I working on for fun, and what I want to work on when I get more time. And anything else I'm currently doing.</p><ul><li>*Work:* More Pixar in a Box content (Rigging tutorials)</li><li>*Personal project:* a [Fractions card game](6585202158731264)</li><li>*Longer term project:* [Space trader](4919634322128896)</li><li>*Studying (Maths):* [Differential equations (first order)](math/differential-equations)</li><li>*Studying (CS):*  [jQuery](computing/computer-programming/html-js-jquery) (although I'm already am quite familiar with it).</li></ul>"},
{
    title: 'Hands on animation tutorial',
    date: [1, 10, 15],
    tags: ["news", "Pixar"],
    content: "A new [hands-on activity](partner-content/pixar/animate/ball/a/hands-on-activity-animating-luxo-jr) has been released for the Animation tutorial. I didn't have much to do with it, but I mention it because it's cool. Also I'm working on my own Luxo Jr animation project."},
{
    title: 'Array transformations',
    date: [5, 10, 15],
    tags: ["PJS-program", "work", "Pixar"],
    content: "I spent a bit of time making [a very dull new program](5994484161183744). It has no graphics, but is a tool for transforming arrays of coordinates. I made it to help with some programs I'm making for the new Pixar content. I tried to write it in a nice, neat, functional way, and I think I mainly succeeded, but I may have just made things more complicated than they need to be."},
{
    title: 'Idea dump',
    date: [15, 10, 15],
    tags: ["PJS-program", "ideas"],
    img: "idea",
    content: "I've been very busy with work recently, so not had a lot of time for coding my own projects. But I have been thinking of loads of things I'd like to make. I've decided to write them here, partly so I don't forget and partly in the hope that it will satisfy my urge to make them to so degree. I used to be hesitant to write my plans in case someone took my ideas, but now I don't really mind, since no one will make them as I want them anyway.</p><h4>Combined tower defense & resource management game</h4><p>Ideally, this would have a less clumsy name. The basic idea is a tower defense (which I've wanted to make anyway, with more interesting weapons and nice path finding and learning AI for the enemies), plus you can build mines etc to mine materials to make more towers and walls. The idea is you have landed on a planet with the aim of colonising it, but every night you are attacked by the local wildlife. You have some resources from your ship, but you have have to find and defend resources on the planet.</p><h4>Mediaeval warfare game</h4><p>A game where you have blocks of foot soliders, archers and cavalry and have a lovely war. It would be nice to have levels where you keep your troops from game to game (except those that die) and earn money to buy more troops and equipment based on quests. I have been thinking about how the movement of blocks of troops will work and it's already giving me nightmares.</p><h4>Economics game</h4><p>A game where you can start various ventures (such as opening a shop or a mine) and sell shares in it. Also you should be able to buy shares and even acquire other players' ventures. Probably way too complex, but I should be able to manage a simple version.\nBut before I try any of those I really ought to finish some of the games I've started (I'm not sure I've really finished any of them)."},
{
    title: "Points and badges",
    date: [16, 10, 15],
    tags: ["milestone", "points", "badge"],
    content: "I've pretty much passed the point of caring about points and badges, but I just can't help myself. After doing some more of the new exercises in my vain attempt to complete The World of Math, I noticed I have over 12.5 million - one 8th of the way to 100 million. Not that I'm aiming for that. I also noticed I have >7500 badges, which rather more than is necessary."},
{
    title: "Hashing function",
    date: [18, 10, 15],
    tags: ["PJS-program"],
    img: "5889541176557568/5692201761767424",
    content: "I've seen a lot people create programs with passwords, but all the ones I've seen have suffered from the same problem in that the passwords are stored in the code, so it's relatively easy to cheat. I've finally found out how to code a hashing algorithm ([here](https://www.cs.hmc.edu/~geoff/classes/hmc.cs070.200101/homework10/hashfuncs.html)), and made a fairly secure password program that stores the hash values of passwords instead.\nOf course you can always edit the code to get around the program."},
{
    title: "Breakthrough Junior Challenge",
    date: [19, 10, 15],
    tags: ["work", "videos"],
    content: "I've been spending the last few days as one of the judges on the [Breakthrough Junior Challenge](https://www.breakthroughjuniorchallenge.org), trying to find the next Sal. I had 17 videos to evaluate, which were mainly about physics, despite me specialising in life sciences. But actually, the physics ones were often more interesting. Sadly I had only one maths video. There were some really excellent videos and it made me realise that I'd learnt a lot about how make educational video from watching so many and being involved in the fine-tuning of some of the Pixar videos."},
{
    title: "201 Good Answers",
    date: [20, 10, 15],
    tags: ["badge", "milestone"],
    img: "/images/badges/moon/good-answer-60x60.png",
    content: "At some point in the last few days I made it to 200 and then 201 _Good Answer_ badges. I remember when the badges for answers first came out (about 3 years ago I think), I thought there should be a black hole badge for getting 100 answers with 10 votes each, which seems pretty hard at the time. Now I realise that I just wanted a black hole badge and giving badges for getting badges is a silly idea."},
{
    title: "Pixar contest",
    date: [21, 10, 15],
    tags: ["Pixar", "contest"],
    img: "5797244947791872/5741031244955648",
    content: "Pamela has launched a new contest, this one is asking people to show what they have learnt from the [Pixar in a Box content](partner-content/pixar). I'm looking forward to seeing what people come up. I don't yet know if I'll be involved in the judging, but either way, I'll try to give some feedback on at least some of the programs."},
{
    title: "Implementing a simple AI",
    date: [22, 10, 15],
    tags: ["PJS-program"],
    img: "4560343020470272/5709068098338816",
    content: "A few days ago [Aidabaida](profile/Aidabaida) asked me for some help reducing the lag for some (rather professional-looking) graphics generated using noise. To my surprise I was able to help by avoiding generating a value for every pixel on the screen, without reducing the quality of the graphics too much. I've since been wondering if I could come with a neater menthod more making blocks of noise that neatly tile.\nNot long after, he asked whether I could help figure out how the enemy should move, to avoid the two players. Moving away from a single player is fairly easy since you just move in the opposite direction, but with two it's a bit harder: moving away from one could bring you closer to the other. You want to maximise your distance from both. Ideally, you also want to care more about increasing your distance from a very close player than you do about avoiding a distance enemy.\nIn the end, I tried several techniques, and got to try out lots of ideas. I had a lot of fun building a system to help me visualise how to the enemy was deciding its moves, which made tweaking the personality of the AI easier. The AI works by assigning values to every square based on how far it is from each player and from the edge (to avoid getting cornered).\nThe final game is [here](6217434919469056). Working on it has given me ideas for at least two more games that I'll probably never make. Maybe I'll try to make one next week.]"},
{
    title: "Adding some markdown to my blog",
    date: [23, 10, 15],
    tags: ["blog"],
    img: "web",
    content: "It's been a while since I updated the program that actually builds this blog from the JSON content. I noticed it was taking a while to load the content so wondered if there was anything I could do to compress the cotent. One obvious source of repeated characters was that all the links were manually added in `a` tags.\nSince it had always struck me as bad practise to be writing the actual link code, complete with `href=`, I wrote some code to convert links in [Markdown](https://en.wikipedia.org/wiki/Markdown) format into actual links (the internal text in square brackets followed by the link in parentheses). Since most of the links are to pages on Khan Academy, I also made it automatically add `https://khanacademy.org/` to anything that didn't start with a protocol. And since a lot of the links were to CS programs, I added more code to converted a string of 16 digits into a link to the programs for which that is the id.\nAll in all, I think I've saved a fair bit of space (but probably less than this blog post about it. However, the main benefit is that it should save me time when I come to write more content. And since I'm writing fewer double quotes I can use them to contain the content strings instead of single quotes, which means I don't need to escape all my apostrophes. Next up, removing all the other tags, with `p` tags first. And then maybe to make a full blown content management system (except without an actual database)."},
{
    title: "Noisy tiles",
    date: [24, 10, 15],
    tags: ["CS-learning"],
    img: "6178592348831744/5707702298738688",
    content: "After helping [Aidabaida](profile/Aidabaida) make some blocks of noise tile for [his game](#entry58), I thought of a better way to achieve the effect. My original solution was to simply generate smaller tiles and then flip them, which guarantees that the edges line up, but makes obviously symmetrical tiles. My new solution was to generate the block of noise. Then, find the values along the left edge and the right edge, then add a linear interpolation to convert on to the other. It works OK: you can still see where the edge is as the patterns don't really flow, but at least there isn't a hard edge. Next I need to get it to work in two dimension."},
{
    title: "Marble-effect tiles",
    date: [25, 10, 15],
    tags: ["CS-learning"],
    img: "6277899274027008/5636470266134528",
    content: "After experimenting with tiling noise yesterday, I wondered if I could make some interesting textures. I knew Perlin noise had been used to make a marble effect, so I searched for how to do that. I found a [simple article](http://lodev.org/cgtutor/randomnoise.html) and tried out some of the ideas. Although I don't think they look very realistic, you can make some pretty cool effects. Now I just need to think of a way to use them in a game."},
{
    title: "Subscribe to this blog!",
    date: [25, 10, 15],
    tags: ["blog"],
    img: "web",
    content: "I've just realised that quite few people have been reading this blog, and recently I've actually managed to update it quite regularly (11 times in the last 11 days!). So I've added a subscribe comment in the tips and hints for people to leave a comment and I'll comment in the thread whenever I post an update. Of course the chances are no one will. Or they will and I'll stop updating."},
{
    title: "Turbulent images",
    date: [26, 10, 15],
    tags: ["CS-learning"],
    img: "5977331926171648/5700735861784576",
    content: "I've been experimenting even more with using `noise` for different effects. My latest program uses noise to distort an image. I've tried 3 different ways. The first two calculate the position of each pixel using polar coordinates from the center of the image and use noise to change either the angle or the distance. The last one just shifts each pixel either up of down based on noise. They are all very too slow to be of any practical use, but it was fun to play with. In a different environment, it might be possible to  create an underwater effect or something."},
{
    title: "Dynamic turbulent images",
    date: [27, 10, 15],
    tags: ["CS-learning"],
    img: "6175467542020096/5717271485874176",
    content: "This will be the last blog post about noise for a while, promise. In a discussion on my [Turbulent Images](5977331926171648) program with [The Chosen One](profile/kaid_114222762077139284352995) and [mhogwarts](profile/mhogwarts), we were thinking about how to make the program faster and I had said that it would be too slow to work for anything useful. Then [Dalendrion](profile/Dalendrion) suggested that it might work if I used `imageData` directly in the same way in [Swax97](profile/swax97) had in [his program](6714453400354816). With a bit of tinkering, I managed, to my surprise, to get something that actually works quite well. It looks a bit like the image is underwater."},
{
    title: 'How the Internet Works',
    date: [28, 10, 15],
    tags: ["videos", "studying"],
    img: "images/badges/earth/ridiculous-listener-60x60.png",
    content: "Khan Academy has just launched a new [series of videos](partner-content/code-org/internet-works) with a new partner, [Code.org](https://code.org). The videos cover how the internet works, which seems like something I ought to know. I've only seen the first video so far, and it looks very nicely put together. One thing I noticed was that in the [first video](partner-content/code-org/internet-works/v/the-internet-wires-cables-and-wifi) the speaker's hand partially disappeared at 1:42. It must be something to do with how they edited the video. Maybe there was something on the table they edited out."},
{
    title: 'Syntax highlighter',
    date: [29, 10, 15],
    tags: ["PJS-program"],
    img: "4609967724822528/5704837555552256",
    content: "There's a great little game on the hotlist at the moment called [The Error Game](5431669467774976) by [Major Major](ignatio01/projects). It's a pretty simple concept: you are shown some code, Javascript, HTML or SQL, and you have to click the line where there's an error. What's impressive is that it has code from those three languages and the error are quite subtle (maybe I've become dependent on the Error Buddy).\nI was curious how the syntax highlighting worked in the game, so looked through the code; it turns out, each level is explicitly written and coloured, word-by-word, with each position manually coded. Even the line numbers are written manually. It seemed like a lot of effort to write a problem that way.\nInitially I thought I would write the code in arrays where the first value determines the colour (a couple of other people seem to have tried this in spin-offs). This is the approach I've used in [various](6042928940843008) [programs](6486958418296832) to colour terms in equations. But then I thought what would be really nice if the program figured out which parts to colour automatically, like a proper syntax highlighter.\nSo I made a spin-off that makes a basic attempt at it, using [regex](https://en.wikipedia.org/wiki/Regular_expression), which is not the proper way to do, I know, but works well enough for simple syntax. It's also a good test of my regex. I tried to make the program follow the colour scheme used here on KA. (I hadn't realised previously that it uses _seven_ blues and three green.) I managed to add a fair few features, but haven't yet coloured function parameters, which I think will be tricky. I did managed to colour function name however, which is slightly tricky.\nIt's probably no coincidence that I've recently added yet more markdown to my blog, which works in quite similar way to _italicise_ and *bold* text without my having to add tags explicitly. It's certainly seems to make typing easier."},
{
    title: '3rd Grade Math complete',
    date: [30, 10, 15],
    tags: ["studying", "exercises", "milestone"],
    img: "challenge",
    content: "Woohoo! I've completeted _3rd Grade Math_. I'm so proud of myself. I realised I was down to 91% of _World of Math_ (down from 97%) and thought I should make more of an effort of finish it, although I don't really know why. I does mean I'm back to 93% complete and have mastered over 1000 exercises (there really ought to be badge for that, but I think anyone motivated enough to complete 500 exercises probably doesn't need any additional motivation). I really ought to spend my time studying _Integral Calculus_ or _Differential Equations_ or something a little bit more difficult than arithmetic."},
{
    title: 'New Pixar Topic: Simulation',
    date: [30, 10, 15],
    tags: ["Pixar", "work"],
    img: "4652228869750784/5681717746597888",
    content: "Just had a meeting with Pixar in a Box team about our next topic: simulation (my favourite topic and type of program). I spent some time a few months ago figuring out some ideas, based on what I thought we might cover. One program was this simulation of cloth, which probably won't be used, but was fun to try. Today I saw an outline of a presentation the topic leader had given previously, which was very exciting. Now we can start to plan the general structure for the topic. I can't wait to start playing about with some ideas. I think it's going to be really cool set of tutorials."},
{
    title: 'October post bonanza',
    date: [31, 10, 15],
    tags: ["blog"],
    img: "web",
    content: "So this month, I managed *21* posts (including this one, which shouldn't really count). Starting from the 15th, I wrote about a post a day. Which makes this month my most productive (blogwise), since March (a more than the last six months put together). And what's more, the posts this month were often quite long. I don't know why this month has been so bountiful. Maybe it's after moving house and settling in, I finally have some free time. The fact that I have some subscribers probably helps too, although I was already doing quite well before they joined. The changes I made to the markdown also make it easier to write here (especially if I want to add links), but again, that seems more of an effect of spending more time on my blog than the cause. I wonder how long I can keep this up."},
{
    title: 'Text editor with syntax highlighter',
    date: [1, 11, 15],
    tags: ["PJS-program"],
    img: "4666840406687744/5759778777202688",
    content: "A couple of days ago I wrote about a version of the Error Game I had made which featured a very basic syntax highlighter. I thought it made sense to split off the highlighting function so it was independent of the game, since it seemed potentially useful. Then it seemed like it was crying out for some actual text editing functionality. So I copied over (and made some improvements to) some of the code from my [Hacker game](5978397440999424) which includes a basic text editor.\nSo now I have a basic code editor with a few nice features. It's certainly better than any other I've seen made in this environment. There's still quite a lot that needs to be added to make it really useful, and even if I added those I'm not really sure what the purpose of this project is, other than to figure out how to write an editor. In looking for the correct colours, I spent some time in the console looking at how the real code editor is made. I have a better appreciation now of how it is put together (and just how complex it is). At some point I should look throught the [code](https://github.com/Khan/live-editor) to see if I can figure out a bit about how it works.\nOf course, the ultimate step for my editor would be to add a javascript interpreter, but that would just be crazy..."
    },
{
    title: 'November digest',
    date: [2, 11, 15],
    tags: ["digest", "Pixar"],
    content: "I thought I should keep up my digest, at least for once a month, even though I've been updating quite regularly. Hopefully it will be me keep track of what I'm doing. Having said that, looking back to last month, it seems I've not done many of the things I planned. I've done a lot of other things instead. I wonder if it would be worthwhile to have a round-up of programs I've made instead.</p><ul><li>*For work:* Pixar in a Box: [Simulation](4833446368247808)</li><li>*To finish:* [Heist](5026439924154368)</li><li>*To get back to:* [Fractions card game](6585202158731264)</li><li>*To revive:* [Space trader](4919634322128896)</li><li>*For my blog:* Markdown for lists like this</li><li><li>*To daydream about:* My own OS or programming language</li><li>*To study (Maths):* [Algebra I](mission/algebra) (I should try to finish it again).</li><li>*To study (CS):*  [jQuery](computing/computer-programming/html-js-jquery) (I should try to finish the course.)</li><li>*To watch:*  [How the Internet works](partner-content/code-org/internet-works)</li></ul>"},
{
    title: 'Program Spotlight: Stormy Buffs',
    date: [4, 11, 15],
    tags: ["PJS-program", "spotlight"],
    img: '6291884369641472/5706033703944192',
    content: "I've been going on about the stuff I've been doing recently, so I thought I should spend some time looking at what other people have been doing. This program, Stormy Buffs, caught my eye as a very well drawn and animated cartoon scene. The icing on the cake is that there's a neat pop-up slider that allows you control the rain. The author, [KWC](profile/MKaelin368), has several other beautiful animations and drawings."},
{
    title: 'Water simulation',
    date: [5, 11, 15],
    tags: ["PJS-program", "work", "Pixar"],
    img: '5127221893791744/5718998062727168',
    content: "One of the first things I made when the KA CS environment was first created was [a particle simulation](966544138), which I ported over from a set of Python tutorials I'd written. Over the last few years I've improved it as used it as a base for several other simulations. Now I've adapted it again for a relatively basic simulation (that may appear in a tutoria some time), showing how different properties affect it (which is surprisingly fun).\nOn a somewhat related note, I found [a program Sal made](math/differential-equations/first-order-differential-equations/eulers-method-tutorial/p/eulers-method-program-code) for exploring the Euler forward method (which my simulation uses - it isn't as clever as it sounds), back when the CS environment was fresh and new and he was excited to find a new way to teach ideas."},
{
    title: 'New collection of GUI objects',
    date: [6, 11, 15],
    tags: ["PJS-program", "CS-learning"],
    img: '4916004071800832/5704837555552256',
    content: "So the water simulation I mentioned in the previous post got a lot more attention than I'd expected. And with it, came a lot of comments. The most fruitful conversation was with [Larry Serflaten](profile/LarrySerflaten) and was not about the simulation, but rather the interface. He pointed out a couple of places where there were some inefficiencies. He also showed me [some code](5990858829201408) which included using a Class as variable to create objects of a passed in type, which is something I'd tried before, but not managed to get to work.\nAs a result, I was inspired to make an updated version of the GUI objects I tend to use, and which I have updated in various programs here and there. This new version is quite a bit neater and easier to use. There's still a lot that could be improved. In particular, I'd like to change the cursor styles in an efficient way."},
{
    title: 'Text editor with proper text editing',
    date: [7, 11, 15],
    tags: ["PJS-program"],
    img: "4666840406687744/5683739602452480",
    content: "Last week I mentioned the text editor I'd made, which started as an experiment to see how well I could make a syntax highlighter with some simple regex. Since then, I've improved the regex a fair bit (allowing for multiline comments), and added two different colour schemes. More importantly I've added some pretty cool features (although standard features for even the most basic text editor).\nIt's now possible to click to move the cursor, click and drag to select text (also use shift + arrow keys), and cut, copy and paste multiple lines of text. All of these features included some subtleties I'd not previously thought about (not all of which I've yet included), but were not _quite_ as hard as I thought. I would like to make the keyboard shortcuts work, but I don't think they will. It does work for *Ctrl + d* since that causes the browser to do something else. Maybe copy and paste will work.\nNow I'd like to make proper dropdown menus, plus to the option to save and open files, then the whole file browser thing (I have a working command line version), and then an entire OS (which seem to be very popular to make here). Failing that (which I undoubtedly will), I would like to try to make my own programming langauge. I've seen a few people try here, but not in a way that allows for any depth of language. I made [a brief attempt](6739584228261888) previously and now I'm tempted to try to revive it inside this editor."},
{
    title: 'Program Redux: Hyphae',
    date: [8, 11, 15],
    tags: ["PJS-program", "redux"],
    img: '2184946386/16001',
    content: "In a new feature, which will probably be a one-off, I'm looking back at an old program I'd forgotten about. Today it is a hyphae simulation. My reason for revisiting it was that someone emailed and asked for the code of a similar program which I'd written in Python and [written about on my blog](http://www.petercollingridge.co.uk/blog/hyphae-simulation). That was back in the day when in order to share my programs I had to take a video of them running on my computer and upload it to YouTube. It's much easier now with Khan Academy.\nThe program itself is not super interesting (although several people have asked for the code; this last person wanted it for some architecture project - I have no idea what). It starts off black (hence the picture) and slowly builds up to form a visible network. It can look quite creepy (or that your monitor is dirty). It works by having a growing point which moves forward and at an angle. Every now and then, a growing point splits into two, perpendicular points. Sometimes a point dies, which is more likely the more points there are to stop the program getting too slow. And that's it. The points are drawn with a low opacity/alpha, so it needs quite a lots of time for the lines to build up."},
{
    title: 'Programming language programs',
    date: [9, 11, 15],
    tags: ["CS-learning", "PJS-program"],
    img: "5060834563325952/5707702298738688",
    content: "Some months ago, I came across (via the Help Requests, I think), an attempt at writing a programming language interpreter here in the KA environment. Shortly later, I saw another, and then another. They were all quite hard to use, but, it inspired me to make my own attempt, which [I eventually did and got as far as defining arithmetic](6739584228261888). Now I'm trying again (currently offline). For further inspiration, I've managed to track down most of the other people's attempts.\nThe best one I found is [Enclose](4692982198566912) by [Eswag](profile/eswag793). This is a language with its own editor that allows you to draw on a canvas and immediately shows the results, much like the environment here. Another langauge is [Benscript](5315482735083520) by [UnknownCharting](profile/BenerianStudios). It's more of an extension of the existing processing library and you have to type the code inside the normal editor. So really it's just some JS functions. I don't seem to be able to get it to work now. Finally, there's [Erno's](profile/JumpingHopper) attempt to [recreate Python](5516671889178624), which again, I couldn't get to work, but looks quite advanced.\nMy own attempt is going slowly again. It always seems relatively easy in my head, but quickly becomes a headache keeping the whole structure in my mind at once. It doesn't help that I tend to work on it in small bursts, so keep having to remind myself how things work. Perhaps not surprisingly it's difficult to write a language interpreter. Maybe part of the problem is I have some idea of how to do it (with a lexer and parse tree) thanks to a [Udacity course](https://www.udacity.com/course/viewer#!/c-cs262/l-48425450/m-48704270), but not a complete idea (because I only got halfway through the course - twice!). I'm trying to simplify things by combining the two steps and there's probably a very good reason why this isn't normally done.\nIn the meantime, I've added Eswag's Enclose to my text editor, which I think makes it a lot easier to experiment with. I suspect it needs some work, since I'm not all that familiar with how the language is supposed to work."
},
{
    title: 'Font fallback in Processing.js',
    date: [10, 11, 15],
    tags: ["CS-learning"],
    img: '6380101325029376/5724160613416960',
    content: "I wasn't going to write anything today as I've been busy on a project I don't want to reveal just yet and I don't want to just write stuff for the sake of it. But then [Dalendrion](profile/Dalendrion) left a comment that solved an issue that both Eswag and DY had mentioned about my text editor. Both had pointed out that the lovely Monaco font I was using didn't exist on their computer, and the program was falling back to a non-monspace font, which broke some of the positioning.\nDalendrion's solution to font fallback is to set the font, then write the text take an image of it and compare it, pixel-by-pixel to the same text written in the default font. It's pretty crazy, and fairly inefficient, but it's still ingenious. Whilst trying to find some ways to speed it up, I realised that since all I care about is that a monospace font is loaded, all I need to do is to test whether `textWidth` of each character is equal. In fact, rather than check every character I decided to just check `textWidth('lllll') !== textWidth('mmmmm')`, since I can't imagine l and m would have the same width in any non-monospace font (though there's bound to be one)."},
{
    title: 'Breakthrough Junior Challenge winner',
    date: [11, 11, 15],
    tags: ["work"],
    content: "The Breakthrough Junior Challenge, for which I was one of the many judges, has [announced the winner](https://qa.breakthroughjuniorchallenge.org/finalists#winner). I didn't judge the winning video, but I watched it today and it is definitely a good one. I'd like to watch the other finalist videos too - I judged (and liked) two of them; I suspect the rest will be worth a watch."},
{
    title: 'True Font fallback in Processing.js',
    date: [11, 11, 15],
    tags: ["CS-learning"],
    img: '6380002294366208/5717271485874176',
    content: "Yet again, I wasn't going to write anything about programming today but a comment from [Dalendrion](profile/Dalendrion) was just too good not to share. It seems that there is a way to add proper CSS fallback in processing: by tweaking the `family` attribute of the PFont you create. So I can just do:\n``var myFont = loadFont('Monaco', 13);<br>myFont.family = '\"Monaco\", monospace';``\nWhich is a lot easier. You can also get italic fonts by messing with the `css` attribute.\nAlso, check out Dalendrion's object explorer by clicking the image above, because it's cool.\nEDIT: The font fallback may not work as well as I thought. There's some weirdness going on which means it doesn't always work and doesn't always update. Using `.css` seems to be more reliable than using `.family`."},
{
    title: 'Function Friday: lerp',
    date: [13, 11, 15],
    tags: ["CS-learning", "PJS-function", "Pixar"],
    img: "5209470404263936/5766466041282560",
    content: "Here's yet another idea for a feature that probably won't be repeated. I thought it would be good to mention some built-in functions that people (myself included) often don't know about. These are functions I have learnt quite recently and thought, \"If only I'd realised this existed earlier, it would have saved me a lot of time\".\nI had been planning to talk about `lerp` first because it's one that I often see could save people some time (and I was very pleased when I learnt about it). Then coincidentally, I saw a very cool program by [Larry Serflaten](profile/LarrySerflaten) (above), which not only is similar(ish) to something I'm currently working on, but also, could have made use of `lerp`.\n`lerp` is short for linear interpolation (say \"linear interp\" fast enough and you can just about understand it). [lerp(n1, n2, p)](computer-programming/lerpvalue1-value2-amount/6456916012171264) returns a value that is `p` of the way between `n1` and `n2`, where `p` is generally between 0 and 1.``lerp(n1, n2, 0) = n1<br>lerp(n1, n2, 1) = n2<br>lerp(10, 20, 0.4) = 14``It's pretty easy to write an equation to do this, which is what most people do:\n`var x = n1 + (n2 - n1) * p;`\nSo why bother with `lerp`? Well, why bother with any function? It saves a bit of typing and it makes the code a bit more readable (if you know what `lerp` does then it's much easier to read than try to figure what the equation does for different values of `p`). It's not going to make a huge difference, but in some of my programs I find myself using it a lot.\nWhen is it useful? Say you have a health bar, which is drawn as rectangle from position `x1` to `x2`. When the player is at 55% health, you know to draw the health at `lerp(x1, x2, 0.55)`. I've used it a lot for the Pixar content - it turns out that [Environment Modeling](partner-content/pixar/environment-modeling-2), [Character Modeling](partner-content/pixar/modeling-character) and [Animation](partner-content/pixar/animate) are pretty much just applying linear interpolation (weighted averages). Even parabolas and cubic splines, are just [linear interpolation done on top of itself](5034397122822144).\nMore recently I discovered (when using [Dalendrion](profile/Dalendrion)'s [Object Explorer](6380002294366208)) that `PVector` has its own `lerp` method which `lerp` coordinates. Which is exactly what I needed for pretty much all the Pixar programs. Rather than ``var x = lerp(p1.x, p2.x, p);<br>var y = lerp(p1.y, p2.y, p);<br>var p3 = { x: x, y: y };``I could have just done `var p3 = PVector.lerp(p1, p2, p);`. I know it's not a huge difference, but when you have many lines of code to scroll through and have to write this several times in a program, it adds up. It also will automatically work if you chose to add a `z` coordinate. Now I'm tempted to go back and update all my programs.\n I'm should also note that there's the function `lerpColor()` which interpolates between colours, but it seems a lot more people know about this (I knew about it before I knew about `lerp`). Maybe that's because it's easy to make nice effects with it and harder to write your own version."},
{
    title: "Processing.js's missing functions",
    date: [14, 11, 15],
    tags: ["CS-environment"],
    content: "I came across this \"[program](6427824395780096)\" by [Peter Baum](profile/peterbaum) which is a list of functions that are lacking in processing.js in this environment. They are all functions that get the current state of the environment, such as a function that returns the current strokeWidth. One function that I would have liked for one program in particular was one that returns the current transformation matrix. There is a very strange function, `printMatrix()` which prints the matrix out to the console, but there isn't one that returns it in a form a program can use. I have a look at the processing.js code to see if I could add it, and I thought I might be able to, but I couldn't figure out how to test the code on my computer."},
{
    title: "Contest: Internet 101",
    date: [15, 11, 15],
    tags: ["contest"],
    img: "6345166527528960/5668600916475904",
    content: "Pamela has launched another contest. This one is about the [Code.org section](partner-content/code-org/internet-works) on how the internet works. There are already some very nice entries."},
{
    title: "Writing out object properties",
    date: [16, 11, 15],
    tags: ["PJS-program", "CS-environment"],
    content: "A few days ago I mentioned the [Object Explorer](6380002294366208) by [Dalendrion](profile/Dalendrion) and today I needed to make something quite similar. What I needed was a lot simpler in that it just requires [writing an object as a string](5701172671938560). I went to have a look at Dalendrion's version and it  turned out to be broken. It seems that the reason it's broken, is the same reason my collection of GUI objects from a few days before that is broken. It relates to the trick of passing in objects into functions. The good news is, I reported a bug on the Github page and it was almost immediately picked up and it looks like a fix should be out soon. "},
{
    title: 'Algebra I complete (again)',
    date: [17, 11, 15],
    tags: ["studying", "exercises", "milestone"],
    img: "challenge",
    content: "I'm slowly working through the exercises again. I've finished _Algebra I_ again (which had some quite tricky bits), and have one exercise to go in _Geometry_. This puts me back at 95% of the _World of Math_ (1034 exercises mastered). I keep promising myself when I've done all the easy exercises I'll go back to _Integral Calculus_. By the time I get to that, they will probably have released a whole load more complex tutorials."},
    {
    title: 'Editor shortcuts',
    date: [17, 11, 15],
    tags: ["CS-environment"],
    img: "2802439947/10001",
    content: "For the third or fourth time, I searched for this super-useful program by [Thomas](profile/voidx) (always looking for the multiline cursor shortcut to save Ctrl + clicking). I'm adding it here, so I don't lose it again and so others can benefit from it. It seems that not all the commands work on all computers (e.g. alt + shift + L does now work for me)."},
{
    title: 'Analysing all my code',
    date: [18, 11, 15],
    tags: ["CS-environment", "analysis"],
    img: "secret",
    content: "I finally got around to writng a (Python) program that grabs all my code here on KA and saves it as text files on my computer. I wanted to have a back up in case anything ever happens to my account. I started to make on ages ago, but that involved manually copying and pasting code, which was very tedious. Now I have a version that uses the API and works quite well. I'll need to figure out a good way to update it regularly without having to recopy all 600+ of my programs. I should also put it all up on Github when I figure out what I've done with mine.\nAfter I'd got all that code as text files, I realised I could have some fun with it. For example, I found that the mean length of code was 495 lines (after removing blank lines and comments). OK, so that's not a lot of fun. But I also had a quick look at the counts of various types of words. It's not perfect, since it will count things inside of strings, but it should be good enough. I've written some lists below (counts in parentheses).\nThere's nothing too surprising there other than the high frequency of numbers around the 230 mark. My only guess is they figure frequently in my [Mona Lisa program](1153732313). I'm also a bit surprised that `this` occurs more than `var` and that `prototype` is so common. I suppose I do a lot of OOP (but can I really have written 8400 prototypes?). Also I have ~3.6 draw functions per program, but that's because most of my objects tend to have a draw function.<div class=\"list-column\"><h4>Numbers</h4><ol><li>1 (55310)</li><li>2 (35741)</li><li>0 (35533)</li><li>3 (10164)</li><li>233 (8420)</li><li>4 (7997)</li><li>237 (7354)</li><li>235 (7276)</li><li>236 (7089)</li><li>238 (7051)</li></ol></div><div class=\"list-column\"><h4>Operators</h4><ol><li>= (85325)</li><li>- (32954)</li><li>+ (29990)</li><li>&#42; (17373)</li><li>/ (9463)</li><li>&lt; (7881)</li><li>++ (6319)</li><li>+= (4468)</li><li>&amp;&amp; (3770)</li><li>=== (3543)</li></ol></div><div class=\"list-column\"><h4>Keywords</h4><ol><li>this (83704)</li><li>var (46868)</li><li>rect (22800)</li><li>fill (20079)</li><li>function (17551)</li><li>if (13819)</li><li>ellipse (8819)</li><li>prototype (8461)</li><li>for (7554)</li><li>length (6682)</li></ol></div><div class=\"list-column\"><h4>Variables</h4><ol><li>x (29589)</li><li>y (29400)</li><li>i (24783)</li><li>w (7635)</li><li>h (7484)</li><li>d (5374)</li><li>nodes (4993)</li><li>n (4939)</li><li>name (4606)</li><li>selected (4319)</li></ol></div><div class=\"list-column\"><h4>Functions</h4><ol><li>draw (2185)</li><li>mouseReleased (759)</li><li>mousePressed (693)</li><li>mouseDragged (681)</li><li>update (566)</li><li>mouseOver (554)</li><li>move (268)</li><li>mouseOut (226)</li><li>click (204)</li><li>keyPressed (201)</li></ol></div>\nThe next thing to try would be a [Markov chain](1826822737) code generator."},
{
title: 'Function Friday: nf',
    date: [20, 11, 15],
    tags: ["PJS-function", "JS-function"],
    img: "images/badges/cs/functions_badge-60x60.png",
    content: "A few days ago [Larry Serflaten](profile/LarrySerflaten), mentioned yet more processing.js functions I'd never heard of. They are the obscurely-named `nf`, `nfc`, `nfs` and `nfp` functions. I think _nf_ stands for \"number formatting\" since these are all functions to format numbers.\nIn this environment, the functions take three parameters: the first is the number you want to format, the second is the number of digits you want before the decimals, the third, the number after the decimal point. If the number has fewer digits before the decimal, then the number if padded with zeros; if it has more then nothing happens.\n``nf(100.123, 1, 1) = 100.1<br>nf(100.123, 4, 4) = 0100.1230``\nThe difference between the functions is that `nfc` adds commas every three digits; `nfs` adds a negative sign to negative numbers or a space; `nfp` adds a plus sign to positive numbers or a space. I don't really know why you'd want to pad with zeros, or add + or - padding. Maybe in some sort of accountancy program so numbers line up, but that seems unlikely to be common. Adding commas is nice though - in the past I've written my own function to do that.\nAs a side note, before know of these functions, I would probably have used my own function:\n``n = round(n * 100) / 100;``\nThis rounds to the nearest one hundredth and has the added benefit of not adding unnecessary decimal places when added to a string, e.g 1 will not get converted to 1.00.\nAnother option is to use the `.toFixed(n)` method of numbers. In normal JS, you can even use it directly on numbers (as opposed to variables that are numbers), e.g. `1.123.toFixed(2) = 1.12`. In this environment, you get a bug that the decimal point is confusing (which is understandable). Weirdly, in normal JS, if you want to use this on an integer, to stop the interpreter getting confused by the points, you use two:\n``3..toFixed(2) = 3.00``\nSee the official documentation for `nf` [here](http://processingjs.org/reference/nf_/)."},
{
    title: 'Pixar topic reorganisation',
    date: [21, 11, 15],
    tags: ["Pixar", "work"],
    content: "So it seems that what was to be the next topic - simulation - has been postponed and instead we're going to work on two others. I won't say what they are just yet, but one is possibly related to some programs I made not long along (although I don't yet know anything about the actual structure of the tutorial). The other will cover a topic close to my heart and something I've wanted to write a program exploring for a while. So I'm really looking forward to finding out more and getting going with both of them."},
{
    title: 'Line-bezier intersection',
    date: [23, 11, 15],
    img: '5516104824389632/5757334940811264',
    tags: ["Pixar", "work", "PJS-program"],
    content: "I started work on a program for one of the new Pixar topics. Although it wasn't strictly necessary, I thought it would would work well (and call back to another tutorial) if I used a bezier curve for one of the elements. I then realised that I would have to calculate the intersection between a bezier and a straight line. Luckily, (but unsurprisingly), I found [someone had done all work for me](https://www.particleincell.com/2013/cubic-line-intersection). It looks like there's a lot of nice simulations on that site.\nI managed to get the code to work without too much trouble, so adding to my set of intersection programs. I rejigged the code a bit to make it more similar to my coding style and a bit more efficient. Next I need to understand why it works. I have a vague idea - it involves solving a cubic, which is something I've so far avoided. Maybe now I can improve some of my other code where I'd avoid this. Either way, I'm looking forward to progressing with the new project - I think it will be very cool."},
{
    title: 'Breakthrough Junior Challenge videos',
    date: [26, 11, 15],
    tags: ["videos", "studying"],
    img: "images/badges/earth/ridiculous-listener-60x60.png",
    content: "I just noticed that Khan Academy has uploaded some of the [Breakthrough Junior Challenge videos](partner-content/bjc) (maybe the finalist's videos). I'm looking forward to working my way through these, especially attempting to learn Fourier Transforms for the hundredth time."},
{
    title: 'Making coding challenges',
    date: [27, 11, 15],
    tags: ["CS-learning", "HTML-program"],
    img: "4996182675423232/5194384987389952",
    content: "I've recently seen a few people make webpages with the aim of teaching computer science (which is good to see). For example, [Kevin2339](profile/kevin2339) has made a [page of programming challenges](5080351540641792), which reminded me of [Project Euler](https://projecteuler.net/), (which is worth checking out). And [Blaze](profile/blazeprogramming) wrote [CT Academy](5926095900770304) which includes quizes that check you can write the correct code (although it does have to be exactly the code he decides on). Which got me wondering whether I could make a set of bioinformatics tutorials that I'd planned for my personal website here instead.\nSo I've made a [proof of concept program](4996182675423232) which basically works, although it has a lot of room for improvement. It lets users write any function they want, so long as it gives the correct answer, by using the evil `eval` (which should be safe here). I've written it in such a way I can easily specify a set of inputs and the expected outputs. With a bit more work I should be able to get something that anyone can use to easily write their own set of challenges.\nAs a bonus I finally got around to trying out [Bootstrap](http://getbootstrap.com/), which at least means I don't need to worry too much about styling the page. It would be nice if I could add a syntax highlighter. I could try to port my one to plain JS, but it might be easier to import a proper one."},
    {
title: 'Function Friday: advanced min and max',
    date: [27, 11, 15],
    tags: ["PJS-function", "JS-function"],
    img: "images/badges/cs/functions_badge-60x60.png",
    content: "I think most people know about the PJS functions `min` and `max` to find the lowest and highest of a pair of numbers (in plain JS, you use `Math.min()` and `Math.max()`). Something I often forget is that you can use these functions with any number of parameters, e.g.``max(-5, 200, 10) = 200``EDIT: It seems you can only use two parameters in this environment.\nOne useful way you can use these functions is to constrain numbers. For example, if you want to ensure that a variable is less than one, you can use conditional statement, `n = n < 1 ? n : 1;`, or you can do, `n = min(n, 1);`. Of course, if you want to constrain the min and max of a variable, you can use the processing.js function `constrain`.\nWhile you can pass any number of parameters to `min` and `max`, often you want to apply it to an array of numbers. You can use a loop to go through each element and compare each one to the current min or max. But an easier way is to the `apply` the function. All functions have an `apply` method, which calls that function, using the first parameter as `this` in the function (which is useful in its own right). The second parameter should be an array of parameters which are passed to the function when its calle, e.g,``max.apply(null, [-5, 200, 10]) = 200``There is a related method on all functions called `call`, which does the same, but instead of passing an array, you pass in the parameters as a series of parameters, which is less useful in this case:``max.call(null, -5, 200, 10) = 200``As far as I know `apply` is the only way to \"unwrap\" an array, but read somewhere that the new ES6 will include an spread operator `...`."},
    {
    title: '7th Grade Math and Algebra II complete',
    date: [1, 12, 15],
    tags: ["studying", "exercises", "milestone"],
    img: "challenge",
    content: "I've been slowly working through the exercises, ticking them off. I've completed another two topics and am back up to 97% of _World of Math_. Now I just need to finish off a few more 8th grade maths lessons and I can get back to learning _Integral Calculus_ (or so I tell myself). 1054 lessons mastered (not including retired ones) and 35 to go."},
{
    title: 'New Earth badges',
    date: [1, 12, 15],
    tags: ["badge", "news"],
    img: "images/badges/earth-medium.png",
    content: "A couple new Earth badges have been added today, both for evaluating projects. They are [Rave Reviewer](badges/rave-reviewer) and [Astute Analyzer](badges/astute-analyzer). I think these are the only new badges, but for all I know there are more for evaluating more projects. I should try to evalute more. I tried 5 a day for a while but somehow couldn't keep it up for long. I becomes a bit repetitive after a while."},
   {
    title: 'Decemeber digest',
    date: [2, 12, 15],
    tags: ["digest", "Pixar"],
    content: "So I managed to keep to some of my plans from the November Digest. I at least finished How the Internet works, juery and Algebra I and nearly finished my Fractions game. As usual I was distracted by lots of other projects I hadn't even thought about at the beginning of the month.\nI managed to keep up with writing my blog almost as much as before, although my motivation is starting to wane. I know I won't be able to keep it up through Decemeber as there's too much going on, but hopefully in the new year I can continue.</p><ul><li>*For work:* Pixar in a Box: (secret subject)</li><li>*To finish: *[Fractions card game](6585202158731264)</li><li>*To get back to:*  [Heist](5026439924154368)</li><li>*To expand:* [Bioinformatics algorithms course](5435889716690944)</li><li>*For my blog:* Markdown for lists like this</li><li><li>*To daydream about:* My own OS or programming language</li><li>*To study (Maths):* [Integral Calculus](mission/integral-calculus)</li><li>*To watch:*  [Breakthrough Junior Challenge](partner-content/bjc)</li></ul>"},
    {
    title: "Pixar contest results",
    date: [3, 12, 15],
    tags: ["Pixar", "contest"],
    img: "5246451254427648/5629499534213120",
    content: "The results of the Pixar contest are out. There were some very impressive entries. It's nice to see the approaches other people used to recreate some of my programs. I thought the [rigging](6271928741003264) program was particularly cool, although it's on a topic we've not yet launched."},
{
    title: "Function Friday: noiseDetail",
    date: [4, 12, 15],
    tags: ["PJS-function", "Pixar"],
    img: "5237325950484480/5724160613416960",
    content: "I've seen a lot of people using `noise` recently in their programs which is good as it makes graphics more interesting. I've also been experimenting with it and noticed the [`noiseDetail`](6549875814563840) function. I've recently been learning how noise works for a new Pixar tutorial. To help me understand it, I wrote [my own version](5018351539191808) of Perlin noise.\nMost noise algorithms make fractal-like noise. For this they have an underlying noise algorithm, then they overlay it with a the same algorithm but with the input divided by two, it appears twice as grainy, then the output is multiplied by some factor, say 0.6, so the larger scale noise has a greater effect. Then the process can be repeated, overlaying more and more levels of noise.\n`noiseDetail` allows you to determine this process; it takes two parameters, the first is the number of layers of noise (so should be a positive integer), the second is the multiplication factor (so should be between 0 and 1). The default values are 4 and 0.5."},
{
    title: "24 ways - web design advent calendar",
    date: [5, 12, 15],
    tags: ["link", "ideas"],
    content: "I was thinking I could make a sort of advent calendar here on my blog with a new post every day, ideally linked someway to Christmas. But realised there's no way I would keep it up, especially close to Christmas. So instead, I'll just link to the inspiration for the idea: [24ways](https://24ways.org/), which might be of interest to people who like web design.\nIt also occurred to me that a PJS program showing an advent calendar would have been a good idea, with a new window openable every day. But it would be a lot of work to make all the images and it's a bit late now anyway. Maybe next year if I remember (or someone else can make one)."},
{
    title: "CS environment updates",
    date: [9, 12, 15],
    tags: ["CS-environment", "news"],
    img: "5581965987807232/5741031244955648",
    content: "Pamela has just released a program that will be continually updated show recent changes to the CS environment. It should make for interesting reading and may make it easier to check whether there's a reason for code breaking. You can also see new updates in the source code [here](https://github.com/Khan/live-editor). In the new year I hope to look through the code to better understand how this environment actually works."},
{
    title: "Noise effects",
    date: [9, 12, 15],
    tags: ["PJS-program", "Pixar"],
    img: "4903499002937344/5750085036015616",
    content: "As part of a new Pixar topic, I've been experimenting with noise (which I had already started to do a couple of months ago for a completely unrelated reason). [This program](4903499002937344) demonstrates a few effects taken from [this page](http://lodev.org/cgtutor/randomnoise.html). They all basically work by creating a pattern using the sine function and nudging it with the noise function. Next up, applying these effects to a 3D object."},
{
    title: 'Back to Integral Calculus',
    date: [10, 12, 15],
    tags: ["studying", "exercises"],
    img: "challenge",
    content: "I finally got back to studying _Integral Calculus_ (with trigonometric functions) and it seems I've forgotten a lot. This is why I've been putting it off - now I actually have to learn stuff. Hopefully I can do a bit each day and slowly remember how _u_-substitution works."},
{
    title: "Bump-mapping",
    date: [10, 12, 15],
    tags: ["PJS-program", "CS-learning"],
    img: "5975169880948736/5634387206995968",
    content: "Since I've been working a lot with textures recently, I thought I'd try some bump-mapping. This is where, instead using a texture to colour an object, you use it to \"bump\" the surface normals. When calculating the lighting based on the position of the light, you use these values which very efficiently makes the surface look bumpy (except at edges). The effect is really amazing, especially when you move the light across the object.\nI've also started experimenting with shapes other than spheres - my first attempt is an egg, which works quite well. There's an excellent page of the mathematics of egg-shapes [here](http://www.mathematische-basteleien.de/eggcurves.htm).</p>[<img src=\"https://www.khanacademy.org/computer-programming/shaded-egg/6077916504522752/5689792285114368.png\" class=\"float-image\">](6077916504522752)<p>A lot of the code for this program came from [this amazing program](1744699339) by [Brian French](profile/mtrn). It took quite a while to de-obfuscate his code. There are a lot of very cool tricks hidden in the code, which make it very efficient, but also very hard to read. I might try to explain some of the tricks tomorrow in my Function Friday, despite the tricks mainly involving operators, not functions."},
{
    title: 'Function Friday: Bitwise operators',
    date: [11, 12, 15],
    tags: ["JS-function", "CS-learning"],
    img: "6528911021834240/5707702298738688",
    content: "[Operators are not functions in the normal sense, but they are techincally a type of function, so I think this is allowed. This turns out to be quite long, so I might write it in more detail as separate article at some point.]\nI've been doing a lot of work with generating images pixel-by-pixel recently, and that requires looping over tens of thousands of pixels, so you need code that runs as quickly as possible. One way to optimise speed is to use bitwise operators where possible since these work directly on the binary digits of numbers so require minimal computer operations. A lot of what I've learn has come from trying to figure out how [Brian French](profile/mtrn)'s amazing programs work. I still have a lot of learn.\nThe first thing to know is that all these operators work on numbers in binary form. If you want to know the binary representation of a number, say 217, you can use:``(217).toString(2);    // 11011001``<h4>Bit Shifting</h6>One thing you can do with numbers is to shift their bits left or right with `<<` and `>>` respectively. For example we can shift the bits of a number 3 places to the left, padding the rest with zeros:``217 << 3    // 11011001000 (868)``If we do this with decimal numbers, 217 => 217000, we get a number that is 10<sup>3</sup> times bigger. In binary, we get a number that is 2<sup>3</sup> = 8 times bigger. So this is useful for multiplying numbers by powers of 2. One thing to watch is that numbers are converted to integers first, so ``1.75 << 4    // 16 not 28``\nWe can do the same thing in the other direction, removing that number of digits from the end of the number:``217 >> 2    // 110110 (54)``This equivalent to dividing by a power of 2 and rounding down. If we do this in decimal 217 => 2.\n<h4>Combining numbers</h6>We can combine number with &amp;, | and ^ (which often trip people up when they use them by mistake). These work like logic gates.\n&amp; (*and*) combines two numbers by putting a 1 where there is 1 in _both_ numbers, otherwise putting a 0. So the number will be less than or equal to the smaller number.``var a = 100;     // 1100100<br>var b = 45;      //  101101<br>var c = a & b;   //  100100 (36)``This is useful because it allows you to access the value of bits at particular positions (known as bit masking). For example, if you want to test whether a number is odd or even, then the only digit that matters is the last digit: all odd numbers end in a 1 in binary and all even numbers end in a 0. So, this will give you 0 (false) or 1 (true) if a number is even or odd``n & 1;``You can expand on this method to find numbers modulo a power of 2. For example, `n & 7` is equivalent to `n % 8`.\n| (*or*) combines two numbers by putting a 1 where there is 1 in _either_ number, otherwise putting a 0. So the number will be greater than or equal to the larger number.``var a = 100;     // 1100100<br>var b = 45;      //  101101<br>var c = a | b;   // 1101101 (109)``This is useful for converting numbers to integer. For example `n | 0` is equivalent to `Math.floor(n)` (except negative numbers are rounded up).\n^ (*xor*) combines two numbers by putting a 1 where there is 1 in _only one_ number, otherwise putting a 0.``var a = 100;     // 1100100<br>var b = 45;      //  101101<br>var c = a ^ b;   // 1001001 (73)``</p>[<img src=\"https://www.khanacademy.org/computer-programming/xor-colours/4875497175121920/5707702298738688.png\" class=\"float-image\">](4875497175121920)<p>This is less useful than the other two, but can be useful for mixing things up. It is used in [cryptography](computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation), and to make interesting, [fractal-like patterns](1757447740).\nThere's a lot more to say, but I think this is long enough."},
{
    title: '105th Post',
    date: [13, 12, 15],
    tags: ["blog", "milestone"],
    img: "web",
    content: "This is my 105th blog post. I passed 100 without noticing. (It was the <a href=\"#entry100\">CS environment updates post</a>.) Way back on my <a href=\"#entry25\">25th post</a> I featured [SparklyGem](profile/SparklyGem)'s [blog](4585420263522304) when it reached 100 posts. It's now at 220 posts, but hasn't been for three months. So that's my new target."},
{
    title: 'Submitting my blog for evaluation',
    date: [16, 12, 15],
    tags: ["blog"],
    img: "web",
    content: "I just realised that I this blog is based on an HTML project which I hadn't submitted for evaluation (there was button asking whether I was finished). So now I've submitted it - I hope I pass. I even had to add another `font-` style to my CSS in order to meet the criteria. I chose `font-variant: small-caps;`, which I hadn't seen before.\nI've just been looking at some of the other blogs from this project. The two most voted ones are both about cats."},
{
    title: 'HTML tutorials',
    date: [16, 12, 15],
    tags: ["HTML-program", "ideas"],
    img: "5895195197046784/5765785288966144",
    content: "A few weeks ago, I wrote about [a page](4996182675423232) I'd written for people to test their coding skills. I've finally got a second version working. This one has the challenges on different \"pages\", which are faked by showing and hiding various bits of HTML templates and filling in the details. It also lets you run your code to test it, with the console output displayed on the screen. All the challenge information is stored in JSON, and some code from this blog converts it into the different pages. That makes it a lot easier to add new challenges. As I just need to add a new object to the challenges array.</p>[<img src=\"https://www.khanacademy.org/computer-programming/tutorial-binary-numbers-in-computers/6546781371105280/5668600916475904.png\" class=\"float-image\">](6546781371105280)<p>I'm now working yet another version, this one teaching mathematics and with simple numerical questions. If I keep working, I might be able to make my very own version of KA right here on KA. In fact, the original was inspired, in part, by [Blaze](profile/blazeprogramming)'s [CT academy](5926095900770304).\n[Dalendrion](profile/Dalendrion) recently showed me a very nice tutorial he'd written on binary numbers (click the image on the left), which got me thinking it would be nice to have somewhere where we could aggregate the various tutorials people had made, so they were all in one place. It might also encourage others to make more."},
{
    title: 'Function Friday: peg',
    date: [18, 12, 15],
    tags: ["PJS-function", "CS-learning"],
    img: "secret",
    content: "This is going to be the last Function Friday of the year, since next week is Christmas and the week after, New Year's Eve. Today's will be short as I'm a bit busy. It's not massively useful (though there maybe have been a couple occasions I could have used it), but I'm going to mention it as both [Lionofgd](profile/ASimnegar) and [KWC](profile/MKaelin368) mentioned it to me this week. It's also interestingly obscure in that it isn't documented here on KA or in the [processing.js documentation](http://processingjs.org/reference/).\nThe function is `peg`, which takes a number as a parameter and constrains it between 0 and 255. That's it. I assume it's used internally by some functions to make sure numbers give valid colours, but I can't see any references to it in the source."},
{
    title: 'Defining a circle from three points',
    date: [21, 12, 15],
    tags: ["PJS-program"],
    img: "4743822659158016/5657382461898752",
    content: "I've been working on a new project to make a program I've wanted to make for a long time, but have never been able to work out how (and I still haven't). As part of it, I need to find a circle that three points lie on. I couldn't work it out myself, so I Googled the answer. The first result was a link to [Khan Academy](/math/geometry/triangle-properties/perpendicular_bisectors/v/three-points-defining-a-circle) - I should have guessed. To make sure I followed what was going on, I made an interactive program, where I move the points and it shows me the circle.\nIt turns out I had already created a [program that does the same](1264460092) since the circle is the circumcircle of the triangle defined by the three points. It's quite a good refresher for my geometry. I'm tempted now to make a whole suite of programs exploring geometry concepts."},
{
    title: 'End of this blog',
    date: [31, 12, 15],
    img: "web",
    tags: ["news", "blog"],
    content: "I'm finishing this blog now with my 110th post, as it's becoming quite slow. It seems I've actually written quite a lot, and it all needs to be processed and added the page everything I hit a key.\nBut fear not - I have a new blog [here](5939514962477056), which I hope I can continue to update at least as regularly as I have this one."},
    ];
    
</script>

<!-- Code to convert blog post JSON into HTML -->
<script>
    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    
    var images = {
        web: "images/badges/cs/html_css_mastery_badge-60x60.png",
        challenge: "images/power-mode/badges/default-60x60.png",
        idea: "images/badges/earth/incredible-inspiration-60x60.png",
        tinker: "images/badges/meteorite/tinkerer-60x60.png",
        secret: "images/badges/sun/detective-60x60.png"
    };

    var getDate = function(date) {
        var str = date[0];
        if (Math.floor(date[0] / 10) === 1) {
            str += "th";    // Deal with 11, 12, 13
        } else if (date[0] % 10 === 1) {
            str += "st";
        } else if (date[0] % 10 === 2) {
            str += "nd";
        } else if (date[0] % 10 === 3) {
            str += "rd";
        } else {
            str += "th";
        }
        
        str += " " + MONTHS[date[1] - 1].slice(0, 3);
        str += " 20" + date[2];
        
        return str;
    }
    
    var createContentsListItem = function(i, headingText) {
        // Return an object in the form <li><a href="#entryi">headingText</li>
        var item = document.createElement("li");
        var anchor = document.createElement("a");
        anchor.href = "#entry" + i; 
        anchor.innerHTML = headingText;
        item.appendChild(anchor);
        return item;
    };
    
    // Regex
    var re_em = /\b_([^_]+)_\b/g;
    var re_strong = /\*([^\*]+)\*/g;
    var re_code = /`([^`]+)`/g;
    var re_precode = /``([^`]+)``/g;
    
    var markupContent = function(str) {
        // Replace _text_ with <em>text</em>
        str = str.replace(re_em, "<em>$1</em>");
        
        // Replace *text* with <strong>text</strong>
        str = str.replace(re_strong, "<strong>$1</strong>");

        // Replace ``text`` with <pre><code>text</code></pre>
        str = str.replace(re_precode, "<pre><code>$1</code></pre>");
        
        // Replace `text` with <code>text</code>
        str = str.replace(re_code, "<code>$1</code>");
        
        // Searching for links in the form [text](URL)
        var re_link = /\[([^\]]+)(?:\]\()([^\)]+)\)/g;
        
        str = str.replace(re_link, function(p, txt, url) {
            // Convert 16 digits into a link to a computer-program
            if (url.match(/^\d{9,16}/)) {
                url = "https://www.khanacademy.org/computer-programming/_/"+ url;
                
            }
            
            if (url.slice(0, 4) !== "http" && url[0] !== '#') {
                url = "https://www.khanacademy.org/" + url;
            }
            
            var link = '<a href="' + url + '">' + txt + '</a>'
            return link;
        })
        
        // Add p tags
        str = "<p>" + str.replace(/\n/g, '</p><p>') + "</p>";
        
        return str;
    };
    
    var tagCounter = {};
    var contentsList = {};
    
    var addEntries = function() {
        var entriesEl = document.getElementById("entries");
    
        for (var i = data.length - 1; i >= 0; i--) {
            var d = data[i];
            
            // Entry div
            var entry = document.createElement("div");
            entry.className = "entry";
            entry.id = "entry" + i;
            if (d.tags) {
                for (var j = 0; j < d.tags.length; j++) {
                    entry.className += " tag-" + d.tags[j];
                }
            }
            
            // Heading
            var heading = document.createElement("h3");
            var headingText = d.title || "Post " + (i + 1);
            heading.textContent = headingText;
            entry.appendChild(heading);
            
            // Date
            if (d.date) {
                var date = document.createElement("span");
                date.textContent = getDate(d.date);
                date.className = "date";
                entry.appendChild(date);
                
                // Create entry in contents list
                var contentEntry = createContentsListItem(i, headingText);
                var monthYear = (d.date[1] - 1) + "," + d.date[2];
                var contentsForMonth = contentsList[monthYear];
                
                if (contentsForMonth) {
                    contentsForMonth.push(contentEntry);
                } else {
                    contentsList[monthYear] = [contentEntry];
                }
            }
            
            // Content
            var content = document.createElement("div");
            content.innerHTML = markupContent(d.content);
            
            // Add image if there is one
            if (d.img) {
                var img = document.createElement("img");
                var src = "https://www.khanacademy.org/";
                img.className = "float-image";
                
                // If image is of a scratchpad,
                // given by two 16 digits numbers
                // make it a link to the scratchpad
                if (d.img.match(/^\d{9,16}\/\d{5,16}/)) {
                    src += "computer-programming/_/";
                    var link = document.createElement("a");
                    link.href = src + d.img.split("/")[0];
                    src += d.img + ".png";
                    link.appendChild(img);
                    entry.appendChild(link);
                } else {
                    src += images[d.img] ? images[d.img] : d.img;
                    entry.appendChild(img);
                }
                img.src = src;
                img.target = '_blank';
            }
            
            entry.appendChild(content);
            
            // Tags
            if (d.tags) {
                var tagDiv = document.createElement("div");
                tagDiv.className = "tag-container";
                for (var j = 0; j < d.tags.length; j++) {
                    var tag = d.tags[j];
                    var tagEl = document.createElement("span");
                    tagEl.className = "tag";
                    tagEl.textContent = tag;
                    tagDiv.appendChild(tagEl);
                    
                    if (!tagCounter[tag]) {
                        tagCounter[tag] = 1;
                    } else {
                        tagCounter[tag]++;
                    }
                }
                entry.appendChild(tagDiv);
            }
            
            entriesEl.appendChild(entry);
        }
    };
    
    // Add item to contents table
    var totalEntries = 0;
    var addContentsTable = function(contentsList) {
        var contentsEl = document.getElementById("contents-list");
        var entryMonths = Object.keys(contentsList)
        entryMonths.sort(function(a, b) {
            a = a.split(',');
            b = b.split(',');
            return b[0] - a[0];
        });
        
        for (var i = 0; i < entryMonths.length; i++) {
            var month = entryMonths[i];
            var entries = contentsList[month];
            var monthEl = document.createElement("div");
            monthEl.className = "contents-month";
            
            var headingEl = document.createElement("div");
            var entryListEl = document.createElement("ul");
            entryListEl.id = month;
            entryListEl.className = "entries-for-month";
            
            var monthValues = month.split(',');
            headingEl.innerHTML = "&raquo; " + MONTHS[parseInt(monthValues[0])] + " (" + entries.length + ")";
            totalEntries += entries.length;
            
            for (var j = entries.length - 1; j >= 0; j--) {
                entryListEl.appendChild(entries[j]);
            }
            
            monthEl.appendChild(headingEl);
            monthEl.appendChild(entryListEl);
            contentsEl.appendChild(monthEl);
        }
        
        // Add toggle effect
        $(".contents-month").click(function() {
            $(this).children().slice(1).toggle();
        });
        
        $(".entries-for-month").hide();
    };
    
    var addTagCloud = function(tagCounter) {
        var keys = Object.keys(tagCounter)
        keys.sort(function(a, b) { return tagCounter[b] - tagCounter[a]; });
        
        var tagCloudEl = $("#tag-cloud");
        for (var i = 0; i < keys.length; i++) {
            var tag = keys[i];
            
            var tagOuter = $("<span></span>");
            tagOuter.addClass("tag");
            
            var tagName = $("<span>" + tag + "</span>");
            var tagCount = $("<span>(" + tagCounter[tag] + ")</span>");
            tagCount.addClass("tag-count");
            
            tagOuter.append(tagName);
            tagOuter.append(tagCount);
            tagCloudEl.append(tagOuter);
        }
    };
    
    addEntries();
    addTagCloud(tagCounter);
    addContentsTable(contentsList);
    //console.log(totalEntries);
    
    /*
    // Clicking a tag selects entries with that tag
    $("#tag-cloud .tag").click(function() {
        var tagName = $(this).children()[0].innerHTML;
        $(".entry.tag-" + tagName).show();
        $(this).hide();
    });
    $(".entry").hide();
    */
    
    // Interesting programs
    // https://www.khanacademy.org/computer-programming/space-pirates-a-2d-space-shooter/4764491320655872
    //https://www.khanacademy.org/computer-programming/virtual-farmer-the-game/5158967491821568?width=470&height=470
    //https://www.khanacademy.org/computer-programming/all-my-programs-filterable/6171340237307904
    //https://www.khanacademy.org/computer-programming/running-man/5623660932104192

    
</script>

</body>
</html>
