/******************************************************
 * This version add intersections at different
 * t values along the lens curve
 * 
 * Fix refraction
*******************************************************/

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var CONTROL_POINT_SIZE = 12;

var showing = {};
angleMode = "radians";

/**************************************
 *  Helper functions
***************************************/

var forEach = function(arr, func) {
    arr.forEach(function(el) {
        el[func]();
    });
};

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

var normalise = function(v) {
    var m = mag(v.x, v.y);
    return { x: v.x / m, y: v.y / m }; 
};

// https://www.particleincell.com/2013/cubic-line-intersection/
var cubicRoots = function(p1, p2, p3, p4) {
    var A = p2 / p1;
    var B = p3 / p1;
    var C = p4 / p1;
 
    var A3 = A / 3;
    var Q = B / 3 - A3 * A3;
    var Q3 = Q * Q * Q;
    var R = - A3 * A3 * A3 + (A3 * B - C) / 2;
    var D = Q3 + R * R;    // polynomial discriminant
 
    var t = [];
 
    if (D >= 0) {
        // Complex or duplicate roots
        var D2 = sqrt(D);
        var S = Math.sign(R + D2) * pow(abs(R + D2), 1 / 3);
        var T = Math.sign(R - D2) * pow(abs(R - D2), 1 / 3);
        t.push(-A3 + (S + T));               // real root
    } else {
        // Distinct real roots
        var th = acos(R / sqrt(-Q3));
        var Q2 = 2 * sqrt(-Q);
 
        t[0] = Q2 * cos(th / 3) - A3;
        t[1] = Q2 * cos((th + 2 * PI) / 3) - A3;
        t[2] = Q2 * cos((th + 4 * PI) / 3) - A3;
    }
 
    // Discard out of spec roots
    t = t.filter(function(el) {
        return el >= 0 && el <= 1;
    });
 
    return t[0];
};

var bezierCoeffients = function(a, b, c, d) {
	return [
        -a + 3 * b - 3 * c + d, 
        3 * a - 6 * b + 3 * c,
        -3 * a + 3 * b,
        a
	];
};

/******************************************************
 * getRefractedRay
 * 
 * Calculate a refracted ray given the incidence ray,
 * the normal of the lens where the ray hits and the
 * refractive index of the lens.
 * 
 * @param: incidence {x1, x2, y1, y2}
 *      A ray from a source to an intersection point on the lens
 * @param: normal {x, y}
 *      The normal of the lens at the intersection point
 * @param: Ri Integer
 *      The refractive index of the material
*******************************************************/

var getRefractedRay = function(incidence, normal, Ri) {
    var normal = normalise(normal);
    
    // Ray from source to intersection point
    var incidenceVector = normalise({
        x: incidence.x2 - incidence.x1,
        y: incidence.y2 - incidence.y1
    });
    
    // Calculate refraction
    var c1 = -dotProduct(incidenceVector, normal);
    var c2 = 1 - Ri * Ri * (1 - c1 * c1);
    
    
    if (c2 > 0) {
        c2 = Ri * c1 - sqrt(c2);
        return {
            x1: incidence.x2,
            y1: incidence.y2,
            x2: incidence.x2 + 500 * (Ri * incidenceVector.x + c2 * normal.x),
            y2: incidence.y2 + 500 * (Ri * incidenceVector.y + c2 * normal.y)
        };
    }
};

// Given the source of a ray of light and its direction,
// plus bezier it will hit return the position of
// insection and its direction after refraction, using
// the given refractive index.
var getTransmittedRay = function(ray, p1, p2, h1, h2, Ri) {
    // Calculate intersection
    
    var incidenceVector = normalise({
        x: ray.x2 - ray.x1,
        y: ray.y2 - ray.y1
    });
    
    var dx = -incidenceVector.x;
    var dy = incidenceVector.y;
    
    // TODO: save these to save repeated calculation
    var bx = bezierCoeffients(p1.x, h1.x, h2.x, p2.x);
    var by = bezierCoeffients(p1.y, h1.y, h2.y, p2.y);
    
    var C = ray.x1 * -dy + ray.y1 * -dx;
    var q1 = dy * bx[0] + dx * by[0];		// t^3
    var q2 = dy * bx[1] + dx * by[1];		// t^2
    var q3 = dy * bx[2] + dx * by[2];		// t
    var q4 = dy * bx[3] + dx * by[3] + C;	// 1
 
    // Get point of intersection
    var t = cubicRoots(q1, q2, q3, q4);
    if (!t) { return; }
    
    var t2 = t * t;
    var t3 = t * t2;
 
    var intX = bx[0] * t3 + bx[1] * t2 + bx[2] * t + bx[3];
    var intY = by[0] * t3 + by[1] * t2 + by[2] * t + by[3];
 
    // Set ray end point to intersection
    ray.x2 = intX;
    ray.y2 = intY;

    // Intersection point along a ray
    var incidence = {
        x1: ray.x1,
        y1: ray.y1,
        x2: intX,
        y2: intY
    };
    
    var normal = {
        x: -bezierTangent(p1.y, h1.y, h2.y, p2.y, t),
        y: bezierTangent(p1.x, h1.x, h2.x, p2.x, t)
    };
    
    return getRefractedRay(incidence, normal, 1/Ri);
};

/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.dependents = [];
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
    this.dependents.forEach(function(p) {
        p.move(dx, dy);
    });
};
}
/**************************************
 *      Scene object
 *  Wraps the other objects
**************************************/
{
var Scene = function() {
    this.selected = false;
    
    this.lensTop = new DraggablePoint(250, 120);
    this.lensBase = new DraggablePoint(250, 280);
    this.lensHandle = new DraggablePoint(300, 140);
    this.source = new DraggablePoint(50, 200);
    
    this.lensBase.dependents.push(this.lensTop, this.lensHandle);
    
    this.points = [
        this.lensTop,
        this.lensBase,
        this.lensHandle,
        this.source
    ];
    
    this.handles = [];
    this.coefficientsX = [];
    this.coefficientsY = [];
    this.getLensPoints();
    
    this.numRays = 10;
    this.rays = [];
    this.getRays();
};

Scene.prototype.draw = function() {
    this.drawLight();
    this.drawLens();
    forEach(this.points, 'draw');
};

Scene.prototype.drawLight = function() {
    strokeWeight(2);
    stroke(220, 220, 0, 100);
    this.rays.forEach(function(ray) {
        line(ray.x1, ray.y1, ray.x2, ray.y2);
    });
};

Scene.prototype.drawLens = function() {
    var h = this.handles;
    var p = this.endPoints;
    
    strokeWeight(2);
    stroke(BLUE);
    noFill();

    line(p[0].x, p[0].y, p[2].x, p[2].y);
    line(p[1].x, p[1].y, p[3].x, p[3].y);
    
    bezier(p[0].x, p[0].y, h[0].x, h[0].y,
           h[1].x, h[1].y, p[1].x, p[1].y);
    
    bezier(p[2].x, p[2].y, h[2].x, h[2].y,
           h[3].x, h[3].y, p[3].x, p[3].y);

    stroke(PINK + (200 << 24));
    line(p[0].x, p[0].y, h[0].x, h[0].y);
    
    //ellipse(h[2].x, h[2].y, 10, 10);
};

Scene.prototype.update = function() {
    this.getLensPoints();
    this.getRays();
};

// Find hidden handles for lens controls
// Their positions are determined by the visible control
Scene.prototype.getLensPoints = function() {
    var dx = abs(this.lensTop.x - this.lensBase.x);
    var x1 = this.lensBase.x + dx;
    var x2 = this.lensBase.x - dx;
    
    this.endPoints = [
        { x: x1, y: this.lensTop.y},
        { x: x1, y: this.lensBase.y},
        { x: x2, y: this.lensTop.y},
        { x: x2, y: this.lensBase.y},
    ];
    
    // Handle coordinates
    var x = x2 + (x1 - this.lensHandle.x);
    var y = this.lensBase.y - this.lensHandle.y + this.lensTop.y;
    
    this.handles = [
        this.lensHandle,
        { x: this.lensHandle.x, y: y},
        { x: x, y: this.lensHandle.y},
        { x: x, y: y},
    ];
};

Scene.prototype.getRays = function() {
    var s = this.source;
    var p1 = this.endPoints[0];
    var p2 = this.endPoints[1];
    var p3 = this.endPoints[2];
    var p4 = this.endPoints[3];
    var h1 = this.handles[0];
    var h2 = this.handles[1];
    var h3 = this.handles[2];
    var h4 = this.handles[3];

    var Ri = 1 / 1.2;
    var dt = 0.04;

    this.rays = [];
    this.rays = [];
    for (var t = dt; t < 1; t += dt) {
        var intersection = {
            x: bezierPoint(p3.x, h3.x, h4.x, p4.x, t),
            y: bezierPoint(p3.y, h3.y, h4.y, p4.y, t)
        };

        var ray1 = {
            x1: s.x, y1: s.y,
            x2: intersection.x, 
            y2: intersection.y, 
        };
        
        this.rays.push(ray1);
        
        var normal = {
            x: -bezierTangent(p3.y, h3.y, h4.y, p4.y, t),
            y: bezierTangent(p4.x, h3.x, h4.x, p4.x, t)
        };
        
        var ray = getRefractedRay(ray1, normal, Ri);
        
        if (ray) {
            this.rays.push(ray);

            var ray2 = getTransmittedRay(ray, p1, p2, h1, h2, Ri);
            if (ray2) {
                this.rays.push(ray2);
            }

        }
    }
    
    //println(this.rays.length);
};

Scene.prototype.mousePressed = function() {
    for (var i = 0; i < this.points.length; i++) {
        if (this.points[i].mouseOver()) {
            this.selected = this.points[i];
            break;
        }
    }
};

Scene.prototype.mouseReleased = function() {
    this.selected = false;
};

Scene.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
        this.update();
    }
};
}
/**************************************
 * Creation of objects
***************************************/

var scene = new Scene();

var toolbar; //= new Toolbar(width * 0.01, width * 0.01, toolbarWidth);


/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    
    scene.draw();
    //toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    scene.mousePressed();
    //toolbar.mousePressed();
};

mouseDragged = function() {
    scene.mouseDragged();
    //toolbar.mouseDragged();
};

mouseReleased = function() {
    scene.mouseReleased();
   // toolbar.mouseReleased();
};

mouseOut = function() {
    //toolbar.mouseReleased();
};
