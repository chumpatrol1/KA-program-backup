/************************************************
 * Test whether a point is inside a quadrilateral
 * by calculating its position using two
 * triangle sides as basis vectors.
*************************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var PURPLE = color(157, 56, 189);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var CONTROL_POINT_SIZE = 14;

var selected = false;

/****************************************
 *  Draggable point object
****************************************/

var draggablePoint = function(x, y, color, name) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
};

draggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2 + 2;
};

draggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

draggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

/****************************************
 *      Create objects
****************************************/

var targetPoint = new draggablePoint(width * 0.5, height * 0.5, PINK);

var points = [
    new draggablePoint(width * 0.2, height * 0.2, ORANGE, "A"),
    new draggablePoint(width * 0.25, height * 0.9, ORANGE, "B"),
    new draggablePoint(width * 0.8, height * 0.8, ORANGE, "C"),
    new draggablePoint(width * 0.9, height * 0.4, ORANGE, "D"),
    new draggablePoint(width * 0.7, height * 0.1, ORANGE, "E"),
];

var selectables = points.slice();
selectables.push(targetPoint);

/****************************************
 *      Calculation
****************************************/

// Test whether a point, p, is inside a polygon defined by an array of points
var insidePolygon = function(p, points) {
    var n = points.length;
    var c = false;
    var p1, p2;
    
    for (var i = 0, j = n - 1; i < n; j = i++) {
        p1 = points[i];
        p2 = points[j];
        
        if (((p1.y > p.y) !== (p2.y > p.y)) &&
             (p.x < (p2.x - p1.x) * (p.y - p1.y) / (p2.y - p1.y) + p1.x)) {
           c = !c;
        }
    }
    return c;
};

/****************************************
 *      Display functions
****************************************/

var drawPolygon = function() {
    var pointIsInside = insidePolygon(targetPoint, points);
    
    // Filled triangle
    noStroke();
    if (pointIsInside) {
        fill(BLUE + (100 << 24));
    } else {
        fill(200);
    }

    beginShape();
    points.forEach(function(p) { vertex(p.x, p.y); });
    endShape(CLOSE);
    
    // Labels
    textSize(14);
    textAlign(CENTER, CENTER);

    var n = points.length;    
    for (var i = 0; i < n; i++) {
        var p1 = points[i];
        var p2 = points[(i + n - 1) % n];
        var p3 = points[(i + 1) % n];
        
        // Get label position
        var dx = p2.x + p3.x - 2 * p1.x;
        var dy = p2.y + p3.y - 2 * p1.y;
        var d = sqrt(dx * dx + dy * dy);
        var tx = p1.x - dx / d * 16;
        var ty = p1.y - dy / d * 16;

        //fill(points[i].color);    
        text(points[i].name, tx, ty);
    }

    if (pointIsInside) {
        stroke(BLUE);
        targetPoint.color = BLUE;
    } else {
        stroke(200);
        targetPoint.color = color(200, 200, 200);
    }    
    
    selectables.forEach(function(el) { el.draw(); });
};

/****************************************
 *      Main loop
****************************************/

var draw = function() {
    background(BACKGROUND);
    drawPolygon();
};

/****************************************
 *      Event handling
****************************************/

mousePressed = function() {
    for (var i = 0; i < selectables.length; i++) {
        if (selectables[i].mouseover()) {
            selected = selectables[i];
            break;
        }
    }
};

mouseReleased = function() {
    selected = false;
};

mouseOut = function() {
    mouseReleased();
};

mouseDragged = function() {
    if (selected) {
        selected.move();
    }
};