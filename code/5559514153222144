// Effeciently shading a sphere based on mouse position
// With help from: https://www.khanacademy.org/computer-programming/spin-off-of-anti-aliased-edges-not-sure-about-blue-horizon-though/1925327317

var sphereX = 200;
var sphereY = 200;
var sphereR = 75;
var sphereR2 = sphereR * sphereR;
var sphereR1 = sphereR - 1;
var sphereR12 = sphereR1 * sphereR1;
var sphereRd = 1 / (sphereR2 - sphereR12);

// Inverse radius
var ixy = 1 / sphereR;

var lightZ = 80;
var lightZ2 = lightZ * lightZ;

draw = function() {
    background(0);
    loadPixels();
    
    // Mouse controls
    // pitch += (mouseY-pmouseY)*0.5;
    // yaw += (mouseX-pmouseX)*0.5;
    
    var p = this.imageData.data;
    var ms = millis();
    
    // Calculate normalised light vector
    var lightXNorm = mouseX - sphereX;
    var lightYNorm = mouseY - sphereY;
    var lightDist = sqrt(lightXNorm * lightXNorm + lightYNorm * lightYNorm + lightZ2);
    lightXNorm /= lightDist;
    lightYNorm /= lightDist;
    var lightZNorm = lightZ / lightDist;
    
    var x, y, dx, light, yp, xp, zp;
    var drawY, pixelIndex;
    
    for (var y = -sphereR + 1; y < sphereR; y++){
        // Length of along x we go
        dx = floor(sqrt(sphereR2 - y * y));
        
        // Where to draw the sphere
        drawY = sphereX + (y + sphereY) * 400;

        for (x = -dx; x <= dx; x++) {
            // Position on sphere in the range 0 - 1
            xp = x * ixy;
            yp = y * ixy;
            zp = sqrt(1 - xp * xp - yp * yp);
            
            // Dot product of light and position on sphere
            // Normal of sphere = [xp, yp, zp]
            light = 255 * max(0, xp * lightXNorm + yp * lightYNorm + zp * lightZNorm);
            
            // anti-alias
            var xyr = x * x + y * y;
            
            // only pixels that touch the edge
            if (xyr > sphereR12) {
                light *= 1 - (xyr - sphereR12) * sphereRd;
            }

            pixelIndex = x + drawY << 2;
            p[pixelIndex] = light;
            p[pixelIndex + 1] = light;
            p[pixelIndex + 2] = light;

        }
    }
    
    ms = millis() - ms;
    updatePixels();
    
    // Test speed
    fill(200);
    text(ms, 370, 390);
    //text(d, 370, 370);
};
