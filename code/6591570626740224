// Standard colours and variables

var weightingForAverages = [1, 2, 3];

var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);

var pointR = 10;
var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 200;
var ANIMATE_SPLIT = 12;
var ANIMATE_AVERAGE = 30;

var txtFont = createFont("monospace", 14);
var myFont = createFont("sans", 12);
var serifFont = createFont("serif", 15);
var fontSize = 12;
var CURSORBLINK = 35;

var toolbarX = width * 0.01;
var toolbarWidth = 120;
var toolbarHeight = 210;

var showing = {
    'Control points': true,
    'Control arms': true,
    'Average points': true,
    Curve: true,
};

var selected = false;
var myCurve;

/***************************************************************
 * GUI Slider to vary parameters
****************************************************************/

var Slider = function(x, y, width, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;

    this.draw = function() {
        noStroke();
        fill(180);
        rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);
    
        strokeWeight(1);
        stroke(0, 0, 0, 120);
        fill(180, 180, 250);
        ellipse(this.bx, this.y, this.ballD, this.ballD);
        noStroke();
        fill(255, 255, 255, 150);
        ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);

    };
    
    this.selected = function() {
        this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + round((x - this.x) * this.scale);
            return true;
        }
    };
  
    // This is used if you want to update the value in a way other
    // than using the slider (but want the slider to update).
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

/********************************************************
 *  GUI Button
*********************************************************/

var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(220, 220, 220, 250);
    this.highlightCol = color(250, 50, 50, 250);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
};

Button.prototype.mouseover = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseover() || this.selected) {
        fill(this.defaultCol);
    } else {
        noFill();
    }
    strokeWeight(1);
    stroke(200);
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    fill(10);
    textSize(14);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    noStroke();
    if (this.mouseover() || this.selected) {
        fill(this.defaultCol);
    } else {
        noFill();
    }
    rect(this.x, this.y, this.w, this.h + 1, 5);
    
    fill(10);
    textSize(12);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.x + 4, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.x + 4, this.y + 3, this.x + this.box + 4, this.y + 3 + this.box);
        line(this.x + this.box + 5, this.y + 3, this.x + 5, this.y + 3 + this.box);
    }
};

/********************************************************
 *  Text Box
*********************************************************/

var ALLOWED_CHARACTERS = {
    48: '0', 49: '1', 50: '2', 51: '3', 52: '4', 53: '5',
    54: '6', 55: '7', 56: '8',  57: '9', 32: " ",  188: ",", 189: "-", 173: "-"
};

var parseInput = function(txt) {
    var nums = txt.split(",");
    
    if (nums.length > 0) {
        weightingForAverages = [];
        
        for (var i = 0; i < nums.length; i++) {
            weightingForAverages.push(parseInt(nums[i], 10));
        }   
    }
};

var TextBox = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.textBefore = [];
    this.textAfter = [];
    this.focussed = false;
    
    for (var i = 0; i < weightingForAverages.length; i++) {
        this.textBefore.push(weightingForAverages[i]);
        if (i !== weightingForAverages.length - 1) {
            this.textBefore.push(",");
        }
    }
};

TextBox.prototype.draw = function() {
    fill(250);
    strokeWeight(1);
    if (this.focussed) {
        stroke(100);    
    } else {
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    fill(20, 20, 20);
    textFont(myFont, 14);
    textSize(fontSize);
    textAlign(LEFT, BASELINE);
    
    var ty = this.y + textAscent() + 5;
    var strBefore = this.textBefore.join("");
    text(strBefore, this.x + 8, ty - 1);
    
    var x = this.x + textWidth(strBefore) + 8;
    if (focused && this.focussed &&
        frameCount % CURSORBLINK < CURSORBLINK / 2) {
        stroke(20);
        line(x, ty, x, ty - textAscent() - 3);
    }
    
    text(this.textAfter.join(""), x, ty - 1);
};

TextBox.prototype.keyPress = function() {
    // Press enter
    if (keyCode === 10) {
        this.focussed = false;
    }
    
    if (!this.focussed) { return; }
    
    if (keyCode in ALLOWED_CHARACTERS) {
        // Add lowercase letter
        if (this.textBefore.length < 12) {
            this.textBefore.push(ALLOWED_CHARACTERS[keyCode]);
        }
    } else if (keyCode === DELETE || keyCode === BACKSPACE) {
        if (this.textBefore.length > 0) {
            this.textBefore.splice(this.textBefore.length - 1, 1);
        }
    } else if (keyCode === LEFT) {
        if (this.textBefore.length > 0) {
            var letter = this.textBefore.pop();
            this.textAfter.unshift(letter);
        }
    } else if (keyCode === RIGHT) {
        if (this.textAfter.length > 0) {
            var letter = this.textAfter.shift();
            this.textBefore.push(letter);
        }
    }
    
    var txt = this.textBefore.concat(this.textAfter).join("");
    parseInput(txt);
};

TextBox.prototype.mouseReleased = function() {
    if (mouseX > this.x && mouseX < this.x + this.w &&
        mouseY > this.y - 1 && mouseY < this.y + this.h + 3) {
        this.focussed = true;
    } else {
        this.focussed = false;
    }
};


/*********************************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
*********************************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (selected === this || this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};


/*********************************************************
 * AveragePoint
 * A point whose position is defined as the weighted
 * average of a list of points.
 *    points is an array of draggablePoints
 *    weights is a mapping of an index in points with a weight
*********************************************************/

var AveragePoint = function(points, weights, color) {
    this.color = color || GREEN;
    this.points = points;
    this.weights = weights;
    this.r = pointR;
    this.animation = 12;
    
    this.update();
    //this.info();
};

AveragePoint.prototype.draw = function(n) {
    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);

    var r = this.r * (1.15 - abs((this.animation - 3) / ANIMATE_SPLIT));

    ellipse(this.x, this.y, r, r);
    
    if (n !== undefined) {
        fill(255, 0, 0);
        text(n, this.x, this.y);
    }
    
    if (this.animation) {
        this.animation--;
    }
};

AveragePoint.prototype.update = function() {
    this.x = 0;
    this.y = 0;
    
    for (var i in this.weights) {
        var w = this.weights[i];
        this.x += this.points[i].x * w;
        this.y += this.points[i].y * w;
    }
};

// Change position using the weights of a second point
// Used for animation
AveragePoint.prototype.move = function(p2, w) {
    this.x = 0;
    this.y = 0;
    var v = 1 - w;
    
    for (var i in this.weights) {
        var w1 = this.weights[i];
        this.x += this.points[i].x * w1 * w;
        this.y += this.points[i].y * w1 * w;
    }
    
    for (var i in p2.weights) {
        var w2 = p2.weights[i];
        this.x += p2.points[i].x * w2 * v;
        this.y += p2.points[i].y * w2 * v;
    }
};


AveragePoint.prototype.info = function() {
    println("Point");
    println("(" + this.x + ", " + this.y + ")");
    for (var i in this.weights) {
        println(i + ": " + this.weights[i]);
    }
};

var averageWeights = function(w1, w2, w) {
    w = w || 0.5;
    var d = { };
    
    for (var i in w1) {
        d[i] = w1[i] * w;
    }
    
    w = 1 - w;
    
    for (var i in w2) {
        if (d[i]) {
            d[i] += w2[i] * w;
        } else {
            d[i] = w2[i] * w;  
        }
    }
    
    return d;
};

// Given array of arrays in the form [point, weight]
// return a new averagePoint,
// which is the weighted average of those points
var getAverageOfPoints = function(points) {
    // First convert weights from form (1, 2, 1) to (0.25, 0.5, 0.25)
    var totalWeight = 0;
    
    for (var i = 0; i < points.length; i++) {
        totalWeight += points[i][1];
    }
    
    if (totalWeight === 0) {
        totalWeight = 1;
    }
    
    var weights = { };
    for (var i = 0; i < points.length; i++) {
        var point = points[i][0];
        var weight = points[i][1] / totalWeight;
        
        for (var w in point.weights) {
            if (weights[w]) {
                weights[w] += point.weights[w] * weight;
            } else {
                weights[w] = point.weights[w] * weight;
            }
        }
    }
    
    return new AveragePoint(points[0][0].points, weights);
};

/*********************************************************
 *      Curve
 * A collection of points, joined by control arms
 * A curve is drawn between the points
*********************************************************/

var Curve = function(points) {
    this.controlPoints = [];
    this.curvePoints = [];
    this.newPoints = [];
    
    this.mouseoverPoint = false;
    this.labels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    this.animation = 0;
    
    // Add control points
    for (var i = 0; i < points.length; i++) {
        var p = new DraggablePoint(points[i][0], points[i][1]);
        this.controlPoints.push(p);
    }
    
    this.update = function() {
        for (var i = 0; i < this.curvePoints.length; i++) {
            this.curvePoints[i].update();
            //this.curvePoints[i].info();
        }
    };
    
    this.reset = function() {
        // Add curve points
        this.curvePoints = [];
        for (var i = 0; i < points.length; i++) {
            var d = {};
            d[i] = 1;
            var p = new AveragePoint(this.controlPoints, d);
            this.curvePoints.push(p);
        }
        this.update();
    };
    this.reset();
    
    this.draw = function() {
        if (this.animation) {
            this.animation--;
            
            if (this.animation < 1 && this.newPoints.length) {
                this.curvePoints = this.newPoints;
            } else {
                // Move points towards position of new points
                var p = this.animation / ANIMATE_AVERAGE;
                
                for (var i = 0; i < this.curvePoints.length; i++) {
                    this.curvePoints[i].move(this.newPoints[i], p);
                }
            }
        }

        if (showing['Control arms']) {
            this.drawControlArms();
        }
        
        if (showing.Curve) {
            this.drawCurve();   
        }
        
        if (showing['Average points']) {
            this.drawCurvePoints();
        }
        
        if (showing['Control points']) {
            this.drawControlPoints();
        }
    };
    
    this.drawControlArms = function() {
        stroke(BLUE);
        strokeWeight(2);
        
        var n = this.controlPoints.length;
        for (var i = 0; i < n; i++) {
            var p1 = this.controlPoints[i];
            var p2 = this.controlPoints[(i + 1) % n];
            line(p1.x, p1.y, p2.x, p2.y);
        }
    };
    
    this.drawControlPoints = function() {
        var n = this.controlPoints.length;
        
        for (var i = 0; i < n; i++) {
            this.controlPoints[i].draw();
        }
        
        // Labels
        fill(ORANGE);
        textSize(15);
        textFont(serifFont);
        textAlign(CENTER, CENTER);
        for (var i = 0; i < n; i++) {
            var p1 = this.controlPoints[i];
            var p2 = this.controlPoints[(i + 1) % n];
            var p3 = this.controlPoints[(i + n - 1) % n];
            
            var dx = p2.x + p3.x - 2 * p1.x;
            var dy = p2.y + p3.y - 2 * p1.y;
            var d = sqrt(dx * dx + dy * dy);
            var tx = p1.x - dx / d * 16;
            var ty = p1.y - dy / d * 16;
            text(this.labels.charAt(i), tx, ty);
        }
    };
    
    this.drawCurve = function() {
        stroke(GREEN);
        strokeWeight(4);
        noFill();

        var n = this.curvePoints.length;

        beginShape();
        for (var i = 0; i <= n; i++) {
            var p = this.curvePoints[i % n];
            vertex(p.x, p.y);
        }
        endShape();
    };
    
    this.drawCurvePoints = function() {
        for (var i = 0; i < this.curvePoints.length; i++) {
            this.curvePoints[i].draw();
        }
    };
    
    this.getAveragePoints = function(weights) {
        var averagePoints = [];
        
        // Two weights use points 0 and +1,
        // Three weights uses points -1, 0, +1
        var d = floor((weights.length - 1) / 2);
        
        var n = this.curvePoints.length;
        for (var i = 0; i < this.curvePoints.length; i++) {
            var weightedPoints = [];
            
            for (var w = 0; w < weights.length; w++) {
                var p = this.curvePoints[(i + n + w - d) % n];    
                weightedPoints.push([p, weights[w]]);
            }
            
            averagePoints.push(getAverageOfPoints(weightedPoints));
        }
        
        return averagePoints;
    };
    
    // Get average point between each existing point
    // Add these between the existing points
    this.split = function() {
        var newPoints = this.getAveragePoints([1, 1]);
        
        for (var i = 0; i < newPoints.length; i++) {
            this.curvePoints.splice(i * 2 + 1, 0, newPoints[i]);
        }
        
    };
    
    // Each point is averaged with the following point
    this.average = function() {
        this.newPoints = this.getAveragePoints(weightingForAverages);
        this.animation = ANIMATE_AVERAGE;
    };
    
    this.selectPoint = function() {
        for (var i = 0; i < this.controlPoints.length; i++) {
            if (this.controlPoints[i].mouseover()) {
                selected = i;
            }
        }
    };
    
    this.mouseDrag = function() {
        if (selected !== false) {
            var p = this.controlPoints[selected];
            p.x += mouseX - pmouseX;
            p.y += mouseY - pmouseY;
            this.update();
        }
    };
    
    // Show mouseover information
    this.mouseMove = function() {
        this.mouseoverPoint = false;
        
        for (var i = 0; i < this.curvePoints.length; i++) {
            var p = this.curvePoints[i];
            if (dist(mouseX, mouseY, p.x, p.y) <= p.r * 0.5) {
                this.mouseoverPoint = p;
                break;
            }
        }
    };
};

/**************************************
 * Creation of objects
***************************************/

myCurve = new Curve([
    [width * 0.5, height * 0.1],
    [width * 0.9, height * 0.5],
    [width * 0.5, height * 0.9],
    [width * 0.1, height * 0.5]
]);
/*
myCurve = new Curve([
    [300, 100],
    [400, 100],
    [400, 200],
    [300, 200]
]);
*/

var createButtons = function() {
    var buttons = [];
    var x = toolbarX + 8;
    var y = toolbarX + 31;
    var w = 102;
    var h = 15;

    // Functions to attach to buttons
    var splitCurve = function() {
        if (myCurve.curvePoints.length < MAX_RESOLUTION) {
            myCurve.split();
        }
    };
    
    var averageCurve = function() { myCurve.average(); };
    
    var subdivide = function() {
        if (myCurve.curvePoints.length < MAX_RESOLUTION && !myCurve.animation) {
            myCurve.split();
            myCurve.average();   
        }
    };
    
    var resetCurve = function() { myCurve.reset(); };
    
    buttons.push(new Button(x, y, w, h, "Split", splitCurve));
    y += 25;
    buttons.push(new Button(x, y, w, h, "Average", averageCurve));
    y += 25;
    buttons.push(new Button(x, y, w, h, "Subdivide", subdivide));
    y += 25;
    buttons.push(new Button(x, y, w, h, "Reset", resetCurve));
    y += 25;
    
    for (var opt in showing) {
        buttons.push(new CheckBox(x - 3, y, w, h, opt));
        y += 20;
    }
    
    return buttons;
};

var buttons = createButtons();
var sliders = [];
var txtBox = new TextBox(12, 10, 102, 15);

/**************************************
 *  Draw functions
***************************************/

var drawGUI = function() {
    noStroke();
    fill(240, 240, 240, 200);
    rect(toolbarX, toolbarX, toolbarWidth, toolbarHeight, 8);
    
    fill(10);
    textAlign(LEFT, CENTER);
   
    txtBox.draw();
   
    textFont(myFont, 14);
    textSize(fontSize);
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].draw();
    }
};

// Convert decimal to fraction,
var findFraction = function(d) {
    var tolerance = 0.000001;
    
    if (abs(round(d) - d) <= tolerance) {
        return [round(d), 1];
    }
    
    var loN = 0;
    var loD = 1;
    var hiN = 1;
    var hiD = 1;
    var midN = 1;
    var midD = 2;

    while (1) {
        if (abs(midN / midD - d) <= tolerance) {
            return [midN, midD];
        } else if (midN / midD < d) {
            loN = midN;
            loD = midD;
        } else {
            hiN = midN;
            hiD = midD;
        }

        midN = loN + hiN;
        midD = loD + hiD;
    }
};

var drawMouseOverInfo = function() {
    if (myCurve.mouseoverPoint) {
        var weights = myCurve.mouseoverPoint.weights;
        var labels = ["A", "B", "C", "D"];
        var terms = [];
     
        for (var w in weights) {
            if (weights[w] === 1) {
                terms.push(labels[w]);
            } else {
                var frac = findFraction(weights[w]);
                terms.push("(" + frac[0] + "/" + frac[1] + ")" + labels[w]);   
            }
        }
     
        fill(10);
        textAlign(LEFT, CENTER);
        textSize(13);
        text(terms.join(" + "), 8, height - 10);
    }
};


/********************************************************
 *  Main loop
*********************************************************/

draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    drawGUI();
    drawMouseOverInfo();
};

/********************************************************
 *  Event handling
*********************************************************/

mousePressed = function() {
    myCurve.selectPoint();
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].selected();
    }
};

mouseReleased = function() {
    selected = false;
    
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].held = false;
    }
    
    for (var b = 0; b < buttons.length; b++) {
        if (buttons[b].mouseover()) {
            buttons[b].click();
        }
    }
    
    txtBox.mouseReleased();
};

mouseDragged = function() {
    myCurve.mouseDrag();
    for (var s = 0; s < sliders.length; s++) {
        if(sliders[s].drag()) {
            myCurve.update();
        }
    }
};

mouseMoved = function() {
    //println(mouseX + " " + mouseY);
    myCurve.mouseMove();
};

keyPressed = function() {
    //println(keyCode);
    txtBox.keyPress();
};