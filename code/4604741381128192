// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var WHITE = color(255);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(50, 140, 250);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(55, 50, 45);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var CONTROL_POINT_SIZE = 12;

var toolbar;
var toolbarWidth = 128;

var showing = {
    Points: true,
    Line: true,
    Message: true,
};

var forEach = function(arr, func) {
    var i, n = arr.length;
    for (i = 0; i < n; i++) {
        arr[i][func]();
    }
};

/*******************************************************
 *      GUI functions for composing 
********************************************************/
var mouseOverRect = function() {
    return mouseX > this.x && mouseX < this.x + this.w &&
           mouseY > this.y && mouseY < this.y + this.h;
};

var containerMousePressed = function() {
    // Check mouse is over a component
    for (var i = this.components.length; i--;) {
        if (this.components[i].mousePressed()) {
            this.active = this.components[i];
            return this.components[i];
        }
    }
    return this.mouseOver();
};

var containerMouseReleased = function() {
    if (this.active) {
        this.active.mouseReleased();
        this.active = false;
    }
};

var containerMouseDragged = function() {
    if (this.active) {
        this.active.mouseDragged();
    }
};

/*******************************************************
 * Button is the default GUI element. Other elements
 * inhert from it.
********************************************************/
{
var Button = function(x, y, w, h, params) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.mx = this.x + this.w * 0.5;
    this.my = this.y + this.h * 0.5;
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
    
    // Default functions
    this.mouseOver = mouseOverRect;
    
    // Default properties
    this.fill = color(230, 230, 230, 200);
    this.textFill = color(55, 50, 45);
    this.highlightFill = color(210, 210, 210, 250);
    this.stroke = color(200);
    this.activeCursor = HAND;
    
    // Copy parameters
    for (var property in params) {
        if (params.hasOwnProperty(property)) {
            this[property] = params[property];
        }
    }
};

Button.prototype.draw = function() {
    this.mouseIsOver = this.mouseOver();
    if (this.mouseIsOver){
        cursor(this.activeCursor);
    }
    this.fade();
    this.disabled = this.disabledFunc && this.disabledFunc();
    this.drawElement();
};

Button.prototype.drawElement = function() {
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultFill, this.highlightFill, this.transition * 0.1));
        strokeWeight(1);
        stroke(this.stroke);
    }
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    fill(this.disabled ? 120 : this.textFill);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.mx, this.my + 2);
};

Button.prototype.mousePressed = function() {
    this.selected = this.mouseIsOver;
    return this.selected;
};

Button.prototype.mouseDragged = function() {};

Button.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseIsOver) {
        this.trigger();
    }
    this.selected = false;
};

Button.prototype.trigger = function() {
    // To be over-written
};

Button.prototype.fade = function() {
    if (this.selected || this.mouseIsOver) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *  GUI Button
********************************************************/
/*
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.textCol = params.textCol || color(20);
    this.defaultCol = color(230, 230, 230, 200);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    this.disabledFunc = params.disabledFunc;
    
    this.tx = x + w * 0.5;
    this.ty = y + h * 0.5 + 1;
    this.stroke = params.stroke || color(200);
    
    if (params.filled) {
        this.highlightCol = params.filled;
        this.stroke = params.filled;
        this.defaultCol = color(0, 0, 0, 1);
        
        Object.defineProperty(this, 'textCol', {
            get: function() {
                return lerpColor(this.highlightCol, WHITE, this.transition * 0.1);
            }
        });
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    this.disabled = this.disabledFunc && this.disabledFunc();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition * 0.1));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    fill(this.disabled ? 120 : this.textCol);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.tx, this.ty);
};

}   // Button
{
var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 13);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}   // Checkbox
{
var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}   // Radio button
*/
/*******************************************************
 *  Dropdown Menu
********************************************************/
/*
{
var Dropdown = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    
    this.options = params.options || [];
    this.selectedOption = params.selectedOption || 0;
    this.dy = 20;
    this.boxW = 40;
    this.boxH = this.dy * this.options.length;
    this.x2 = this.x + this.w - this.boxW;
    
    this.showDropdown = false;
};
Dropdown.prototype = Object.create(Button.prototype);

Dropdown.prototype.draw = function() {
    this.fade();

    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + 4, this.y + this.h / 2);
    var y = this.y + this.h / 2;

    if (this.showDropdown) {
        // Show all options
        strokeWeight(1);
        fill(250);
        rect(this.x2, this.y, this.boxW, this.boxH, 5);
        
        // Highlight selected
        if (this.mouseOver()) {
            if (this.transition) {
                noStroke();
                fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
                var index = this.getOption();
                rect(this.x2, this.y + index * this.dy, this.boxW, this.dy, 5);
            }
        }
        
        
        fill(10);
        for (var i = 0; i < this.options.length; i++) {
            text(this.options[i], this.x2 + 4, y);
            y += this.dy;
        }
        
    } else {
        // Selection box
        if (this.transition) {
            fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        } else {
            fill(250);
        }
        strokeWeight(1);
        stroke(200);
        rect(this.x2, this.y, this.boxW, this.h, 5);
        
        var selected = this.options[this.selectedOption];
        if (selected !== undefined) {
            fill(10);
            text(selected, this.x2 + 4, y);
        }
    }
    
};

Dropdown.prototype.getOption = function() {
    return min(floor((mouseY - this.y) / this.dy), this.options.length - 1);
};

Dropdown.prototype.mouseOver = function() {
    return (mouseX >= this.x2 && mouseX <= this.x2 + this.boxW &&
            mouseY >= this.y && mouseY <= this.y + (this.showDropdown ? this.boxH : this.h));
};

Dropdown.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        if (this.showDropdown) {
            this.selectedOption = this.getOption();
            this.trigger(this.options[this.selectedOption]);
            this.showDropdown = false;
        } else {
            this.showDropdown = true;
        }
    } else {
        this.showDropdown = false;
    }
    this.selected = false;
};
}
*/
/*******************************************************
 * GUI Slider
********************************************************/
/*
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 14);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
*/
/*******************************************************
 * GUI Label
********************************************************/
var Label = function(x, y, w, h, name) {
    this.x = x + w / 2;
    this.x1 = x + 8;
    this.x2 = x + w - 8;
    this.y = y + h + 1;
    this.y2 = y + h / 2 + 3;
    this.name = name;
};

Label.prototype.draw = function() {
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y2);
    
    strokeWeight(1);
    stroke(20);
    line(this.x1, this.y, this.x2, this.y);
};

/*******************************************************
 *      Toolbar
********************************************************/
{
var Toolbar = function(x, y, w, r) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.r = (r === undefined ? 8 : r);
    
    this.components = [];
    this.labels = [];
    
    this.mouseOver = mouseOverRect;
    this.mousePressed = containerMousePressed;
    this.mouseDragged = containerMouseDragged;
    this.mouseReleased = containerMouseReleased;
};

Toolbar.prototype.draw = function() {
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, this.r);
   
    forEach(this.components, 'draw');
    forEach(this.labels, 'draw');
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addLabel = function(name) {
    var h = 20;
    this.labels.push(new Label(this.x, this.y + this.h, this.w, h, name));
    this.h += h + 8;
};
}
/*******************************************************
 *      Menu
 * A minimal toolbar that is reveal when a menu is
 * opened. It triggers buttons when mouse is released
 * over an option. The mouse doesn't have to be pressed
 * on the button initially.
********************************************************/

var Menu = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 3;
    
    this.components = [];
    this.mouseOver = mouseOverRect;
};

Menu.prototype.draw = function() {
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h);
    forEach(this.components, 'draw');
};

Menu.prototype.addItem = function(params) {
    params.drawElement = this.drawItem;
    
    var h = 20;
    var component = new Button(this.x, this.y + this.h, this.w, h, params);
    
    this.components.push(component);
    this.h += h;
    
    textFont(sansFont, 15);
    this.setWidth(textWidth(params.name || "") + 10);
};

Menu.prototype.setWidth = function(w) {
    if (w > this.w) {
        this.w = w;
        for (var i = this.components.length; i--;) {
            this.components[i].w = w;
        }
    }
};

Menu.prototype.drawItem = function() {
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultFill, BLUE, this.transition * 0.1));
        rect(this.x, this.y, this.w, this.h);
    }
    
    fill(this.disabled ? 120 : this.textFill);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + 5, this.my);
};

Menu.prototype.mouseReleased = function() {
    for (var i = this.components.length; i--;) {
        if (this.components[i].mouseIsOver) {
            this.components[i].trigger();
            this.components[i].transition = 0;
        }
    }
};

/*******************************************************
 *      MenuButton
 * A button that reveals a dropdown containing more buttons
********************************************************/

var MenuButton = function(x, y, w, h, params) {
    Button.call(this, x, y, w, h, params);
    
    this.toolbar = new Menu(x, y + h, w);
    this.toolbar.gap = 1;
};
MenuButton.prototype = Object.create(Button.prototype);

MenuButton.prototype.drawElement = function() {
    if (this.open) {
        noStroke();
        fill(BLUE);
        rect(this.x, this.y, this.w, this.h);
    } else if (this.mouseIsOver) {
        stroke(lerpColor(this.defaultFill, this.textFill, this.transition * 0.1));
        strokeWeight(1);
        var y = this.y + this.h - 2;
        line(this.x, y, this.x + this.w, y);
    }
    
    fill(this.open ? WHITE : this.textFill);
    textFont(sansFont, 14);
    textAlign(CENTER, CENTER);
    text(this.name, this.mx, this.my);
    
    if (this.open) {
        this.toolbar.draw();
    }
};

MenuButton.prototype.mousePressed = function() {
    if (this.open) {
        if (this.toolbar.mouseOver()) {
            // If toolbar is clicked on, do nothing, but capture click
            return true;
        } else {
            // Otherwise close menu
            this.open = false;
        }
    } else {
        // If menu not open then open it if mouseover button
        this.open = this.mouseIsOver;
        return this.open;
    }
};

MenuButton.prototype.mouseReleased = function() {
    if (this.open && this.toolbar.mouseOver()) {
        // Trigger toolbar
        this.toolbar.mouseReleased();
    }
    this.open = this.mouseIsOver;
};

/*******************************************************
 *      Menubar
 * A horizontal toolbar that only contains dropdown menus
********************************************************/

var MenuBar = function(h) {
    this.x = -1;
    this.y = -1;
    this.w = width + 2;
    this.h = h;
    
    this.mx = 5;
    this.fill = color(235, 230, 225);
    
    this.components = [];
    this.menus = {};
    
    this.mouseOver = mouseOverRect;
    this.mouseDragged = containerMouseDragged;
};

MenuBar.prototype.draw = function() {
    fill(this.fill);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h);

    forEach(this.components, 'draw');
};

MenuBar.prototype.addMenu = function(name) {
    var menuButton = new MenuButton(this.mx, this.y + 1, 30, this.h - 1, {
        name: name,
        defaultFill: this.fill,
    });
    
    this.components.push(menuButton);
    this.menus[name] = menuButton;
    
    this.mx += menuButton.w + 5;
};

MenuBar.prototype.addMenuItem = function(menuName, item) {
    var menu = this.menus[menuName];
    
    if (menu) {
        menu.toolbar.addItem(item);
    } else {
        println("ERROR: no menu with name " + menuName);
    }
};

MenuBar.prototype.mousePressed = function() {
    // Select a button is one is pressed
    for (var i = this.components.length; i--;) {
        if (this.components[i].mousePressed()) {
            this.active = this.components[i];
        }
    }
};

MenuBar.prototype.mouseReleased = function() {
    if (this.active) {
        this.active.mouseReleased();
        if (!this.active.mouseIsOver) {
            //this.active.selected = false;
            this.active = false;
        }
    }
};

/*******************************************************
 *  Create toolbars
********************************************************/
var toolbars = [
    new Toolbar(5, 250, 120),
    new MenuBar(20)
];

toolbars[0].add(Button, {
    name: 'test',
    trigger: function() {
        println("Button pressed");
    }
});
toolbars[1].addMenu('File');
toolbars[1].addMenu('Edit');
toolbars[1].addMenuItem('File', {
    name: 'New canvas',
    trigger: function() { println("test " + frameCount); }
});
toolbars[1].addMenuItem('File', {
    name: 'Save canvas',
    trigger: function() { println("test save");}
});
toolbars[1].addMenuItem('Edit', {
    name: 'Copy',
    trigger: function() { println("Copy"); }
});
toolbars[1].addMenuItem('Edit', {
    name: 'Paste',
    trigger: function() { println("Paste");}
});

/**************************************
 *  Main loop
***************************************/

draw = function() {
    cursor('default');
    background(BACKGROUND);
    forEach(toolbars, 'draw');
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    forEach(toolbars, 'mousePressed');
};

mouseDragged = function() {
    forEach(toolbars, 'mouseDragged');
};

mouseReleased = function() {
    forEach(toolbars, 'mouseReleased');
};

mouseOut = function() {
    //forEach(toolbars, 'mouseReleased');
};
