/***********************************************************
 * This probably isn't very clear, 
 * but I think it has the seed of an idea.
 * It needs some work to explain what I'm trying to show.
 * 
 * The red graph is y as a function of x: y = f(x)
 * The green graph is z as a function of y: z = g(y)
 * The blue graph is z as a function of x: z = g(f(x))
 * 
 * Use the left and right arrow keys to move the delta box.
 * This box shows a change in x and how it translates 
 * through the different functions.
 * 
 * Use mouse the rotate the graph.
 * 
************************************************************/

var f = function(x) {
    return 0.5 * x + 2;
};

var g = function(x) {
    return pow(x - 4, 2) + 1;
};

var dx = 0.25;
var xRange = [0, 10];
var minAndMax = [xRange];
minAndMax.push([f(xRange[0]), f(xRange[0])]);
minAndMax.push([g(minAndMax[1][0]), g(minAndMax[1][0])]);
minAndMax = [xRange, xRange, xRange];
   
var backgroundColour = color(250, 250, 240);
var plotColour1 = color(160, 20, 20);
var plotColour2 = color(20, 160, 20);
var plotColour3 = color(20, 20, 160);
var axisLength = 180;
var origin = [0, -60, 0];

var currentdx = 10;

var createAxis = function(points, scale) {
    var nodes = [];
    var i;
    
    // X-axis
    for (i=0; i<points[0].length; i++) {
        nodes.push([origin[0] + scale[0] * points[0][i],
                    origin[1],
                    origin[2]]);
    }
    nodes.push([origin[0] + axisLength, origin[1], origin[2]]);
    nodes.push([origin[0] + axisLength + 10, origin[1], origin[2]]);
    
    // Y-axis
    for (i=0; i<points[0].length; i++) {
        nodes.push([origin[0],
                    origin[1] + scale[1] * points[1][i],
                    origin[2]]); 
    }
    nodes.push([origin[0], origin[1] + axisLength, origin[2]]);
    nodes.push([origin[0], origin[1] + axisLength + 10, origin[2]]);
    
    // Z-axis
    for (i=0; i<points[0].length; i++) {
        nodes.push([origin[0],
                    origin[1],
                    origin[2] + scale[2] * points[2][i]]);
    }
    nodes.push([origin[0], origin[1], origin[2] + axisLength]);
    nodes.push([origin[0], origin[1], origin[2] + axisLength + 10]);
    
    var edges = [[0, points[0].length],
                 [0, points[1].length * 2 + 2],
                 [0, points[2].length * 3 + 4]];
    
    return {nodes: nodes, edges: edges, stroke: color(30, 30, 30)};
};

// Given a list of points return a 3D plot  of the line
var createPlot = function(points, mag, xAxis, yAxis, zAxis, colour) {
    var xPoints = points[xAxis];
    var yPoints = points[yAxis];
    var scaleX = mag[xAxis];
    var scaleY = mag[yAxis];
    var nodes = [];
    var edges = [];
    
    for (var n=0; n < xPoints.length; n++) {
        var node = [0, 0, 0];
        node[xAxis] = origin[xAxis] + xPoints[n] * scaleX;
        node[yAxis] = origin[yAxis] + yPoints[n] * scaleY;
        node[zAxis] = origin[zAxis];
        nodes.push(node);
    }
    
    for (var e=1; e < xPoints.length; e++) {
        edges.push([e-1, e]);
    }
    
    return {nodes: nodes, edges: edges, stroke: colour };
};

// Find points for graphs
var getPoints = function() {
    var xPoints = [];
    var yPoints = [];
    var zPoints = [];
    
    for (var x=xRange[0]; x <= xRange[1]; x += dx) {
        var y = f(x);
        var z = g(y);
        
        xPoints.push(x);
        yPoints.push(y);
        zPoints.push(z);
        
        if (y > minAndMax[1][1]) {minAndMax[1][1] = y;}
        else if (y < minAndMax[1][0]) {minAndMax[1][0] = y;}
        if (z > minAndMax[2][1]) {minAndMax[2][1] = z;}
        else if (z < minAndMax[2][0]) {minAndMax[2][0] = z;}
    }
    return [xPoints, yPoints, zPoints];
};

var points = getPoints();
var axisScale = [(axisLength-4)/(minAndMax[0][1]),
                 (axisLength-4)/(minAndMax[1][1]),
                 (axisLength-4)/(minAndMax[2][1])];

var axis = createAxis(points, axisScale);
var plot1 = createPlot(points, axisScale, 0, 1, 2, plotColour1);
var plot2 = createPlot(points, axisScale, 1, 2, 0, plotColour2);
var plot3 = createPlot(points, axisScale, 2, 0, 1, plotColour3);
                       
var objects = [axis, plot1, plot2, plot3];

var rotateY3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var x;
    var y;
    var z;
    
    for (var obj in objects) {
        var nodes = objects[obj].nodes;
        for (var i = 0; i < nodes.length; i+=1) {
            x = nodes[i][0];
            y = nodes[i][1];
            z = nodes[i][2];
            nodes[i] = [ct*x + st*z, y, -st*x + ct*z];
        }
    }
};

var rotateX3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var x;
    var y;
    var z;
    
    for (var obj in objects) {
        var nodes = objects[obj].nodes;
        for (var i = 0; i < nodes.length; i+=1) {
            x = nodes[i][0];
            y = nodes[i][1];
            z = nodes[i][2];
            nodes[i] = [x, ct*y - st*z, st*y + ct*z];
        }
    }
};

var drawEdges = function(obj) {
    var edges = obj.edges;
    var nodes = obj.nodes;
    stroke(obj.stroke);

    for (var i = 0; i < edges.length; i+=1) {
        var node1 = nodes[edges[i][0]];
        var node2 = nodes[edges[i][1]];
        line(node1[0], node1[1], node2[0], node2[1]);
    }
};

var drawDeltaBox = function(axisN, plot) {
    var x1 = axis.nodes[axisN + currentdx][0];
    var y1 = axis.nodes[axisN + currentdx][1];
    var x2 = axis.nodes[axisN + currentdx+1][0];
    var y2 = axis.nodes[axisN + currentdx+1][1];
    var x3 = plot.nodes[currentdx+1][0];
    var y3 = plot.nodes[currentdx+1][1];
    var x4 = plot.nodes[currentdx][0];
    var y4 = plot.nodes[currentdx][1];
    

    quad(x1, y1, x2, y2, x3, y3, x4, y4);
};

var drawDeltaBoxes = function() {
    var n = points[0].length + 2;
    noStroke();
    fill(255, 0, 0, 100);
    drawDeltaBox(0, plot1);
    drawDeltaBox(n, plot1);
    fill(0, 255, 0, 100);
    drawDeltaBox(n, plot2);
    drawDeltaBox(n*2, plot2);
    fill(0,0, 255, 100);
    drawDeltaBox(n*2, plot3);
    drawDeltaBox(0, plot3);
};

var drawLabels = function() {
    resetMatrix();
    fill(30, 30, 40);
    
    var n = points[0].length + 2;
    var axes = ["x", "y", "z"];
    
    for (var i = 0; i<3; i++) {
        var x = 200 + axis.nodes[(i+1) * n - 1][0];
        var y = 200 - axis.nodes[(i+1) * n - 1][1];
        text(axes[i], x, y);
    }
    
    n = plot1.nodes.length-1;
    fill(plotColour1);
    text("f(x)", 200 + plot1.nodes[n][0], 190 - plot1.nodes[n][1]);
    fill(plotColour2);
    text("g(x)", 200 + plot2.nodes[n][0], 190 - plot2.nodes[n][1]);
    fill(plotColour3);
    text("g(f(x))", 200 + plot3.nodes[n][0], 190 - plot3.nodes[n][1]);

};

textAlign(CENTER, CENTER);

var draw = function() {    
    background(backgroundColour);
    
    translate(200,200);
    scale(1, -1);   // Flip axes so y goes up
    
    drawDeltaBoxes();

    for (var o in objects) {
        var obj = objects[o];
        
        strokeWeight(2);
        if ('edges' in obj) {
            drawEdges(obj);
        }
    }
    drawLabels();
};

var currentX = false;
var currentY = false;

var keyPressed = function() {
    if (keyCode === LEFT) {
        currentdx--;
        if (currentdx < 0){ currentdx = 0; }
    } else if (keyCode === RIGHT) {
        currentdx++;
        if (currentdx > points[0].length-2){
            currentdx = points[0].length-2;
        }
    }
};

var mouseDragged = function() {
    if (!mouseIsPressed) {
        currentX = false;
        return;
    }
    
    if (currentX !== false) {
        rotateY3D(-(currentX - mouseX));
        rotateX3D(-(currentY - mouseY));
    }
    currentX = mouseX;
    currentY = mouseY;
};

var mouseReleased = function () {
    currentX = false;
};

var mouseOut = function(){
    mouseY = 0;
    currentX = false;
    mouseIsPressed = false;
};

rotateY3D(-45);
rotateX3D(20);