 /******************************************************
 * How well does a straight line between B and C
 * approximate the length of the arc between B and C?
 * 
 * How does the angle in radians relate to the sine of
 * the angle?
 * 
 * How does the approximation change as the angle changes?
 * 
 * Drag point B to change the length of the line.
 * Drag point C to change the angle.
 *******************************************************/

// Colours
var ANGLE_COL = color(255, 242, 0);
var ANGLE_COL_T = color(255, 242, 0, 160);
var ARC_COL = color(40, 100, 250);
var ARC_COL_T = color(10, 25, 62);
var LINE_COL = color(18, 196, 65);
var LINE_COL_T = color(18, 196, 65, 60);

// Initial values
var theta = 30;
var side_length = 320;
var vert_length, arc_length, hypot;

var Ax = 25;
var Ay = 375;
var Bx = Ax + side_length;
var By = Ay;
var Cx = Bx;
var Cy = By - side_length * tan(theta);

// Slider
var sliderSize = 16;
var arcSize = 100;
var mouseOverSlider = false;

var findLengths = function() {
    theta = -atan2(Cy - Ay, Cx - Ax);
    vert_length = By - Cy;
    arc_length = PI * side_length * theta/180;
    hypot = dist(Ax, Ay, Cx, Cy);
};

findLengths();

var setPositionB = function(angle) {
    Bx = mouseX;
    if (Bx < Ax) { Bx = Ax + 0.01; }
    Cx = Bx;
    side_length = Bx - Ax;
};

var setPositionC = function() {
    Cy = mouseY;
    if (Cy > Ay) { Cy = Ay - 0.01; }
};

var writeLabel = function(label, x, y, angle, end) {
    translate(x, y);
    rotate(angle);
    var txt = "" + round(10 * label)/10;
    if (end) { txt += end; }
    text(txt, 0, 0);
    resetMatrix();
};

var writePoint = function(letter, x1, y1, x2, y2, x3, y3, d) {
    var angle = 180+(atan2(y1-y2, x1-x2) + atan2(y1-y3, x1-x3))/2;
    text(letter, x1 - d * cos(angle), y1 - d * sin(angle));
};

var writeInfo = function() {
    var x = 10;
    var y = 10;
    var w = 140;
    var h = 134;
    var dy = 22;
    
    strokeWeight(1);
    stroke(80, 80, 100);
    fill(10, 10, 20);
    rect(x, y, w, h);
    
    fill(255);
    textSize(13);
    textAlign(LEFT, BASELINE);
    
    var radians = theta * PI / 180;
    
    var params = ["Angle", "Angle", "sin(Angle)", "Straight line", "Arc length"];
    var values = [theta, radians, sin(theta), vert_length, arc_length];
    var colors = [ANGLE_COL, ANGLE_COL, ANGLE_COL, LINE_COL, ARC_COL];
    
    y += 16;
    x += 8;
    var txt, tx;
    for (var i=0; i<params.length; i++) {
        fill(colors[i]);
        txt = params[i] + ": ";
        text(txt, x, y + dy * i);
        tx = x + textWidth(txt);
        
        fill(255);
        txt = "" + round(1000 * values[i])/1000;
        if (i === 0) { txt += "°"; }
        if (i === 1) { txt += " radians"; }
        text(txt, tx, y+dy*i);
    }
    
    var d = 0;
    if (theta > 0) {
        var d = round(1000000 * (vert_length / arc_length -1))/10000;   
    }
    y += dy * params.length;
    text("Error: " + d + "%", x, y);
};

var drawShape = function() {
    noStroke();
    fill(LINE_COL_T);
    triangle(Ax, Ay, Bx, By, Cx, Cy);
    
    // Line
    strokeWeight(2);
    stroke(LINE_COL);
    line(Bx, By, Cx, Cy);
    
    // Arc
    fill(ARC_COL_T);
    stroke(ARC_COL);
    arc(Ax, Ay, side_length*2, side_length*2, 1-theta, 0);
    
    // Labels
    textSize(13);
    textAlign(CENTER, CENTER);
    fill(255);
    writeLabel(side_length, (Ax + Bx)/2, Ay + 10, 0);
    
    var x = Ax + hypot * cos(theta) / 2;
    x += 10 * cos(theta + 90);
    var y = Ay - hypot * sin(theta) / 2;
    y -= 10 * sin(theta + 90);
    writeLabel(hypot, x, y, -theta);
    
    textAlign(LEFT, CENTER);
    writeLabel(vert_length, Bx + 10, (By + Cy)/2, 0);
    
    var s = sin(theta/2);
    var c = cos(theta/2);
    
    x = Ax + (side_length * c - 10) * c;
    y = Ay - (side_length * c - 10) * s;
    
    x = Ax + (side_length - 10) * c;
    y = Ay - (side_length - 10) * s;
    textAlign(RIGHT, CENTER);
    writeLabel(arc_length, x, y, 0);
    
    // Points
    textAlign(CENTER, CENTER);    
    fill(255);
    writePoint("A", Ax, Ay, Bx, By, Cx, Cy, 10);
    writePoint("B", Bx, By, Ax, Ay, Cx, Cy, 16);
    writePoint("C", Cx, Cy, Ax, Ay, Bx, By, 16);
    
    // Draw angle
    stroke(ANGLE_COL);
    strokeWeight(2);
    fill(ANGLE_COL_T);
    var r = min(arcSize, Bx-Ax);
    arc(Ax, Ay, r, r, 1-theta, 0);
    
    // Lines
    strokeWeight(2);
    stroke(255);
    line(Ax, Ay, Bx-1, By);
    line(Ax, Ay, Cx, Cy);

    textAlign(CENTER, CENTER);
    textSize(12);
    fill(ANGLE_COL);
  
    var x = Ax + r * cos(theta) / 4 + 10 * cos(theta + 90);
    var y = Ay - r * sin(theta) / 4 - 10 * sin(theta + 90);
    writeLabel(theta, x, y, -theta, "°");
};

var drawSlider = function(slider, x, y) {
    if (mouseOverSlider === slider ||
        (mouseX >= x - sliderSize/2 &&
         mouseX <= x + sliderSize/2 &&
         mouseY >= y - sliderSize/2 &&
         mouseY <= y + sliderSize/2 &&
         !mouseOverSlider)) {
            fill(160, 160, 160, 200);
            stroke(240, 240, 240);
            mouseOverSlider = slider;
        } else {
            fill(160, 160, 160, 100);
            stroke(200, 200, 200, 200);
            if (!mouseIsPressed) {
                mouseOverSlider = false;   
            }
        }
        
    strokeWeight(2); 
    ellipse(x, y, sliderSize, sliderSize);
};

var draw = function() {
    background(0);
    drawShape();
    drawSlider(2, Cx, Cy);
    drawSlider(1, Bx, By);
    writeInfo();
};

var mouseDragged = function() {
    if (mouseOverSlider) {
        [setPositionB, setPositionC][mouseOverSlider-1]();
        findLengths();
    }
};

var mouseReleased = function () {
    mouseOverSlider = false;
};

var mouseOut = function(){
    mouseOverSlider = false;
};