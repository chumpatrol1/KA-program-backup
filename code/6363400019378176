// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);

var pointR = 16;
var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 200;
var RESOLUTION = 40;

var toolbar;
var toolbarWidth = 135;
var toolbarX = width * 0.01;

var showing = {
    'Control points': true,
    'Control arms': true,
    Curve: true,
    Fill: true
};
var tooltipPosition = 0;

var sansFont = createFont("sans", 14);
var serifFont = createFont("serif", 16);

var myCurve;

/**************************************
 * GUI Slider to vary parameters
***************************************/

var Slider = function(x, y, width, min_v, max_v, current_v, name) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    this.name = name;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;
};

Slider.prototype.draw = function() {
    if (this.name) {
        fill(TEXTCOL);
        textSize(15);
        textAlign(CENTER, BASELINE);
        text(this.name + ": " + this.val,  this.x + this.width / 2, this.y - 13);
    }
    
    noStroke();
    fill(180);
    rect(this.x - 8, this.y - this.h/2,
         this.width + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);

};

Slider.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.drag = function() {
    if (this.held) {
        var x = constrain(mouseX, this.x, this.x + this.width);
        this.bx = x;
        this.val = this.min + round((x - this.x) * this.scale);
        return true;
    }
};

// This is used if you want to update
// the value in a way other
// than using the slider (but want the
// slider to update).
Slider.prototype.update = function(d) {
    this.val = constrain(this.val + d, this.min, this.max);
    this.bx = (this.val - this.min) / this.scale + this.x;
};

/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
    this.transition = 0;
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(200);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/**************************************
 *      Toolbar
 *  Contains other GUI elements
***************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 7;
    
    this.buttons = [];
    this.sliders = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.buttons.length; i++) {
        this.buttons[i].draw();
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, func) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    
    
    this.buttons.push(new Button(x, y, w, h, name, func));
    this.h += h + 8;
};

Toolbar.prototype.addSlider = function(minX, maxX, nowX, name) {
    var h = 18;
    var x = this.x + 15;
    var y = this.y + h;
    var w = this.w - 30;
    
    if (name) {
        y += 14;
        this.h += 14;
    }
    
    this.sliders.push(new Slider(x, y, w, minX, maxX, nowX, name));
    
    this.h += h + 14;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        this.buttons.push(new CheckBox(x, y, w, h, opt));
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseOver()) {
            this.buttons[i].selected = true;
        }
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].selected();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseOver() && this.buttons[i].selected) {
            this.buttons[i].click();
        }
        this.buttons[i].selected = false;
    }
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].held = false;
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].drag()) {
            return true;
        }
    }
};
}
/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

/**************************************
 * Project mouseX, mouseY onto a line
 * from p1 to p2.
 * Used to figure out where new points
 * can be added.
***************************************/

var projectMouseOntoLine = function(p1, p2) {
    // Project (mouseX, mouseY) onto line
    var lx = p1.x - p2.x;
    var ly = p1.y - p2.y;
    var mx = mouseX - p2.x;
    var my = mouseY - p2.y;
    
    var w = (mx * lx + my * ly ) / (lx * lx + ly * ly);
    if (w > 0 && w < 1) {
        var x = p1.x * w + p2.x * (1 - w);
        var y = p1.y * w + p2.y * (1 - w);
        return [x, y];
    }
    return false;
};

/**************************************
 *      Curve
 * A collection of points, joined by control arms
 * A curve is drawn between the points
***************************************/

var Curve = function(points) {
    this.controlPoints = [];
    this.curvePoints = [];
    this.selectedPoint = false;
    this.draggingPoint = false;
    this.addPointCoord = false;
    this.resolution = 0;
    
    // Add control points
    for (var i = 0; i < points.length; i++) {
        var p = new DraggablePoint(points[i][0], points[i][1]);
        this.controlPoints.push(p);
    }
    
    this.updateCurvePoints();

};

Curve.prototype.updateCurvePoints = function() {
    this.curvePoints = [];
    
    var q = pow(2, this.resolution);
    var q2 = q * q;
    var n = this.controlPoints.length;
    
    for (var i = 0; i < n; i++) {
        var p1 = this.controlPoints[(i + n - 1) % n];
        var p2 = this.controlPoints[i % n];
        var p3 = this.controlPoints[(i + 1) % n];
        
        for (var t = 0; t < q; t++) {
            var s = q - t - 1;
            var a = (s * s + s) / 2;
            var c = (t * t + t) / 2;
            var b = q2 - a - c;
            
            var x = (p1.x * a + p2.x * b + p3.x * c) / q2;
            var y = (p1.y * a + p2.y * b + p3.y * c) / q2;
            this.curvePoints.push([x, y]);
        }
    }
};

Curve.prototype.draw = function() {
    if (showing['Control arms']) {
        this.drawControlArms();
    }
    
    if (showing.Curve) {
        this.drawCurve();   
    }
   
    if (showing['Control points']) {
        this.drawControlPoints();
    }
    
    if (this.addPointCoord) {
        stroke(PINK);
        strokeWeight(2);
        fill(PINK + (180 << 24));
        ellipse(this.addPointCoord[0], this.addPointCoord[1], pointR, pointR);
    }
};
    
Curve.prototype.drawControlArms = function() {
    stroke(BLUE);
    strokeWeight(2);
    
    var n = this.controlPoints.length;
    for (var i = 0; i < n; i++) {
        var p1 = this.controlPoints[i];
        var p2 = this.controlPoints[(i + 1) % n];
        line(p1.x, p1.y, p2.x, p2.y);
    }
};

Curve.prototype.drawControlPoints = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        this.controlPoints[i].draw();
    }
};

Curve.prototype.drawCurve = function() {
    stroke(GREEN);
    strokeWeight(4);
    noFill();

    if (showing.Fill) {
        fill(GREEN + (128 << 24));
    } else {
        noFill();
    }
    
    beginShape();
    for (var i = 0; i < this.curvePoints.length; i++) {
        var p = this.curvePoints[i];
        vertex(p[0], p[1]);
    }
    endShape(CLOSE);
};

Curve.prototype.drawCurvePoints = function() {
    for (var i = 0; i < this.curvePoints.length; i++) {
        this.curvePoints[i].draw();
    }
};

// Add new control point
Curve.prototype.addPointAt = function(coord) {
    var newPoint = new DraggablePoint(coord[0], coord[1]);
    this.controlPoints.splice(coord[2] + 1, 0, newPoint);
    toolbar.buttons[0].deactivated = false;
    tooltipPosition = max(1, tooltipPosition);
};

Curve.prototype.deletePoint = function() {
    if (this.selectedPoint !== false &&
        this.controlPoints.length > 3) {
        this.controlPoints.splice(this.selectedPoint, 1);
        this.updateCurvePoints();
    }
    if (this.controlPoints.length === 3) {
        toolbar.buttons[0].deactivated = true;
    }
};

Curve.prototype.printCurve = function() {
    var _scale = 400 / max(width, height);
    
    var s = "beginShape();\n";
    var oldX, oldY;
    for (var i = 0; i < this.curvePoints.length; i++) {
        var p = this.curvePoints[i];
        var x = round(p[0] * _scale);
        var y = round(p[1] * _scale);
        
        if (oldX !== x || oldY !== y) {
            s += "vertex(" + x + ","  + y + ");\n";
        }
        
        oldX = x;
        oldY = y;
    }
    s += "endShape(CLOSE);";
    println(s);
};

// Select a point for dragging
Curve.prototype.mousePressed = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseover()) {
            this.draggingPoint = this.controlPoints[i];
            this.draggingPoint.dragging = true;
        }
    }
};

// Select a point for editing
Curve.prototype.mouseReleased = function() {
    if (this.draggingPoint) {
        this.draggingPoint.dragging = false;
        this.draggingPoint = false;
    }
    
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseover()) {
            this.selectedPoint = i;
            this.controlPoints[i].selected = true;
        } else {
            this.controlPoints[i].selected = false;
        }
    }
    
    if (!this.draggingPoint &&
         this.addPointCoord) {
        this.addPointAt(this.addPointCoord);
    }
    
    this.updateCurvePoints();
};

// Move a dragged point
Curve.prototype.mouseDrag = function() {
    if (this.draggingPoint) {
        this.addPointCoord = false;
        this.draggingPoint.x += mouseX - pmouseX;
        this.draggingPoint.y += mouseY - pmouseY;
    }
    this.updateCurvePoints();
};

// Check for mouseover a line
Curve.prototype.mouseMove = function() {
    if (this.draggingPoint) { return; }
    
    this.addPointCoord = false;
    var n = this.controlPoints.length;

    for (var i = 0; i < n; i++) {
        var p1 = this.controlPoints[i];
        if (dist(mouseX, mouseY, p1.x, p1.y) <= CONTROL_POINT_SIZE) {
            return;
        }
    }

    for (var i = 0; i < n; i++) {
        var p1 = this.controlPoints[i];
        var p2 = this.controlPoints[(i + 1) % n];
        var d = projectMouseOntoLine(p1, p2);
        
        if (d) {
            var x = d[0];
            var y = d[1];
            if (dist(mouseX, mouseY, x, y) <= pointR / 2) {
                this.addPointCoord = [x, y, i];
                break;
            }
        }
    }
};

/**************************************
 * Creation of objects
***************************************/

myCurve = new Curve([
    [width * 0.5, height * 0.2],
    [width * 0.5 + height * 0.4, height * 0.8],
    [width * 0.5 - height * 0.4, height * 0.8]
]);

toolbar = new Toolbar(toolbarX, toolbarX, toolbarWidth);

toolbar.addSlider(0, 5, 0, "Subdivisions");

var exportCurve = function() { myCurve.printCurve(); };
var deletePoint = function() { myCurve.deletePoint(); };
toolbar.addButton("Delete point", deletePoint);
toolbar.addButton("Export curve", exportCurve);
toolbar.buttons[0].deactivated = true;
toolbar.addOptions(showing);

/**************************************
 *  Draw tooltip
***************************************/

var drawTooltip = function() {
    if (tooltipPosition > 0) {
        tooltipPosition += 2;
        
        if (tooltipPosition > 30) {
            return;
        }
    }
    
    textAlign(CENTER, CENTER);
    textSize(15);
    var txt = "Click on a control arm to add a new control point.";
    
    var w = textWidth(txt) + 20;
    var h = textAscent() + textDescent() + 12;
    var x = width / 2;
    var y = 5 - tooltipPosition;
    
    strokeWeight(3);
    stroke(MESSAGEBLUE);
    fill(255);
    rect(x - w / 2, y, w, h, 10);
    
    fill(TEXTCOL);
    text(txt, x, y + h / 2);
};

/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    toolbar.draw();
    drawTooltip();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    myCurve.mousePressed();
    toolbar.mousePressed();
};

mouseReleased = function() {
    toolbar.mouseReleased();
    
    //if (!buttonClicked) {
        myCurve.mouseReleased();   
    //}
};

mouseMoved = function() {
    myCurve.mouseMove();
};

mouseDragged = function() {
    myCurve.mouseDrag();
    myCurve.mouseMove();
    
    if (toolbar.mouseDragged()) {
        myCurve.resolution = toolbar.sliders[0].val;
        myCurve.updateCurvePoints();
    }
};

keyPressed = function() {
    if (key.toString() === 's') {
        myCurve.printCurve();
    }
};
