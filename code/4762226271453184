/******************************************************
 * Work in Progress
 * 
 * This is a generic text adventure engine
 * To make your own text adventure, scroll down to
 * where it says "Specific places" and follow the 
 * examples
 * 
 * To play, click in the lower box and type a command
 * Type help for examples of commands
 * Use the left arrow as backspace
 * Use up and down arrows to get previous commands
 * 
 * - To do -
 *  Scroll old commands
 *  Conditional descriptions
 *  Use items
 *  Use fewer than all of an items 
********************************************************/

// Colours
var BACKGROUND = color(24, 24, 20);
var PROMPT = color(40, 40, 34);
var BASICTEXT = color(248, 248, 242);
var PASSTEXT = color(100, 216, 206);
var FAILTEXT = color(250, 40, 110);

var command = "> ";
var commands = [];
var outputs = [];
var lastCommand = 0;

// Object you own mapped to their description and number
var inventory = {
    coin: { desc: "A shiny silver coin", num: 8 },
    sword: { desc: "A big sword" }
};

// Map words to existing commands
var synonyms = {
    walk: 'go',
    run: 'go',
    grab: 'take',
    steal: 'take',
    pick: 'take',
    look: 'describe',
    see: 'describe',
    inspect: 'describe',
    put: 'drop',
    leave: 'drop',
    discard: 'drop',
    say: 'talk',
    speak: 'talk',
    chat: 'talk'
};

var describeInventory = function() {
    var items = [];
    for (var i in inventory) {
        var n = inventory[i].num || 1;
        if (n > 1) {
            items.push(n + "x " + i);
        } else {
            items.push(i);   
        }
    }
    if (items.length === 0) {
        return "You don't have anything.";
    } else {
        return "You have " + items.join(", ") + ".";
    }
};

/*******************************************************
 *  Generic Place object to determine what commands do
********************************************************/
var Place = function(description, neighbours, elements) {
    this.description = description;
    this.neighbours = neighbours || {};
    this.elements = elements || {};
};

// Give a command at this place
Place.prototype.enterCommand = function() {
    // Split command into [verb, object]
    var parts = command.split(" ");
    
    // If object doesn't exist add a false one
    if (parts.length < 3) { parts.push(false); }
    var verb = parts[1];
    var obj = parts[parts.length - 1];
    
    var shortCommand = verb;
    if (obj) {
        shortCommand += " " + obj;
    }
    
    var result = this.useCommand(verb, obj);
    if (result[0]) {
        outputs.push([PASSTEXT, shortCommand]);
        outputs.push(result[1]);
    } else {
        outputs.push([FAILTEXT, shortCommand]); 
        outputs.push(result[1]);
    }
    
    commands.push("> " + shortCommand);
    command = "> ";
    lastCommand = 0;
};

// If command or an synonym exists then call it with the parameter
// Return true if command is understood
Place.prototype.useCommand = function(verb, obj) {
    if (this[verb]) {
        return this[verb](obj);
    } else if (synonyms[verb]) {
        return this[synonyms[verb]](obj);
    }
    return [false, "I don't understand that command."];
};

// Call command and output result without outputting command
Place.prototype.getResult = function(verb, obj) {
    var result = this.useCommand(verb, obj);
    outputs.push(result[1]);
};

/*********************************************************
 *      - Generic Place functions -
 *  
 * These determine which commands that can be called at
 * any place, but can be overridden.
 * 
 * Functions must return an array in which
 * the first value is whether the command was understood
 * the second value is string to output
**********************************************************/
var places, currentPlace;

Place.prototype.help = function() {
    return [true, "Type a command such as 'go north' or 'see inventory' (or just 'inv')."];
};

// inv is a shortcut to show the inventory
Place.prototype.inv = function() {
    return [true, describeInventory()];
};

// If object given then describe it, otherwise describe place
Place.prototype.describe = function(obj) {
    if (obj) {
        if (obj === 'invent' || obj === 'inventory') {
            return[true, describeInventory()];
        }
        
        var isObj = inventory[obj];
        if (isObj) {
            return[true, isObj.desc];
        }
        
        isObj = this.elements[obj];
        if (isObj && !isObj.hidden) {
            return[true, isObj.desc];
        }
        return [false, "You can't see that."];
    } else {
        var desc = this.description;
     
        var elements = [];
        for (var i in this.elements) {
            if (this.elements[i].canTake && !this.elements[i].hidden){
                var n = this.elements[i].num || 1;
                if (n > 1) {
                    elements.push(n + "x " + i);
                } else {
                    elements.push(i);   
                }
            }
        }
        
        if (elements.length > 0) {
            desc += " You can see " + elements.join(", ") + ".";
        }
        
        return [true, desc];
    }
};

// Talk to someone
Place.prototype.talk = function(person) {
    if (person === 'self') {
        return [true, "You talk to yourself."];
    }
    return [true, "There's no one to talk to."];
};

// Change place if possible
Place.prototype.go = function(direction) {
    if (!direction) { return [false, "Go where?"]; }
    
    var nextPlace = this.neighbours[direction];
    if (nextPlace) {
        if (places[nextPlace]) {
            currentPlace = places[nextPlace];
            return currentPlace.useCommand("describe");   
        } else {
            return [true, "You are unable to go there."];
        }
    }
    
    return [false, "You can't go " + direction + "."];
};

// Take an object
Place.prototype.take = function(obj) {
    if (!obj) { return [false, "Take what?"]; }
    
    var takeObj = this.elements[obj];
    if (takeObj) {
        if (takeObj.canTake) {
            var n = takeObj.num || 1;
            if (inventory[obj]) {
                inventory[obj].num += n;
            } else {
                inventory[obj] = {
                    desc: takeObj.desc,
                    num: takeObj.num
                };
            }
            delete this.elements[obj];
            return [true, "You take " + obj];
        } else {
            return [true, "You can't take " + obj];
        }
    }
    return [false, "You can't take that."];
};

// Drop an object
Place.prototype.drop = function(obj) {
    if (!obj) { return [false, "Drop what?"]; }
    
    var dropObj = inventory[obj];
    if (dropObj) {
        var n = dropObj.num || 1;
        if (this.elements[obj]) {
            this.elements[obj].num += n;
        } else {
            this.elements[obj] = {
                desc: dropObj.desc,
                canTake: true,
                num: n
            };
        }
        delete inventory[obj];
        return [true, "You drop " + obj];
    }
    return [false, "You don't own that."];
};

Place.prototype.sit = function() {
    return [false, "There is nowhere to sit here."];
};

Place.prototype.dance = function() {
    return [true, "You do a little dance. You're weird."];
};

Place.prototype.sing = function() {
    return [true, "You sing a short song."];
};

Place.prototype.sigh = function() {
    return [true, "You sigh deeply."];
};

/*********************************************************
 *      - Specific places (edit these) -
 * Places are area, rooms etc. where the player can be.
 * See below for examples
 * 
 * Create a new place with:
 *   var placeName = new Place("description", map, elements);
 * 
 * Map is an object that associates a direction 
 * with a place name, e.g.
 *      {north: 'placeA', east: 'placeB'}
 * 
 * Elements is an object that assciates an object name with its
 * description, e.g.
 *       {elementName1: element1, elementName2: element2}
 * 
 * Element objects should be in the form:
 *  {desc: "description", 
 *   canTake: true,
 *   hidden: false,
 *   num: 1}
 * All elements should have a description and can have:
 *  canTake: true if the player can take it
 *  hidden: true if the player can't see it
 *  num: the number there (default 1)
 * 
 * Map and elements are optional
 * 
 * To define a command that can be given in a place with:
 *   placeName.commandName = function(object) {
 *      return [true, "Do commandName on object"];
 *   };
 * This function is called by typing commandName or
 * commandName object
**********************************************************/
// Place A
var placeA = new Place(
    "You are standing in place A. Place B is to the north.",
    {north: 'placeB'}
);

// Place B
var placeB = new Place("This is place B. Place A is to the south. To the east is place C and to the north is place D.",
    {north: 'placeD', east: 'placeC', south: 'placeA'},
    {coin: {
        desc: 'A shiny silver coin.',
        num: 2,
        canTake: true
    }}
);

// Place C
var placeC = new Place(
    "This is place C. Place B is west.",
    {west: 'placeB'},
    {item1: {
        desc: 'Item 1 looks like this.',
        num: 1,
        canTake: true
    }}
);

// Place D
var placeD = new Place("This is place D. There is a seat here. Place B is south",
    {south: 'placeB'},
    {seat: {desc: 'The seat looks comfortable.'}}
);

// Override sit command in place D so it works here
placeD.sit = function() {
    return [true, "You sit in the seat."];
};

// Add places here so we can refer to them by name
places = {
    placeA: placeA,
    placeB: placeB,
    placeC: placeC,
    placeD: placeD
};

// Define starting place and call its description.
currentPlace = placeA;
currentPlace.getResult('describe');

/*****************************************************
 *  Global parameters
******************************************************/

// Display parameters
var myFont = createFont("monospace", 14);
var fontSize = 12;
var CURSORBLINK = 20;

var commandPromptX = 10;
var commandPromptY = 370;

// Mapping keyCode to output
var LETTERS = "abcdefghijklmnopqrstuvwxyz";
var NUMBERS = {
    32: " ", 48: '0', 49: '1', 50: '2', 51: '3',
    52: '4', 53: '5', 54: '6', 55: '7', 56: '8',  57: '9'
};

/*****************************************************
 *  Draw functions
******************************************************/

var drawCommandPrompt = function() {
    fill(PROMPT);
    stroke(60, 60, 56);
    rect(-1, commandPromptY, width + 2, height - commandPromptY);
    
    fill(BASICTEXT);
    textFont(myFont, 14);
    textSize(fontSize);
    textAlign(LEFT, BASELINE);
    
    var ty = commandPromptY + textAscent() + 8;
    text(command, commandPromptX, ty);
    
    if (focused && frameCount % CURSORBLINK < CURSORBLINK / 2) {
        stroke(BASICTEXT);
        var x = commandPromptX + textWidth(command) + 2;
        line(x, ty, x, ty - textAscent());
    }
};

var drawOldOutput = function() {
    textFont(myFont, 14);
    textSize(fontSize);
    textAlign(LEFT, BASELINE);
    
    var ty = commandPromptY - 8;
    var dy = 16;
    var maxWidth = width - 2 * commandPromptX;
    
    for (var i = outputs.length - 1; i >= 0; i--) {
        fill(BASICTEXT);
        var txt = outputs[i];
        var tx = commandPromptX;
        
        if (txt.length === 2) {
            // Command
            ty -= 14;
            text("> ", tx, ty, maxWidth, 400);
            tx += textWidth("> ");
            fill(txt[0]);
            txt = txt[1];
        } else {
            // Calculate how high we are after wrapping
            // Doesn't always work
            var predictedHeight = ceil(textWidth(txt) / maxWidth);
            ty -= 16 * predictedHeight + 8;
        }
        
        text(txt, tx, ty, maxWidth, 400);
        if (ty < 0) { break; }
    }
};

var draw =function() {
    background(BACKGROUND);
    drawCommandPrompt();
    drawOldOutput();
};

/*****************************************************
 *  Event handling
******************************************************/
// Use up and down arrows to get previous commands
var getOldCommand = function() {
    var n = max(0, commands.length - lastCommand);
    if (n < commands.length) {
        command = commands[n];   
    } else {
        command = "> ";
    }
};

var keyPressed = function() {
    //println(keyCode);
    
    // Press enter
    if (keyCode === 10 && command.length > 2) {
        currentPlace.enterCommand();
    }
    
    // Text too long
    if (command.length > 40) {
        return;
    }
    
    if (keyCode > 64 && keyCode < 91) {
        command += LETTERS[keyCode - 65];
    } else if (keyCode in NUMBERS) {
        command += NUMBERS[keyCode];
    } else if (keyCode === 37) {
        // Left arrow used as backspace
        if (command.length > 2) {
            command = command.slice(0, command.length - 1);   
        }
    } else if (keyCode === 38) {
        lastCommand++;
        getOldCommand();
    } else if (keyCode === 40) {
        lastCommand--;
        getOldCommand();
    }
};
