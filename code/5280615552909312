// Effeciently shading a sphere based on mouse position
// With help from: https://www.khanacademy.org/computer-programming/_/1925327317

// Standard colours and variables
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var sphereX = 250;
var sphereY = 200;
var sphereR = 100;
var sphereR2 = sphereR * sphereR;
var sphereR1 = sphereR - 1;
var sphereR12 = sphereR1 * sphereR1;
var sphereRd = 1 / (sphereR2 - sphereR12);

// Inverse radius
var ixy = 1 / sphereR;

/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *  GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};
}
/*******************************************************
 * GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 14);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
/*******************************************************
 *      Cache lots of information
********************************************************/

// Get an array of pixel positions and normals
var getNormMap = function() {
    var x, y, dx, xp, yp, zp, drawY, pixelIndex;
    var normMap = [];
    
    for (y = -sphereR; y < sphereR; y++) {
        dx = floor(sqrt(sphereR2 - y * y));
        yp = y * ixy;
        drawY = sphereX + (y + sphereY) * width;
        
        for (x = -dx; x <= dx; x++) {
            xp = x * ixy;
            zp = sqrt(1 - xp * xp - yp * yp);
            pixelIndex = x + drawY << 2;
            normMap.push([pixelIndex, xp, yp, zp]);
        }
    }
    
    return normMap;
};

var normMap = getNormMap();

// Number of pixels we'll draw
var arrLength = normMap.length;
var noiseMap = [];

// Initialise with mid range values
for (var i = 0; i < arrLength; i++) {
    noiseMap.push(128);
}

var noiseStart = 0;
var noiseScale = 2;
var noiseSmooth = 0;
var noiseDetailV = 1;
var fallOff = 0.5;

noiseDetail(noiseDetailV, fallOff);

var getNoiseMap = function(start, stop) {
    var n, m, i, j;
    stop = min(stop, arrLength);
    
    for (i = start; i < stop; i++) {
        m = normMap[i];
        n = noise(m[1] * noiseScale, m[2] * noiseScale, m[3] * noiseScale);
        for (var j = 0; j < noiseSmooth; j++) {
            n *= n * (3 - 2 * n);
            n *= n * (3 - 2 * n);
        }
        noiseMap[i] = 80 + 255 * n;
    }
};

/*******************************************************
 *      Make interface
********************************************************/

var toolbar = new Toolbar(10, 10, 120);

toolbar.add(Slider, {
    name: 'Octaves',
    ballR: 12,
    min: 1, max: 6, now: 2,
    trigger: function() {
        if (this.val !== noiseDetailV) {
            noiseDetailV = this.val;
            noiseDetail(noiseDetailV, fallOff);
            noiseStart = 0;
        }
    }
});

toolbar.add(Slider, {
    name: 'Fall-off',
    ballR: 12,
    min: 0.1, max: 0.9, now: 0.5,
    trigger: function() {
        if (this.val !== fallOff) {
            fallOff = this.val;
            noiseDetail(noiseDetailV, fallOff);
            noiseStart = 0;
        }
    },
    jumpSize: 20 
});

toolbar.add(Slider, {
    name: 'Scale',
    ballR: 12,
    min: 1, max: 8, now: 2,
    trigger: function() {
        if (this.val !== noiseScale) {
            noiseScale = this.val;
            noiseStart = 0;
        }
    }
});

toolbar.add(Slider, {
    name: 'Contrast',
    ballR: 12,
    min: 0, max: 5, now: 0,
    trigger: function() {
        if (this.val !== noiseSmooth) {
            noiseSmooth = this.val;
            noiseStart = 0;
        }
    }
});

/*******************************************************
 *      Get going
********************************************************/

draw = function() {
    background(0);
    loadPixels();
    
    var p = this.imageData.data;
    var ms = millis();
    var light, pixelIndex, norm;
    
    if (noiseStart <= arrLength) {
        getNoiseMap(noiseStart, noiseStart + 8000);
        noiseStart += 8000;
    }
    
    for (var i = 0; i < arrLength; i++) {
        norm = normMap[i];
        light = noiseMap[i] * norm[3];
        pixelIndex = norm[0];
        
        p[pixelIndex++] = light * 0.8;
        p[pixelIndex++] = light * 0.9;
        p[pixelIndex++] = light;
    }
    
    ms = millis() - ms;
    updatePixels();
    
    // Test speed
    fill(200);
    text(ms, width - 20, 390);
    
    toolbar.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    toolbar.mousePressed();
};

mouseDragged = function() {
    toolbar.mouseDragged();
};

mouseReleased = function() {
    toolbar.mouseReleased();
};

mouseOut = function() {
    toolbar.mouseReleased();
};