/**********************************************************
* Simulation illustrating the paradox of Maxwell's demon
* 
* Dedicated to Victoria and her quest to escape the 
* inevitability of entropy.
* 
* The demon allows atoms with more than the mean energy to 
* cross the barrier only left to right and atoms with less
* than the mean energy to cross only right to left.
* 
* This simulation demonstrates the paradox, not the solution
* to the paradox.
* 
* I would like make it clearer what the demon is doing.
* 
* For more information:
* http://www.khanacademy.org/science/physics/thermodynamics/v/maxwell-s-demon
* 
* The histograms show the energies for all atoms from one side
**********************************************************/

// Distance at which cell repel
var REPULSION_LENGTH = 10;
var REPULSION_STRENGTH = 0.5;

// Speed of atoms in the walls
var wallTemp = 3;

// Initial energy of atoms
var initialTemp = 5;

var numAtoms = 60;
var atomSize = 3;
var bgColour = color(242, 243, 250);
var hotColour = color(255, 20, 0);
var coolColour = color(80, 120, 255);
var meanEnergy = 0;

var openings = [];

// Atom object with a position and velocity
var Atom = function(x, y, r){
    this.x = x;
    this.y = y;
    this.r = r;
    
    this.dx = initialTemp * (random() - 0.5);
    this.dy = initialTemp * (random() - 0.5);
    
    // Calculate the kinetic energy of an atom
    this.temp = function() {
        return sqrt(this.dx * this.dx + this.dy * this.dy);
    };
    
    this.colour = function() {
        // Colour based on heat
        return lerpColor(coolColour, hotColour, this.temp()/5);
    };
    
    this.move = function() {
        // Bounce off walls    
        var temp = sqrt((this.dx*this.dx)+(this.dy*this.dy));
        var dtemp = (temp + wallTemp) / (2 * temp);
        
        var newX = this.x + this.dx;
        var newY = this.y + this.dy;
        
        if (newX < this.r) {
            newX = this.r;
            this.dx *= -dtemp;
        } else if (newX > 400 - this.r){
            newX = 400 - this.r;
            this.dx *= -dtemp;
        }
        
        if (newY < this.r) {
            newY = this.r;
            this.dy *= -dtemp;
        } else if (newY > 400 - this.r){
            newY = 400 - this.r;
            this.dy *= -dtemp;
        }
        
        // Bounce on middle wall
        /*
        if (this.x + this.r < 198 && newX  + this.r > 198) {
            if (!(newY > 160 && newY < 240 && temp > meanEnergy)) {
                newX = 197 - this.r;
                this.dx *= -dtemp;   
            }
        } else if (this.x - this.r > 202 && newX - this.r < 202) {
            if (!(newY > 160 && newY < 240 && temp < meanEnergy)) {
                newX = 203 + this.r;
                this.dx *= -dtemp;
            }
        }
        */
        
        if (this.x + this.r < 198 && newX  + this.r > 198) {
            if (temp < meanEnergy) {
                newX = 197 - this.r;
                this.dx *= -dtemp;   
            } else {
                openings.push(
                    {y: this.y + this.dy,
                     count: 16,
                     direction: 1
                    });
            }
        } else if (this.x - this.r > 202 && newX - this.r < 202) {
            if (temp > meanEnergy) {
                newX = 203 + this.r;
                this.dx *= -dtemp;
            } else {
                openings.push(
                    {y: this.y  + this.dy,
                     count: 16,
                     direction: -1
                    });
            }
        }
        
        // Move atom based on its velocity
        this.x = newX;
        this.y = newY;
    };
    
    this.interact = function(that) {
        var dx = this.x - that.x;
        var dy = this.y - that.y;
        
        var dist = sqrt(dx * dx + dy * dy);
        if (dist < REPULSION_LENGTH) {
            var force = REPULSION_STRENGTH*(1-dist/REPULSION_LENGTH);
            var theta = atan2(dy, dx);
            
            this.dx = this.dx + force * cos(theta);
            that.dx = that.dx - force * cos(theta);
            this.dy = this.dy + force * sin(theta);
            that.dy = that.dy - force * sin(theta);
        }
    };
    
    // Test whether mouse is over ball
    this.selected = function() {
        if (abs(mouseX - this.x) < this.r && 
            abs(mouseY - this.y) < this.r) {
                return true;
        }
    };
    
};

// Initialise atoms
var atoms = [];
for (var b = 0; b < numAtoms; b++) {
    var r = atomSize;
    var y = r + round(random() * (400 - 2 * r));
    var x = r + round(random() * (400 - 2 * r));
    atoms.push(new Atom(x, y, r));
}

var UIBoxX1 = 40;
var UIBoxX2 = 240;
var UIBoxY = 8;
var UIBoxW = 120;
var UIBoxH = 70;
var barWidth = round((UIBoxW - 36) / 7);
var graphHeight = UIBoxH - 40;
var graphWidth = 7 * barWidth + 3;
var graphY = UIBoxY + UIBoxH - 15;

var myFont = createFont("Times", 15);

// Draw a information display box
var drawBox = function(x, y, w, h, heading) {
    noStroke();
    fill(50, 50, 50, 50);
    rect(x+2, y+2, w, h, 8);
    fill(255, 255, 255, 230);
    rect(x, y, w, h, 8);
    textFont(myFont, 14);
    fill(10, 10, 10);
    text(heading, x+10, y+16);
};

var drawHistogram = function(energies, x, y, scaleY) {
    noStroke();
    textSize(10);
    
    for (var e = 0; e < energies.length; e++) {
        fill(lerpColor(coolColour, hotColour, (e+0.5) / 5));
        rect(x + 3 + e * barWidth,
        y - scaleY * energies[e],
        barWidth - 1, scaleY * energies[e]);
        fill(10, 10, 10);
        text(e, x + 4 + (e - 0.5) * barWidth, y + 11);
    }
    
    stroke(10, 10, 10);
    line(x, y, x+graphWidth, y);
};

var drawEnergyBox = function() {    
    // Generate histogram
    var total_energy1 = 0;
    var total_energy2 = 0;
    var energies1 = [0,0,0,0,0,0,0];
    var energies2 = [0,0,0,0,0,0,0];
    var maxCount = 1;
    
    for (var i = 0; i < numAtoms; i++) {
        var energy = atoms[i].temp();
        var e = round(energy - 0.5);
        if (e > energies1.length - 1) {
            e = energies1.length - 1;
        }
        if (atoms[i].x < 200) {
            total_energy1 += energy;
            energies1[e]++;
            if (energies1[e] > maxCount) {
                maxCount = energies1[e];
            }
        } else {
            total_energy2 += energy;
            energies2[e]++;
            if (energies2[e] > maxCount) {
                maxCount = energies2[e];
            }
        }
    }
    
    meanEnergy = (total_energy1 + total_energy2) / numAtoms;
    
    var meanEnergy1 = total_energy1 / numAtoms;
    var title = "Mean temp: " + round(10 * meanEnergy1)/10;
    drawBox(UIBoxX1, UIBoxY, UIBoxW, UIBoxH, title);
    
    var meanEnergy2 = total_energy2 / numAtoms;
    title = "Mean temp: " + round(10 * meanEnergy2)/10;
    drawBox(UIBoxX2, UIBoxY, UIBoxW, UIBoxH, title);
        
    var scaleY = graphHeight / maxCount;
    var graphX = UIBoxX1 + 0.5 * (UIBoxW - graphWidth);
    drawHistogram(energies1, graphX, graphY, scaleY);
    
    graphX = UIBoxX2 + 0.5 * (UIBoxW - graphWidth);
    drawHistogram(energies2, graphX, graphY, scaleY);
    
};

var drawContainer = function() {
    noStroke();
    fill(80, 80, 80);
    rect(199, 0, 3, 400);
    //rect(199, 240, 3, 160);
    
    var i, x;
    var size = atomSize*2 + 6;
    
    for (i=0; i<openings.length; i++) {
        var y = openings[i].y;
        
        fill(bgColour);
        rect(199, y - size/2, 3, size);
        fill(80, 80, 80);
         
        if (openings[i].direction === 1) {
            x = 199;
        } else {
            x = 199 - size;
        }
        rect(x, y - size/2 -3, size, 3);
        
        openings[i].count--;
    }
    
    for (i=0; i<openings.length; i++) {
        if (openings[i].count < 1) {
            openings.pop();
            i--;
        } else {
            break;
        }
    }
    
};

var i, j, atom;
var running = true;

var draw = function() {
    background(bgColour);
    drawContainer();

    // Run simulation
    if (running) {
        // Calculate interaction
        for (i = 0; i < numAtoms; i++) {
            for (j = i+1; j < numAtoms; j++) {
                atoms[i].interact(atoms[j]);
            }
        }

        for (i = 0; i < numAtoms; i++) {
            atom = atoms[i];
            atom.move();
        }   
    }
    
    // Draw atoms
    noStroke();
    for (i = 0; i < numAtoms; i++) {
        atom = atoms[i];
        fill(atom.colour());
        ellipse(atom.x, atom.y, atom.r*2, atom.r*2);
    }
    
    drawEnergyBox();
    
};

var keyReleased = function() {
    if (keyCode === 32) {
        // Spacebar toogles pausing 
        if(running) { running = false; }
        else { running = true;  }
    }
};