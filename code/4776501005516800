/********************************************************
 *  
*********************************************************/

var BACKGROUND = color(0, 0, 20);
var SHADE = color(0, 0, 20);
var WHITE = color(255, 255, 255);

var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

var TILE1 = color(180, 170, 100);
var TILE2 = color(210, 220, 170);

var translateX = width - 160;
var translateY = height / 2;

var light = { x: -80, y: -80, z: -80};

/********************************************************
 *      Linear algebra
*********************************************************/

var normaliseVector = function(v) {
    var d = sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
    return { x: v.x / d, y: v.y / d, z: v.z / d};
};

var subtractVectors = function(v1, v2){
    return {
        x: v1.x - v2.x,
        y: v1.y - v2.y,
        z: v1.z - v2.z
    };
};

// Assume vectors are 3D with attributes, x, y, z
var crossProduct = function(v1, v2) {
    return {
        x: v1.y * v2.z - v1.z * v2.y,
        y: v1.z * v2.x - v1.x * v2.z,
        z: v1.x * v2.y - v1.y * v2.x
    };
};

// Assume everything has 3 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
};

// Given at least 3 nodes, find the normal to the plane they define
// Only the first 3 nodes are used.
var normalOfPlane = function(nodes) {
    var edge1 = subtractVectors(nodes[0], nodes[1]);
    var edge2 = subtractVectors(nodes[0], nodes[2]);
    return crossProduct(edge1, edge2);
};

// Calculate whether a vector given by an origin and a direction,
// intersects with a triangle, given by 3 nodes/vectors
// From: http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
var triangleIntersection = function(vOrigin, vDirection, t1, t2, t3) {
    var edge1 = subtractVectors(t2, t1);
    var edge2 = subtractVectors(t3, t1);
    
    // Begin calculating determinant
    var p = crossProduct(vDirection, edge2);
    var det = dotProduct(edge1, p);
  
    // If determinant is near zero, ray lies in plane of triangle
    if (det > -EPSILON && det < EPSILON) { return 0;}
    var inv_det = 1 / det;
    
    // Calculate distance from V1 to ray origin
    var t = subtractVectors(vOrigin, t1);
 
    // Calculate u parameter and test bound
    var u = dotProduct(t, p) * inv_det;
    // The intersection lies outside of the triangle
    if (u < 0 || u > 1) { return 0; }
    
    // Prepare to test v parameter
    var q = crossProduct(t, edge1);
 
    // Calculate v parameter and test bound
    var v = dotProduct(vDirection, q) * inv_det;
    // The intersection lies outside of the triangle
    if (v < 0 || u + v > 1) { return 0; }
 
    var t = dotProduct(edge2, q) * inv_det;
 
    // Ray intersection
    if (t > EPSILON) { return t; }
};

/********************************************************
 *      Rotate functions
*********************************************************/

// Rotate shape around the z-axis
var rotateZ3D = function(theta, nodes) {
    var st = sin(theta);
    var ct = cos(theta);
    var x, y;
    
    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i].x;
        y = nodes[i].y;
        nodes[i].x = ct * x - st * y;
        nodes[i].y = ct * y + st * x;
    }
};

var rotateY3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, z;

    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i].x;
        z = nodes[i].z;
        nodes[i].x =  ct * x + st * z;
        nodes[i].z = -st * x + ct * z;
    }
};

var rotateX3D = function(theta, nodes){
    var ct = cos(theta);
    var st = sin(theta);
    var y, z;
    
    for (var i = 0; i < nodes.length; i++) {
        y = nodes[i].y;
        z = nodes[i].z;
        nodes[i].y = ct * y - st * z;
        nodes[i].z = st * y + ct * z;
    }
};

var rotateFunctions = {
    x : rotateX3D,
    y : rotateY3D,
    z : rotateZ3D,
};

var rotate3D = function(objects, dir, theta) {
    var f = rotateFunctions[dir];
    
    for (var o = 0; o < objects.length; o++) {
        f(theta, objects[o].nodes);
    }
};

/***************************************************
 *      Draw functions
****************************************************/

var simpleDraw = function(objects) {
    pushMatrix();
    translate(translateX, translateY);
    strokeWeight(1);
    
    var f, o, e, obj, nodes, face, col, edge, node0, node1;
    
    for (o = 0; o < objects.length; o++) {
        obj = objects[o];
        nodes = obj.nodes;
        
        if (obj.faces) {
            for (f = 0; f < obj.faces.length; f++) {
                face = obj.faces[f];
                col = obj.colors[f];
                
                fill(col);
                stroke(col);
                
                triangle(nodes[face[0]].x, nodes[face[0]].y,
                         nodes[face[1]].x, nodes[face[1]].y,
                         nodes[face[2]].x, nodes[face[2]].y);
            }
        } else {
            stroke(255, 255, 255, 200);
            
            for (e = 0; e < obj.edges.length; e++) {
                edge = obj.edges[e];
                node0 = nodes[edge[0]];
                node1 = nodes[edge[1]];
                line(node0.x, node0.y, node1.x, node1.y);
            }    
        }
        
    }
    
    // draw light
    fill(255, 255, 255);
    noStroke();
    var n = objects[1].nodes[0];
    ellipse(n.x, n.y, 8, 8);
    
    popMatrix();    
};

// Cast rays with size d by d over a rectangle
// with top left at (x1, y1) and bottom right at (x1 + w, y1 + h)
var simpleRayCast = function(objects, x1, y1, w, h, d) {
    var x2 = x1 + w;
    var y2 = y1 + h;
    var ol = objects.length;
    var dy = 180;
    var r = d/2;
    
    strokeWeight(1);
    
    var camera, direction;
    var obj, nodes, face, col;
    var x, y, o, f, t;
    
    for (x = x1 + r; x < x2; x += d) {
        for (y = y1 + r; y < y2; y += d) {
            // Pixel position
            /*
            noFill();
            stroke(255, 255, 255, 200);
            ellipse(x, y, d - 2, d - 2);
            noStroke();
            */
            
            camera = {
                x: x - translateX,
                y: y - translateY,
                z: 200
            };
            
            direction = { x: 0, y: 0, z: -1 };
            t = -1;
            
            // Check for intersection with objects
            for (o = 0; o < ol; o++) {
                obj = objects[o];
                if (!obj.faces) { continue; }
                nodes = obj.nodes;
                
                for (f = 0; f < obj.faces.length; f++) {
                    face = obj.faces[f];
                    
                    t = triangleIntersection(
                        camera,
                        direction,
                        nodes[face[0]],
                        nodes[face[1]],
                        nodes[face[2]]
                    );
                    
                    if (t) {
                        col = obj.colors[f];
                        break;
                    }
                } 
            }
            
            if (t) {
                //fill(255, 255, 255, 200);
                //ellipse(x, y, d * 0.6, d * 0.6);
                
                // Draw pixel
                fill(col);
                rect(x - 320, y, d, d);
            }    

        }    
    }
    
    noFill();
    stroke(255, 255, 255, 200);
    rect(x1, y1, w, h);
};

// Save raycast positions
var rcx = 0;
var rcy = 0;
var piecemealRayCast = function(objects, x1, y1, w, h, d, n) {
    var x2 = x1 + w;
    var y2 = y1 + h;
    var ol = objects.length;
    var dy = 180;
    var r = d/2;
    
    var camera, direction;
    var obj, nodes, face, col;
    var x, y, o, f, t;
    
    strokeWeight(1);
    for (var i = 0; i < n; i++) {
        x = x1 + r + rcx * d;
        y = y1 + r + rcy * d;
        
        camera = {
            x: x - translateX,
            y: y - translateY,
            z: 200
        };
        
        direction = { x: 0, y: 0, z: -1 };
        t = -1;
        
        // Check for intersection with objects
        for (o = 0; o < ol; o++) {
            obj = objects[o];
            if (!obj.faces) { continue; }
            nodes = obj.nodes;
            
            for (f = 0; f < obj.faces.length; f++) {
                face = obj.faces[f];
                
                t = triangleIntersection(
                    camera,
                    direction,
                    nodes[face[0]],
                    nodes[face[1]],
                    nodes[face[2]]
                );
                
                if (t) {
                    col = obj.colors[f];
                    break;
                }
            } 
        }
        
        if (t) {
            fill(col);
        } else {
            fill(BACKGROUND);
        }
        rect(x - 320, y, d, d);
        
        rcx++;
        if (rcx > w / d) {
            rcx = 0;
            rcy++;
            if (rcy > h / d) {
                rcy = 0;
            }
        }
    }
    
    noFill();
    stroke(255, 255, 255, 200);
    rect(x1, y1, w, h);
};
/***************************************************
 *      Create objects
****************************************************/

// Create a horizontal grid centered at position (x1, y1, z1),
// Each tile is a <size> square.
// There are <width> tiles along and <depth> tiles down.
// Tiles are coloured alternately, c1 and c2
var createGrid = function(x1, y1, z1, size, width, depth, c1, c2) {
    var nodes = [];
    var faces = [];
    var colors = [];
    
    x1 -= size * width / 2;
    z1 -= size * depth / 2;
    
    var w1 = width + 1;
    
    for (var z = 0; z <= depth; z++) {
        for (var x = 0; x <= width; x++) {
            // Add vertex
            nodes.push({ x: x1 + x * size, y: y1, z: z1 + z * size });
            
            if (x < width && z < depth) {
                // Add tile as two triangles
                var n = x + z * w1;
                faces.push([n, n + 1, n + w1 + 1]);
                faces.push([n, n + w1, n + w1 + 1]);
                
                // Alternate tile colours
                var col = [c1, c2][(x + z) % 2];
                colors.push(col);
                colors.push(col);
            }
        }
    }
    
    return { nodes: nodes, faces: faces, colors: colors };
};

// Create a box, centred on (x, y, z),
// with width, w, height, h and depth, d
var createBox = function(x, y, z, w, h, d) {
    w /= 2;
    h /= 2;
    d /= 2;
    return {
        'nodes': [
            { x: x - w, y: y - h, z: z - d },
            { x: x - w, y: y - h, z: z + d },
            { x: x - w, y: y + h, z: z - d },
            { x: x - w, y: y + h, z: z + d },
            { x: x + w, y: y - h, z: z - d },
            { x: x + w, y: y - h, z: z + d },
            { x: x + w, y: y + h, z: z - d },
            { x: x + w, y: y + h, z: z + d }],
            
        'edges' : [
            [0, 1], [1, 3], [3, 2], [2, 0],
            [4, 5], [5, 7], [7, 6], [6, 4],
            [0, 4], [1, 5], [2, 6], [3, 7]]
        };
};

var createTriangle = function(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
    return {
        nodes: [
            { x: x1, y: y1, z: z1 },
            { x: x2, y: y2, z: z2 },
            { x: x3, y: y3, z: z3 }
        ],
        faces: [[0, 1, 2]]
    };
};

// Box representing extent of the scene
var scene = createBox(0, 0, 0, 160, 160, 160);
var grid = createGrid(0, 80, 0, 40, 4, 4, TILE1, TILE2);
var objects = [grid, scene];

rotate3D(objects, 'y', 20);
rotate3D(objects, 'x', 30);

/***************************************************
 *      Initial setup
****************************************************/

background(BACKGROUND);
//simpleDraw();
//simpleRayCast(100, 100, 200, 200, 20);

/***************************************************
 *      Main loop
****************************************************/


draw = function() {
    fill(BACKGROUND);
    noStroke();
    rect(width - 320, 0, 320, height);

    
    simpleDraw(objects);
    piecemealRayCast(objects, 320, 40, 300, 300, 1, 800);
};


/********************************************************
 *      Event handling
*********************************************************/

mousePressed = function() {
};

mouseDragged = function() {
    var d = 0.4;
    var dx = d * (mouseX - pmouseX);
    var dy = d * (mouseY - pmouseY);
    
    for (var o = 0; o < objects.length; o++) {
        if (dx) { rotateY3D(dx, objects[o].nodes); }
        if (dy) { rotateX3D(dy, objects[o].nodes); }   
    }
};

mouseReleased = function() {
};

mouseOut = function() {
    mouseReleased();
};

