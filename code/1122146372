 /**********************************************************
 * Find the number of steps it takes to find the primality
 * of numbers of a given number of bits.
 * e.g. first tests [2], then [3, 4], then [5, 6, 7, 8] and so on
 * Using three different algorithms
 * Find the most number of steps for each group
 * Plot the logarithm of this value against bits.
 ***********************************************************/

// Test numbers from 2^startBits to 2^endBits
var startBits = 1;
var endBits = 16;  // Don't set too high or your broswer will crash

// Graph display parameters
var originX = 55.5;
var originY = 350;
var graphWidth = 320;
var graphHeight = 320;
var colours = [color(200, 40, 20), color(40, 200, 60), color(30, 40, 180)];

/********************************************************
 * Algorithms here
 ********************************************************/

// Trial Division Primality Test (slow method)
var isPrimeA = function(inputNum) {
    var steps = 1;
    var primeCheck = true;
    var upperBound = floor(sqrt(inputNum));

    for(var test = 2; test <= upperBound; test++) {
        steps++;
        if (inputNum % test === 0) {
            primeCheck = false;
        }
    }
    return steps;
 };
 
 // Improved Trial Division (smarter method)
 var isPrimeB = function(inputNum) {
    var steps = 1;
    var primeCheck = true;

    if (inputNum % 2 === 0) {
        return (inputNum === 2);
    }
    var upperBound = floor(sqrt(inputNum));

    for(var test = 3; test <= upperBound; test += 2) {
        steps++;
        if (inputNum % test === 0) {
            return steps;
        }
    }
    return steps;
 };
 
// Improved algorithm from:
// http://www.khanacademy.org/cs/level-3-challenge-final-marc-braulio/1089113994
var isPrimeC = function(inputNum) {
    var upperBound, test, primeCheck;
    var steps = 1;

    // if div by 2 return true (prime) otherwise return false
    if (inputNum % 2 === 0) {
        return (inputNum === 2); 
    }

    // if div by 3 return true (prime) otherwise return false
    if (inputNum % 3 === 0) {
        return (inputNum === 3);
    }

    // get the square root and round
    upperBound = floor(sqrt(inputNum));

    // loop until test <= square root of inputNum
    for (test = 5; test <= upperBound; test += 6) {
        steps++;

        // check if the number is divisable by all odd 
        // numbers that are not divisable by 2 or 3
        if (inputNum % test === 0){
        // found a factor!
        return steps;
        }
        if (inputNum % (test+2) === 0){
        // found a factor!
        return steps; 
        }
    }
    return steps;
};

/********************************************************
* Find the most number of steps required to find the
* primality of all the numbers from startN to endN
 ********************************************************/
var findWorstCase = function(testFunc, startN, endN) {
    var mostSteps = testFunc(startN);
    
    for (var n = startN + 1; n <= endN; n++) {
        var steps = testFunc(n);
        if (steps > mostSteps) {
            mostSteps = steps;
        }
    }
    return mostSteps;
};

/********************************************************
 * Draw the graph
 ********************************************************/

var drawGraph = function(results) {
    var nData = endBits - startBits;
    var scaleX = graphWidth / nData;
    
    // Find maximum values for scaling
    var maxY = log(results[0][nData]);
    for (var j=1; j<results.length; j++){
        if (log(results[j][nData]) > maxY) {
            maxY = log(results[j][nData]);
        }
    }
    maxY = ceil(maxY);
    var scaleY = graphHeight / maxY;

    // Plot results
    strokeWeight(2);
    var x1, x2, y1, y2;
    for (var x = 0; x < nData; x++) {
        x1 = originX + scaleX * x;
        x2 = originX + scaleX * (x + 1);
        
        for (j=0; j<results.length; j++) {
            y1 = originY - scaleY * log(results[j][x]);
            y2 = originY - scaleY * log(results[j][x+1]);
            stroke(colours[j]);
            line(x1, y1, x2, y2);            
        }
    }
    
    // Axes
    stroke(20, 20, 20);
    strokeWeight(1);
    line(originX, originY - graphHeight, originX, originY);
    line(originX, originY, originX + graphWidth, originY);
    
    // Axis labels
    fill(20, 20, 20);
    textSize(10);
    textAlign(CENTER, 1);
    
    // X-axis ticks marks and units
    for (x = 0; x <= nData; x++) {
        x1 = originX + scaleX * x;
        text(x+startBits, x1+1, originY + 14);
        line(x1, originY, x1, originY+3);
    }
    
    // Y-axis ticks marks and units
    textAlign(RIGHT, 1);
    for (var y = 0; y <= maxY; y ++) {
        y1 = originY - scaleY * y;
        text(y, originX - 6, y1+3);
        line(originX, y1, originX-3, y1);
    }
    
    textAlign(CENTER, 1);
    textSize(16);
    text("Bits of input numbers", originX + graphWidth/2, originY+38);
    
    translate(originX - 32, originY - graphHeight/2);
    rotate(270);
    text("log (Worse case time)", 0, 0);
};

/*********************************************** 
 *              Start Tests
************************************************/

var results = [];
var algorithms = [isPrimeA, isPrimeB, isPrimeC];

for (var i=0; i<algorithms.length; i++) {
    results.push([]);
}

var stepCount;
for (var i=startBits; i<=endBits; i++) {
    var endN = pow(2, i);
    var startN = endN - pow(2, i-1) + 1;
    
    for (var j=0; j<algorithms.length; j++) {
        stepCount = findWorstCase(algorithms[j], startN, endN);
        results[j].push(stepCount);
    }
}

drawGraph(results);