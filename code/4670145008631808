/*************************************
 * Your task is to create a scene with
 * exactly 12 different robots. You can
 * robots by combining robot types.
 * Below are some proposed designs and
 * the cost to make them.
 * 
 * You have a budget of $300.
 *
 * To do
 *  - Fix use of pmouse
 *  - Arms
 *  - Fix sizing issues
**************************************/ 
var BACKGROUND = color(230, 240, 255);
var GREY = color(160, 160, 160);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var CS_GREEN = color(67, 122, 57);
var TOOLBAR = color(245, 245, 245);
var TEXTCOL = color(20, 20, 20);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var state = 'options';
var passState = false;
var selected = false;
var robots = [];

var MAX_COST = 300;
var NUM_ROBOTS = 12;
var cost = 0;
var partsSelected = 0;
var transitionTime = 30;

var toolbarX = 5;
var toolbarWidth = 300;

var tick = String.fromCharCode(0x2714);

// Standard size for each part
var partSizes = {
    heads: {
        width: 48,
        height: 48
    },
    arms: {
        width: 90,
        height: 40
    },
    bodies: {
        width: 72,
        height: 72
    }
};

// Each toolbar contains an array of draw functions (currently ugly placeholder images)
var partImages = {
    heads: [
    {
        cost: 25,
        width: 96,
        height: 40,
        image: function(x, y) {
            var w1 = 48;
            var w2 = 40;
            var w3 = 18;
            var h1 = 17;
            var h2 = 20;
            
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(100, 124, 60);
            
            // Main shape
            beginShape();
                curveVertex(x - w1, y + h1);
                curveVertex(x - w1, y + h1);
                curveVertex(x - w2, y - 3);
                curveVertex(x - w3, y - h2);
                curveVertex(x + w3, y - h2);
                curveVertex(x + w2, y - 3);
                curveVertex(x + w1, y + h1);
                curveVertex(x + w1 + 5, y + h1 + 7);
            endShape();
            
            // Base
            fill(200);
            rect(x - w1 - 1, y + h1, w1 * 2 + 1, 3);
            
            // Dividing lines
            line(x - w2, y - 2, x + w2, y - 2);
            line(x - w2 - 2, y + 2, x + w2 + 2, y + 2);
            
            // Visor
            noStroke();
            fill(40);
            quad(x + 11, y + h1, x + 6, y + 8,
                 x + 35, y + 8, x + 40, y + h1);
            
            // Eyes
            fill(255);
            ellipse(x + 18, y + 14, 9, 3);
            ellipse(x + 30, y + 14, 9, 3);
        }
    },
    {
        cost: 50,
        width: 80,
        height: 56,
        image: function(x, y) {
            var w1 = 40;
            var w2 = 35;
            var w3 = 29;
            var h1 = 24;
            var h2 = 29;
            
            // Base
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(200);
            rect(x - w1 - 1, y + h1, w1 * 2 + 1, 3);
            
            // Main part
            fill(64, 110, 168);
            quad(x - w1, y + h1, x + w1, y + h1,
                 x + w2, y - h1, x - w2, y - h1);
            quad(x + w2, y - h1, x - w2, y - h1,
                 x - w3, y - h2, x + w3, y - h2);
            
            // Eye
            stroke(28);
            fill(180);
            ellipse(x + 12, y, 30, 40);
            fill(150);
            ellipse(x + 9, y, 20, 30);
            fill(30);
            noStroke();
            ellipse(x + 5, y, 10, 15);
        }
    },
    {
        cost: 75,
        width: 88,
        height: 96,
        image: function(x, y) {
            var w1 = 44;
            var w2 = 24;
            var h1 = 48;
            var h2 = 40;
            
            // Base
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(140);
            quad(x - w1, y + h1, x + w1, y + h1, x + w2, y + h2, x - w2, y + h2);
            
            // Top
            rect(x - w2, y - h1, w2 * 2 - 1, 10);
            
            // Main head
            fill(110, 100, 150);
            rect(x - w2, y - h1 + 10, w2 * 2 - 1, 78);
            
            // Dividing line
            stroke(50);
            line(x - w2 + 1, y + 12, x + w2 - 1, y + 12);
            
            // Visor
            noStroke();
            fill(40);
            rect(x - 2, y - 16, 22, 12);
            
            // Eyes
            fill(255);
            ellipse(x + 6, y - 10, 4, 3);
            ellipse(x + 12, y - 10, 4, 3);
        }
    },
    {
        cost: 100,
        width: 52,
        height: 88,
        image: function(x, y) {
            var w1 = 44;
            var w2 = 24;
            var h1 = 48;
            var h2 = 40;
            
            // Base
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            
            // Neck
            fill(240, 240, 250);
            rect(x - 15, y + 36, 30, 8);
            rect(x - 12, y - 3, 24, 36);
            
            // Head
            quad(x - 32, y - 18, x + 32, y - 18, x + 24, y - 44, x - 24, y - 44);
            
            // Throat
            quad(x - 10, y - 5, x + 10, y - 5, x + 15, y - 20, x - 15, y - 20);
            
            // Coloured bands
            fill(119, 186, 146);
            rect(x - 15, y + 33, 30, 3);
            rect(x - 12, y - 6, 24, 3);
            
            // Visor
            noStroke();
            fill(40);
            quad(x - 20, y - 44, x + 20, y - 44,
                 x + 22, y - 26, x - 18, y - 26);
            
            // Eyes
            fill(255);
            ellipse(x - 2, y - 37, 4, 4);
            ellipse(x + 4, y - 37, 4, 4);
        }
    },
    {
        cost: 150,
        width: 66,
        height: 90,
        image: function(x, y) {
            var w1 = 30;
            var w2 = 34;
            var h1 = 45;
            var h2 = 15;
            
            // Base
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(180, 0, 0);
            quad(x - w1, y + h1, x + w1, y + h1, x + w2, y + h2, x - w2, y + h2);
            fill(220, 80, 80);
            quad(x + w2, y + h2, x - w2, y + h2, x - w1, y - h1, x + w1, y - h1);
            
            stroke(220, 80, 80);
            line(x - w2 + 1, y + h2, x + w2 - 1, y + h2);
            
            stroke(28);
            fill(200);
            var w3 = 20;
            var w4 = 22;
            quad(x - w3, y - h1, x + w3, y - h1, x + w4, y - 5, x - w4, y - 5);
            
            quad(x - w3, y + h1, x + w3, y + h1,
                 x + w4, y + h2 + 1, x - w4, y + h2 + 1);
            
            fill(0);
            quad(x - w3 - 1, y + 30, x + w3 + 1, y + 30,
                 x + w4, y + h2 + 2, x - w4, y + h2 + 2);
                 
            // Eyes
            fill(255);
            ellipse(x - 4, y + 22, 5, 5);
            ellipse(x + 4, y + 22, 5, 5);
        }
    }
    ],
    arms: [
    {
        cost: 10,
        width: 80,
        height: 42,
        image: function(x, y) {
            x -= 40;
            y += 21;
            
            strokeWeight(1);
            stroke(28);
            fill(160);
            
            // First bar
            quad(x, y - 7, x, y + 7, x + 34, y - 27, x + 30, y - 37);
            
            // Second bar
            fill(230);
            quad(x + 26, y - 33, x + 30, y - 37, x + 67, y - 4, x + 60, y - 4);
            
            // Highlight
            noStroke();
            quad(x + 1, y - 7, x + 1, y - 3, x + 30, y - 33, x + 30, y - 37);
            
            // Tool base
            stroke(28);
            rect(x + 52, y - 5, 24, 9, 2);
            rect(x + 49, y - 5, 3, 9, 2);
            rect(x + 45, y - 2, 4, 4);
            
            // Shadow
            noStroke();
            fill(160);
            rect(x + 53, y, 23, 4, 1);
            
            // Tool
            fill(0);
            stroke(28);
            arc(x + 76, y, 8, 8, -90, 90);
        },
    },
    {
        cost: 20,
        width: 80,
        height: 42,
        image: function(x, y) {
            x -= 40;
            y += 21;
            
            strokeWeight(1);
            stroke(28);
            fill(160);
            
            // First bar
            quad(x, y - 7, x, y + 7, x + 34, y - 27, x + 30, y - 37);
            
            // Second bar
            fill(230);
            quad(x + 26, y - 33, x + 30, y - 37, x + 67, y - 4, x + 60, y - 4);
            
            // Highlight
            noStroke();
            quad(x + 1, y - 7, x + 1, y - 3, x + 30, y - 33, x + 30, y - 37);
            
            // Tool base
            stroke(28);
            rect(x + 52, y - 5, 24, 9, 2);
            rect(x + 49, y - 5, 3, 9, 2);
            rect(x + 45, y - 2, 4, 4);
            
            // Tool
            fill(230);
            quad(x + 76, y - 4, x + 76, y + 4, x + 86, y + 14, x + 86, y - 14);
            
            // Shadow
            noStroke();
            fill(180);
            rect(x + 53, y, 23, 4, 1);
            quad(x + 76, y + 4, x + 76, y, x + 86, y + 5, x + 86, y + 14);
            
            stroke(28);
            noFill();
            quad(x + 76, y - 4, x + 76, y + 4, x + 86, y + 14, x + 86, y - 14);
        },
    },
    {
        cost: 30,
        width: 80,
        height: 42,
        image: function(x, y) {
            x -= 40;
            y += 21;
            
            strokeWeight(1);
            stroke(28);
            fill(160);
            
            // First bar
            quad(x, y - 7, x, y + 7, x + 34, y - 27, x + 30, y - 37);
            
            // Second bar
            fill(230);
            quad(x + 26, y - 33, x + 30, y - 37, x + 67, y - 4, x + 60, y - 4);
            
            // Highlight
            noStroke();
            quad(x + 1, y - 7, x + 1, y - 3, x + 30, y - 33, x + 30, y - 37);
            
            // Tool base
            stroke(28);
            rect(x + 52, y - 5, 24, 9, 2);
            rect(x + 49, y - 5, 3, 9, 2);
            rect(x + 45, y - 2, 4, 4);
            
            // Shadow
            noStroke();
            fill(180);
            rect(x + 53, y, 23, 4, 1);
            
            // Claw
            var x1 = x + 76;
            stroke(28);
            beginShape();
                vertex(x1, y);
                vertex(x1 + 10, y - 11);
                vertex(x1 + 24, y - 11);
                vertex(x1 + 32, y - 2);
                vertex(x1 + 26, y - 2);
                vertex(x1 + 22, y - 6);
                vertex(x1 + 12, y - 6);
                vertex(x1 + 6, y);
                vertex(x1 + 12, y + 6);
                vertex(x1 + 22, y + 6);
                vertex(x1 + 26, y + 2);
                vertex(x1 + 32, y + 2);
                vertex(x1 + 24, y + 11);
                vertex(x1 + 10, y + 11);
            endShape(CLOSE);
            
            fill(220);
            ellipse(x1 + 3, y, 8, 8);
        },
    }
    ],
    bodies: [
    {
        cost: 30,
        width: 120,
        height: 100,
        headWidth: 80,
        armX: 29,
        armY: -20,
        image: function(x, y) {
            var w1 = 40;
            var w2 = 120;
            var x1 = x - w2 / 2;
            var x2 = x + w2 / 2;
            var y1 = y - 50;
            var y2 = y + 10;
            
            // Main body
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(64, 110, 168);
            
            quad(x - w1, y1, x + w1, y1, x2, y2 - 1, x1, y2 - 1);
            arc(x, y2 + 1, w2, 40, 0, 180);
            
            // Join
            fill(140);
            rect(x1 - 1, y2 - 1, w2 + 1, 3);

            // Panel
            fill(200);
            stroke(28);
            quad(x + 16, y - 40, x + 32, y - 40, x + 42, y, x + 26, y);
        },
    },
    {
        cost: 60,
        width: 150,
        height: 110,
        headWidth: 108,
        armX: 40,
        armY: -17,
        image: function(x, y) {
            var w1 = 54;
            var w2 = 75;
            var w3 = 64;
            var h1 = 55;
            var h2 = 21;
            var h3 = 31;
            
            // Main
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(200, 120, 40);
            quad(x - w1, y - h1, x + w1, y - h1, x + w2, y + h2, x - w2, y + h2);
            
            // Base
            fill(200, 120, 40);
            arc(x, y + h2, 136, 58, 0, 180);
            fill(140);
            quad(x - w2, y + h2, x + w2, y + h2, x + w3, y + h3, x - w3, y + h3);
            
            // Panel
            var y1 = y - h1 + 8;
            var y2 = y + h2 - 8;
            fill(200);
            stroke(28);
            quad(x + 24, y1, x + 44, y1, x + 58, y2, x + 34, y2);
        },
    },
    {
        cost: 90,
        width: 200,
        height: 144,
        headWidth: 90,
        armX: 55,
        armY: -22,
        image: function(x, y) {
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(110, 100, 150);
            
            quad(x - 45, y - 72, x + 45, y - 72,
                 x + 70, y - 60, x - 70, y - 60);
            quad(x + 70, y - 60, x - 70, y - 60,
                 x - 100, y + 15, x + 100, y + 15);
            quad(x - 100, y + 17, x + 100, y + 17,
                 x + 58, y + 70, x - 58, y + 70);
            
            // Base
            fill(140);
            rect(x - 58, y + 68, 115, 4);
            
            // Join
            rect(x - 101, y + 14, 201, 3);
            
            // Panel
            fill(200);
            quad(x + 36, y - 50, x + 56, y - 50,
                 x + 74, y + 5, x + 54, y + 5);
            
        },
    },
    {
        cost: 120,
        width: 96,
        height: 162,
        headWidth: 96,
        armX: 22,
        armY: -26,
        image: function(x, y) {
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(100, 124, 60);
            
            quad(x - 48, y - 81, x + 48, y - 81,
                 x + 33, y - 15, x - 33, y - 15);
            quad(x + 33, y - 15, x - 33, y - 15,
                 x - 18, y + 3, x + 18, y + 3);
            rect(x - 18, y + 3, 35, 66);
            quad(x - 18, y + 69, x + 18, y + 69,
                 x + 12, y + 81, x - 12, y + 81);
            
            stroke(50);
            fill(160);
            rect(x - 18, y + 2, 35, 5);
            
            stroke(160);
            line(x - 16, y + 70, x + 17 - 1, y + 70);
            
            // Panel
            fill(200);
            stroke(28);
            quad(x + 18, y - 74, x + 36, y - 74, x + 24, y - 21, x + 9, y - 21);
            
        },
    },
    {
        cost: 150,
        width: 172,
        height: 230,
        headWidth: 120,
        armX: 40,
        armY: -20,
        image: function(x, y) {
            var w1 = 60;
            var w2 = 86;
            var h1 = 115;
            var h2 = 55;
            
            // Main
            strokeJoin(ROUND);
            strokeWeight(1);
            stroke(28);
            fill(160);
            
            quad(x - w1, y - h1, x + w1, y - h1, x + w2, y + h2, x - w2, y + h2);
            
            fill(180, 0, 0);
            arc(x, y + h2, w2 * 2, 120, 0, 180);
            
            stroke(40);
            line(x - 74, y + h2 + 29, x + 74, y + h2 + 29);
            line(x - 72, y + h2 + 32, x + 72, y + h2 + 32);
            
            // Panel
            var y1 = y - 100;
            var y2 = y + h2 - 16;
            fill(200);
            stroke(28);
            quad(x + 24, y1, x + 44, y1, x + 58, y2, x + 34, y2);
        },
    }
    ]
};

var removeItemFromArray = function(item, arr) {
    var i = arr.indexOf(item);
    if (i !== -1) {
        arr.splice(i, 1);
    }
    return item;
};

var getScale = function(y) {
    return 500 / (1700 - y * 3);
};

var sortByY = function(a, b) {
    return a.y - b.y;
};

/*************************************
 *      Robot
 *  A head, body and arms
**************************************/ 
{
var Robot = function(x, y, head, arms, body) {
    this.x = x;
    this.y = y;
    this.head = partImages.heads[head];
    this.arms = partImages.arms[arms];
    this.body = partImages.bodies[body];
};

Robot.prototype.draw = function(s) {
    s = s || getScale(this.y);
    s *= 0.5;
    
    pushMatrix();
    translate(this.x, this.y);
    scale(s);
    
    this.body.image(0, 0);
    
    var y = -(this.body.height + this.head.height) / 2;
    
    this.head.image(0, y);
    
    this.arms.image(
        this.body.armX + 40,
        this.body.armY - 21);

    popMatrix();
    
};

Robot.prototype.mouseOver = function() {
    var s = getScale(this.y);
    var dx = partSizes.arms.width * s * 0.5;
    var dy = partSizes.bodies.height * s * 0.5;
    var dy2 = partSizes.heads.height * s * 0.8;
    
    return mouseX >= this.x - dx && mouseX <= this.x + dx &&
           mouseY >= this.y - dy - dy2 && mouseY <= this.y + dy;
};

Robot.prototype.overlap = function(that) {
    var s1 = getScale(this.y);
    var s2 = getScale(that.y);
    var w1 = 50 * s1;
    var w2 = 50 * s2;
    var h1 = 30 * s1;
    var h2 = 30 * s2;
    
    return this.x + w1 >= that.x - w2 &&
           this.x - w1 <= that.x + w2 &&
           this.y + h1 >= that.y - h2 &&
           this.y - h1 <= that.y + h2;
};

Robot.prototype.move = function(dx, dy) {
    this.y = constrain(this.y + dy, 60, height - 50);
    var s = getScale(this.y);
    this.x = constrain(this.x + dx, 50 * s, width - 50 * s);
};

// Move robot to nice position for making a scene
Robot.prototype.transit = function(i) {
    var targetX = round(((i % 6) + 0.5) * width / 6);
    var targetY = round(height - 100 + floor(i / 6) * 65);
    var speed = 5;
    
    for (var s = 0; s < speed; s++) {
        if (round(this.x) > targetX) {
            this.x--;
        } else if (round(this.x) < targetX) {
            this.x++;
        } else {
            break;
        }
    }
    
    for (var s = 0; s < speed; s++) {
        if (round(this.y) > targetY) {
            this.y--;
        } else if (round(this.y) < targetY) {
            this.y++;
        } else {
            break;
        }
    }
};

// Add all combinations of heads arms and bodies to the scene
var updateRobots = function(heads, arms, bodies) {
    var combinations = heads.length * arms.length * bodies.length;
    robots = [];
    
    if (combinations === 0) {
        return;
    }
    
    var startX = toolbarX + toolbarWidth + 40;
    var x = startX;
    var y = 150;
    var dx = 80;
    var dy = min(50, 210 / (ceil(combinations / 4) - 1));
    var row = 0;
    
    for (var i = 0; i < heads.length; i++) {
        var head = heads[i];
        
        for (var j = 0; j < arms.length; j++) {
            var arm = arms[j];
            
            for (var k = 0; k < bodies.length; k++) {
                var body = bodies[k];

                robots.push(new Robot(x, y, head, arm, body));
                x += dx;
                if (x > width - 60) {
                    row++;
                    x = startX;
                    if (dy < 80) {
                        x += (row % 2 - 0.5) * 50;    
                    }
                    y += dy;
                }
            }
        }
    }
};
}
/*************************************
 *      PartsBin object
 *  A collection of parts which can be selected
 *************************************/
{
var PartsBin = function(x, y, width, name, parts) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.name = name;
    this.nameUpper = this.name.toUpperCase();
    
    this.scale = 0.3;
    var maxHeight = 0;
    for (var i = 0; i < parts.length; i++) {
        maxHeight = max(maxHeight, parts[i].height * this.scale);
    }
    
    this.height = maxHeight + 40;
    this.dx = (toolbarWidth - 25) / parts.length;
    
    // Add array of part draw functions
    this.parts = [];
    this.costs = [];
    this.selected = [];
    
    for (var i = 0; i < parts.length; i++) {
        this.parts.push(parts[i].image);
        this.costs.push(parts[i].cost);
    }

};

PartsBin.prototype.draw = function() {
    noStroke();
    fill(0, 0, 0, 60);
    rect(this.x + 2, this.y + 3, this.width, this.height, 8);
    
    if (this.mouseOver()) {
        fill(253);
    } else {
        fill(TOOLBAR);   
    }
    rect(this.x, this.y, this.width, this.height, 8);


    // Label
    fill(20);
    textSize(15);
    textAlign(CENTER, TOP);
    pushMatrix();
    translate(this.x + 2, this.y + this.height / 2);
    rotate(270);
    text(this.nameUpper, 0, 0);
    popMatrix();
    
    var x = this.x + 25;
    var y = this.y + this.height * 0.42;
    
    // Parts
    for (var i = 0; i < this.parts.length; i++) {
        if (this.mouseOverPart(i)) {
            noStroke();
            fill(100, 225, 100);
            rect(x, this.y + 1, this.dx - 1, this.height - 2, 8);
        }
        
        x += this.dx * 0.5;
        
        pushMatrix();
        translate(x, y);
        scale(this.scale);
        
        this.parts[i](0, 0, this.partWidth, this.partHeight);
        popMatrix();
        
        // Price
        fill(20);
        textSize(16);
        textAlign(CENTER, CENTER);
        text("$" + this.costs[i], x, this.y + this.height - 10);
        
        // Draw tick
        if (this.selected.indexOf(i) !== -1) {
            textAlign(CENTER, CENTER);
            textSize(36);
            fill(0, 200, 0);
            text(tick, x, y);   
        }
        x += this.dx * 0.5;
    }
    
};

PartsBin.prototype.getCost = function() {
    var totalCost = 0;
    for (var i = 0; i < this.selected.length; i++) {
        totalCost += this.costs[this.selected[i]];
    }
    return totalCost;
};

PartsBin.prototype.mouseOver = function() {
    return mouseX >= this.x && mouseX <= this.x + this.width &&
           mouseY >= this.y && mouseY <= this.y + this.height;
};

PartsBin.prototype.mouseOverPart = function(i) {
    var x = this.x + 25 + i * this.dx;
    return mouseX >= x && mouseX <= x + this.dx - 1 &&
           mouseY >= this.y && mouseY <= this.y + this.height + 9;
};

PartsBin.prototype.select = function() {
    for (var i = 0; i < this.parts.length; i++) {
        if (this.mouseOverPart(i)) {
            var index = this.selected.indexOf(i);
            if (index === -1) {
                this.selected.push(i);    
            } else {
                this.selected.splice(index, 1);   
            }
            return true;
        }
    }
};
}
/**************************************
 *  Generic GUI component from which
 * other elements inherit
 * 
 * The default object is basically a
 * button
***************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};
}
/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var FilledButtonDraw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));

    stroke(this.highlightCol);
    strokeWeight(1);
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function(col) {
    this.draw = FilledButtonDraw.bind(this);
    this.defaultCol = color(255, 255, 255);
    this.highlightCol = col;
};
}
/*************************************
 *      Initialising objects
**************************************/
var nextButton;

var makeToolbars = function() {
    var x = toolbarX;
    var y = 90;
    var w = toolbarWidth;
    var bins = [];
    
    for (var part in partImages) {
        var parts = partImages[part];
        var bin = new PartsBin(x, y, w, part, parts);
        bins.push(bin);
        y += bin.height + 8;
    }
    
    return bins;
};

var bins = makeToolbars();

var makeScene = function() {
    state = 'transition';
    var robot, x, y;
    
    for (var i = 0; i < robots.length; i++) {
        robot = robots[i];
        if (i < 7) {
            x = round((i + 0.5) * width / 7);
            y = height - 150;
        } else {
            x = round((i - 6.5) * width / 5);
            y = height - 60;
        }
        robot.dx = (x - robot.x) / transitionTime;
        robot.dy = (y - robot.y) / transitionTime;
    }
    nextButton.showing = false;
};

var restart = function() {
    Program.restart();
};

nextButton = new Button(200, height - 34, 280, 24, "", makeScene);
nextButton.makeFilled(CS_GREEN);

var clearButton = new Button(width - 100, height - 34, 80, 24, "Restart", restart);
clearButton.makeFilled(color(200, 0, 0));
clearButton.showing = false;

/*************************************
 *      Draw functions
**************************************/
var makeStars = function(n) {
    var stars = [];
    for (var i = 0; i < n; i++) {
        var x = floor(width * random());
        var y = floor(160 * random());
        stars.push([x, y]);
    }
    return stars;
};
var stars = makeStars(width / 15);

var SKY1 = color(40, 70, 160);
var SKY2 = color(235, 220, 205);
var LAND1 = color(225, 165, 130);
var LAND2 = color(210, 140, 120);
var LAND3 = color(200, 160, 130);
var ROAD = color(185, 115, 85);

var drawBackground = function() {
    // Sky
    strokeWeight(1);
    var h = 140;
    for (var i = 0; i < h; i++) {
        stroke(lerpColor(SKY1, SKY2, i / h));
        line(0, i, width, i + 1);
    }
    
    // Stars
    stroke(255);
    for (var i = 0; i < stars.length; i++) {
        point(stars[i][0], stars[i][1]);
    }

    var x = 0;
    var y = h;
    noStroke();
    fill(LAND2);
    rect(x, y, width, height);
    
    var d = [[0, 0], [0, 0], [50, -70], [100, -30], [100, 40], [80, -20], [100, 20], [120, -40], [100, 50], [100, 30], [80, -60], [80, 80], [40, 0]];
    var stretch = width / 900;
    
    fill(LAND3);
    beginShape();
    for (var i = 0; i < d.length; i++) {
        x += d[i][0] * stretch;
        y += d[i][1];
        curveVertex(x, y);
    }
    endShape(CLOSE);

    var x = 0;
    var y = h + 10;

    d = [[0, 0], [0, 0], [0, -60], [40, -30], [80, 70], [80, -30], [80, 0], [120, -40], [80, 50], [120, -10], [80, 30], [80, -15], [80, 25], [80, -10], [80, 20]];
    
    fill(LAND1);
    beginShape();
    for (var i = 0; i < d.length; i++) {
        x += d[i][0] * stretch;
        y += d[i][1];
        curveVertex(x, y);
    }
    endShape(CLOSE);

    // Rock
    var x = width - 200;
    var y = height - 100;
    beginShape();
    vertex(x + 120, y);
    vertex(x, y);
    curveVertex(x + 20, y - 40);
    curveVertex(x + 70, y - 50);
    curveVertex(x + 90, y - 70);
    curveVertex(x + 120, y - 60);
    curveVertex(x + 140, y - 30);
    curveVertex(x + 160, y);
    endShape(CLOSE);

    // Road
    fill(ROAD);
    quad(width / 2 - 180, height, width / 2 - 40, height,
         width / 2 + 12, h + 10, width / 2 - 12, h + 10);
    
    fill(0);
    arc(width / 2, h + 10, 24, 36, 181, 360);

};
var drawIntroduction = function() {
    strokeWeight(3);
    stroke(20, 60, 160);
    fill(255);
    
    var w = 380;
    var x = width / 2;
    var y = 10;
    rect(x - w / 2, y, w, 66, 20);
    
    fill(20);
    textSize(16);
    textAlign(CENTER, TOP);
    textLeading(18);
    
    text("Select some heads, arms, and bodies so that\ncombining them in all possible ways creates a crowd\nof exactly " + NUM_ROBOTS + " robots. You have a budget of $" + MAX_COST + ".", x, y + 6);

};

var updateButton = function() {
    passState = false;
    
    if (bins[0].selected.length === 0) {
        nextButton.name = "You need to select at least one head!";
    } else if (bins[1].selected.length === 0) {
        nextButton.name = "You need to select at least one set of arms!";
    } else if (bins[2].selected.length === 0) {
        nextButton.name = "You need to select at least one body!";
    } else if (robots.length < NUM_ROBOTS) {
        var txt = "Only " + robots.length + " combination";
        txt += (robots.length === 1 ? "" : "s");
        txt += " are possible!";
        nextButton.name = txt;
    } else if (robots.length > NUM_ROBOTS) {
        nextButton.name = "Too many combinations (" +  robots.length + ")!";
    }  else if (cost > MAX_COST) {
        nextButton.name = "Too expensive!";
    } else {
        passState = true;
        nextButton.name = "Congratulations! Click to continue.";
    }
    
    if (passState) {
        nextButton.strokeColour = color(20, 60, 160);
    } else {
        nextButton.strokeColour = color(255, 30, 20);
    }

};

// Write information about the current selection
var drawSelectionInfo = function() {
    fill(20);
    textSize(16);
    textAlign(LEFT, BASELINE);
    
    var x = toolbarX + 3;
    var y = height - 12;
    var txt = partsSelected + " part";
    txt += (partsSelected === 1 ? '' : 's');
    txt += " selected for a cost of ";

    text(txt, x, y);
    x += textWidth(txt);
    
    if (cost > MAX_COST) {
        fill(255, 0, 0);
    }
    
    txt = "$" + cost; 
    text(txt, x, y);
    x += textWidth(txt);
    
    fill(20);
    txt = ". "; 
    text(txt, x, y);
    x += textWidth(txt);
    
    if (robots.length === 12) {
        fill(20);
    } else {
        fill(255, 0, 0);
    }
    
    txt = robots.length + " robot";
    txt += (robots.length === 1 ? '.' : 's');
    
    text(txt + " made.", x, y);
    
};

var drawSelectionPage = function() {
    for (var i = 0; i < bins.length; i++) {
        bins[i].draw();
    }
    
    drawIntroduction();
    updateButton();
    drawSelectionInfo();
    
    if (passState) {
        nextButton.draw();
    }
};

/*************************************
 *      Main loop
**************************************/

draw = function() {
    drawBackground();
    
    var s;
    if (state === 'options') {
        drawSelectionPage();
        s = 0.8;
    } else if (state === 'transition') {
        s = 0.8;
        for (var i = 0; i < robots.length; i++) {
            robots[i].move(robots[i].dx, robots[i].dy);
        }
        transitionTime--;
        if (transitionTime === 0) {
            state = 'scene';
        }
    } else {
        clearButton.showing = true;
        strokeWeight(3);
        stroke(20, 60, 160);
        fill(TOOLBAR);
        
        var w = 320;
        var x = width / 2;
        rect(x - w / 2, 5, w, 42, 20);
        
        fill(20);
        textSize(14);
        textAlign(CENTER, TOP);
        text("Create a scene with your robots.\nMove on when you are happy with the scene.", x, 11);
    }
    
    for (var i = 0; i < robots.length; i++) {
        robots[i].draw(s);
    }
    clearButton.draw();
};

/*************************************
 *      Event handling
**************************************/

mousePressed = function() {
    for (var i = 0; i < robots.length; i++) {
        if (robots[i].mouseOver()) {
            selected = robots[i];
        }
    }
    
    nextButton.mousePressed();
    clearButton.mousePressed();
};

mouseDragged = function() {
    if (state === 'scene' && selected) {
        selected.move(mouseX - pmouseX, mouseY - pmouseY);
        robots.sort(sortByY);
    }
};

mouseReleased = function() {
    if (state === 'options') {
        // Toolbar interactions
        for (var i = 0; i < bins.length; i++) {
            if (bins[i].select()) {
                var heads = this.bins[0].selected;
                var arms = this.bins[1].selected;
                var bodies = this.bins[2].selected;
                updateRobots(heads, arms, bodies);
                
                partsSelected = heads.length +
                                arms.length +
                                bodies.length;

                cost = this.bins[0].getCost() +
                       this.bins[1].getCost() +
                       this.bins[2].getCost();
                
                updateRobots(heads, arms, bodies);
                break;
            }
        }
        if (passState) {
            nextButton.mouseReleased();
        }
    }
    
    clearButton.mouseReleased();
    selected = false;
};
