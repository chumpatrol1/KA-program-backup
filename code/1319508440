/**************************************************************
 * Draws a box a position (x, y) if x and y are relative primes,
 * where y <= x.
 * 
 * Mouse over the grid to highlight a column. The number of
 * boxes in each column is phi(x).
 * Notice that prime numbers have full columns of boxes (up to 
 * x - 1).
 * 
 * The pink line is the rolling mean of phi(x).
***************************************************************/
// Try reducing the boxSize (minimum value: 2)
var boxSize = 10;
var maxN = (400 - 30) / boxSize;
var gapBetweenAxisValues = ceil(maxN/15);
var drawX = 7;
var drawY = 374;
var invert = false;     // Draw boxes in the gaps

var boxColour = color(86, 193, 247);
var meanColour = color(255, 0, 153, 220);
var overlayColour = color(255, 255, 255);

var factorList, relativePrimes, meanPhi;

var findFactors = function(n) {
    // Return a list of factors, not including 1
    var factors = [];
    
    for (var i=2; i <= sqrt(n); i++){
        if (n % i === 0) {
            factors.push(i);
            var j = round(n/i);
            if (j !== i) { factors.push(j); }
        }
    }
    
    factors.push(n);    // best to add this to the end
    return factors;
};

var makeLookUpTable = function(func, n) {
    // Return an array of length n, in which each index, i,
    // contains func(i+1).
    // Used to build look-up tables of factors and relative primes.
    
    var arr = [];
    for (var i=1; i <= n; i++) {
        arr.push(func(i));
    }
    return arr;
};

var hasCommonFactors = function(arr1, arr2) {
    // Given two arrays, return true if they share at
    // least one common element
    
    for (var i=0; i<arr1.length; i++) {
        for (var j=0; j<arr2.length; j++) {
            if (arr1[i] === arr2[j]) { return true; }
        }
    }
    return false;
};

var findRelativePrimes = function(n) {
    // Return a list of numbers <= n which for which gcd
    // of each number with n = 1.
    // The length of this list will be phi(n).
    
    var relPrimes = [];
    var factorsOfN = factorList[n-1];
    
    for (var i=1; i<=n; i++) {
        if (!hasCommonFactors(factorsOfN, factorList[i-1])) {
            relPrimes.push(i);   
        }
    }
    
    return relPrimes;
};

var findRollingMean = function(arr) {
    // Return an array where the index i, gives the
    // mean of phi(n) for 1 >= n >= i.
    
    var rollingMean = [1];
    for (var i=1; i<arr.length; i++) {
        var x = (rollingMean[i-1] * i + arr[i].length) / (i+1);
        rollingMean.push(x);
    }
    return rollingMean;
};

// Set up look-up tables
factorList = makeLookUpTable(findFactors, maxN);
relativePrimes = makeLookUpTable(findRelativePrimes, maxN);
relativePrimes[0] = [1];
meanPhi = findRollingMean(relativePrimes);

var drawRelativePrimes = function(x, y, size) {
    var n, i, bx;
    var width = relativePrimes.length * size + 4;
    
    var highlightX = round(0.5 + (mouseX - drawX) / boxSize);
    var highlightY = round(0.5 + (drawY - mouseY) / boxSize);
    
    stroke(250, 250, 250);
    strokeWeight(2);
    line(x, y, x+width, y);
    
    noStroke();
    textSize(10);
    
    for (n=0; n<relativePrimes.length; n++) {
        var primes = relativePrimes[n];
        bx = x + n * size + 2;
        
        // Write labels for primes
        if (n % gapBetweenAxisValues === 0) {
            fill(255, 255, 255);
            
            // X-axis
            textAlign(CENTER, TOP);
            text(n+1, bx+size/2, y+2);
            
            // Y-axis
            textAlign(LEFT, CENTER);
            text(n+1, x+width+1, y-(n+0.5)*size - 2);
        }
        
        if (highlightX === n+1) {
            fill(overlayColour);
        } else {
            fill(boxColour);
        }
        
        if (!invert) {
            for (i=0; i<primes.length; i++){
                rect(bx+2, y-primes[i]*size, size-1, size-1, 2);
            }
        } else {
            var j = 0;
            for (i=1; i<=n; i++) {
                if (i !== primes[j]) {
                    rect(bx+2, y-i*size, size-1, size-1, 2);
                } else {
                    j++;
                }
            }
        }

    }
    
    // Rolling Mean
    strokeWeight(4);
    stroke(meanColour);
    var y1 = y - (meanPhi[0] - 0.5) * size;
    var y2;
    for (n=1; n<meanPhi.length; n++) {
        y2 = y - (meanPhi[n] - 0.5) * size;
        bx = x + 2 + (n - 0.5) * size;
        line(bx, y1, bx + size, y2);
        y1 = y2;
    }
    
    textAlign(CENTER, BASELINE);
    fill(255, 255, 255);
    noStroke();
    textSize(13);
    text("x", 200, 396);
    
    if (highlightX !== undefined && 
        highlightX > 0 && highlightX <= maxN) {
        n = highlightX - 1;
    } else {
        n = 0;
    }
    
    var phi = relativePrimes[n].length;
    
    // X-axis
    fill(0,0,0);
    bx = x + (n+0.5) * size + 2;
    rect(bx-12, y+2, 24, 10, 4);    // Black background
    fill(255, 255, 255);
    textAlign(CENTER, TOP);
    text(n+1, bx, y+2);
    
    // Top label
    textAlign(LEFT, TOP);
    textSize(18);
    text("φ(" + (n+1) + ") = " + phi, 16, 13);
    text("φ(" + (n+1) + ") / " + (n+1) + " = " + round(100*phi/(n+1))/100, 16, 37);
};

var draw = function() {
    background(0, 0, 0);
    drawRelativePrimes(drawX, drawY, boxSize);
};