var points = [[100, 120], [150, 120], [200, 80], [250, 150], [200, 250], [100, 200]];

var drawShape = function(points) {
    noFill();
    stroke(50);
    
    beginShape();
    for (var i = points.length; i--;) {
        vertex(points[i][0], points[i][1]);
    }
    endShape(CLOSE);
};

var fillPixels = function(points) {
    var n = points.length;
    if (!n) { return; }
    // Find bounding box
    var minX = points[0][0];
    var minY = points[0][1];
    var maxX = minX;
    var maxY = minY;
    
    var x, y, x2, y2, i, p, c, d, d2, p1, p2, s, r, g, b, mean;
    
    for (i = 1; i < n; i++) {
        p = points[i];
        if (p[0] < minX) { minX = p[0]; }
        else if (p[0] > maxX) { maxX = p[0]; }
        if (p[1] < minY) { minY = p[1]; }
        else if (p[1] > maxY) { maxY = p[1]; }
    }
    
    // Get edges as vectors
    var deltas = [];
    var grads = [];
    var dists = [];
    p2 = points[n - 1];
    
    var dx, dy;
    for (i = 0; i < n; i++) {
        p1 = points[i];
        dx = p1[0] - p2[0];
        dy = p1[1] - p2[1];
        deltas.push([dx, dy]);
        grads.push(dx / dy);
        dists.push([dx * dx + dy * dy]);
        p2 = p1;
    }
    
    loadPixels();
    p = this.imageData.data;
    
    for (x = minX; x <= maxX; x++) {
        for (y = minY; y <= maxY; y++) {
            
            // Test whether point is in box
            c = false;
            p2 = points[n - 1];

            for (i = 0; i < n; i++) {
                p1 = points[i];
                
                if (((p1[1] > y) !== (p2[1] > y)) &&
                    (x < (y - p1[1]) * grads[i] + p1[0])) {
                   c = !c;
                }
                
                p2 = p1;
            }
            
            if (!c) { continue; }
            
            // Find distance to each edge
            var minD = 9999999999;
            
            for (i = 0; i < n; i++) {
                // Dot product of edge with line from (x, y) to edge vertex
                p1 = points[i];
                p2 = deltas[i];
                d = ((p1[0] - x) * p2[0] + (p1[1] - y) * p2[1]) / dists[i];
                
                //if (d < 0) { d = 0; } else if (d > 1) { d = 1; }
                
                if (d >= 0 && d <= 1) {
                    // Difference between (x, y) and projection onto the line
                    dx = x - (p1[0] - p2[0] * d);
                    dy = y - (p1[1] - p2[1] * d);
                    
                    // Squared distance from (x, y) and projection onto the line
                    d = dx * dx + dy * dy;
                    if (d < minD) {
                        minD = d;
                    }
                }
            }

            i = x + y * width << 2; // Pixel index
            if (minD < 400) {
                //p[i] = 255 - 16 * sqrt(minD);
                p[i + 1] = 255 - minD * 255 / 400;
            } else {
                p[i + 1] = 0;
            }
        }
    }
    
    updatePixels();
};

var expandPoints = function(points, amount) {
    // Find center
    var n = points.length;
    var x = 0;
    var y = 0;
    
    for (var i = n; i--;) {
        x += points[i][0];
        y += points[i][1];
    }
    
    x /= n;
    y /= n;
    
    var newPoints = points.map(function(p) {
        var dx = p[0] - x;
        var dy = p[1] - y;
        var d = sqrt(dx * dx + dy * dy);
        d = (d + amount) / d;
        return [x + dx * d, y + dy * d];
    });
    
    return newPoints;
};


draw = function() {
    background(255);
    
    fillPixels(points);
    drawShape(points);
    //drawShape(points2);
    
    noLoop();
};



