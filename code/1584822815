/********************************************************
* This is a spin-off of https://www.khanacademy.org/cs/amoebas-life/1530860894
* 
* I made it to demonstrate how to add viruses,
* which have now been added to the original.
* 
* 
* You are a single cell living in the sea.
* Find the nutrients you need to replicate
* But avoid the red toxins, keep out of trouble, and
* Synthesize proteins needed to survive
* 
* Please read/skim through all of this before playing, if you
* want to enjoy the full aspects of the game.
* 
* Please post your stats when you lose (specifically level
* and synthesized proteins) in the tips & feedback!
* 
* Use the arrow or WASD keys to move. Press "Q" to pause/
* unpause. 
* Synthesize proteins by pressing:
* Key - Protein                   Req.     Tot. DNA req.
* E - Ribonucleic Acid      100 ATP, 15 amino   50
*                           200 ATP, 20 amino   360
*       Produces amino acid slowly and speeds up protein
*       synthesis, required to synthesize other proteins
*       First req. for ribo 0-5, second for 6-10
* Z - Metabolic Protein         25 amino        130
*       Slows down ATP consumption
* X - dNTP Protein              30 amino        130
*       More dNTP from amino acids and bubbles
* C - Efficiency Protein        35 amino        300
*       More stats from bubbles
* V - Antitoxic Protein         15 amino        220
*       Counteracts part of toxins; automatically removes
*       viruses afterwards
* B - Gene-Mod Protein      7 RNA, 40 amino     480
*       Decreases genome length and slows down genome
*       lengthening between levels
* N - Speed Protein             30 amino        360
*       You move faster and more efficiently
* M - Storage Protein    7 RNA,300 ATP,35 amino 480
*       Increases amino and ATP max
* F - Remove Viruses        5 amino, 4 DNA      50
*       Removes all viruses that are a part of your genome
* 
* To Do:
* Excess amino acids go to DNA or ATP production
* Slow down during synthesizing proteins
* Increase protein requirements
* Add enemy cells/ viruses?
* 
* Bugs:
* Pausing w/ "Q" and then using arrow keys will still use ATP
* -fixed-
* Synthesizing antitoxin may result in weird coloring after
* toxin effect is over
* -fixed-
* Cannot synthesize efficiency protein
* -fixed-
* Cannot synthesize gene-modifying protein
* -fixed-
* (reported by SamuelM) Cannot advance to level 10
* -???please provide feedback???-
* Pressing "f" should enable/disable "cell.transform" but
* will not disable
* 
* How to read bars:
* DNA bar - Collect enough dNTP to make DNA to fill up the
* bar.  Current DNA / Genome Length (DNA needed to win level) * / DNA through entire game
* ATP bar - Slowly dwindles. Flashes when under the effects
* of a toxin. Current ATP / Max ATP
* Amino bar - Collect rare amino acids to fill this bar up
* and use to synthesize proteins. Current amino / Max amino
* Protein bar - Shows up when synthesizing protein. When
* bar fills up, protein is synthesized. Protein name / 
* frames till end (synthesized faster with RNA)
* RNA bar - Shows up when you aren't synthesizing any
* protein and you have RNA. Will show max of "5" until you
* reach 5 RNA
* 
* Notes:
* If for some reason all your stats are SUPER big, that
* means you caught me in one of my debugging sessions.
* Reload after a while to remove. 
* 
* Personally, I hate it when you make a spin-off and someone
* gives you all the credit for making a game. So, don't
* forget Peter Collingridge for making "Survival!"
* 
* High scores!:
* ME! - Level 14 - 5/5 Meta, 1/5 dNTP, 5/5 Anti, 2/5 Speed,
* 10/10 RNA - 0 AA - 3055 DNA
* SamuelM - Level 9 - 2/5 Meta, 1/5 Effic, 1/5 Anti, 1/5
* Speed, 10/10 RNA - 12 AA - 1827 DNA
* MaraJade - Level 3 - No proteins - 35 AA - 311 DNA
*****************************************************/
var cell;
var state = 'paused';
var genomeLength = 100;
var maxATP = 1300;
var maxAmino = 30;
var generation = 1;

var menuFont = createFont("impact", 50);
var interFont = createFont("sans-serif", 16);

var keys = [];

var proteinSynth = ["None",0];
var proteins = [200,300,400,200,600,100,500,600,100];
var proteinMax = 5;

var Cell = function(x, y, r, n) {
    //Positional stats
    this.x = x;
    this.y = y;
    this.r = r;
    this.nodes = [];
    this.movement = [];
    
    //Basic stats
    this.DNA = 0;
    this.DNAtotal = 0;
    this.ATP = 800;
    this.dNTP = 0;
    this.toxin = 0;
    this.virus = 0;
    this.amino = 20;
    
    //Synthesized proteins
    this.ribo = 0;
    this.metabolism = 0;
    this.efficient = 0;
    this.productive = 0;
    this.antitox = 0;
    this.gene = 0;
    this.speed = 0;
    this.stability = 0;
    this.synthesized = false;
    
    //Variable stats
    var friction = 0.96;
    var noise = 0.3+0.075*proteinMax-0.075*this.stability;
    var speed = 0.7;
    
    for (var i = 0; i < n; i++) {
        var nx = x + r * sin(360 * i / n);
        var ny = y - r * cos(360 * i / n);
        this.nodes.push([nx, ny]);
        this.movement.push([0, 0]);
    }
    
    this.move = function(dir, dx, dy) {
        if (state === "running") {
        if (random() < 0.7) {
            this.ATP-=3/(this.metabolism+this.speed+3);
        }
        var node = round(n * dir / 4);
        var d;
        
        if (dx !== 0) {
            d = dx * (speed+this.speed/20);
            if (this.toxin > 0) {
                var toxSlow = 0.4;
                if (toxSlow < 0.1) {
                    toxSlow = 0.1;
                }
                d *= 1-toxSlow;
            }
            if (this.dNTP > 0) {
                d *= 0.9;
            }
            this.movement[node][0] += d * (random()/2 + 0.5);
            this.movement[(node + 1) % n][0] += d * random();
            this.movement[(node + n - 1) % n][0] += d * random();
        } else {
            d = dy * (speed+this.speed/20);
            if (this.toxin > 0) {
                var toxSlow2 = 0.4;
                if (toxSlow2 < 0.1) {
                    toxSlow2 = 0.1;
                }
                d *= 1-toxSlow2;
            }
            if (this.dNTP > 0) {
                d *= 0.9;
            }
            this.movement[node][1] += d * (random()/2 + 0.5);
            this.movement[(node + 1) % n][1] += d * random();
            this.movement[(node + n - 1) % n][1] += d * random();   
        }
        }
    };
    
    this.collide = function(that) {
        var dx = this.x - that.x;
        var dy = this.y - that.y;
        
        if (dx * dx + dy * dy <= this.r * this.r + 16) {
            if (that.type === 'rock') {
                // Collide with rock
                var minD = this.r * this.r;
                var node = 0;
                
                // Find closest node
                for (i = 0; i < n; i++) {
                    var dnx = that.x - this.nodes[i][0];
                    var dny = that.y - this.nodes[i][1];
                    var d = dnx * dnx + dny * dny;
                    if (d < minD) {
                        minD = d;
                        node = i;
                    }
                }
                
                // Dist and Angle between node and centre
                dx = this.nodes[node][0] - this.x;
                dy = this.nodes[node][1] - this.y;
                //var dist = sqrt(dx * dx + dy * dy);
                var theta = atan2(dy, dx);
                
                var c = -cos(theta)/2;
                var s = -sin(theta)/2;
                this.movement[node][0] = c * 2;
                this.movement[node][1] = s * 2;
                this.movement[(node + 1) % n][0] = c;
                this.movement[(node + 1) % n][1] = s;
                this.movement[(node + n - 1) % n][0] = c;
                this.movement[(node + n - 1) % n][1] = s;
                this.x += c * 2;
                this.y += c * 2;
                
                that.dx = -c/2;
                that.dy = -s/2;
            } else {
                // Eat nutrient
                if (!that.eaten) {
                    that.eaten = 1;
                }
            }
        }
    };
    
    this.update = function(driftAngle, drift, recentre) {
        // Check for game end
        if (this.DNA >= (genomeLength+this.virus*5) && !this.toxin) {
            state = 'win';
        } else if (this.ATP <= 0) {
            this.toxin = 10;
            if (this.ATP <= -100) {
                state = 'lose';
            }
        }
        
        // General metabolism
        if (frameCount % 6 === 0) {
            this.ATP-=3/(this.metabolism+3);
            this.amino+=this.ribo/200;
            if (this.dNTP > 0 && this.DNA < (genomeLength+this.virus*5)) {
                this.DNA++;
                this.DNAtotal++;
                this.dNTP--;
                this.ATP -= 4/(this.productive+2)*2;
                //Harder to sustain antitoxin and make DNA at same time
                if (this.antitox > 0) {
                    this.ATP-=this.antitox/10;
                }
            }
            if (cell.ATP > maxATP) {
                cell.ATP = maxATP;
            }
            if (cell.amino > maxAmino) {
                cell.amino = maxAmino;
            }
        }
        
        if (this.dNTP > genomeLength+cell.virus*5) {
            this.dNTP = genomeLength+cell.virus*5;
        }
        
        // Amino
        if (this.amino > 0) {
            if (this.ATP > 700&&this.dNTP <= 0) {
                if (this.transform) {
                    if (round(random(0,20000)) <= this.productive*100) {
                        var gain = this.amino;
                        if(gain>(genomeLength-this.DNA)/5){
                            gain=(genomeLength-this.DNA)/5;
                        }
                        this.dNTP+=gain*(this.productive+2)/2;
                        gain = this.amino;
                        if(gain>100){
                            gain=100;
                        }
                        this.ATP-=gain/(this.productive+2)*2;
                        this.amino-=10;
                        if (this.amino < 0) {
                            this.amino = 0;
                        }
                    }
                }
            }
        }
        
        // Toxin
        if (this.toxin > 0) {
            this.toxin-=(this.antitox+1);
            if (this.DNA > 0) {
                this.DNA -= 1/10;
                this.ATP--;
            } else {
                this.ATP--;
                this.ATP--;
            }
            this.dNTP = 0;
        }
        
        // Synthesized proteins
        if (proteinSynth[0]==="None") {
            if (!this.synthesized&&proteinSynth[0]==="None") {
                if (keys[90]&&this.amino>=25&&this.DNAtotal>=130&&this.metabolism<proteinMax&&this.ribo>0) {
                    this.synthesized = true;
                    this.amino -= 25;
                    proteinSynth[0] = "Metabolic Protein";
                    proteinSynth[1] = proteins[0];
                }
                if (keys[88]&&this.amino>=30&&this.DNAtotal>=130&&this.productive<proteinMax&&this.ribo>0) {
                    this.synthesized = true;
                    this.amino -= 30;
                    proteinSynth[0] = "dNTP Protein";
                    proteinSynth[1] = proteins[1];
                }
                if (keys[67]&&this.amino>=35&&this.DNAtotal>=300&&this.efficient<proteinMax&&this.ribo>0) {
                    this.synthesized = true;
                    this.amino -= 35;
                    proteinSynth[0] = "Efficiency Protein";
                    proteinSynth[1] = proteins[2];
                }
                if (keys[86]&&this.amino>=15&&this.DNAtotal>=220&&this.antitox<proteinMax&&this.ribo>0) {
                    this.synthesized = true;
                    this.amino -= 15;
                    proteinSynth[0] = "Antitoxic Protein";
                    proteinSynth[1] = proteins[3];
                }
                if (keys[66]&&this.amino>=40&&this.DNAtotal>=480&&genomeLength>=140&&this.ribo>=7) {
                    this.synthesized = true;
                    this.amino -= 40;
                    proteinSynth[0] = "Gene-Modifying Protein";
                    proteinSynth[1] = proteins[4];
                }
                if (keys[69]&&this.amino>=15&&this.DNAtotal>=50&&this.ATP>=100&&this.ribo<proteinMax*2) {
                    if (this.ribo < proteinMax) {
                        this.synthesized = true;
                        this.amino-=15;
                        this.ATP-=100;
                        proteinSynth[0] = "RNA";
                        proteinSynth[1] = proteins[5];
                    } else {
                        if (this.amino>=20&&this.DNAtotal>=360&&this.ATP>=200) {
                            this.synthesized = true;
                            this.amino-=20;
                            this.ATP-=200;
                            proteinSynth[0] = "RNA";
                            proteinSynth[1] = proteins[5];
                        }
                    }
                }
                if (keys[78]&&this.amino>=30&&this.DNAtotal>=360&&this.speed<proteinMax&&this.ribo>0) {
                    this.synthesized = true;
                    this.amino-=30;
                    proteinSynth[0] = "Speed Protein";
                    proteinSynth[1] = proteins[6];
                }
                if (keys[77]&&this.amino>=35&&this.ribo>=7&&this.ATP>=300&&this.DNAtotal>=480) {
                    this.synthesized = true;
                    this.amino-=35;
                    this.ATP-=300;
                    proteinSynth[0] = "Storage Protein";
                    proteinSynth[1] = proteins[7];
                }
                if (keys[70]&&this.virus>0&&this.DNA>=4&&this.DNAtotal>=50&&this.amino>=5) {
                    this.synthesized = true;
                    this.amino-=5;
                    this.DNA-=4;
                    proteinSynth[0] = "Remove Virus";
                    proteinSynth[1] = proteins[8];
                }
            }
        } else {
            this.synthesized = false;
        }
        
        if (proteinSynth[1]>0) {
            if (proteinSynth[0] === "RNA") {
                proteinSynth[1]-=2;
                if (cell.ribo >= 5) {
                    proteinSynth[1]++;
                }
            } else {
                proteinSynth[1]-=(cell.ribo+1)/2;
            }
        } else {
            var protein = proteinSynth[0];
            if (protein === "Metabolic Protein") {
                this.metabolism++;
                protein = "None";
            } else if (protein === "dNTP Protein") {
                this.productive++;
                protein = "None";
            } else if (protein === "Efficiency Protein") {
                this.efficient++;
                protein = "None";
            } else if (protein === "Antitoxic Protein") {
                this.antitox++;
                if (this.virus > 0) {
                    protein = "Remove Virus";
                    proteinSynth[1] = proteins[8];
                } else {
                    protein = "None";
                }
            } else if (protein === "Gene-Modifying Protein") {
                if (this.gene<proteinMax) {
                    this.gene++;
                }
                genomeLength -= 40;
                if (genomeLength < 100) {
                    genomeLength = 100;
                }
                protein = "None";
            } else if (protein === "RNA") {
                this.ribo++;
                protein = "None";
            } else if (protein === "Speed Protein") {
                this.speed++;
                protein = "None";
            } else if (protein === "Storage Protein") {
                maxATP+=300;
                maxAmino+=15;
                protein = "None";
            } else if (protein === "Remove Virus") {
                this.virus = 0;
                protein = "None";
            }
            proteinSynth[0] = protein;
        }
        
        // Fix toxin bug
        if (this.toxin<1) {
            this.toxin=0;
        }
        
        // Find cell centre
        this.x = 0;
        this.y = 0;
        var i;
        
        for (i = 0; i < n; i++) {
            this.x += this.nodes[i][0];
            this.y += this.nodes[i][1];
        }
        this.x /= n;
        this.y /= n;
        
        // Sick cells shrink
        var r = this.r;
        if (this.toxin) { r = this.r * 0.75; }
        
        // Move nodes to centre
        for (i = 0; i < n; i++) {
            var dx = 0.25 * (this.nodes[i][0] - 
                     (this.x + r * sin(360 * i / n)));
            var dy = 0.25 * (this.nodes[i][1] - 
                     (this.y - r * cos(360 * i / n)));
                    
            this.movement[i][0] += 0.05 * drift * sin(driftAngle)-dx;
            this.movement[i][1] += 0.05 * drift * cos(driftAngle)-dy;
            this.nodes[i][0] += this.movement[i][0] + recentre[0];
            this.nodes[i][1] += this.movement[i][1] + recentre[1];
            this.movement[i][0] *= friction;
            this.movement[i][1] *= friction;
            this.movement[i][0] += noise * (random() - 0.5);
            this.movement[i][1] += noise * (random() - 0.5);
        }
    };
    
    this.draw = function() {
        strokeWeight(2);
        stroke(22, 117, 17);
        if (this.toxin === 0) {
            var colors = [[127,209,123],[19,97,14]];
            fill(colors[0][0],colors[0][1],colors[0][2]);
            if (this.antitox > 0) {
                fill(colors[0][0]-(colors[0][0]-colors[1][0])/proteinMax*this.antitox,colors[0][1]-(colors[0][1]-colors[1][1])/proteinMax*this.antitox,colors[0][2]-(colors[0][2]-colors[1][2])/proteinMax*this.antitox);
            }
        } else {
            var c = lerpColor(color(127, 209, 123),
                              color(255, 38, 0),
                              (this.toxin % 16) / 15);
            fill(c);
        }
        
        beginShape();
        curveVertex(this.nodes[n-1][0],
                    this.nodes[n-1][1]);
        for (var i = 0; i < n; i++) {
            curveVertex(this.nodes[i][0], this.nodes[i][1]);
        }
        curveVertex(this.nodes[0][0], this.nodes[0][1]);
        curveVertex(this.nodes[1][0], this.nodes[1][1]);
        endShape();
        
        strokeWeight(1);
        stroke(22, 117, 17);
        fill(255, 255, 255, 200);
        ellipse(this.x, this.y, this.r/2, this.r/2);
        
    };
};

var rockImg = getImage("cute/Rock");

var Particle = function(x, y, type) {
    this.x = x;
    this.y = y;
    this.r = 8 + floor(random() * 7);
    this.dx = random() - 0.5;
    this.dy = random() - 0.5;
    this.type = type;
    
    this.eaten = false;
    
    var friction = 0.69 + (2.4 / this.r);
    var noise = 0.1;
    
    this.drawNutrient = function() {
        if (this.eaten) {
            if (this.eaten <= 10 + this.r) {                
                strokeWeight(3);
                var radius = this.r + this.eaten * 4;
                var c = lerpColor(this.stroke, this.strokeT, this.eaten/(10 + this.r));
                noFill();
                stroke(c);
                ellipse(this.x, this.y, radius, radius);
                fill(c);
                textAlign(CENTER, CENTER);
                textFont(menuFont, 16);
                text(this.type, this.x, this.y-this.eaten*2+5);
                
                switch (this.type) {
                    case 'ATP':
                        cell.ATP += 12+cell.efficient*1.5;
                        if (cell.ATP > maxATP) {
                            cell.ATP = maxATP;
                        }
                        break;
                    case 'dNTP':
                        cell.dNTP++;
                        if (cell.productive > 0) {
                            if (random() <= cell.productive/10) {
                                cell.dNTP++;
                            }
                        }
                        break;
                    case 'amino':
                        if (random() < (cell.efficient/(cell.efficient+1)+1)/2) {
                            cell.amino++;
                        }
                        if (cell.amino > maxAmino) {
                            cell.ATP += maxAmino-cell.amino;
                            cell.amino = maxAmino;
                        }
                        break;
                    case 'toxin':
                        cell.toxin += 8+random(-2,2);
                        break;
                    case 'virus':
                        cell.toxin += 5+random(-2,2);
                        if (this.eaten === 1) {
                            cell.virus++;
                            //genomeLength+=5;
                            cell.dNTP = floor(cell.dNTP/5);
                        }
                        break;
                    case 'protein':
                        if (this.eaten === 1) {
                        if (random()<0.6) {
                            if (cell.ribo < proteinMax * 2&&proteinSynth[0] === "None") {
                                proteinSynth[0] = "RNA";
                                proteinSynth[1] = proteins[5];
                            } else {
                                cell.amino+=15;
                            }
                        } else if (proteinSynth[0] === "None") {
                            var pro = round(random(6));
                            switch (pro) {
                                case 0:
                                    cell.amino+=15;
                                    break;
                                case 1:
                                    if (cell.metabolism<proteinMax) {
                                        proteinSynth[0] = "Metabolic Protein";
                                        proteinSynth[1] = proteins[0];
                                    } else {
                                        cell.amino+=15;
                                    }
                                    break;
                                case 2:
                                    if (cell.efficient<proteinMax) {
                                        proteinSynth[0] = "Efficiency Protein";
                                        proteinSynth[1] = proteins[2];
                                    } else {
                                        cell.amino+=15;
                                    }
                                    break;
                                case 3:
                                    if (cell.productive<proteinMax) {
                                        proteinSynth[0] = "dNTP Protein";
                                        proteinSynth[1] = proteins[1];
                                    } else {
                                        cell.amino+=15;
                                    }
                                    break;
                                case 4:
                                    if (cell.antitox<proteinMax) {
                                        proteinSynth[0] = "Antitoxin Protein";
                                        proteinSynth[1] = proteins[3];
                                    } else {
                                        cell.amino+=15;
                                    }
                                    break;
                                case 5:
                                    if (cell.speed<proteinMax) {
                                        proteinSynth[0] = "Speed Protein";
                                        proteinSynth[1] = proteins[6];
                                    } else {
                                        cell.amino+=15;
                                    }
                                    break;
                                case 6:
                                    if (cell.gene<proteinMax||genomeLength>=140) {
                                        proteinSynth[0] = "Gene-Modifying Protein";
                                        proteinSynth[1] = proteins[4];
                                    } else {
                                        cell.amino+=15;
                                    }
                                    break;
                                case 7:
                                    proteinSynth[0] = "Storage Protein";
                                    proteinSynth[1] = proteins[7];
                                    break;
                            }
                        } else {
                            cell.amino+=15;
                        }
                        }
                        break;
                }
                this.eaten++;
            }
        } else {
            if (this.type === 'virus') {
                stroke(255, 0, 0);
                strokeWeight(0.5);
                fill(255, 0, 0, 50);
                triangle(this.x,this.y-2*2,this.x+4,this.y+2,this.x-4,this.y+2);
                triangle(this.x,this.y+2*2,this.x+4,this.y-2,this.x-4,this.y-2);
            } else {
                strokeWeight(1);
                fill(this.fill);
                stroke(this.stroke);
                ellipse(this.x, this.y, this.r, this.r);  
            }
        }
    };
    
    switch(this.type) {
        case "rock":
            this.r = 15 + random() * 20;
            this.draw = function() {
                translate(round(this.x), round(this.y));
                scale(this.r/100, this.r/100);
                image(rockImg, -50, -115);
                resetMatrix();
            };
            break;
        case "ATP":
            this.fill = color(40, 171, 17);
            this.stroke = color(19, 158, 3);
            this.strokeT = color(19, 158, 3, 0);
            this.draw = this.drawNutrient;
            break;
        case "dNTP":
            this.fill = color(176, 44, 242);
            this.stroke = color(230, 97, 230);
            this.strokeT = color(176, 44, 242, 0);
            this.draw = this.drawNutrient;
            break;
        case "amino":
            this.fill = color(8, 247, 235);
            this.stroke = color(0, 97, 201);
            this.strokeT = color(8, 247, 235, 0);
            this.draw = this.drawNutrient;
            break;
        case "toxin":
            this.fill = color(255, 0, 0);
            this.stroke = color(255, 99, 99);
            this.strokeT = color(255, 0, 0, 0);
            this.draw = this.drawNutrient;
            break;
        case "protein":
            this.fill = color(140, 100, 90);
            this.stroke = color(43, 28, 34);
            this.strokeT = color(8, 247, 235, 0);
            this.draw = this.drawNutrient;
            break;
        case "virus":
            this.fill = color(255, 0, 0);
            this.stroke = color(255, 99, 99);
            this.strokeT = color(255, 0, 0, 0);
            this.draw = this.drawNutrient;
            break;
    }
    
    this.collide = function(that) {
        var dx = this.x - that.x;
        var dy = this.y - that.y;
        if (dx * dx + dy * dy < this.r * this.r) {
            this.dx *= -1;
            this.dy *= -1;
            that.dx *= -1;
            that.dy *= -1;
        }
    };
    
    this.update = function(driftAngle, drift, recentre) {
        this.x += this.dx + drift * 8 / this.r * sin(driftAngle);
        this.y += this.dy + drift * 8 / this.r * cos(driftAngle);
        this.x += recentre[0];
        this.y += recentre[1];
        
        this.dx *= friction;
        this.dy *= friction;
        this.dx += noise * (random() - 0.5);
        this.dy += noise * (random() - 0.5);
    };
};

var pParticles = {
    ATP: 17,
    dNTP: 7,
    amino: 1,
    toxin: 25,
    protein: 0.1,
    virus: 30
};

var addViruses = function(px, py, arr) {
    var nViruses = 8 + floor(random() * 8);
    for (var n=0; n<nViruses; n++) {
        var theta = random() * 360;
        var d = random() * 80;
        var x = px + d * cos(theta);
        var y = py + d * sin(theta);
        arr.push(new Particle(x, y, 'virus'));
    }
};

// Add n random particles to the given array
var addParticles = function(arr, n, x, y) {
    for (var i = 0; i < n; i++) {
        var px = x || random() * 800 - 200;
        var py = y || random() * 800 - 200;
        
        // Determine particle type
        var particleN = random() * 100;
        
        for (var p in pParticles) {
            particleN -= pParticles[p];
            if (particleN < 0) {
                if (p === 'virus') {
                    addViruses(px, py, arr);
                } else {
                    arr.push(new Particle(px, py, p));   
                }
                break;
            }
        }
        if (particleN >= 0) {
            arr.push(new Particle(px, py, 'rock'));
        }
    }
};

var newLevel = function() {
    generation++;
    
    // Reset cell
    cell.DNA = 0;
    genomeLength += 20-(cell.gene*2);
    maxATP -= 100;
    maxAmino += 5;
    if (maxATP < 800) {
        maxATP = 800;
    }
    if (cell.ATP < 800-(generation*20)) {
        cell.ATP = 800-(generation*20);
    }
    if (cell.ATP > maxATP) {
        cell.ATP = maxATP;
    }
    if (cell.amino > maxAmino) {
        cell.amino = maxAmino;
    }
    
    // Make non-toxins particles less frequent
    var totalP = 0;
    for (var p in pParticles) {
        if (p !== 'toxin' && p !== 'virus') {
            if (p === 'amino') {
                pParticles[p] *= 0.98;
            } else {
                pParticles[p] *= 0.94;
            }
            totalP += pParticles[p];
        }
    }
    
    // Increase toxin probability
    pParticles.toxin = 50 - totalP;
    pParticles.virus = pParticles.toxin + 5;
};

/******************************
 * Initialize objects
******************************/

cell = new Cell(200, 200, 18, 12);
var bodies = [cell];
addParticles(bodies, 32);

// Example particles
var egATP = new Particle(115, 140, 'ATP');
var egdNTP = new Particle(115, 175, 'dNTP');
var egAA = new Particle(115, 235, 'amino');
var egProtein = new Particle(115, 295, 'protein');
var egToxin = new Particle(115, 330, 'toxin');
var egVirus = new Particle(115, 365, 'virus');
egATP.r = 14;
egdNTP.r = 14;
egAA.r = 14;
egProtein.r = 14;
egToxin.r = 14;

// Vector describing flow of water
var driftAngle = random() * 360;
var drift = 1;

// Working out density of particles
var recentreSum = [0, 0];

var centreDisplayOnCell = function() {
    var dx = (200 - cell.x) * 0.05;
    var dy = (200 - cell.y) * 0.05;
    return [dx, dy];
};

/******************************
 * Main game loop
******************************/

var update = function() {
    var i;
    
    // Remove offscreen particles (only ever remove 1 each time)
    for (i=1; i<bodies.length-1; i++) {
        var p = bodies[i];
        if (p.x < -400 || p.x > 800 || p.y < -400 || p.y > 800 ||
            p.eaten > 10 + p.r) {
            bodies.splice(i, 1);
            break;
        }
    }
    
    // Collision detection
    for (i=0; i<bodies.length-1; i++) {
        for (var j=i+1; j<bodies.length; j++) {
            bodies[i].collide(bodies[j]);
        }
    }

    // Recentre screen to follow cell
    var recentre = centreDisplayOnCell();
    recentreSum[0] = recentreSum[0] * 0.5 + recentre[0];
    recentreSum[1] = recentreSum[1] * 0.5 + recentre[1];

    for (i=0; i<bodies.length; i++) {
        bodies[i].update(driftAngle, drift, recentre);
    }
    
    // Add new particles
    var movement = abs(recentreSum[0]) + abs(recentreSum[1]);
    if (movement*random() > 1 && random() < 10 / (10+bodies.length)) {
        var x, y;
        // Calculate what side to add particle;
        if (abs(recentreSum[0]) > abs(recentreSum[1])) {
            if (recentreSum[0] > 0) {
                x = -100;
            } else {
                x = 500;
            }
        } else {
            if (recentreSum[1] > 0) {
                y = -100;
            } else {
                y = 500;
            }
        }
        addParticles(bodies, 1, x, y);
    }
    
    // Reorient drift direction
    if (random() < 0.007) {
        driftAngle = random() * 360;
    } else {
        driftAngle += (random() - 0.5)*generation/3;   
    }
};

/******************************
 * Event handling
******************************/

var Qrelease = true;
var start = "start";

var keyPressed = function() {
    keys[keyCode] = true;
    if (keys[81]&&Qrelease) {
        Qrelease = false;
        if (state === "paused") {
            state = "running";
            start = "continue";
        } else if (state === "running") {
            state = "paused";
        }
    }
};

var keyReleased = function() {
    if (keyCode === 81) {
        Qrelease = true;
    }
    keys[keyCode] = false;
};

var keyHandling = function() {
    if (keys[UP]||keys[87]) { cell.move(0, 0, -1); }
    if (keys[DOWN]||keys[83]) { cell.move(2, 0, 1); }
    if (keys[LEFT]||keys[65]) { cell.move(3, -1, 0); }
    if (keys[RIGHT]||keys[68]) { cell.move(1, 1, 0); }
    if (keys[ENTER]||keys[27]) {
        if (state === "paused"&&keys[27]) {
            state = "running";
            start = "continue";
        } else if (state === "win"&&keys[ENTER]) {
            newLevel();
            state = "running";
        }
    }
};

var mouseClicked = function() {
    //if (state === 'paused') {
        //state = 'running';
    //} else if (state === 'win') {
        //newLevel();
        //state = 'running';
    //}
};

var mouseOut = function() {
    //paused = true;
};

/******************************
 * Display
******************************/

var drawInterface = function() {
    //Colors
    var DNACol1 = color(150, 120, 170);
    var DNACol2 = color(100, 10, 245);
    var AminoCol1 = color(0, 137, 241);
    AminoCol1 = color(0, 137, 241);
    var AminoCol2 = color(8, 177, 165);
    var ATPCol1 = color(0, 185, 0);
    var ATPCol2 = color(0, 130, 0);
    var ProCol1 = color(8, 150, 245);
    var ProCol2 = color(7, 74, 68);
    
    fill(220, 250, 255);
    textFont(interFont, 15);
    textAlign(LEFT, BASELINE);
    text("Level: " + generation, 15, 19);
    textFont(interFont, 10);
    text("Metabolic Proteins: " + cell.metabolism, 15, 59);
    text("dNTP Proteins: " + cell.productive, 15, 70);
    text("Efficiency Proteins: " + cell.efficient, 15, 81);
    text("Antitoxic Proteins: " + cell.antitox, 15, 92);
    text("Speed Proteins: " + cell.speed, 15, 103);
    
    //Debug
    text(cell.transform, 15, 114);

    // DNA bar
    noStroke();
    if (cell.dNTP > 0) {
        var p = abs(10 - (frameCount % 21)) / 10;
        fill(lerpColor(DNACol1, DNACol2, p));
    } else {
        fill(DNACol1);
    }
    rect(95, 7, 210, 14, 8);
    fill(DNACol2);
    rect(102, 8, 200 * cell.DNA/(genomeLength+cell.virus*5), 13);
    if (cell.DNA > 0) {
        arc(102, 14, 14, 14, 90, 270);
    }
    stroke(180, 180, 180);
    noFill();
    rect(95, 7, 210, 14, 8);
    
    fill(255, 255, 255);
    textFont(interFont, 10);
    textAlign(CENTER, BASELINE);
    text("DNA: " + round(cell.DNA) + " / " + (genomeLength+cell.virus*5) + " / " + round(cell.DNAtotal), 200, 18);
    
    // Amino bar
    var displayAmino = cell.amino;
    if (displayAmino < 0) {
        displayAmino = 0;
    }
    if (cell.transform) {
        AminoCol1 = color(76, 170, 237);
    }
    noStroke();
    fill(AminoCol1);
    rect(95, 7+370, 210, 14, 8);
    fill(AminoCol2);
    rect(102, 8+370, 200 * displayAmino/maxAmino, 13);
    if (displayAmino > 0) {
        arc(102, 14+370, 14, 14, 90, 270);
    }
    stroke(180, 180, 180);
    noFill();
    rect(95, 7+370, 210, 14, 8);
    
    fill(255, 255, 255);
    textFont(interFont, 10);
    textAlign(CENTER, BASELINE);
    text("Amino: " + floor(displayAmino) + " / " + maxAmino, 200, 18+370);
    
    // Protein synthesis bar
    if (proteinSynth[0] !== "None") {
        var synthTime;
        var prt = proteinSynth[0];
        if (prt === "Metabolic Protein") {
            synthTime = proteins[0];
        } else if (prt === "dNTP Protein") {
            synthTime = proteins[1];
        } else if (prt === "Efficiency Protein") {
            synthTime = proteins[2];
        } else if (prt === "Antitoxic Protein") {
            synthTime = proteins[3];
        } else if (prt === "Gene-Modifying Protein") {
            synthTime = proteins[4];
        } else if (prt === "RNA") {
            synthTime = proteins[5];
        } else if (prt === "Speed Protein") {
            synthTime = proteins[6];
        } else if (prt === "Storage Protein") {
            synthTime = proteins[7];
        } else if (prt === "Remove Virus") {
            synthTime = proteins[8];
        }
        noStroke();
        var f = abs(10 - (frameCount % 21)) / 10;
        fill(lerpColor(ProCol1, ProCol2, f));
        rect(95, 7+350, 210, 14, 8);
        fill(ProCol2);
        rect(102, 8+350, 200 * (synthTime-proteinSynth[1]) / synthTime, 13);
        if (proteinSynth[1] > 0) {
            arc(102, 14+350, 14, 14, 90, 270);
        }
        stroke(180, 180, 180);
        noFill();
        rect(95, 7+350, 210, 14, 8);
    
        fill(255, 255, 255);
        textFont(interFont, 10);
        textAlign(CENTER, BASELINE);
        if (proteinSynth[0] === "Remove Virus") {
            text("Removing Viruses..." + " / " + round(proteinSynth[1]), 200, 18+350);
        } else {
            text("Synthesizing " + proteinSynth[0] + " / " + round(proteinSynth[1]), 200, 18+350);
        }
    } else if (cell.ribo>0) {
        noStroke();
        fill(ProCol1);
        rect(95, 7+350, 210, 14, 8);
        fill(ProCol2);
        var r = 1;
        if (cell.ribo>=5) {
            r = 2;
        }
        rect(102, 8+350, 200 * cell.ribo / (proteinMax*r), 13);
        arc(102, 14+350, 14, 14, 90, 270);
        stroke(180, 180, 180);
        noFill();
        rect(95, 7+350, 210, 14, 8);
        
        fill(255, 255, 255);
        textFont(interFont, 10);
        textAlign(CENTER, BASELINE);
        text("RNA: " + cell.ribo + " / " + proteinMax*r, 200, 18+350);
    }
    
    // ATP bar
    var displayATP = cell.ATP;
    if (displayATP < 0) {
        displayATP = 0;
    }
    noStroke();
    fill(ATPCol1);
    rect(95, 7+20, 210, 14, 8);
    fill(ATPCol2);
    if (cell.toxin > 0) {
        var h = abs(10 - (frameCount % 21)) / 10;
        fill(lerpColor(color(255,155,0), ATPCol2, h));
    }
    rect(102, 8+20, 200 * displayATP/maxATP, 13);
    if (cell.ATP > 0) {
        arc(102, 14+20, 14, 14, 90, 270);
    }
    stroke(180, 180, 180);
    noFill();
    rect(95, 7+20, 210, 14, 8);
    
    fill(255, 255, 255);
    textFont(interFont, 10);
    textAlign(CENTER, BASELINE);
    text("ATP: " + round(displayATP) + " / " + maxATP, 200, 18+20);
};

var drawIntroductionScreen = function() {
    rect(0, 0, 400, 400);
    fill(240, 240, 240);
    text("Press esc or Q to \n"+start+" level " + (generation) , 200, 55);
    
    textFont(menuFont, 28);
    textAlign(LEFT, CENTER);
    text("Eat:", 25, 140);
    text("Avoid:", 25, 330);
    
    egATP.draw();
    egdNTP.draw();
    egAA.draw();
    egProtein.draw();
    egToxin.draw();
    egVirus.draw();
    
    textFont(menuFont, 20);
    fill(240, 240, 240);
    text("ATP  ( for energy )", 130, 140);
    text("Deoxyribonucleotides", 130, 175);
    text("( to make DNA )", 130, 200);
    text("Amino acids ( to synthesize", 130, 235);
    text("proteins and dNTP )", 130, 260);
    text("Proteins ( instead of synthesis )", 130, 295);
    text("Toxins", 130, 330);
    text("Viruses", 130, 365);
};

var draw = function() {
    if (keyIsPressed) { keyHandling(); }
    background(25, 77, 135);
    
    for (var i=0; i<bodies.length; i++) {
        bodies[i].draw();
    }
    
    if (state === 'running') { update(); }
    drawInterface();
    
    noStroke();
    fill(60, 60, 80, 230);
    textFont(menuFont, 42);
    textAlign(CENTER, BASELINE);
    
    switch (state) {
        case 'running':
            if (!focused) { state = 'paused'; }
            break;
        case 'paused':
            drawIntroductionScreen();
            break;
        case 'lose':
            noStroke();
            rect(0, 0, 400, 400);
            fill(240, 240, 240);
            text("You ran out of ATP!", 200, 167);
            break;
       case 'win':
            noStroke();
            rect(0, 0, 400, 400);
            fill(240, 240, 240);
            text("You replicated!", 200, 167);
            text("Press enter for level " + (generation+1), 200, 225);
            break; 
    }
};