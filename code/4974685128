var whiteCoins = 2;
var blackCoins = 3;
var whiteCount = 0;
var blackCount = 0;
var results = [];
var ratios = [];

var mode = 'pause';

// Cup positions
var cupX = 95;
var cupY = 30;
var cupW = 125;
var cupH = 130;

var buttonX = 185;
var arrowX = 117;
var arrowY = 61;

// Coin position
var coinX = 360;
var coinY = 54;
var coinR = 80;
var coinDY = 5;
var MAXCOINS = 25;

// Pie chart
var chartR = 140;
var chartX = width - chartR/2 - 20;
var chartY = chartR/2 + 20;

// Ratio graph
var graphX = 45;
var graphY = 378;   // Base of graph not top
var graphW = width - graphX - 16;
var graphH = 150;

// Text positions
var tx = 455;
var ty = 70;
var tdy = 22;
var infoSize = 16;

var BACKGROUND = color(0, 0, 0);
var impFont = createFont("Impact", 40);
var sansFont = createFont("Sans", 40);
frameRate(5);

var pickCoin = function() {
    var r = floor(random(0, whiteCoins + blackCoins));
    if (r < whiteCoins) {
        whiteCount++;
        results.push('White');
    } else {
        blackCount++;
        results.push('Black');
    }
    if (results.length > MAXCOINS) {
        results.shift();
    }
    ratios.push(whiteCount / (whiteCount + blackCount));
};

var Button = function(x, y, w, h, name, clickF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.clickF = clickF;
    this.showing = true;
    
    this.highlight = function() {
        if (mouseX >= this.x && mouseX <= this.x + this.w && 
            mouseY >= this.y && mouseY <= this.y + this.h) {
            this.mouseover = true;
        } else {
            this.mouseover = false;
        }
    };
    
    this.click = function() {
        if (this.showing && this.mouseover) {
            if (this.clickF) {
                this.clickF();
                return true;
            }
        }
    };
    
    this.drawButton = function() {
        var boxCol, textCol;
        if (this.mouseover) {
            boxCol = color(255, 255, 255);
            textCol = color(0, 0, 0);
        } else {
            boxCol = color(0, 0, 0);
            textCol = color(255, 255, 255);
        }
        
        strokeWeight(2);
        stroke(180);
        fill(boxCol);
        rect(this.x, this.y, this.w, this.h, 8);
        
        fill(textCol);
        textFont(impFont, 18);
        textAlign(CENTER, CENTER);
        text(this.name, this.x + this.w/2, this.y + this.h/2);
    };
    
    this.drawTriangle = function() {
        if (this.mouseover) {
            fill(255, 255, 255);
            noStroke();
        } else {
            strokeWeight(1);
            fill(0, 0, 0);
            stroke(255, 255, 255);
        }
        
        var y2 = this.y + this.h;
        if (this.name === 'up') {
            triangle(this.x, y2, this.x + this.w, y2, this.x + this.w/2, this.y);
        } else {
            triangle(this.x, this.y, this.x + this.w, this.y, this.x + this.w/2, y2);
        }
    };
    
    this.draw = function() {
        if (!this.showing) { return; }
        
        if (this.name === 'up' || this.name === 'down') {
            this.drawTriangle();
        } else {
            this.drawButton();
        }
    };
};

// Create buttons
var pickOneButton = new Button(buttonX, 28, 75, 22, "Pick one");
var startButton = new Button(buttonX, 58, 88, 22, "Pick many");
var resetButton = new Button(buttonX, 88, 55, 22, "Reset");

var addWhiteButton = new Button(arrowX, arrowY, 12, 10, 'up');
var minusWhiteButton = new Button(arrowX, arrowY + 29, 12, 10, 'down');
var addBlackButton = new Button(arrowX-1, arrowY + 47, 12, 10, 'up');
var minusBlackButton = new Button(arrowX-1, arrowY + 76, 12, 10, 'down');

addWhiteButton.clickF = function() { whiteCoins++; };
addBlackButton.clickF = function() { blackCoins++; };
minusWhiteButton.clickF = function() {
    whiteCoins = max(1, whiteCoins - 1);
};
minusBlackButton.clickF = function() {
    blackCoins = max(1, blackCoins - 1);
};

pickOneButton.clickF = pickCoin;
startButton.clickF = function() {
    if (this.name === 'Pick many') {
        mode = 'play';
        this.name = "Pause";
    } else {
        mode = 'pause';
        this.name = "Pick many";
    }
};

resetButton.clickF = function() {
    whiteCount = 0;
    blackCount = 0;
    results = [];
    ratios = [];
};

var buttons = [pickOneButton, startButton, resetButton,
               addWhiteButton, minusWhiteButton, addBlackButton, minusBlackButton];

var drawCup = function() {
    fill(20);
    strokeWeight(2);
    stroke(220);
    ellipse(cupX, cupY, cupW, cupW * 0.2);
    
    noFill();
    line(cupX - cupW * 0.5, cupY, cupX - cupW * 0.4, cupY + cupH);
    line(cupX + cupW * 0.5, cupY, cupX + cupW * 0.4, cupY + cupH);
    arc(cupX, cupY + cupH, cupW * 0.8, cupW * 0.2, 0, 180);
    
    fill(255);
    textAlign(CENTER, CENTER);
    textFont(sansFont, infoSize);
    text("White: " + whiteCoins, cupX, cupY + cupH / 2 - 15);
    text("Black: " + blackCoins, cupX, cupY + cupH / 2 + 32);
    text("White: " + round(1000 * whiteCoins / (whiteCoins + blackCoins))/10 + "%", cupX, cupY + cupH + 28);
};

var drawCoin = function() {
    textAlign(CENTER, CENTER);
    textFont(impFont, 20);
    strokeWeight(1);
    stroke(180);
    
    for (var i = 0; i < results.length; i++) {
        if (results[i] === 'White') {
            fill(255);
        } else {
            fill(0);
        }
        ellipse(coinX, coinY + i * coinDY, coinR, coinR);
    }
    
    if (results.length > 0) {
        var coin = results[results.length - 1];
        if (coin === 'White') {
            fill(0);
            text(coin, coinX, coinY + (results.length - 1) * coinDY);
        } else {
            fill(255);
            text(coin, coinX, coinY + (results.length - 1) * coinDY);
        }
    }
};

var drawPieChart = function() {
    noFill();
    stroke(255);
    ellipse(chartX, chartY, chartR, chartR);
    
    if (ratios.length > 0) {
        fill(255);
        if (whiteCount) {
            arc(chartX, chartY, chartR-4, chartR-4, -89, 360 * ratios[ratios.length - 1] - 89);   
        }
    }
};

var drawGraph = function() {
    var n = ratios.length; 
    
    if (n > 1) {
        var dx = graphW / (n - 1);
    
        noStroke();
        fill(255);
        
        beginShape();
        vertex(graphX + graphW, graphY);
        vertex(graphX, graphY);
        for (var i = 0; i < n; i++) {
            var y = graphY - 1 - (graphH - 1) * ratios[i];
            vertex(graphX + i * dx, y);
        }
        endShape();
    }

    // Gridlines
    strokeWeight(1);
    stroke(80);
    textAlign(RIGHT, CENTER);
    textSize(11);
    var numGridlines = 3;
    for (var i = 0; i <= numGridlines; i++) {
        var p = i / numGridlines;
        var y = graphY - 1 - (graphH - 1) * p;
        line(graphX, y, graphX + graphW, y);
        text(round(100 * p), graphX - 3, y);
    }
    
    // Trial counts
    var numGridlines = 4;
    textAlign(CENTER, TOP);
    if (n > numGridlines * 2) {
        for (var i = 1; i < numGridlines; i++) {
            var p = i / numGridlines;
            var x = graphX + p * graphW;
            line(x, graphY, x, graphY + 3);
            text(round(n * p), x, graphY + 4);
        }   
    }
    
    // Always write beginning and end trial
    line(graphX, graphY, graphX, graphY + 3);
    text(0, graphX, graphY + 4);
    line(graphX + graphW, graphY, graphX + graphW, graphY + 3);
    text(n, graphX + graphW, graphY + 4);
    
    textSize(15);
    textAlign(CENTER, CENTER);
    translate(graphX, graphY - graphH / 2);
    rotate(270);
    text("% White", 0, -32);
    resetMatrix();
    
    //Axis
    strokeWeight(2);
    line(graphX, graphY, graphX + graphW, graphY);
};

var drawInfo = function() {
    fill(255);
    textAlign(LEFT, CENTER);
    textFont(sansFont, infoSize);
    text("Trials: " + (whiteCount + blackCount), tx, ty);
    
    var pWhite = round(1000 * ratios[ratios.length - 1]) / 10;
    var pBlack = round(1000 - pWhite * 10) / 10;
    
    var whiteTxt = "White: " + whiteCount;
    var blackTxt = "Black: " + blackCount;
    
    if (ratios.length > 0) {
        whiteTxt += " (" + pWhite + "%)";
        blackTxt += " (" + pBlack + "%)";
    }
    
    text(whiteTxt , tx, ty + tdy);
    text(blackTxt, tx, ty + tdy * 2);
    
    
};

var draw = function() {
    background(BACKGROUND);
    if (mode === 'play') {
        pickCoin();
    }

    drawCup();
    drawCoin();
    drawPieChart();
    drawInfo();
    drawGraph();
    
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].draw();
    }
};

var mouseMoved = function() {
    for (var b in buttons) {
        buttons[b].highlight();
    }
};

var mousePressed = function() {
    for (var b in buttons) {
        buttons[b].click();
    }
};

var keyPressed = function() {
    if (keyCode === 32) { mode = 'Pause'; }
};