/***********************************
 *  Subdiving a surface
 * Colour by height ?
 * Wrap subdivision
 * New pattern button
 * Make subdivision more efficient
 * Fix noise image
************************************/

// Put your curve here as an array of heights from 
// 0 to 1
var originalPlane = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
];

var BACKGROUND = color(250, 250, 250);
var SHADE = color(80, 80, 80);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 240);
var MESSAGEBLUE = color(20, 60, 160);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var MAX_NODES = 320;
var ANIMATE_AVERAGE = 30;

var backgroundLight = 0.1;
var lightVector = { x: 0.5, y: -0.2, z: -2 };

var nodeSize = 12;
var persp = 1200;
var selected = false;

var translateX = width * 0.6;
var translateY = height / 2;
var _scale = 1;

var toolbarWidth = 135;
var toolbarHeight = 0;
var toolbarX = width * 0.01;
var toolbarY = width * 0.01;
var toolbar;

var showing = {
    //'Control points': false,
    'Control arms': false,
    //Edges: false,
    Fill: true,
    Grid: true,
};

var messages = "intro";

/***********************************
 *      Linear algebra
************************************/

var normaliseVector = function(v) {
    var d = sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
    return { x: v.x / d, y: v.y / d, z: v.z / d};
};

var subtractVectors = function(v1, v2){
    return {
        x: v1.x - v2.x,
        y: v1.y - v2.y,
        z: v1.z - v2.z
    };
};

// Given at least 3 nodes, find the normal to the plane they define
// Only the first 3 nodes are used.
var normalOfPlane = function(nodes) {
    var v1 = {
        x: nodes[0].px - nodes[1].px,
        y: nodes[0].py - nodes[1].py,
        z: nodes[0].z - nodes[1].z
    };
    var v2 = {
        x: nodes[0].px - nodes[2].px,
        y: nodes[0].py - nodes[2].py,
        z: nodes[0].z - nodes[2].z
    };
    
    return {
        x: v1.y * v2.z - v1.z * v2.y,
        y: v1.z * v2.x - v1.x * v2.z,
        z: v1.x * v2.y - v1.y * v2.x
    };
};

var normalOfPlane2 = function(nodes) {
    var v1 = {
        x: nodes[0].x - nodes[1].x,
        y: nodes[0].y - nodes[1].y,
        z: nodes[0].z - nodes[1].z
    };
    var v2 = {
        x: nodes[0].x - nodes[2].x,
        y: nodes[0].y - nodes[2].y,
        z: nodes[0].z - nodes[2].z
    };
    
    return {
        x: v1.y * v2.z - v1.z * v2.y,
        y: v1.z * v2.x - v1.x * v2.z,
        z: v1.x * v2.y - v1.y * v2.x
    };
};

// Computes the normal of the "other triangle" of a 4-pt plane
// e.g. normalOfPlane computes for the triangle ABC, this computes
// for the triangle CDA (order is important for the pointing direction
// of the resulting normal
// 
// A - B
// |   |
// D - C
var otherNormalOfPlane = function(nodes, offset) {
    var v1 = {
        x: nodes[2].px - nodes[3].px,
        y: nodes[2].py - nodes[3].py,
        z: nodes[2].z - nodes[3].z
    };
    var v2 = {
        x: nodes[2].px - nodes[0].px,
        y: nodes[2].py - nodes[0].py,
        z: nodes[2].z - nodes[0].z
    };
    
    return {
        x: v1.y * v2.z - v1.z * v2.y,
        y: v1.z * v2.x - v1.x * v2.z,
        z: v1.x * v2.y - v1.y * v2.x
    };
};

// Assume everything has 3 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
};

var invertMatrix = function(m) {
    var A = m[1][1] * m[2][2] - m[2][1] * m[1][2];
    var B = m[1][2] * m[2][0] - m[1][0] * m[2][2];
    var C = m[1][0] * m[2][1] - m[1][1] * m[2][0];
    var idet = 1 / (m[0][0] * A + m[0][1] * B + m[0][2] * C);
    
    return [
        [A * idet, (m[0][2] * m[2][1] - m[0][1] * m[2][2]) * idet,
                   (m[0][1] * m[1][2] - m[0][2] * m[1][1]) * idet],
        [B * idet, (m[0][0] * m[2][2] - m[0][2] * m[2][0]) * idet,
                   (m[1][0] * m[0][2] - m[0][0] * m[1][2]) * idet],
        [C * idet, (m[2][0] * m[0][1] - m[0][0] * m[2][1]) * idet,
                   (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * idet]
        ];
};

var multiplyMatrices = function(m1, m2) {
    var newMatrix = [];

    for (var i = 0; i < 3; i++) {
        var row = [];
        
        for (var j = 0; j < 3; j++) {
            var v = 0;
            
            for (var k = 0; k < 3; k++) {
                v += m1[i][k] * m2[k][j];
            }
            
            row.push(v);
        }
        
        newMatrix.push(row);
    }
    
    return newMatrix;
};

var applyMatrixToNodes = function(m, nodes) {
    for (var i = 0; i < nodes.length; i++) {
        var n = nodes[i];
        var x = n.x;
        var y = n.y;
        var z = n.z;
        n.x = m[0][0] * x + m[0][1] * y + m[0][2] * z;
        n.y = m[1][0] * x + m[1][1] * y + m[1][2] * z;
        n.z = m[2][0] * x + m[2][1] * y + m[2][2] * z;
    }
};

/***********************************
 *      Rotate functions
************************************/

// Rotate shape around the z-axis
var rotateZ3D = function(theta, nodes) {
    var st = sin(theta);
    var ct = cos(theta);
    var x, y;
    
    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i].x;
        y = nodes[i].y;
        nodes[i].x = ct * x - st * y;
        nodes[i].y = ct * y + st * x;
    }
};

var rotateY3D = function(theta, nodes) {
    var ct = cos(theta);
    var st = sin(theta);
    var x, z;

    for (var i = 0; i < nodes.length; i++) {
        x = nodes[i].x;
        z = nodes[i].z;
        nodes[i].x =  ct * x + st * z;
        nodes[i].z = -st * x + ct * z;
    }
};

var rotateX3D = function(theta, nodes){
    var ct = cos(theta);
    var st = sin(theta);
    var y, z;
    
    for (var i = 0; i < nodes.length; i++) {
        y = nodes[i].y;
        z = nodes[i].z;
        nodes[i].y = ct * y - st * z;
        nodes[i].z = st * y + ct * z;
    }
};

var getRotateXMatrix = function(theta) {
    var c = cos(theta);
    var s = sin(theta);
    return [[1, 0, 0], [0, c, -s], [0, s, c]];
};

var getRotateYMatrix = function(theta) {
    var c = cos(theta);
    var s = sin(theta);
    return [[c, 0, s], [0, 1, 0], [-s, 0, c]];
};

var sortByZ = function(a, b) {
    //return b.getZ() - a.getZ();
    return b.z - a.z;
};

// Return "n1,n2", where n1 < n2
var getID = function(n1, n2) {
    if (n1 < n2) {
        return n1 + "," + n2;
    }
    return n2 + "," + n1;
};

/***********************************
 *  GUI Button
************************************/
{
var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = TOOLBAR;
    this.highlightCol = color(210, 210, 210, 250);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
    this.transition = 0;
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.deactivated) {
        fill(200);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/***********************************
 *      Toolbar
 *  Contains other GUI elements
************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 4;
    
    this.buttons = [];
    this.sliders = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(230, 230, 230, 200);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.buttons.forEach(function(p) {
        p.draw();
    });
    
    this.sliders.forEach(function(p) {
        p.draw();
    });
};

Toolbar.prototype.addButton = function(name, func) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    
    
    this.buttons.push(new Button(x, y, w, h, name, func));
    this.h += h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        this.buttons.push(new CheckBox(x, y, w, h, opt));
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseOver()) {
            this.buttons[i].selected = true;
        }
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        var button = this.buttons[i];
        if (button.selected && button.mouseOver()) {
            button.click();
        }
        button.selected = false;
    }
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].selected = false;
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].drag()) {
            return true;
        }
    }
};
}
/***********************************
 *      Node object
 * A node is an point in 3D space
************************************/
{
var Node = function(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.r = nodeSize;
    this.color = ORANGE;
    this.update();
};

Node.prototype.draw = function() {
    fill(this.color);
    noStroke();
    ellipse(this.px, this.py, this.r, this.r);
};

Node.prototype.update = function() {
    var p = persp / (this.z + persp);
    this.px = this.x * p;
    this.py = this.y * p;
};

Node.prototype.getZ = function() {
    return this.z;
};

Node.prototype.info = function() {
    println(this.x  + " " + this.y + " " + this.z);
};
}
/***********************************
 *      Edge object
 *  An edge is a line that join two nodes.
************************************/
{
var Edge = function(node1, node2, color, thickness) {
    this.node1 = node1;
    this.node2 = node2;
    this.update();
    this.color = color || BLUE;
    this.thickness = thickness || 1;
};

Edge.prototype.draw = function() {
    stroke(this.color);
    strokeWeight(this.thickness);
    line(this.x1, this.y1, this.x2, this.y2);
};

Edge.prototype.update = function() {
    this.x1 = this.node1.px;// - 0.5 * nodeSize * sin(theta);
    this.y1 = this.node1.py;// - 0.5 * nodeSize * cos(theta);
    this.x2 = this.node2.px;// + 0.5 * nodeSize * sin(theta);
    this.y2 = this.node2.py;// + 0.5 * nodeSize * cos(theta);
    
    this.z = 0.5 * (this.node1.z + this.node2.z) - this.thickness / 8;
};

Edge.prototype.getZ = function() {
    return 0.5 * (this.node1.z + this.node2.z) - this.thickness / 10;
};
}
/***********************************
 *      Face object
 * A face is a surface that joins an
 * array of nodes.
 * Its colour depends on its
 * orientation relative to a light
 * source.
************************************/

var Face = function(nodes, color) {
    this.nodes = nodes;
    this.nodeCount = this.nodes.length;
    this.update();
    this.color = color || GREEN;
    this.light = this.color;
    this.sort = 0;
    
    if (this.nodes.length === 3) {
        this.drawShape = this.drawTriangle;
    } else {
        this.drawShape = this.drawQuad;
    }
};

Face.prototype.update = function() {
    var normal = normaliseVector(normalOfPlane(this.nodes));
    var l = 1 - constrain(dotProduct(lightVector, normal), 0.1, 1);
    this.light = lerpColor(this.color, SHADE, l);
    
    // Find order in which to draw faces
    // by finding where it intersects the z-axis
    
    // If the first normal says it should be hidden, check the
    // second one so we don't hide things that need to be shown.
    //if (normal.z >= 0 && this.nodes.length === 4) {
        normal = normaliseVector(otherNormalOfPlane(this.nodes));
    //}
    
    //if (normal.z < 0) {
        //this.z = dotProduct(normal, this.nodes[0]) / normal.z;
        
        this.z = 0;
        for (var i = 0; i < this.nodeCount; i++) {
            this.z += this.nodes[i].z;
        }
        this.z /= this.nodeCount;
   // } else {
//        this.z = null;
  //  }
    
};

Face.prototype.info = function() {
    println("Face (" + this.nodes.length + ")");
    for (var i = 0; i < this.nodes.length; i++) {
        this.nodes[i].info();
    }
};

Face.prototype.draw = function() {
    strokeWeight(1);
    fill(this.light);
    stroke(this.light);
    this.drawShape();
};

Face.prototype.drawTriangle = function() {
    triangle(this.nodes[0].px, this.nodes[0].py,
             this.nodes[1].px, this.nodes[1].py,
             this.nodes[2].px, this.nodes[2].py);
};

Face.prototype.drawQuad = function() {
    quad(this.nodes[0].px, this.nodes[0].py,
         this.nodes[1].px, this.nodes[1].py,
         this.nodes[2].px, this.nodes[2].py,
         this.nodes[3].px, this.nodes[3].py);
};

/***********************************
 *      Average Point object
 * A point whose position is defined
 * as the weighted
 * average of a list of points.
************************************/
{
var AveragePoint = function(points, weights, n) {
    this.points = points;
    this.weights = weights;
    this.n = n; // Index in node array
    this.animation = 0;
    
    this.update();
};

AveragePoint.prototype.update = function(animation) {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.value = 0;
    var w, p;
    
    for (var i in this.weights) {
        w = this.weights[i];
        p = this.points[i];
        this.x += p.x * w;
        this.y += p.y * w;
        this.z += p.z * w;
        this.value += p.value * w;
    }
    
    if (animation) {
        var x = 0;
        var y = 0;
        var z = 0;
        var v = 0;
        
        for (var i in this.newWeights) {
            w = this.newWeights[i];
            p = this.points[i];
            x += p.x * w;
            y += p.y * w;
            z += p.z * w;
            v += p.value * w;
        }
        
        this.x = lerp(x, this.x, animation);
        this.y = lerp(y, this.y, animation);
        this.z = lerp(z, this.z, animation);
        this.value = lerp(v, this.value, animation);
    }
    
    var p = persp / (this.z + persp);
    this.px = this.x * p;
    this.py = this.y * p;
};

AveragePoint.prototype.getZ = function() {
    // Ensure these are drawn behind the main nodes
    return this.z + 0.01;
};

// Given an array of AveragePoints, return a hash
// of their weight averaged
var getAverageOfWeights = function(points) {
    var d = { };
    var w = 1 / points.length;
    
    for (var i = 0; i < points.length; i++) {
        var p = points[i];
        for (var j in p.weights) {
            if (d[j]) {
                d[j] += p.weights[j] * w;
            } else {
                d[j] = p.weights[j] * w;  
            }
        }   
    }
    
    return d;
};

// Given an array of AveragePoints,
// return a new averagePoint, which is their average
var getAverageOfPoints = function(points, n) {
    var d = getAverageOfWeights(points);
    return new AveragePoint(points[0].points, d, n);
};
}
/***********************************
 *      Wireframe object
************************************/
{
var Wireframe = function() {
    this.newCurve();
};

Wireframe.prototype.newCurve = function() {
    var z = 20;
    var w = originalPlane[0].length - 1;
    var h = originalPlane.length - 1;
    var d = 50;
    var mz = 100;
    
    var w2 = w * 0.5;
    var h2 = h * 0.5;
    var i, j, x, y, r, n;
    this.originalNodes = [];
    
    for (j = 0; j <= h; j++) {
        y = (j - h2) * d;
        for (i = 0; i <= w; i++) {
            r = originalPlane[j][i];
           // r = (i === 2 && j === 7) ? 1 : 0;
            this.originalNodes.push(
                [(i - w2) * d, z - r * mz, y, r * 255]
            );
        }
    }
    
    this.originalFaces = [];
    for (i = 0; i < w; i++) {
        for (j = 0; j < h; j++) {
            n = i + j * (w + 1);
            this.originalFaces.push(
                [n, n + 1, n + w + 2, n + w + 1]
            );
        }
    }
    
    this.reset();
};

Wireframe.prototype.reset = function() {
    this.animation = 0;
    
    // Create Wireframe control points
    this.nodes = [];
    
    var i, n, node;
    for (i = 0; i < this.originalNodes.length; i++) {
        n = this.originalNodes[i];
        node = new Node(n[0], n[1], n[2]);
        node.value = n[3];
        this.nodes.push(node);
    }
    
    this.matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
    this.rotateX = 0;
    this.rotateY = 0;
    this.undivide();
};

// Get shape in its undivided form
Wireframe.prototype.undivide = function() {
    // Add average points at each node
    this.averageNodes = [];
    var n = this.nodes.length;
    for (var i = 0; i < n; i++) {
        var d = {};
        d[i] = 1;
        this.averageNodes.push(new AveragePoint(this.nodes, d, i));
    }

    this.faceNums = this.originalFaces;
    this.createFaces();

    this.edges = [];
    this.averageEdges = [];
    
    // Keep track of which edges we have created
    var edgeIDs = [];
    
    for (var i = 0; i < this.originalFaces.length; i++) {
        var face = this.originalFaces[i];
        var n = face.length;
        
        for (var j = 0; j < n; j++) {
            var n1 = face[j];
            var n2 = face[(j + 1) % n];
            var id = getID(n1, n2);
            
            if (edgeIDs.indexOf(id) === -1) {
                this.edges.push(
                    new Edge(this.nodes[n1], this.nodes[n2])
                );
                this.averageEdges.push(
                    new Edge(this.averageNodes[n1],
                             this.averageNodes[n2], GREEN, 2)
                );
                edgeIDs.push(id);
            }
            
        }
    }

    this.collectParts();
    
    if (toolbar && toolbar.buttons) {
        toolbar.buttons[0].deactivated = false;
    }
};

// Convert an array of arrays of node indices into an
// array of face objects from those nodes
Wireframe.prototype.createFaces = function() {
    var i, j, nodeNums, nodes;
    this.faces = [];
    
    for (i = 0; i < this.faceNums.length; i++) {
        nodeNums = this.faceNums[i];
        nodes = [];
        for (j = 0; j < nodeNums.length; j++) {
            nodes.push(this.averageNodes[nodeNums[j]]);
        }
        this.faces.push(new Face(nodes));
    }
};

// Collect everything together so we can sort and draw
Wireframe.prototype.collectParts = function() {
    this.parts = [];
    
    if (showing['Control points']) {
        this.parts = this.parts.concat(this.nodes);
    }
    if (showing['Control arms']) {
        this.parts = this.parts.concat(this.edges);
    }
    if (showing['Average points']) {
        this.parts = this.parts.concat(this.averageNodes);
    }
    if (showing.Fill) {
        this.parts = this.parts.concat(this.faces);
    }
    if (showing.Edges) {
        this.parts = this.parts.concat(this.averageEdges);
    }
    //this.parts.sort(sortByZ);
    this.update();
};

Wireframe.prototype.draw = function() {
    if (this.animation > 0) {
        this.animation--;
        
        if (this.animation === 0) {
            for (var i = this.averageNodes.length; i--;) {
                this.averageNodes[i].weights = this.averageNodes[i].newWeights;
            }
        }
        
        this.update();
    }
    
    var i, n = this.parts.length;
    for (i = 0; i < n; i++) {
        this.parts[i].draw();
    }
};

Wireframe.prototype.update = function() {
    var i;
    for (i = 0; i < this.nodes.length; i++) {
        this.nodes[i].update();
    }

    for (i = 0; i < this.edges.length; i++) {
        this.edges[i].update();
    }
    
    var p = this.animation / ANIMATE_AVERAGE;
    for (i = 0; i < this.averageNodes.length; i++) {
        this.averageNodes[i].update(p);
    }
    
    for (i = 0; i < this.faces.length; i++) {
        this.faces[i].update();
    }
    
    this.parts.sort(sortByZ);
};

// Create new average points along each face and each edge
Wireframe.prototype.split = function() {
    var n = this.averageNodes.length;
    
    if (n > MAX_NODES) {
        toolbar.buttons[0].deactivated = true;
        return;
    }
    
    // Add nodes halfway along each edge
    var newNodes = [];
    var len = sqrt(n);
    var i, j;
    
    // Add new nodes between every node except those at the edge of the grid
    for (i = 0; i < n; i++) {
        if (i % len) {
            newNodes.push(getAverageOfPoints([
                this.averageNodes[i - 1],
                this.averageNodes[i]
            ]));
        }
        newNodes.push(this.averageNodes[i]);
    }
    
    // Length of grid after new nodes have been added
    var len2 = 2 * len - 1;

    // Add a row of new nodes between each existing node
    for (i = len - 1; i > 0; i--) {
        for (j = len2; j--;) {
            newNodes.splice(i * len2, 0,
                getAverageOfPoints([
                    newNodes[(i - 1) * len2 + j],
                    newNodes[(i + 1) * len2 - 1]
                ])
            );
        }
    }
 
    // Add new edges between each new node and new faces
    this.averageEdges = [];
    this.faces = [];
    
    for (i = 0; i < newNodes.length; i++) {
        // Horizontal edges
        if (i % len2) {
            this.averageEdges.push(new Edge(
                newNodes[i - 1], newNodes[i], GREEN, 2)
            );
        }
        
        // Vertical edges
        if (i >= len2) {
            this.averageEdges.push(new Edge(
                newNodes[i - len2], newNodes[i], GREEN, 2)
            );
        }
        
        if (i % len2 && i >= len2) {
            this.faces.push(new Face([
                newNodes[i],
                newNodes[i - 1],
                newNodes[i - len2 - 1],
                newNodes[i - len2],
            ]));
        }
    }
    
    this.averageNodes = newNodes;
    //this.createFaces();
    this.collectParts();
    this.update();
};

// Each point becomes an average of its neighbours
Wireframe.prototype.average = function() {
    var n = this.averageNodes.length;
    var len = sqrt(n);
    
    // Each node is averaged with itself and its neighbours
    for (var i = 0; i < n; i++) {
        var nodes = [];
        var row = floor(i / len);
        var col = i % len;
        
        if (col > 0) {
            nodes.push(this.averageNodes[i - 1]);
        }
        if (col < len - 1) {
            nodes.push(this.averageNodes[i + 1]);
        }
        if (row > 0) {
            nodes.push(this.averageNodes[i - len]);
        }
        if (row < len - 1) {
            nodes.push(this.averageNodes[i + len]);
        }
        
        this.averageNodes[i].newWeights = getAverageOfWeights(nodes);
    }
    
    this.animation = ANIMATE_AVERAGE;
};

Wireframe.prototype.rotate = function() {
    // Matrix to reset current camera position
    var inv = invertMatrix(this.matrix);
    
    // Matrix for new rotation
    this.matrix = multiplyMatrices(getRotateXMatrix(this.rotateY), getRotateYMatrix(this.rotateX));
    
    // Apply both matrixes
    applyMatrixToNodes(multiplyMatrices(this.matrix, inv), this.nodes);
};

Wireframe.prototype.export = function() {
    var str = "var drawShape = function(cx, cy) {\n";
    str += "\tpushMatrix();\n";
    str += "\ttranslate(cx, cy);\n";
    str += "\tstrokeWeight(1);\n";
    
    for (var i = 0; i < this.faces.length; i++) {
        var face = this.faces[i];
        if (face.z) {
            var colour = face.light;
            str += "\tfill(" + colour + ");\n";
            str += "\tstroke(" + colour + ");\n";
            str += face.nodeCount === 3 ? "\ttriangle(" : "\tquad(" ;
            
            for (var j = 0; j < face.nodeCount; j++) {
                var node = face.nodes[j];
                if (j) { str += ", "; }
                str += round(node.px) + ", " + round(node.py);
            }
            
            str += ");\n";
        }
    }
    
    str += "\tpopMatrix();\n};\n\n";
    str += "drawShape(200, 200);";
    
    println(str);
};

Wireframe.prototype.mousePressed = function() {
    var mx = (mouseX - translateX) / _scale;
    var my = (mouseY - translateY) / _scale;
    
    if (showing['Control points']) {
        for (var n = 0; n < this.nodes.length; n++) {
            var node = this.nodes[n];
            if (dist(mx, my, node.px, node.py) <= nodeSize * 0.5) {
                this.selectedNode = node;
                break;
            }
        }   
    }
};

Wireframe.prototype.mouseDragged = function() {
    var dx = mouseX - pmouseX;
    var dy = mouseY - pmouseY;
    var d = 0.4;
    
    this.rotateX -= d * dx;
    this.rotateY += d * dy;
    this.rotate();
    this.update();
    return true;
};

Wireframe.prototype.mouseReleased = function() {
    this.selectedNode = false;
};
}
/***********************************
 *      Grid objects
 * a grid in the xz plane with n
 * squares in each direction
 * size is the size of each square
************************************/
{
var Grid = function(n, size, y) {
    this.n = n;
    this.size = size;
    this.y = y || 0;
    this.reset();
};

Grid.prototype.reset = function() {
    this.nodes = [];
    this.edges = [];
    var n2 = this.n * 0.5;
    var s = n2 * this.size;
    
    for (var i = 0; i <= this.n; i++) {
        var x = (i - n2) * this.size;
        this.nodes.push({ x:  x, y: this.y, z: -s });
        this.nodes.push({ x:  x, y: this.y, z:  s });
        this.nodes.push({ x: -s, y: this.y, z:  x });
        this.nodes.push({ x:  s, y: this.y, z:  x });
        this.edges.push([i * 4, i * 4 + 1]);
        this.edges.push([i * 4 + 2, i * 4 + 3]);
    }
    
    this.corners = [
        this.nodes[0],
        this.nodes[1],
        this.nodes[4 * this.n + 1],
        this.nodes[4 * this.n]
    ];
    
    this.matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
    this.rotateX = 0;
    this.rotateY = 0;
};

Grid.prototype.draw = function() {
    noStroke();
    fill(0, 0, 255, 20);
    quad(this.corners[0].px, this.corners[0].py,
         this.corners[1].px, this.corners[1].py,
         this.corners[2].px, this.corners[2].py,
         this.corners[3].px, this.corners[3].py);
    
    
    strokeWeight(1);
    stroke(80, 80, 40, 60);
    
    for (var i = 0; i < this.edges.length; i++) {
        var edge = this.edges[i];
        var n1 = this.nodes[edge[0]];
        var n2 = this.nodes[edge[1]];
        var p1 = n1.z + persp;
        var p2 = n2.z + persp;
        if (p1 > 0 && p2 > 0) {
            p1 = persp / p1;
            p2 = persp / p2;
            line(n1.x * p1, n1.y * p1, n2.x * p2, n2.y * p2);   
        }
    }
};

Grid.prototype.orientation = function() {
    for (var i = 0; i < this.corners.length; i++) {
        var p = persp / (this.corners[i].z + persp);
        this.corners[i].px = this.corners[i].x * p;
        this.corners[i].py = this.corners[i].y * p;
    }
    
    return normalOfPlane(this.corners);
};

Grid.prototype.rotate = function() {
    // Matrix  to reset current camera position
    var inv = invertMatrix(this.matrix);
    
    // Matrix for new rotation
    this.matrix = multiplyMatrices(getRotateXMatrix(this.rotateY), getRotateYMatrix(this.rotateX));
    
    // Apply both matrixes
    applyMatrixToNodes(multiplyMatrices(this.matrix, inv), this.nodes);
};

Grid.prototype.mouseDragged = function() {
    var d = 0.4;
    var dx = d * (mouseX - pmouseX);
    var dy = d * (mouseY - pmouseY);
    this.rotateX -= dx;
    this.rotateY += dy;
    this.rotate();
};
}
/***********************************
 *      Create wireframe objects
************************************/

var myShape = new Wireframe();
var grid = new Grid(8, 50, 50);

var lightVector = normaliseVector(lightVector);

/***********************************
 *      GUI
************************************/

var addButtons = function(toolbar) {
    // Functions to attach to buttons
    var funcs = {
        "Subdivide": function() {
            if (!myShape.animation) {
                myShape.split();
                myShape.average();  
            }
        },
        "Reset": function() {
            myShape.undivide();
        },/*
        "Reset": function() {
            myShape.reset();
            grid.reset();
        }*/
    };

    for (var f in funcs) {
        toolbar.addButton(f, funcs[f]);
    }    
    
    //toolbar.addSlider(0.25, 2, 1, "Scale");
    
    toolbar.addOptions(showing);
};

toolbar = new Toolbar(toolbarX, toolbarX, toolbarWidth);
addButtons(toolbar);

var draw2DNoise = function(x, y, w) {
    noStroke();
    fill(200);
    rect(x, y, w, w);
    var nodes = myShape.averageNodes;
    
    // Number of vertices across
    var n = sqrt(nodes.length);
    
    // Number of faces across
    var n1 = n - 1;
    
    // How faces per pixel
    var f = n1 / w;
    
    loadPixels();
    var p = imageData.data;
    var xi, yi, px, py, ix, iy, node, v1, v2, v3, index;
    
    // For each pixel across
    for (xi = 0; xi < w; xi++) {
        px = xi * f;
        // What face is this pixel
        ix = px | 0;
        // How far along the face are we
        px -= ix;

        for (yi = 0; yi < w; yi++) {
            py = yi * f;
            iy = py | 0;
            py -= iy;
            node = ix + iy * n;

            // Value based on interpolation along this tile
            v1 = nodes[node].value * (1 - px) + 
                 nodes[node + 1].value * px;

            node += n;
            v2 = nodes[node].value * (1 - px) + 
                 nodes[node + 1].value * px;
            v3 = v1 * (1 - py) + v2 * py;

            index = (y + w - yi) * width + x + xi << 2;
            p[index++] = v3;
            p[index++] = v3;
            p[index] = v3;
        }
        
    }
    
    updatePixels();
};

/***********************************
 *      Main loop
************************************/

var draw = function() {
    background(BACKGROUND);
    
    pushMatrix();
    translate(translateX, translateY);
    //_scale = toolbar.sliders[0].val;
    //scale(_scale);
    
    // Determine whether to draw the grid before or after the surface
    if (showing.Grid && grid.orientation().z > 0) {
        grid.draw();   
    }
    
    myShape.draw();
    
    if (showing.Grid && grid.orientation().z <= 0) {
        grid.draw();   
    }
    
    popMatrix();
    
    draw2DNoise(10, height - 138, 128);
    
    /*
    if (myShape.averageNodes.length > MAX_NODES) {
        toolbar.buttons[0].disabled = true;
    } else {
        toolbar.buttons[0].disabled = false;
    }
    */
    toolbar.draw();
};

/***********************************
 *      Event handling
************************************/
{
mousePressed = function() {
    myShape.mousePressed();
    toolbar.mousePressed();
};

mouseDragged = function() {
    if (toolbar.mouseDragged()) {
    } else if (myShape.mouseDragged()) {
        grid.mouseDragged();   
    }
};

mouseReleased = function() {
    toolbar.mouseReleased();
    myShape.mouseReleased();
    myShape.collectParts();
};

mouseOut = function() {
    //mouseReleased();
};

keyPressed = function() {
    if (keyCode === LEFT) {
        rotateY3D(-3, myShape.nodes);
        rotateY3D(-3, grid.nodes);
    } else if (keyCode === RIGHT) {
        rotateY3D(3, myShape.nodes);
        rotateY3D(3, grid.nodes);
    } else if (keyCode === UP) {
        rotateX3D(3, myShape.nodes);
        rotateX3D(3, grid.nodes);
    } else if (keyCode === DOWN) {
        rotateX3D(-3, myShape.nodes);
        rotateX3D(-3, grid.nodes);
    } else if (key.toString() === 'e') {
        myShape.export();
    }
    
    myShape.update();
};
}
//rotateY3D(30, myShape.nodes);
//rotateX3D(30, myShape.nodes);
//rotateY3D(30, grid.nodes);
//rotateX3D(30, grid.nodes);
myShape.update();
