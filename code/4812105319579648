// Animate mouseover control points
// Make snapping more efficient
// End screen

var BACKGROUND = color(250, 250, 250);
var GRIDGREY = color(230, 240, 230);
var PINK = color(255, 0, 175);
var BLUE = color(64, 95, 237);
var GREY = color(100, 100, 100);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var RESOLUTION = 20;

/**************************************
 *      DraggablePoint
 *  A point that can be dragged
***************************************/
{
var DraggablePoint = function(x, y, r, color, name, snap) {
    this.x = x;
    this.y = y;
    this.r = r || 6;
    this.color = color || ORANGE;
    this.animation = 0;
    this.name = name || "";
    this.snap = snap;
};

DraggablePoint.prototype.draw = function() {
    if (this.selected || (!this.selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = this.r * 2 + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

DraggablePoint.prototype.update = function() {
    // empty for overwriting
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r + 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x = mouseX + dx;
    this.y = mouseY + dy;
};
}

/*********************************************************************
 * Parabolic arc
 * Curve between by two points at (x1, y1) and (x2, y2),
 * with a control point at (x3, y3)
**********************************************************************/
{
var Curve = function(p1, p2, p3, colour, fixed) {
    this.p1 = p1;
    this.p2 = p2;
    this.p3 = p3;
    this.controlPoints = [this.p1, this.p2, this.p3];
    
    this.color = colour || BLUE;
    this.fixed = fixed;
    this.selectedPoint = false;
};

Curve.prototype.draw = function() {
    // Lines to control points
    if (!this.fixed) {
        strokeWeight(1);
        stroke(this.color);
        line(this.p1.x, this.p1.y, this.p3.x, this.p3.y);
        line(this.p2.x, this.p2.y, this.p3.x, this.p3.y);
    }
    
    // Parabola
    stroke(this.color);
    strokeWeight(3);
    noFill();
    beginShape();
    for (var i = 0; i <= RESOLUTION; i++) {
        var d = i / RESOLUTION;
        var rx = lerp(this.p3.x, this.p1.x, d);
        var ry = lerp(this.p3.y, this.p1.y, d);
        var sx = lerp(this.p2.x, this.p3.x, d);
        var sy = lerp(this.p2.y, this.p3.y, d);
        vertex(lerp(sx, rx, d), lerp(sy, ry, d));
    }
    endShape();

    if (!this.fixed) {
        for (var i = 0; i < this.controlPoints.length; i++) {
            this.controlPoints[i].draw();
        }
    }
};

Curve.prototype.selectPoint = function() {
    for (var i = 0; i < this.controlPoints.length; i++) {
        if (this.controlPoints[i].mouseover()) {
            this.selectedPoint = this.controlPoints[i];
            this.selectedPoint.selected = true;
        }
    }
};

Curve.prototype.deselect = function() {
    this.selectedPoint.selected = false;
    this.selectedPoint = false;
};
}
/**************************************
 *      Grid object
 *  A Cartesian grid and with methods to
 * convert between pixels and grid coordinates.
***************************************/
{
var Grid = function(x0, y0, tickSize, tickValue) {
    this.tickSize = tickSize;
    this.tickValue = tickValue;
    this.snapSize = round(tickSize * 0.5);
    
    this.originX = round(width / (2 * this.snapSize)) * this.snapSize;
    this.originY = round(height / (2 * this.snapSize)) * this.snapSize;
    this.minX = this.originX % this.tickSize;
    this.minY = this.originY % this.tickSize;
    
    this.objects = [];
    this.selectables = [];
    this.selected = false;
};

Grid.prototype.draw = function() {
    background(BACKGROUND);
    this.drawGrid();
    
    for (var i = 0; i < this.objects.length; i++) {
        //this.objects[i].update();
        this.objects[i].draw();
    }
};

Grid.prototype.drawGrid = function() {
    // Grid lines
    stroke(GRIDGREY);
    strokeWeight(1);
    
    for (var x = this.minX; x < width; x += this.tickSize) {
        line(x, 0, x, height);
    }
    
    for (var y = this.minY; y < height; y += this.tickSize) {
        line(0, y, width, y);
    }
    
    // Axes
    stroke(GREY);
    line(this.originX, 0, this.originX, height);
    line(0, this.originY, width, this.originY);
    
    // Labels
    fill(GREY);
    textFont(serifFont, 12);
    
    textAlign(CENTER, TOP);
    for (var x = this.minX; x < width; x += 2 * this.tickSize) {
        if (abs(x - this.originX) > 2) {
            line(x, this.originY, x, this.originY + 3);
            text(this.pixelToGridX(x), x, this.originY + 5);
        }
    }
    
    textAlign(RIGHT, CENTER);
    for (var y = this.minY; y < height; y += 2 * this.tickSize) {
        if (abs(y - this.originY) > 2) {
            line(this.originX, y, this.originX - 3, y);
            text(this.pixelToGridY(y), this.originX - 5, y);
        }
    }
};

Grid.prototype.addObject = function(obj, selectable) {
    this.objects.push(obj);
    if (selectable) {
        this.selectables.push(obj);
    }
};

Grid.prototype.snapTo = function(n, origin) {
    origin = origin || 0;
    n = origin - n;
    n = round(n / this.snapSize) * this.snapSize;
    return origin - n;
};

Grid.prototype.pixelToGridX = function(x) {
    return (x - this.originX) / this.tickSize;
};

Grid.prototype.pixelToGridY = function(y) {
    return (this.originY - y) / this.tickSize;
};

Grid.prototype.gridToPixelX = function(x) {
    return x * this.tickSize + this.originX;
};

Grid.prototype.gridToPixelY = function(y) {
    return this.originY - y * this.tickSize;
};

Grid.prototype.gridToPixel = function(x, y) {
    return {
        x: this.gridToPixelX(x),
        y: this.gridToPixelY(y)
    };
};

Grid.prototype.mousePressed = function() {
    for (var i = 0; i < this.selectables.length; i++) {
        var selectable = this.selectables[i];
        if (selectable.mouseOver()) {
            this.selected = selectable;
            this.selected.selected = true;
            this.dragX = selectable.x - mouseX;
            this.dragY = selectable.y - mouseY;
        }
    }
};

Grid.prototype.mouseReleased = function() {
    this.selected.selected = false;
    this.selected = false;
};

Grid.prototype.mouseDragged = function() {
    if (this.selected) {
        // TODO: Check points don't overlap
        this.selected.move(this.dragX, this.dragY);
        if (this.selected.snap) {
            this.selected.x = this.snapTo(this.selected.x, this.x0);
            this.selected.y = this.snapTo(this.selected.y, this.y0);
        }
    }
};

Grid.prototype.snapCurve = function(curve) {
    for (var i = 0; i < curve.controlPoints.length; i++) {
        var p = curve.controlPoints[i];
        p.x = this.snapTo(p.x, this.x0);
        p.y = this.snapTo(p.y, this.y0);
    }
};

}
/**************************************
 *  Create target parabola
 * Either from exercise or pick one at random
***************************************/

var getParabola = function() {
    var properties = Program.settings();
    var x1 = properties.x1;
    
    if (x1 !== undefined) {
        var y1 = properties.y1;
        var x2 = properties.x2;
        var y2 = properties.y2;
        var x3 = properties.x3;
        var y3 = properties.y3;
        
        return [x1, y1, x2, y2, x3, y3];
    } else {
        // Array of target parabola positions
        var answers = [
            [0, 0, 4, 8, 2, 0],
            [0, 0, 8, 0, 4, 2],
            [1, 4, 7, 4, 4, 0],
            [1, 1, 1, 5, 8, 3],
        ];
        
        return answers[floor(random() * answers.length)];
    }
};

/**************************************
 *  Create objects
***************************************/

var target = getParabola();

var grid = new Grid(width / 2, height / 2, 20);

var targetCurve = new Curve(
    grid.gridToPixel(target[0], target[1]),
    grid.gridToPixel(target[2], target[3]),
    grid.gridToPixel(target[4], target[5]),
    GREEN, true
);
grid.addObject(targetCurve);

var p1 = new DraggablePoint(grid.gridToPixelX(-8), grid.gridToPixelY(3), 6, ORANGE, "", true);
var p2 = new DraggablePoint(grid.gridToPixelX(8), grid.gridToPixelY(3), 6, ORANGE, "", true);
var p3 = new DraggablePoint(grid.gridToPixelX(0), grid.gridToPixelY(8), 6, ORANGE, "", true);
var myCurve = new Curve(p1, p2, p3);
grid.snapCurve(myCurve);

grid.addObject(p1, true);
grid.addObject(p2, true);
grid.addObject(p3, true);
grid.addObject(myCurve);

/*********************************************
 *      Draw functions
**********************************************/

var endState = function() {
    var p = myCurve.controlPoints;
    var t = targetCurve.controlPoints;
    
    // Check vertex control point
    if (abs(p[2].x - t[2].x) > 2 || abs(p[2].y - t[2].y) > 2) {
        return false;
    }
    
    if (abs(p[0].x - t[0].x) < 3 && abs(p[0].y - t[0].y) < 3 &&
        abs(p[1].x - t[1].x) < 3 && abs(p[1].y - t[1].y) < 3) {
        return true;
    }
    
    if (abs(p[0].x - t[1].x) < 3 && abs(p[0].y - t[1].y) < 3 &&
        abs(p[1].x - t[0].x) < 3 && abs(p[1].y - t[0].y) < 3) {
        return true;
    }
    
    return false;
};

/*********************************************
 *      Main loop
**********************************************/

draw = function() {
    grid.draw();
};

/*********************************************
 *      Event handling
**********************************************/

mousePressed = function() {
    grid.mousePressed();
};

mouseReleased = function() {
    grid.mouseReleased();
};

mouseDragged = function() {
    grid.mouseDragged();
    
    if (endState()) {
        Program.runTest(function() {
            return true;
        });
        myCurve.color = PINK;
    } else {
        myCurve.color = BLUE;
    }
};
