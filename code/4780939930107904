// Effeciently shading a sphere based on mouse position
// With help from: https://www.khanacademy.org/computer-programming/_/1925327317

var sphereX = 200;
var sphereY = 200;
var sphereR = 100;
var sphereR2 = sphereR * sphereR;
var sphereR1 = sphereR - 1;
var sphereR12 = sphereR1 * sphereR1;
var sphereRd = 1 / (sphereR2 - sphereR12);

// Inverse radius
var ixy = 1 / sphereR;

var lightZ = 80;
var lightZ2 = lightZ * lightZ;

// Generate a 1D array of the noise we need
var noiseMap = [];
var normMap = [];
var getNoiseMap = function() {
    var x, dx, xp, yp, zp, n, m;
    var noiseScale = 2;
    noiseDetail(4, 0.5);
    
    for (var y = -sphereR; y < sphereR; y++) {
        dx = floor(sqrt(sphereR2 - y * y));
        yp = y * ixy;
        
        for (x = -dx; x <= dx; x++) {
            xp = x * ixy;
            zp = sqrt(1 - xp * xp - yp * yp);
            
            n = noise(xp * noiseScale, yp * noiseScale, zp * noiseScale);
            n *= n * (3 - 2 * n);
            n *= n * (3 - 2 * n);
            noiseMap.push(255 * n);
            normMap.push([xp, yp, zp]);
        }
    }
};

var getNoiseMap2 = function() {
    var x, dx, xp, yp, zp, n, m;
    var noiseScale = 1;
    var xPeriod = 10;
    var yPeriod = 20;
    var zPeriod = 4 * 360;
    
    noiseDetail(4, 0.5);
    
    for (var y = -sphereR; y < sphereR; y++) {
        dx = floor(sqrt(sphereR2 - y * y));
        yp = y * ixy;
        
        for (x = -dx; x <= dx; x++) {
            xp = x * ixy;
            zp = sqrt(1 - xp * xp - yp * yp);
            
            n = abs(sin(xPeriod * acos(xp)) + sin(yPeriod * acos(yp))); // + sin(zPeriod * zp));
            
            //n = noise(xp * noiseScale, yp * noiseScale, zp * noiseScale);
            //n *= n * (3 - 2 * n);
            //n *= n * (3 - 2 * n);
            noiseMap.push(128 * n);
            normMap.push([xp, yp, zp]);
        }
    }
};

getNoiseMap2();

draw = function() {
    background(0);
    loadPixels();
    
    // Mouse controls
    // pitch += (mouseY-pmouseY)*0.5;
    // yaw += (mouseX-pmouseX)*0.5;
    
    var p = this.imageData.data;
    var ms = millis();
    
    // Calculate normalised light vector
    var lightXNorm = mouseX - sphereX;
    var lightYNorm = mouseY - sphereY;
    var lightDist = sqrt(lightXNorm * lightXNorm + lightYNorm * lightYNorm + lightZ2);
    lightXNorm /= lightDist;
    lightYNorm /= lightDist;
    var lightZNorm = lightZ / lightDist;
    
    var light, drawY, pixelIndex;
    var norm, dx, x, xp, yp, zp, y2;
    var count = 0;
    
    for (var y = -sphereR; y < sphereR; y++) {
        // Length of along x we go
        y2 = y * y;
        dx = floor(sqrt(sphereR2 - y2));
        
        // Where to draw the sphere
        drawY = sphereX + (y + sphereY) * width;

        for (x = -dx; x <= dx; x++) {
            // Dot product of light and position on sphere
            // Normal of sphere = [xp, yp, zp]
            norm = normMap[count];
            light = norm[0] * lightXNorm + norm[1] * lightYNorm + norm[2] * lightZNorm;
            light = 0.2 + 0.9 * light;
            light *= noiseMap[count++];
            
            // anti-alias
            var xyr = x * x + y2;
            
            // only pixels that touch the edge
            if (xyr > sphereR12){
                light *= 1 - (xyr - sphereR12) * sphereRd;
            }

            pixelIndex = x + drawY << 2;
            p[pixelIndex++] = light;
            p[pixelIndex++] = light;
            p[pixelIndex++] = light;

        }
    }
    
    ms = millis() - ms;
    updatePixels();
    
    // Test speed
    fill(200);
    text(ms, 370, 390);
    //text(d, 370, 370);
};
