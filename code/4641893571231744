/*********************************************************
 * Build a Voronoi diagram using Fortune's algorithm.
**********************************************************/

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);

//var sites = [[30, 100], [150, 30], [160, 140]];
var sites = [[30, 60], [90, 80], [150, 20]];
var serifFont = createFont("Times", 20);

textFont(serifFont, 20);

var mode = 'voronoi';
//var mode = 'circle';
//var mode = 'connecting';
//var mode = 'other';

draw = function() {
    background(BACKGROUND);
    
    // Draw edges
    strokeWeight(2);
    stroke(PINK);
    noFill();
    /*
    stroke(GREEN);
    strokeWeight(2);
    line(sites[0][0], sites[0][1], sites[1][0], sites[1][1]);
    line(sites[0][0], sites[0][1], sites[2][0], sites[2][1]);
    line(sites[2][0], sites[2][1], sites[1][0], sites[1][1]);
*/

    if (mode === 'voronoi') {
        // Edge vectors
        var dx1 = sites[0][0] - sites[1][0];
        var dy1 = sites[0][1] - sites[1][1];
        var dx2 = sites[1][0] - sites[2][0];
        var dy2 = sites[1][1] - sites[2][1];
        var dx3 = sites[2][0] - sites[0][0];
        var dy3 = sites[2][1] - sites[0][1];
        
        // Distances
        var d1 = sqrt(dx1 * dx1 + dy1 * dy1);
        var d2 = sqrt(dx2 * dx2 + dy2 * dy2);
        var d3 = sqrt(dx3 * dx3 + dy3 * dy3);
        
        var vx1 =  dy1 / d1;
        var vy1 = -dx1 / d1;
        var vx2 =  dy2 / d2;
        var vy2 = -dx2 / d2;
        var vx3 =  dy3 / d3;
        var vy3 = -dx3 / d3;
        
        // Midpoints
        var mx1 = (sites[0][0] + sites[1][0]) / 2;
        var my1 = (sites[0][1] + sites[1][1]) / 2;
        var mx2 = (sites[1][0] + sites[2][0]) / 2;
        var my2 = (sites[1][1] + sites[2][1]) / 2;
        var mx3 = (sites[2][0] + sites[0][0]) / 2;
        var my3 = (sites[2][1] + sites[0][1]) / 2;
        
        var dot = vx2 * vy1 - vy2 * vx1;
        
        // Find intersection of lines in terms of position along bisectors
        var s = (vx1 * (my2 - my1) - vy1 * (mx2 - mx1)) / dot;
    
        var ix = mx2 + s * vx2;
        var iy = my2 + s * vy2;
        
        println(mx1 + ", " + my1 + " m=" + (dy1 / dx1) + " b=" + (my1 + mx1 * dx1 / dy1));
        println(mx2 + ", " + my2 + " " + (dy2 / dx2) + " b=" + (my2 + mx2 * dx2 / dy2));
        println(mx3 + ", " + my3);
        println(ix + ", " + iy);
        
        stroke(PINK);
        /*
        strokeWeight(1);
        line(ix - 200 * vx1, iy - 200 * vy1, ix + 200 * vx1, iy + 200 * vy1);
        line(ix - 200 * vx2, iy - 200 * vy2, ix + 200 * vx2, iy + 200 * vy2);
        line(ix - 200 * vx3, iy - 200 * vy3, ix + 200 * vx3, iy + 200 * vy3);
        */
        
        strokeWeight(2);
        line(ix, iy, ix + 200 * vx1, iy + 200 * vy1);
        line(ix, iy, ix + 200 * vx2, iy + 200 * vy2);
        line(ix, iy, ix + 200 * vx3, iy + 200 * vy3);
        
        stroke(BACKGROUND);
        strokeWeight(1);
        fill(GREEN);
        /*
        ellipse(mx1, my1, 9, 9);
        ellipse(mx2, my2, 9, 9);
        ellipse(mx3, my3, 9, 9);
        
        fill(PINK);
        ellipse(ix, iy, 9, 9);
       */
        fill(0);
        //text("V", ix, iy -7);
        
    } else if (mode === 'circle') {
        var r = 50;
        for (var i = 0; i < sites.length; i++) {
            ellipse(sites[i][0], sites[i][1], r, r);
        }
    } else if (mode === 'connecting') {
        // Edge vectors
        var dx1 = sites[0][0] - sites[1][0];
        var dy1 = sites[0][1] - sites[1][1];
        var dx2 = sites[1][0] - sites[2][0];
        var dy2 = sites[1][1] - sites[2][1];
        var dx3 = sites[2][0] - sites[0][0];
        var dy3 = sites[2][1] - sites[0][1];
        
        line(sites[0][0] - dx1  * 10, sites[0][1] - dy1  * 10,
             sites[0][0] + dx1  * 10, sites[0][1] + dy1  * 10);
        line(sites[1][0] - dx2  * 10, sites[1][1] - dy2  * 10,
             sites[1][0] + dx2  * 10, sites[1][1] + dy2  * 10);
        line(sites[2][0] - dx3  * 10, sites[2][1] - dy3  * 10,
             sites[2][0] + dx3  * 10, sites[2][1] + dy3  * 10);
        
    }  else if (mode === 'other') {
        // Centroid
        var cx = (sites[0][0] + sites[1][0] + sites[2][0]) / 3;
        var cy = (sites[0][1] + sites[1][1] + sites[2][1]) / 3;
       
        // Vectors from points to center
        var dx1 = sites[0][0] - cx;
        var dy1 = sites[0][1] - cy;
        var dx2 = sites[1][0] - cx;
        var dy2 = sites[1][1] - cy;
        var dx3 = sites[2][0] - cx;
        var dy3 = sites[2][1] - cy;
        
        line(cx, cy, cx - 10 * dx1, cy - 10 * dy1);
        line(cx, cy, cx - 10 * dx2, cy - 10 * dy2);
        line(cx, cy, cx - 10 * dx3, cy - 10 * dy3);
    }
    
    // Draw sites
    stroke(BACKGROUND);
    strokeWeight(1);
    fill(BLUE);
    
    for (var i = 0; i < sites.length; i++) {
        ellipse(sites[i][0], sites[i][1], 9, 9);
    }

    // Labels
    fill(0);
    text("A", sites[0][0] - 20, sites[0][1] + 7);
    text("B", sites[1][0] + 7, sites[1][1]);
    text("C", sites[2][0] + 7, sites[2][1] + 14);
    text("C", sites[2][0] + 7, sites[2][1] + 14);

    // Frame
    noFill();
    strokeWeight(1);
    stroke(0);
    rect(0, 0, 200, 180);
};

