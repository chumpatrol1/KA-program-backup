/*********************************************************
 * Modelling how an infectious disease spreads
 * 
 * There are 4 groups of people in the model:
 *  - Susceptible: people who have yet to get the disease
 *  - Infected: people with the disease
 *  - Immune: people who are immune to infection,
 *            including those who have recovered.
 *  - Dead: people who died from the disease.
 * 
 * Each day, people come into contact with one another.
 * Infected people spread the disease to a proportion
 * of susceptible people. Infected people eventually
 * die or recover. People who recover are not susceptible
 * to further infection.
 * 
 * Try changing the infection parameters to see
 * how the progression of the epidemic is changed.
**********************************************************/

var BACKGROUND = color(250, 250, 254);
var RED = color(200, 0, 0);
var GREY = color(160, 160, 160);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TOOLBAR = color(245, 245, 245);

/*****************************************************
 *      More global variables
******************************************************/
// Time in arbitrary units
var t;

// state determines whether we show the 'options' page,
// or whether the simulation is 'running' or 'paused'.
//var state = 'running';
var state = 'options';
//var state = 'info';

// Do we show the time scale
var showTime = true;

// Array of sliders
var sliders = [];

// Number of time the simulation is updated per
// simulated day. The higher this is, the more
// fine grained the simulation, but the slower it is.
var UPDATES_PER_DAY = 4;

/*****************************************************
 *      Parameter object
 * Contains the range of values for each parameter
 * Used to generate the sliders
 * nowValue is set by sliders and used in simulation
******************************************************/

var parameters = {
    Size: {
        desc: "The total number of people in the population.",
        minValue: 1000,
        maxValue: 100000000,
        nowValue: 10000000,
        logScale: true
    },
    "Initial immunity (%)": {
        desc: "The percentage of the population that is initially immune to the disease.",
        minValue: 0,
        maxValue: 99,
        nowValue: 0
    },
    "Initial infections": {
        desc: "The number of people initially infected.",
        minValue: 1,
        maxValue: 1000,
        nowValue: 1,
        logScale: true
    },
    "Contact rate": {
        desc: "The average number of people an infected person comes into contact with each day.",
        minValue: 0.1,
        maxValue: 20,
        nowValue: 4
    },
    "Infection rate (%)": {
        desc: "The percentage of contacts between an infected person and susceptible person that result in the disease being transmitted.",
        minValue: 1,
        maxValue: 100,
        nowValue: 10
    },
    "Disease period": {
        desc: "The average number of days a person with the disease is infectious for.",
        minValue: 1,
        maxValue: 100,
        nowValue: 6
    },
    "Mortality rate (%)": {
        desc: "Percentage of infected people who are killed by the disease.",
        minValue: 1,
        maxValue: 100,
        nowValue: 15
    },
};

/*****************************************************
 *      Properties for sub-populations
 * An array of population counts are added to each
 * population type at the start of the simulation.
******************************************************/

var populations = {
    Susceptible: {
        desc: "People who can be infected by the disease.",
        colour: BLUE
    },
    Infected: {
        desc: "People who are infected by the disease.",
        colour: RED
    },
    Immune: {
        desc: "People who are immune to the disease.",
        colour: GREEN
    },
    Dead: {
        desc: "People who have been killed by the disease.",
        colour: GREY
    }
};

// Set the counts using the slider values
var startSimulation = function() {
    // Update parameter values based on sliders
    var s = 0;
    for (var p in parameters) {
        if (sliders[s]) {
            parameters[p].nowValue = sliders[s].val;
            s++;   
        }
    }
    
    var infected = parameters['Initial infections'].nowValue;
    var immuneProb = parameters['Initial immunity (%)'].nowValue / 100;
    var remaining = max(0, parameters.Size.nowValue - infected);
    
    populations.Susceptible.counts = [remaining * (1 - immuneProb)];
    populations.Infected.counts = [infected];
    populations.Immune.counts = [remaining * immuneProb];
    populations.Dead.counts = [0];
    state = 'running';
    t = 0;
};

var toggleSimulationRunning = function() {
    if (state === 'running') {
        state = 'paused';
    } else if (state === 'paused') {
        state = 'running';
    }
};

/********************************************************
 *  GUI Button
*********************************************************/
{
var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(220, 220, 220, 250);
    this.highlightCol = color(253, 63, 0);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
};

Button.prototype.mouseover = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseover() || this.selected) {
        fill(this.highlightCol);
    } else {
        noFill();
    }
    strokeWeight(2);
    stroke(240, 100, 10);
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    fill(0);
    textSize(16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

// Circular button
var CircleButton = function(x, y, w, h, clickFunction, drawFunction) {
    Button.call(this, x, y, w, h, "", clickFunction);
    this.drawIcon = drawFunction;
};
CircleButton.prototype = Object.create(Button.prototype);

CircleButton.prototype.draw = function() {
    var c;
    if (this.mouseover()) {
        c = color(40, 40, 40);
        fill(255);
    } else {
        c = color(140, 140, 140);
        noFill();
    }
    
    var x = this.x + this.w / 2;
    var y = this.y + this.w / 2;
    stroke(c);
    strokeWeight(2);
    ellipse(x, y, this.w, this.w);
    
    if (this.drawIcon) {
        fill(c);
        this.drawIcon(x, y);   
    }
};
}
/*****************************************************
 *      Slider object
******************************************************/

var Slider = function(x, y, width, minValue, maxValue, nowValue, name, logScale) {
    this.x = x;
    this.x2 = x + width;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.useLog = logScale;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = minValue;
    this.max = maxValue;
    this.val = nowValue || minValue;
    
    if (this.useLog) {
        this.scale = log(this.max / this.min) / Math.log2;
        var n = log(this.val / this.min) / Math.log2;
        this.bx = map(n, 0, this.scale, this.x, this.x2);
    } else {
        this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    }

    this.name = name;
    this.held = false;
};

Slider.prototype.draw = function() {
    noStroke();
    fill(180);
    rect(this.x - 8, this.y - this.h / 2, this.width + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);
};

Slider.prototype.mouseover = function() {
    return mouseX >= this.x - 8 && mouseX <= this.x2 + 8 &&
           mouseY >= this.y - this.h / 2 && mouseY <= this.y + this.h / 2;
};
    
Slider.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
    if (!this.held && this.mouseover()) {
        this.setBallPosition();
    }
};
    
Slider.prototype.drag = function() {
    if (this.held) {
        this.setBallPosition();
        return true;
    }
};

Slider.prototype.setBallPosition = function() {
    this.bx = constrain(mouseX, this.x, this.x2);
    this.setValue();
};

Slider.prototype.setValue = function() {
    if (this.useLog) {
        var n = map(this.bx, this.x, this.x + this.width, 0, this.scale);
        this.val = this.min * round(pow(2, n));
    } else {
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max));
    }
};

// This is used if you want to update the value in a way other
// than using the slider (but want the slider to update).
Slider.prototype.update = function(d) {
    this.val = constrain(this.val + d, this.min, this.max);
    this.bx = (this.val - this.min) / this.scale + this.x;
};

/*****************************************************
 *      Create GUI objects
******************************************************/

var restartIcon = function(x, y) {
    textSize(13);
    textAlign(CENTER, CENTER);
    text("â†»", x, y);
};

var playIcon = function(x, y) {
    noStroke();
    if (state === 'running') {
        rect(x - 4, y - 5, 3, 10, 5);
        rect(x + 1, y - 5, 3, 10, 5);
    } else {
        triangle(x - 3, y - 5, x - 3, y + 5, x + 6, y);
    }
};

var infoIcon = function(x, y) {
    noStroke();
    rect(x - 2, y - 1, 4, 8, 2);
    ellipse(x, y - 4, 4, 4);
};

var closeIcon = function(x, y) {
    strokeWeight(2);
    line(x - 3, y - 3, x + 3, y + 3);
    line(x - 3, y + 3, x + 3, y - 3);
};

var startButton = new Button(width - 70, height - 35, 50, 20, "Start", startSimulation);
var restartButton = new CircleButton(5, 3, 18, 18, function() { state = 'options'; }, restartIcon);
var playButton = new CircleButton(29, 3, 18, 18, toggleSimulationRunning, playIcon);
var infoButton = new CircleButton(53, 3, 18, 18, function() { state = 'info'; }, infoIcon);
var closeButton = new CircleButton(width - 32, 12, 18, 18, function() { state = 'paused'; }, closeIcon);
var toolbarButtons = [restartButton, playButton, infoButton];

var createParameterSliders = function() {
    var x = 170;
    var y = 55;
    var dy = 28;
    
    for (var p in parameters) {
        var parameter = parameters[p];
        var newSlider = new Slider(x, y, 200, parameter.minValue, parameter.maxValue, parameter.nowValue, p, parameter.logScale);
        newSlider.desc = parameter.desc;
        sliders.push(newSlider);
        if (p === 'Contact rate') {
            y += 36;
        }
        y += dy;
    }
};

createParameterSliders();

/*****************************************************
 *      Draw functions
******************************************************/

// Add commas to large Susceptibles
var formatNumber = function(n) {
    var str = n.toString().split(".");
    
    if (str[0].length > 3) {
        return str[0].replace(/(\d)(?=(\d{3})+$)/g, "$1,");
    }
    
    return round(n);
};

var drawScreen = function(d) {
    fill(TOOLBAR);
    noStroke();
    rect(d, d, width - d * 2, height - 2 * d, 26);
};

var drawBorder = function(d) {
    noFill();
    strokeWeight(3);
    stroke(80, 120, 180);
    rect(d, d, width - d * 2, height - 2 * d, 26);
};

// Page to allow users to determine the simulation parameters
var drawParameterOptions = function() {
    drawScreen(5);
    
    startButton.draw();
    
    textSize(13);
    textAlign(LEFT, CENTER);
    var mouseoverSlider = false;
    var x = 16;
    var d = 5;
    
    // Draw sliders
    for (var i = 0; i < sliders.length; i++) {
        var slider = sliders[i];
        
        if (mouseY >= slider.y - 13 && mouseY <= slider.y + 14) {
            mouseoverSlider = slider;
            noStroke();
            fill(230);
            rect(d, slider.y - 13, width - d * 2, 28);
        }
        
        slider.draw();
        
        fill(20);
        text(slider.name + ": " + formatNumber(slider.val), x, slider.y);
    }
    
    // R0 value
    var y = sliders[sliders.length - 1].y;
    var r0 = sliders[3].val * sliders[4].val * sliders[5].val / 100;
    parameters.r0 = r0;
    text("R0 = Contact rate Ã— Infection rate Ã— Disease period", x, y + 30);
    text("R0 = " + sliders[3].val + " Ã— " + (sliders[4].val) / 100 + " Ã— " + sliders[5].val + " = " + r0, x, y + 48);
    
        
    // Write description
    if (mouseoverSlider) {
        var x2 = 80;
        textAlign(LEFT, TOP);
        text(mouseoverSlider.desc, x, sliders[sliders.length - 1].y + 80, width - x - x2, 100);
    }
    
    // Write headings
    textSize(18);
    textAlign(CENTER, BASELINE);
    strokeWeight(1);
    stroke(20, 20, 20, 20);
    var titles = ["Population parameters", "Infection parameters"];
    
    for (var i = 0; i < titles.length; i++) {
        var y = sliders[i * 4].y - 20;
        text(titles[i], width / 2, y - 2);
        
        var w = textWidth(titles[i]) + 2;
        var x = (width - w) / 2;
        for (var d = 0; d < 16; d++) {
            line(x - d, y, x + w + 2 * d, y);
        }
    }
    
    drawBorder(5);
};

var drawInformationScreen = function() {
    drawScreen(5);
    drawBorder(5);
    closeButton.draw();
    
    var x = 20;
    var y = 25;
    
    fill(40);
    textAlign(LEFT, TOP);
    textSize(14);
    textLeading(18);
    text("In this simulation, the population is divided into four groups of people:", x, y, width - x * 2, 40);
    
    x = 20;
    y += 50;

    for (var p in populations) {
        fill(0);
        textSize(14);
        text(p + ":", x, y);
        fill(40);
        textSize(13);
        text(populations[p].desc, x + 90, y);
        y += 25;
    }
    
    fill(40);
    textAlign(LEFT, TOP);
    textSize(14);
    textLeading(18);
    y += 10;
    text("During each day, people come into contact with each other. If a susceptible person comes into contact with an infected person, there is a chance that the susceptible person will become infected.", x, y, width - x * 2, 100);
    y += 80;
    text("Infected people carry the disease for a number of days, allowing them to infect other susceptible people. Eventually infected people either die of the disease or recover. If they recover from the disease, they are immune to further infection.", x, y, width - x * 2, 100);
};

// Write R0 value and time
var drawInfo = function(x, y, w, h) {
    fill(20);
    textAlign(LEFT, CENTER);
    textSize(14);
    text("Day " + ceil(t / UPDATES_PER_DAY), x + 5, y + h /2);
    
    textAlign(CENTER, CENTER);
    text("R0 = " + parameters.r0, width / 2, y + h / 2);
};

// Draw an arrow showing the flux between populations
var drawArrow = function(x1, y1, x2, y2, flux) {
    var d = 8;
    var angle = atan2(y2 - y1, x2 + d - x1);
    
    // Line
    stroke(20);
    strokeWeight(2);
    line(x1 + d, y1, x2 - d, y2);
    
    // Arrow
    noStroke();
    fill(20);
    
    pushMatrix();
    translate(x2 - d, y2);
    rotate(angle);
    triangle(4, 0, -8, -4, -8, 4);
    popMatrix();
    
    // Label
    textAlign(CENTER, BASELINE);
    pushMatrix();
    translate((x1 + x2) * 0.5, (y1 + y2) * 0.5 - 5);
    rotate(angle);
    text(formatNumber(flux), 0, 0);
    popMatrix();
};

// Draw each sub-population as a circle with area equal to its size
var drawBubbleChart = function(gx, gy, gw, gh) {
    /*
    noStroke();
    fill(240);
    rect(gx + 1, gy + 1, gw - 2, gh - 2);
    
    strokeWeight(1);
    stroke(20);
    line(0, gy + gh/2, width, gy + gh/2);
    */

    // Maximum radius for population graph
    var radiusScale = 40 / sqrt(parameters.Size.nowValue);
    var radii = [];
    
    // Calculate radii of population graphs
    for (var pop in populations) {
        var radius = sqrt(populations[pop].counts[t]) * radiusScale;
        radii.push(radius);
    }

    var sumDiameters = 2 * (radii[0] + radii[1] + max(radii[2], radii[3]));
    
    // Use radii to find nice x-coordinates for populations
    // The minimum distance between the screen edge and circle edge is 10
    // The minimum distance between the screen edge and circle center is 40
    var border1 = max(40, radii[0] + 10) - radii[0];
    var border2 = max(40, radii[2] + 10) - radii[2];
    var dx = (gw - sumDiameters - border1 - border2) / 2;
    
    // Draw population graphs
    noStroke();
    
    // Calculate position of circles
    var x1 = border1 + radii[0];
    var x2 = x1 + radii[0] + radii[1] + dx;
    var x3 = x2 + radii[1] + max(radii[2], radii[3]) + dx;
    var xs = [x1, x2, x3, x3];
    
    var maxY = gy + gh - 20;
    var y = gy + gh / 2;
    var ys = [y, y, gy + max(10, radii[2]) + 35, maxY - max(10, radii[3]) - 15];
    
    var i = 0;
    for (var pop in populations) {
        var r = radii[i];
        // Circle
        if (r < 5) {
            noFill();
            stroke(80);
            strokeWeight(1);
            ellipse(xs[i], ys[i], 20, 20);
        }
        
        noStroke();
        fill(populations[pop].colour);
        ellipse(xs[i], ys[i], r * 2, r * 2);
        
        // Label
        fill(20);
        textSize(13);
        if (i === 2) {
            var ty = ys[i] - max(10, r) - 20;
            textAlign(CENTER, BASELINE);
            text(pop, xs[i], ty);
            text(formatNumber(populations[pop].counts[t]), xs[i], ty + 15);
        } else {
            var ty = ys[i] + max(10, r);
            textAlign(CENTER, TOP);
            text(pop, xs[i], ty);
            text(formatNumber(populations[pop].counts[t]), xs[i], ty + 15);   
        }
        
        i++;
    }
    
    // Draw arrows showing flux between cases
    if (t > 0) {
        var fluxes = [
            populations.Susceptible.counts[t - 1] - populations.Susceptible.counts[t],
            populations.Immune.counts[t] - populations.Immune.counts[t - 1],
            populations.Dead.counts[t] - populations.Dead.counts[t - 1]
        ];
        
        for (var i = 0; i < fluxes.length; i++) {
            var i1 = min(i, 1);
            drawArrow(xs[i1] + max(10, radii[i1]), ys[i1], xs[i + 1] - max(10, radii[i + 1]), ys[i + 1], fluxes[i]);
        }
    }

};

// Line graph of sub-population sizes
var drawGraph = function(gx, gy, gw, gh) {
    /*
    strokeWeight(1);
    stroke(20);
    line(0, gy, width, gy);
    stroke(160);
    line(0, gy + 1, width, gy + 1);
    */
    
    noStroke();
    fill(240);
    //rect(gx + 1, gy + 1, gw - 2, gh - 2);
    
    gh -= (showTime ? 40 : 30);
    gy += gh + 20;
    gx += 42;
    gw -= 60;

    // Gridlines
    strokeWeight(1);
    stroke(200);
    fill(20);
    textAlign(RIGHT, CENTER);
    textSize(11);
    
    // Calculate scale of y-axis
    var numGridlines = 4;
    
    var maxValue = pow(10, ceil(log(parameters.Size.nowValue) / Math.LN10));
    if (maxValue > parameters.Size.nowValue * 1.25) {
        maxValue *= 0.8;
    }
    while (maxValue > 2 * parameters.Size.nowValue) {
        maxValue /= 2;
    }
    
    var divide = 1;
    var yLabel = "People";
    if (maxValue > 1000) {
        divide *= 1000;
        if (maxValue > 1000000) {
            divide *= 1000;
            yLabel = "Million people";
        } else {
            yLabel = "Thousand people";
        }
    }
    var yScale = maxValue / divide;

    for (var i = 0; i <= numGridlines; i++) {
        var p = i / numGridlines;
        var y = gy - 1 - (gh - 1) * p;
        line(gx, y, gx + gw, y);
        text("" + round(10 * p * yScale) / 10, gx - 3, y);
    }
    
    var n = populations.Susceptible.counts.length - 1;
    var maxN = max(gw, t);
    var tick = 10 * max(1, floor(5 * maxN / UPDATES_PER_DAY / gw));
    
    if (t > 1) {
        strokeWeight(2);
        noFill();

        // Plot lines
        var dx = gw / (maxN - 1);
        var dy = (gh - 1) / maxValue;
        for (var pop in populations) {
            stroke(populations[pop].colour);
            beginShape();
            for (var i = 0; i < n; i++) {
                var y = gy - 1 - dy * populations[pop].counts[i];
                vertex(gx + i * dx, y);
            }
            endShape();
        }
    }
    
    // Time axis labels
    if (showTime) {
        textAlign(CENTER, TOP);
        for (var i = 0; i <= floor(maxN / tick / UPDATES_PER_DAY); i++) {
            var x = gx + gw * UPDATES_PER_DAY * tick * i / maxN;
            if (gx + gw - x > 20) {
                line(x, gy, x, gy + 3);
                text(tick * i, x, gy + 4);   
            }
        }
        // Final tick
        if (t > gw) {
            line(gx + gw, gy, gx + gw, gy + 3);
            text(ceil(t / UPDATES_PER_DAY), gx + gw, gy + 4);   
        }
    }

    // Axis labels
    textSize(13);
    textAlign(CENTER, CENTER);
    translate(gx, gy - gh / 2);
    rotate(270);
    text(yLabel, 0, -32);
    resetMatrix();
    
    text("Time (days)", gx + gw / 2, gy + (showTime ? 23 : 10));
    
    //Axis
    strokeWeight(2);
    stroke(20);
    line(gx, gy, gx + gw, gy);
};

/*****************************************************
 *      Simulation update
 * This is where the simulation logic is
******************************************************/

var updatePopulations = function() {
    // Get current counts
    var susceptibleNow = populations.Susceptible.counts[t];
    var infectedNow = populations.Infected.counts[t];
    var removedNow = populations.Immune.counts[t];
    var deadNow = populations.Dead.counts[t];
    
    // Rates
    var contactRate = parameters['Contact rate'].nowValue / UPDATES_PER_DAY;
    var infectionRate = parameters['Infection rate (%)'].nowValue / 100;
    var mortalityRate = parameters['Mortality rate (%)'].nowValue / 100;
    var removalRate = 1 / parameters['Disease period'].nowValue / UPDATES_PER_DAY;
    
    // What proportion of the population is susceptible
    var proportionSusceptible = susceptibleNow / parameters.Size.nowValue;
    
    // Number of susceptible people contacted by infected people
    var infectedContact = infectedNow * proportionSusceptible * contactRate;
    
    // Number of people infected this time period
    var newCases = infectedContact * infectionRate;
    
    // Number of infected people who recover/die
    var removedCases = infectedNow * removalRate;
    
    // Number of people who recover from infection
    var recovered = removedCases * (1 - mortalityRate);
    
    // Number of people who die from the disease
    var died = removedCases * mortalityRate;
    
    // Update populations
    populations.Susceptible.counts.push(susceptibleNow - newCases);
    populations.Infected.counts.push(infectedNow + newCases - removedCases);
    populations.Immune.counts.push(removedNow + recovered);
    populations.Dead.counts.push(deadNow + died);
    
    t++;
};

/*****************************************************
 *      Main loop
******************************************************/

draw = function() {
    background(BACKGROUND);
    
    if (state === 'options') {
        drawParameterOptions();
    } else if (state === 'info') {
      drawInformationScreen();  
    } else {
        drawInfo(72, 0, width, 24);
        drawBubbleChart(0, 24, width, 200);
        drawGraph(0, 224, width, 160);
        
        for (var i = 0; i < toolbarButtons.length; i++) {
            toolbarButtons[i].draw();
        }
        
        // Dividing lines
        strokeWeight(1);
        stroke(212, 204, 176);
        line(0, 24, width, 24);
        line(0, 224, width, 224);
        
        if (state === 'running' && (t === 0 || populations.Infected.counts[t] > 0.05)) {
            updatePopulations();   
        }
    }
};

/*****************************************************
 *      Event handling
******************************************************/

keyPressed = function() {
    if (keyCode === 32) {
        // Spacebar toggles simulation
        toggleSimulationRunning();
    }
};

mousePressed = function() {
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].selected();
    }
};

mouseDragged = function() {
    if (state === 'options') {
        for (var s = 0; s < sliders.length; s++) {
            sliders[s].drag();
        }   
    }
};

mouseReleased = function() {
    if (state === 'options') {
        for (var s = 0; s < sliders.length; s++) {
            sliders[s].held = false;
        }
        
        if (startButton.mouseover()) {
            startButton.click();
        }
    } else if (state === 'info') {
        if (closeButton.mouseover()) {
            closeButton.click();
        }
    } else {
        for (var i = 0; i < toolbarButtons.length; i++) {
            if (toolbarButtons[i].mouseover()) {
                toolbarButtons[i].click();
            }
        }
    }
};

mouseOut = function() {
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].held = false;
    }
};
