
var cx = 200;
var cy = 20;
var r1 = 110;
var r12 = r1 * r1;
var r2 = 90;
var r22 = r2 * r2;
var dr = r1 - r2;

var c1 = color(30, 80, 60);
var c2 = color(60, 180, 120);
var c3 = color(170, 180, 60);

var upAngle = 25;
var downAngle = 24;
var sumAngle = upAngle + downAngle;

// Pass a ray across the surface of the cylinder and draw the result
var rayTrace = function() {
    var hitAngle;
    
    var cHeight1 = 50;
    var cHeight2 = 45;
    var y = 250;
    var px, ry, h;
    
    for (var rx = -r1; rx <= r1; rx++) {
        px = rx / r1;
        hitAngle = acos(px);
        ry = sqrt(1 - px * px);
        
        // Hit outer edge
        if (hitAngle % sumAngle <= upAngle) {
            stroke(c2);
            h = cHeight1 * (1 + ry / 5);
            line(cx + rx, y - h, cx + rx, y + h);
            continue;
        }
        
        if (hitAngle < 90) {
            hitAngle = floor(hitAngle / sumAngle) * sumAngle + upAngle;
        } else {
            hitAngle = ceil(hitAngle / sumAngle) * sumAngle;
            if (hitAngle > 180) { continue; }
        }
        
        // Depth of hit
        var h = r1 - rx / cos(hitAngle);

        // Check whether we hit the inner circle
        if (h < dr) {
            // Hit edge of segment
            stroke(c3);
            var h1 = cHeight1 * (1 + ry / 5);
            var h2 = cHeight2 * (1 + ry / 5);
            
            //px = rx / r2;
            // TODO: Fix when px > 1
            // Base height on z value
            //ry = sqrt(1 - px * px);
            //var h2 = cHeight2 * (1 + ry / 5);
            
            h /= dr;
            h = h1 * (1 - h) + h2 * h;
            
        } else {
            // Hit inner circle
            stroke(c1);
            px = rx / r2;
            ry = sqrt(1 - px * px);
            h = cHeight2 * (1 + ry / 5);
        }
        
        //line(cx + rx, 200, cx + rx, 280);
        line(cx + rx, y - h, cx + rx, y + h);
    }
};

var drawTopDownView = function() {
    // Draw outer segment
    noFill();
    strokeWeight(2);
    stroke(c1);
    
    for (var angle = 0; angle <= 180; angle += sumAngle) {
        var a2 = min(181, angle + upAngle);
        arc(cx, cy, r1 * 2, r1 * 2, angle, a2);
        line(cx, cy, cx + r1 * cos(angle), cy + r1 * sin(angle));
        line(cx, cy, cx + r1 * cos(a2), cy + r1 * sin(a2));
    }
    
    // Inner segment
    fill(c1);
    stroke(c1);
    arc(cx, cy, r2 * 2, r2 * 2, 0, 180);
    line(cx - r2, cy, cx + r2, cy);
};

drawTopDownView();
rayTrace();

mouseClicked = function() {
    println(mouseX - cx);
};


// testing
var x = -80;
var r = 100;
var ix = x/r;
var h = sqrt(r * r - x * x);
var angle = acos(ix);
var surf = (1 - angle / 180) * 100;
println(surf);



/*
var draw = function() {
    background(255);
    drawTopDownView();

    // Ray x relative to cylinder center
    var rx = mouseX - cx;
    
    // Ray misses cylinder
    if (abs(rx) > r1) { return; }
    
    // At what angle would we hit the outer segment
    var hitAngle = acos(rx / r1);
    text(hitAngle, 200, 250);
    
    strokeWeight(1);
    stroke(255, 0, 0);
    
    // Hit outer edge
    if (hitAngle % sumAngle <= upAngle) {
        var ry = cy + sqrt(r12 - rx * rx);
        line(cx + rx, ry, cx + rx, 160);
        return;
    }
    
    // hitAngle shifted to nearest segment
    if (hitAngle < 90) {
        hitAngle = floor(hitAngle / sumAngle) * sumAngle + upAngle;
    } else {
        hitAngle = ceil(hitAngle / sumAngle) * sumAngle;
        if (hitAngle > 180) { return; }
    }
    text(hitAngle, 200, 270);

    // How far down into the segment
    var h = r1 - rx / cos(hitAngle);
    fill(255, 0, 0);
    text(h, cx + rx - 20, 170);
    
    // Whether we hit the inner circle
    // Other where we intersect with the edge
    var ry = h < dr ? cy + tan(hitAngle) * rx : cy + sqrt(r22 - rx * rx);
    
    line(cx + rx, ry, cx + rx, 160);
};
*/