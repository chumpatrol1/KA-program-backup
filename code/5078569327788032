/***************************************************************
 * Work in Progress
 *  - trying to find a nice way to convert a scribble into the
 *    general shape drawn
 * Click and drag the mouse to scribble.
 * Release the mouse to convert the scribble into a shape
***************************************************************/


// Colours
var PAGE_COLOUR = color(240, 240, 255);
var POINT_COLOUR = color(100, 80, 240);
var SHAPE_COLOUR = color(16, 160, 16, 100);

// How close (in degrees do points need to be before they are considered too close)
var ANGLE_THRESHOLD = 10;

var points = [];
var shapes = [];

// Assume angle is first value in array
var sortByAngle = function(a, b) {
    return b[0] - a[0];
};

var createShape = function() {
    // Find midPoint
    var n = points.length;
    var meanX = 0;
    var meanY = 0;
    
    for (var p in points) {
        meanX += points[p][0];
        meanY += points[p][1];
    }
    
    meanX /= n;
    meanY /= n;
    
    // Find angle of points
    var polarPoints = [];
    for (var p in points) {
        var angle = atan2(points[p][1] - meanY, points[p][0] - meanX);
        var d = dist(meanX, meanY, points[p][0], points[p][1]);
        polarPoints.push([angle, d]);
    }
    
    polarPoints.sort(sortByAngle);
    
    // Remove points that are too close to neighbouring points
    for (var p = polarPoints.length - 2; p > 0; p--) {
        var p1 = polarPoints[p];
        var p2 = polarPoints[p + 1];
        
        var dAngle = p1[0] - p1[1];
        dAngle += (dAngle > 180) ? -360 : (dAngle < -180) ? 360 : 0;
        
        if (abs(dAngle) < ANGLE_THRESHOLD) {
            if (p1[1] > p2[1]) {
                polarPoints.splice(p, 1);
            } else {
                polarPoints.splice(p + 1, 1);
            }
        }
    }
    
    // Convert new polar points to Cartesian coords
    var newPoints = [];
    for (var p in polarPoints) {
        var x = meanX + polarPoints[p][1] * cos(polarPoints[p][0]);
        var y = meanY + polarPoints[p][1] * sin(polarPoints[p][0]);
        newPoints.push([x, y]);
    }
    
    shapes.push(newPoints);
};

var drawScribble = function() {
    stroke(POINT_COLOUR);
    strokeWeight(2);
    
    if (points.length > 1) {
        var x = points[0][0];
        var y = points[0][1];
        for (var i = 1; i < points.length; i++) {
            var x2 = points[i][0];
            var y2 = points[i][1];
            line(x, y, x2, y2);
            x = x2;
            y = y2;
        }   
    }
};

var drawShapes = function() {
    noStroke();
    fill(SHAPE_COLOUR);
    stroke(POINT_COLOUR);
    
    for (var i = 0; i < shapes.length; i++) {
        var shape = shapes[i];
        var x1 = shape[shape.length - 1][0];
        var y1 = shape[shape.length - 1][1];
        
        for (var p = 0; p < shape.length; p++) {
            var x2 = shape[p][0];
            var y2 = shape[p][1];
            line(x1, y1, x2, y2);
            x1 = x2;
            y1 = y2;
        }
    }
};

var draw = function() {
    background(PAGE_COLOUR);
    drawScribble();
    drawShapes();
};

var mouseDragged = function() {
    points.push([mouseX, mouseY]);
};

var mouseReleased = function() {
    if (points.length > 2) {
        createShape();
        points = [];
    }
};