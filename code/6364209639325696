/********************************************************
 * Add the images to the scene and
 * position them using translations.
 * 
 * Once an item is on the grid,
 * you can select it by click on it.
*********************************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(60, 60, 70);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 240);

var sansFont = createFont("sans", 14);
var serifFont = createFont("serif", 14);

// Objects
var grid, itemSelector, textboxes, sliders;
var items = [];

var images = [
    getImage("avatars/mr-pink"),
    getImage("avatars/piceratops-ultimate"),
    getImage("avatars/leafers-tree"),
    getImage("avatars/leafers-seed")
];

// Draw image with its bottom, left corner at (x, y) with a width of w
var drawImage = function(img, x, y, w, selected) {
    var h = w * img.height / img.width;
    if (selected) {
        /*
        fill(255);
        stroke(255, 0, 0, 150);
        rect(x - 5, y - 5, w + 10, h + 10, 5);
        strokeWeight(3);
        rect(x - 5, y - 5, w + 10, h + 10, 5);   
        */
        noStroke();
        fill(0, 0, 40, 30);
        rect(x, y, w, h, 8);
    }
    image(img, x, y, w, h);
};

/********************************************************
 *      Item
 *  Items are images which can appear on the grid
*********************************************************/

var Item = function(img, x, y, w) {
    this.image = img;
    this.coordX = 0;
    this.coordY = 0;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = w * img.height / img.width;
};

Item.prototype.draw = function(selected) {
    if (selected) {
        noStroke();
        fill(0, 0, 40, 30);
        rect(this.x, this.y - this.h, this.w, this.h, 8);
    }
    image(this.image, this.x, this.y - this.h, this.w, this.h);
};

Item.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY <= this.y && mouseY >= this.y - this.h);
};

/********************************************************
 *  GUI Button
*********************************************************/

var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultColor = color(TOOLBAR);
    this.strokeColor = color(200, 200, 200);
    this.highlightColor = color(255, 255, 255);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    fill(this.defaultColor);
    if (this.mouseOver() || this.selected) {
        fill(this.highlightColor);
    }
    
    strokeWeight(1);
    stroke(this.strokeColor);
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    fill(0);
    textSize(16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.mouseReleased = function() {
    if (this.mouseOver()) {
        this.click();
        return true;
    }
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

/********************************************************
 *          Text Box object
 *  A box with an (x, y) coordinate, a width and
 *  a height. Clicking on it, selects it. Then it
 *  captures keyStrokes, which are saved in the 
 *  value attribute.
*********************************************************/

var TextBox = function(x, y, w, h, minV, maxV) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.min = minV;
    this.max = maxV;
    this.value = 0;
    
    this.textBefore = [];
    this.textAfter = [];
    
    this.focussed = false;
    this.cursorBlink = 35;
    
    this.font = createFont("sans", 14);
    this.fontSize = 14;
    
    this.characterMap =  {
        48: '0', 49: '1', 50: '2', 51: '3', 52: '4', 53: '5',
        54: '6', 55: '7', 56: '8',  57: '9', 190: "."
    };
    
    // 189: "-"
};

TextBox.prototype.draw = function() {
    // Box
    if (this.focussed) {
        stroke(20);
        fill(255);
    } else {
        stroke(200);
        fill(TOOLBAR);
    }
    strokeWeight(1);
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    // Colour red if off the scale
    if (this.value < this.min || this.value > this.max) {
        fill(255, 0, 0);
    } else {
        fill(20, 20, 20);
    }
    
    // Text
    textFont(this.font, this.fontSize);
    textAlign(LEFT, BASELINE);
    
    var ty = this.y + textAscent() + 5;
    var strBefore = this.textBefore.join("");
    text(strBefore, this.x + 6, ty - 1);
    
    // Cursor
    var x = this.x + textWidth(strBefore) + 6;
    if (focused && this.focussed && frameCount % this.cursorBlink < this.cursorBlink / 2) {
        stroke(20);
        line(x, ty, x, ty - textAscent() - 2);
    }
    
    text(this.textAfter.join(""), x, ty - 1);
};

TextBox.prototype.keyPress = function() {
    // Press enter
    if (keyCode === 10) {
        this.focussed = false;
        if (!this.value) {
            this.setValue(0);
        }
    }
    
    if (!this.focussed) { return; }
    
    if (keyCode in this.characterMap) {
        // Add number
        if (this.textBefore.length < 3) {
            if (this.textBefore.length === 1 && this.textBefore[0] === '0') {
                // Remove leading 0
                this.textBefore = [this.characterMap[keyCode]];
            } else {
                this.textBefore.push(this.characterMap[keyCode]);
            }
        }
    } else if (keyCode === DELETE || keyCode === BACKSPACE) {
        if (this.textBefore.length > 0) {
            this.textBefore.splice(this.textBefore.length - 1, 1);
        }
    } else if (keyCode === LEFT) {
        if (this.textBefore.length > 0) {
            var letter = this.textBefore.pop();
            this.textAfter.unshift(letter);
        }
    } else if (keyCode === RIGHT) {
        if (this.textAfter.length > 0) {
            var letter = this.textAfter.shift();
            this.textBefore.push(letter);
        }
    }
    
    this.value = parseFloat(this.textBefore.concat(this.textAfter).join("")) || 0;
};

TextBox.prototype.mouseOver = function() {
    return mouseX > this.x && mouseX < this.x + this.w &&
           mouseY > this.y - 1 && mouseY < this.y + this.h + 3;
};

TextBox.prototype.mouseReleased = function() {
    if (this.mouseOver()) {
        this.focussed = true;
        return true;
    } else {
        this.focussed = false;
        if (!this.value) {
            this.setValue(0);
        }
        this.setValue(this.value);
    }
};

TextBox.prototype.setValue = function(x) {
    this.value = max(min(this.max, x), this.min);
    this.textBefore = this.value.toString().split("");
    this.textAfter = [];
};

/*****************************************************
 *      Slider object
******************************************************/

var Slider = function(x, y, width, minValue, maxValue, nowValue, name, updateF) {
    this.x = x;
    this.x2 = x + width;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.useLog = false;
    this.updateFunction = updateF;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = minValue;
    this.max = maxValue;
    this.val = nowValue || minValue;
    
    if (this.useLog) {
        this.scale = log(this.max / this.min) / log(2);
        var n = log(this.val / this.min) / log(2);
        this.bx = map(n, 0, this.scale, this.x, this.x2);
    } else {
        this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    }

    this.name = name;
    this.held = false;
};

Slider.prototype.draw = function() {
    noStroke();
    fill(180);
    rect(this.x - 8, this.y - this.h / 2, this.width + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);
};

Slider.prototype.mouseover = function() {
    return mouseX >= this.x - 8 && mouseX <= this.x2 + 8 &&
           mouseY >= this.y - this.h / 2 && mouseY <= this.y + this.h / 2;
};
    
Slider.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
    if (!this.held && this.mouseover()) {
        this.setBallPosition();
    }
};
    
Slider.prototype.drag = function() {
    if (this.held) {
        this.setBallPosition();
        return true;
    }
};

Slider.prototype.setBallPosition = function() {
    this.bx = constrain(mouseX, this.x, this.x2);
    this.setValue();
};

Slider.prototype.setValue = function(d) {
    if (d !== undefined) {
        this.val = constrain(d, this.min, this.max);
        this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    } else {
        if (this.useLog) {
            var n = map(this.bx, this.x, this.x + this.width, 0, this.scale);
            this.val = this.min * round(pow(2, n));
        } else {
            this.val = round(map(this.bx, this.x, this.x2, this.min, this.max));
        }
        this.update();
    }
};

Slider.prototype.update = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};

/********************************************************
 *      Item selector
 *  A column of images, which can be selected
 *  Drawn at position (x, y), *  with images
 *  given a width, w and drawn d apart.
*********************************************************/

var ItemSelector = function(x, y, images, w, d) {
    this.x = x;
    this.y = y;
    this.d = d;
    this.w = w;
    this.h = d + 15;
    
    this.images = images;
    this.imageYs = [];
    this.imageHs = [];
    this.selected = -1;
    
    // Calculate height
    for (var i = 0; i < this.images.length; i++) {
        var img = this.images[i];
        var h = this.images[i].height / this.images[i].width * this.w;
        
        this.imageYs.push(this.y + this.h);
        this.imageHs.push(h);
        this.h += h + this.d;
    }
};

ItemSelector.prototype.draw = function() {
    noStroke();
    fill(0, 0, 0, 10);
    //rect(this.x, this.y, this.w + this.d * 2, this.h);
    
    textAlign(CENTER, TOP);
    textFont(sansFont, 12);
    fill(20);
    text("Select an item", this.x +  this.d + this.w / 2, this.y + 2);
    
    var x = this.x + this.d;
    for (var i = 0; i < this.images.length; i++) {
        var h = this.imageHs[i];
        var y = this.imageYs[i];
        
        var selected =  (this.selected === i || 
            (mouseX > x - 5 && mouseX < x + this.w + 5 &&
             mouseY > y - 5 && mouseY < y + h + 5));
        
        drawImage(this.images[i], x, y, this.w, selected);
    }
};

ItemSelector.prototype.mouseReleased = function() {
    // Check mouse is over the item selector
    if (mouseX < this.x || mouseX > this.x + this.w ||
        mouseY < this.y || mouseY > this.y + this.h) {
        return;
    }
    
    // Deselect items
    itemSelector.selected = -1;
    grid.selected = -1;
    
    var x = this.x + this.d;
    for (var i = 0; i < this.images.length; i++) {
        var h = this.imageHs[i];
        var y = this.imageYs[i];
        
        if (mouseX > x - 5 && mouseX < x + this.w  + 10 &&
            mouseY > y - 5 && mouseY < y + h + 10) {
            this.selected = i;
        }
    }
};

/********************************************************
 *      Grid object
*********************************************************/

var Grid = function(x, y, w, h, dx, dy) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.dx = dx;
    this.dy = dy || dx;
    
    this.items = [];
    this.selected = -1;
};

Grid.prototype.draw = function() {
    strokeWeight(1);
    fill(GREY);
    textSize(11);
    textAlign(CENTER, TOP);

    var maxX = this.x + this.w * this.dx;
    var maxY = this.y - this.h * this.dy;

    // X-axis
    stroke(GREY);
    for (var i = 0; i <= this.w; i++) {
        var x = this.x + i * this.dx;
        line(x, maxY, x, this.y + 1);
        
        if (i % 2 === 0) {
            stroke(GREY);
            line(x, this.y, x, this.y + 3);
            text(i, x, this.y + 6);            
        }
        
        stroke(GRIDGREY);
    }
    
    // Y-axis
    stroke(GREY);
    textAlign(RIGHT, CENTER);
    for (var i = 0; i <= this.h; i++) {
        var y = this.y - i * this.dy;
        line(this.x + 1, y, maxX, y);
        
        if (i % 2 === 0) {
            stroke(GREY);
            line(this.x - 3, y, this.x, y);
            text(i,  this.x - 5, y);
        }
        stroke(GRIDGREY);
    }
    
    this.drawItems();
};

Grid.prototype.drawItems = function() {
    for (var i = 0; i < this.items.length; i++) {
        var item = this.items[i];
        item.draw(this.selected === i);
        
        // Ellipse at origin point
        if (this.selected === i) {
            noStroke();
            noFill();
            stroke(10, 10, 250);
            strokeWeight(1);
            ellipse(item.x, item.y, 5, 5);   
        }
    }
};

Grid.prototype.addItem = function(index) {
    if (index > -1) {
        this.items.push(new Item(images[index], this.x, this.y, this.dx * 4));
        this.selected = this.items.length - 1;
        this.setTextBoxes();
    }
};

Grid.prototype.updateSelectedItem = function(x, y) {
    if (this.selected === -1) { return; }
    
    x = constrain(x, 0, this.w - 4);
    y = constrain(y, 0, this.h - 4);
    
    var item = this.items[this.selected];
    item.x = this.x + x * this.dx;
    item.y = this.y - y * this.dy;
    item.coordX = x;
    item.coordY = y;
};

Grid.prototype.mouseReleased = function() {
    // Check mouse is over this
    if (mouseX < this.x || mouseX > this.x + this.w * this.dx ||
        mouseY > this.y || mouseY < this.y - this.h * this.dy) {
        return;
    }

    // Deselect items
    itemSelector.selected = -1;
    grid.selected = -1;

    for (var i = 0; i < this.items.length; i++) {
        if (this.items[i].mouseOver()) {
            this.selected = i;
            this.setTextBoxes();
        }
    }
};

// Add selected item's coordinates to the textboxes
Grid.prototype.setTextBoxes = function() {
    var item = this.items[this.selected];
    textboxes[0].setValue(item.coordX);
    textboxes[1].setValue(item.coordY);
    sliders[0].setValue(item.coordX);
    sliders[1].setValue(item.coordY);
};

/********************************************************
 *      Button functions
*********************************************************/

// Function for "Add to Grid" button
// Adds an image to the grid if it isn't already there
var addItemToGrid = function() {
    if (itemSelector.selected > -1) {
        grid.addItem(itemSelector.selected);
        itemSelector.selected = -1;
    }
};

var removeItemFromGrid = function() {
    if (grid.selected > -1) {
        grid.items.splice(grid.selected, 1);
        grid.selected = -1;
    }
};


/********************************************************
 *      Create objects
*********************************************************/

for (var i = 0; i < images.length; i++) {
    items.push(new Item(images[i]));
}

var createGrid = function(x, y) {
    var tickSize = 16;
    grid = new Grid(x, y, 2 * floor(0.5 * (width - x) / tickSize), 18, tickSize);    
};

createGrid(160, 300);

itemSelector = new ItemSelector(24, 12, images, 64, 10);

var addButton = new Button(12, height - 36, 120, 24, "Add to scene", addItemToGrid);
var removeButton = new Button(12, height - 36, 120, 24, "Remove", removeItemFromGrid);

sliders = [
    new Slider(350, 345, 120, 0, grid.w - 4, 0),
    new Slider(350, 375, 120, 0, grid.h - 4, 0),
];

textboxes = [
    new TextBox(300, 340, 38, 18, 0, grid.w - 4),
    new TextBox(300, 366, 38, 18, 0, grid.h - 4)
];

/********************************************************
 *      Draw functions
*********************************************************/

var drawTextBoxes = function() {
    for (var i = 0; i < textboxes.length; i++) {
        textboxes[i].draw();   
    }
    
    fill(20);
    textAlign(RIGHT, CENTER);
    textFont(serifFont, 18);
    text("final x = start x + ", textboxes[0].x, textboxes[0].y + textboxes[0].h / 2 + 1);
    text("final y = start y + ", textboxes[1].x, textboxes[1].y + textboxes[1].h / 2 + 1);

};

// Write a array of text with values for size and dy
var writeText = function(txtArray, x, y) {
    for (var i = 0; i < txtArray.length; i++) {
        var t = txtArray[i];
        var txt = t.txt;
        var ty = y + (t.dy || 0);
        
        if (t.size) {
            textSize(t.size);    
        }
        
        text(t.txt, x, ty);
        x += textWidth(txt);
    }
};

var drawSliders = function() {
    var labels = ['x', 'y'];
    
    textAlign(LEFT, BASELINE);
    textFont(serifFont, 18);
    
    for (var i = 0; i < sliders.length; i++) {
        sliders[i].draw();
        fill(20);
        
        var txt = [
            { txt: labels[i], size: 30 },
            { txt: "final", size: 14, dy: 5 },
            { txt: " = ", size: 20, dy: 1 },
            { txt: labels[i], size: 30 },
            { txt: "start", size: 14, dy: 5 },
            { txt: " + " + sliders[i].val, size: 20, dy: 1 },
        ];
        
        writeText(txt, grid.x + 10, sliders[i].y + 4);
    }
};

/********************************************************
 *      Main loop
*********************************************************/

draw = function() {
    background(BACKGROUND);
    
    itemSelector.draw();
    if (itemSelector.selected > -1) {
        addButton.draw();
    } else if (grid.selected > -1) {
        removeButton.draw();
    }
    
    grid.draw();
    if (grid.selected > -1) {
        drawSliders();
    }
};

/********************************************************
 *      Event handling
*********************************************************/

mousePressed = function() {
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].selected();
    }
};

mouseDragged = function() {
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].drag();
    }
    grid.updateSelectedItem(sliders[0].val, sliders[1].val);
};

mouseReleased = function() {
    if (itemSelector.selected > -1) {
        if (addButton.mouseReleased()) { return; }
    } else if (grid.selected > -1) {
        if (removeButton.mouseReleased()) { return; }
    }
    
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].held = false;
    }
    
    /*
    for (var i = 0; i < textboxes.length; i++) {
        textboxes[i].mouseReleased();
    }
    */
    
    itemSelector.mouseReleased();
    grid.mouseReleased();
};

mouseOut = function() {
    mouseReleased();
};


/*
keyPressed = function() {
    if (grid.selected > -1) {
        for (var i = 0; i < textboxes.length; i++) {
            textboxes[i].keyPress();
        }
        
        // Update item position
        grid.updateSelectedItem(textboxes[0].value, textboxes[1].value);
    }
};
*/