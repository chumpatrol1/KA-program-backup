/************************************************************
 * Given a shape defined as asterisks in an array of strings,
 * find the outline of that shape.
 * Draw the outline with curves and an optional wiggle.
 * 
 * Maybe useful for giving maps a handmade look (?)
************************************************************/

var wiggle = 0.06;

var worlds = [
[
    "..........",
    "...***....",
    "...****...",
    "...****...",
    "....***...",
    ".....*....",
    ".....*....",
    ".........."
],[
    "...",
    ".*.",
    "...",
],[
    "..........",
    ".*****.**.",
    ".*...***..",
    ".***.****.",
    ".....****.",
    "*.*.**..*.",
    "*****.*.*.",
    "..*...***."
],[
    '****.....',
    '...***...',
    '....*....',
    '....***..',
    '.*...*...',
    '.*****...'
],[
    '***',
    '*.*',
    '***',
],[
    '.*******.',
    '**.******',
    '**...*.**',
    '**..*..**',
    '*********',
    '.*******.'
]];

var world = worlds[5];

var Block = function(x, y) {
    this.x = x;
    this.y = y;
    
    // In order, left, top, right, bottom
    this.neighbours = ["edge", "edge", "edge", "edge"];
};

Block.prototype.draw = function(x, y, d, n) {
    var x1 = x + this.x * d;
    var y1 = y + this.y * d;
    
    noStroke();
    fill(200);
    rect(x1, y1, d - 1, d - 1, 3);
    
    textAlign(CENTER, CENTER);
    fill(200, 0, 0);
    var edgeCount = 0;
    for (var i = 0; i < 4; i++) {
        if (this.neighbours[i] === 'drawn') {
            edgeCount++;
        }
    }
    //text(edgeCount, x1 + d * 0.5, y1 + d  * 0.5);
    text(this.n, x1 + d * 0.5, y1 + d  * 0.5);
    
    strokeWeight(2);
    stroke(20);
    if (!this.neighbours[1]) {
        line(x1 + 1, y1, x1 + d - 3, y1);
    }
    if (!this.neighbours[3]) {
        line(x1 + 1, y1 + d - 2, x1 + d - 3, y1 + d - 2);
    }
    if (!this.neighbours[0]) {
        line(x1 + 1, y1 + 1, x1 + 1, y1 + d - 3);
    }
    if (!this.neighbours[2]) {
        line(x1 + d - 2, y1 + 1, x1 + d - 2, y1 + d - 3);
    }
};

// Add outline positions of this block starting with position startPosition
Block.prototype.getOutlineCoords = function(outline, startPosition) {
    if (this.outlined === undefined) {
        this.outlined = startPosition;
    }
    
    var offsets = [[0, 1], [0, 0], [1, 0], [1, 1]];
    var position = startPosition;
    
    for (var i = 0; i <= 4; i++) {
        var position = (startPosition + i) % 4;
        var offset = offsets[position];
        var neighbour = this.neighbours[position];
        if (!neighbour) {
            outline.push([this.x + offset[0], this.y + offset[1]]);
        } else {
            outline.push([this.x + offset[0], this.y + offset[1]]);
            var oldPosition = (position + 3) % 4;
            if (neighbour.outlined !== oldPosition) {
                neighbour.getOutlineCoords(outline, oldPosition);
            }
            break;
        }
        
        position = ++position % 4;
        if (position === this.outlined) {
            break;
        }
    }
};

Block.prototype.getOutlineCoordsRounded = function(outline, startPosition) {
    // Degree of corner curve
    var d = 0.2;
    var offsets = [[0, 1 - d, 0, d], [d, 0, 1 - d, 0], [1, d, 1, 1 - d], [1 - d, 1, d, 1]];
    var position = startPosition;
    
    //println("Block " + this.n);
    
    for (var i = 0; i < 4; i++) {
        var offset = offsets[position];
        var neighbour = this.neighbours[position];
        
        if (neighbour === "edge") {
            // Create edge
            outline.push([this.x + offset[0], this.y + offset[1]]);
            outline.push([this.x + offset[2], this.y + offset[3]]);
            this.neighbours[position] = "drawn";
            //println("P " + position);
        } else if (neighbour === "drawn") {
            break;
        } else {
            var oldPosition = (position + 3) % 4;
            
            if (neighbour.neighbours[oldPosition] !== "drawn") {
                neighbour.getOutlineCoordsRounded(outline, oldPosition);
            }
            break;
        }
        
        position = ++position % 4;
    }
};

/*******************************************************
 *  Various draw functions
*******************************************************/

// Given an array of strings, the a rect wherever the string has an asterisk
var drawWorldWithRects = function(world, startX, startY, d) {
    strokeWeight(2);
    noFill();
    stroke(20);
    //rect(startX - 1, startY - 1, d * world[0].length + 2, d * world.length + 2);
    
    noStroke();
    fill(200);
    
    for (var y = 0; y < world.length; y++) {
        var row = world[y];
        for (var x = 0; x < row.length; x++) {
            if (row[x] === "*") {
                rect(startX + x * d, startY + y * d, d - 1, d - 1, 3);
            }
        }
    }
};

var drawBlocksinGrid = function(grid, startX, startY, d) {
    for (var y = 0; y < grid.length; y++) {
        var row = grid[y];
        for (var x = 0; x < row.length; x++) {
            var block = row[x];
            if (block) {
                block.draw(startX, startY, d);
            }
        }
    }
};

var drawBlocksinArray = function(blocks, startX, startY, d) {
    for (var i = 0; i < blocks.length; i++) {
        blocks[i].draw(startX, startY, d, i);
    }
};

var drawOutline = function(outline, startX, startY, d) {
    noFill();
    strokeWeight(2);
    stroke(20);
    
    beginShape();
    for (var i = 0; i < outline.length; i++) {
        var coord = outline[i];
        vertex(startX + coord[0] * d, startY + coord[1] * d);
    }
    endShape(CLOSE);
};

var drawCurveOutline = function(outline, startX, startY, d) {
    noFill();
    strokeWeight(3);
    stroke(20, 20, 80);
    
    beginShape();
    curveVertex(startX + outline[0][0] * d, startY + outline[0][1] * d);
    for (var i = 0; i < outline.length; i++) {
        var coord = outline[i];
        curveVertex(startX + coord[0] * d, startY + coord[1] * d);
    }
    curveVertex(startX + outline[0][0] * d, startY + outline[0][1] * d);
    endShape(CLOSE);
    
    /*
    fill(10);
    textSize(8);
    for (var i = 0; i < outline.length; i++) {
        var coord = outline[i];
        text(i, startX + coord[0] * d, startY + coord[1] * d);
    }
    */
    
};

// Add an element of randomness to the outline
var addWiggle = function(coords, wiggle) {
    for (var i = 0; i < coords.length; i++) {
        var x = coords[i][0] + random(-1, 1) * wiggle;
        var y = coords[i][1] + random(-1, 1) * wiggle;
        coords[i] = [x, y];
    }
};

/*******************************************************
 *  Main algorithm
*******************************************************/

var findOutline = function(world) {
    var height = world.length;
    var width = world[0].length;
    
    // Create a 2D array full of 0s with the same dimensions as the world
    var grid = [];
    for (var y = 0; y < height; y++) {
        grid.push(new Array(width));
    }
    
    // Create Block objects and add to array as well as a 2D array for each look up.
    var blocks = [];
    
    for (var y = 0; y < world.length; y++) {
        var row = world[y];
        for (var x = 0; x < row.length; x++) {
            if (row[x] === "*") {
                var newBlock = new Block(x, y);
                grid[y][x] = newBlock;
                blocks.push(newBlock);
            }
        }
    }
    
    // Find neighbours of Blocks
    for (var i = 0; i < blocks.length; i++) {
        var block = blocks[i];
        block.n = i;
        var x = block.x;
        var y = block.y;
        
        // Check for neighbours to the right
        var block2 = grid[y][x + 1];
        if (block2) {
            block.neighbours[2] = block2;
            block2.neighbours[0] = block;
        }
        
        // Check for neighbours below
        block2 = (y + 1 < height) && grid[y + 1][x];
        if (block2) {
            block.neighbours[3] = block2;
            block2.neighbours[1] = block;
        }
        
    }
    
    // Find coordinates of outlines
    var outlines = [];
    
    // Loop through block finding those with edges not yet added
    for (var i = 0; i < blocks.length; i++) {
        var startBlock = blocks[i];
        if (startBlock.neighbours[0] === "edge") {
            var outline = [];
            startBlock.getOutlineCoordsRounded(outline, 0);
            
            // Add wiggle to outlines
            if (wiggle) {
                addWiggle(outline, wiggle);
            }
            
            outlines.push(outline);
        }
    }
    
    // Test draw
    //drawBlocksinGrid(grid, 40, 220, 20);
    //drawWorldWithRects(world, 100, 20, 20);
    drawBlocksinArray(blocks, 100, 20, 20);
    //drawOutline(outline, 4, 20, 20);
    
    for (var i = 0; i < outlines.length; i++) {
        drawCurveOutline(outlines[i], 100, 200, 20);
    }
};

findOutline(world);