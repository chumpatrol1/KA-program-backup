 /****************************************************
  * Estimating the area under a line using Riemann sums 
  * and different numbers of boxes.
  * 
  * Drag the circle to change the number of boxes used.
  * Click the labels to select a sum type
  * 
  * The first graph shows a plot of f(x) and N boxes
  * estimating the area (using the left index for the
  * height).
  * 
  * The second graph shows how increasing the number of
  * boxes causes the area to converge to a certain value.
  * 
  * Based on this video:
  * https://www.khanacademy.org/math/calculus/integral-calculus/definite_integrals/v/riemann-sums-and-integrals
  *****************************************************/
 // Function, f(x), under which we are finding the area.
 var f = function(x) { return pow(4*x-12, 3)/120 -3*x + 16; };
 
 // Number of rectangles/trapezoids
 var nBoxes = 8;
 
 // Area between these points
 var interval = [0, 5];
 var maxY = 10;
 var tickY = 2;
 
 // The maximum number of boxes attempted
 var maxN = 51;
 var selectedSum = "mid";
 
 // Each function returns the height of either side of trapezoid
 // Therefore most return the same value for both sides.
 var sumTypes = {
     "left": function(a, b) { var h = f(a); return [h, h]; },
     "right": function(a, b) { var h = f(b); return [h, h]; },
     "mid": function(a, b) { var h = f((a+b)/2); return [h, h];},
     "trapezoid": function(a, b) { return [f(a), f(b)]; }
 };
 
 var colours = {
     "left": [color(245, 28, 24), color(247, 125, 123)],
     "right": [color(247, 247, 96), color(235, 144, 64)],
     "mid": [color(51, 120, 232), color(25, 72, 153)],
     "trapezoid": [color(108, 224, 90), color(33, 150, 15)]
 };
 
 var graph1, graph2, sumForEachN;
 var sliderSelected = false;
 var sliderSize = 20;
 
 // Graph display parameters
 var Graph = function(gx, gy, gw, gh, mx, my, dx, dy) {
     this.originX = gx;
     this.originY = gy;
     this.width = gw;
     this.height = gh;
     this.maxX = mx;
     this.maxY = my;
     this.tickX = dx;
     this.tickY = dy;
     
     // Points opposite the origin
     this.gx2 = gx + gw;
     this.gy2 = gy - gh;
     
     this.scaleX = this.width / this.maxX;
     this.scaleY = this.height / this.maxY;
     
     this.plotX = function(x) {
         return this.originX + this.scaleX * x;
     };
     
     this.plotY = function(y) {
         return this.originY - this.scaleY * y;
     };
     
     this.drawArea = function() {
         // Draw the axes and gridlines for a graph
     
         strokeWeight(1);
         fill(250, 250, 250);
         textSize(12);
         textAlign(CENTER, BASELINE);
         
         for (var x=0; x<=this.maxX; x+=this.tickX) {
             var x1 = this.plotX(x);
             
             stroke(25, 25, 25);
             line(x1, this.gy2, x1, this.originY);
             
             stroke(250, 250, 250);
             text(x, x1 + 1, this.originY + 17);
             line(x1, this.originY, x1, this.originY + 4);
         }
         
         textAlign(RIGHT, BASELINE);
         for (var y=0; y<=this.maxY; y+=this.tickY) {
             var y1 = this.plotY(y);
             
             stroke(25, 25, 25);
             line(this.originX, y1, this.gx2, y1);
             
             stroke(250, 250, 250);
             text(y, this.originX - 7, y1 + 4);
             line(this.originX, y1, this.originX - 3, y1);
         }
     };
     
    this.plotFunction = function(yValues, c, strokeW, minX) {
        // Plot each value in an array
        if (minX === undefined) { minX = 0; }
         
         var y1 = this.plotY(yValues[0]);
         var dx = this.width / yValues.length;
         var x = this.originX + minX * dx;
        
        strokeWeight(strokeW);
        stroke(c);
        noFill();
        beginShape();
        for (var x = minX; x < yValues.length; x++) {
            vertex(this.originX + x * dx, this.plotY(yValues[x]));
         }
        endShape();
     };
     
    this.drawAxes = function(xLabel, yLabel) {
        stroke(240, 240, 240);
        strokeWeight(1);
        line(this.originX, this.originY, this.originX, this.gy2);
        line(this.originX, this.originY, this.gx2, this.originY);
        
        // Axis labels
        fill(250, 250, 250);
        textAlign(CENTER, BASELINE);
        textSize(14);
        text(xLabel, this.originX + this.width/2, this.originY + 32);
        
        pushMatrix();
        translate(this.originX - 28, this.originY - this.height/2);
        rotate(270);
        text(yLabel, 0, 0);
        popMatrix();
    };
};
 
 var functionToArray = function(maxX, width) {
     // Create an array with the value of f(x) for every
     // pixel in the graph

     var resolution = maxX / width;
     var yValues = [];

     for (var x=0; x<=maxX; x+=resolution) {
         yValues.push(f(x));
     }
     return yValues;
 };
 
 var RiemannSum = function(N, a, b, sumType) {
     // Calculate the Riemann sum between a and b, with n divisions
     // using the given sum type.
     
     var area = 0;
     var dx = (b - a)  / N;
     
     for (var i=0; i<N; i++) {
         var lowerIndex = a + i * dx;
         var heights = sumTypes[sumType](lowerIndex, lowerIndex + dx);
         area += (heights[0] + heights[1]) / 2;
     }
     return area * dx;
 };
 
 var findAreaForEveryN = function(maxN) {
     // Find the area under the curve using the RiemannSum
     // and every N from 1 to number of pixels in graph.
     // areas[0] = max(area), areas[n] = area with n boxes.
     // Return a hash contain the areas for every sum type
     
     var areaForSumType = {};
     var maxArea = 0;
     
     for (var key in sumTypes) {
         var areas = [];
         for (var n=1; n<=maxN; n++) {
             var area = RiemannSum(n, interval[0], interval[1], key);
             if (area > maxArea) { maxArea = area; }
             areas.push(area);
         }
         areaForSumType[key] = areas;
     }
     
     areaForSumType.max = maxArea;
     return areaForSumType;
 };
 
 var drawBars = function() {
     noStroke();
     var dx = graph1.maxX / nBoxes;
     var barWidth = dx * graph1.scaleX;
     
     var x, y, x1, y1, barHeights;
     for (var i=0; i<nBoxes; i++) {
         x = i * dx;
         barHeights = sumTypes[selectedSum](x, x+dx);
         y = graph1.originY - barHeights[0] * graph1.scaleY;
         y1 = graph1.originY - barHeights[1] * graph1.scaleY;
         x1 = graph1.plotX(x);
         
         fill(colours[selectedSum][i%2]);
         quad(x1, graph1.originY, x1, y, 
              x1 + barWidth, y1, x1 + barWidth, graph1.originY);
     }
 };
 
 var drawTitle = function() {
     textAlign(CENTER, BASELINE);
     textSize(14);
     fill(255, 255, 255);
     
     var s = "Area calculated with " + selectedSum + " method and " ;
     if (nBoxes > 1) {
         s += nBoxes + " boxes = ";
     } else {
         s += "one box = ";
     }
     s += round(100 * sumForEachN[selectedSum][nBoxes-1])/100;
     
     text(s, 200, 20);
 };
 
 var drawGraph2 = function() {
     graph2.drawArea();
     
     textSize(12);
     textAlign(LEFT, TOP);
     var colour;
     var y = graph2.gy2 + 25;
     
     for (var key in sumTypes) {
         var series = sumForEachN[key];
         var col = colours[key][0];
         graph2.plotFunction(series, col, 2, 1);
         
         fill(col);
         if (selectedSum === key || (mouseX > graph2.gx2 && 
             mouseY >= y && mouseY < y+16)){
             rect(graph2.gx2+5, y, 58, 14, 3);
             fill(0, 0, 0);
             if (mouseIsPressed) {
                 selectedSum = key;
             }
         }
         text(key, graph2.gx2+8, y);
         y+= 20;
     }
     
     graph2.drawAxes("Number of boxes", "Area");
 };
 
 var drawSlider = function() {
     stroke(255, 255, 255, 128);
     strokeWeight(2);
     
     var x = graph2.plotX(nBoxes);
     line(x, graph2.gy2-3, x, graph2.originY+4);
     
     var y = graph2.gy2;
     if (sliderSelected) { fill(250, 250, 250); }
     else { fill(80, 80, 80); }
     ellipse(x, y, sliderSize, sliderSize);
     textSize(11);
     
     if (sliderSelected) { fill(0,0,0); }
     else { fill(255,255,255); }
     textAlign(CENTER, CENTER);
     text(nBoxes, x, y);
 };

 var yValues = functionToArray(interval[1], 300);

 graph1 = new Graph(60, 170, 300, 130, interval[1], maxY, 1, tickY);
 sumForEachN = findAreaForEveryN(maxN);
 graph2 = new Graph(60, 355, 270, 130, maxN, sumForEachN.max, 10, 10);

 var draw = function() {
     background(0, 0, 0);
     drawTitle();
     graph1.drawArea();
     drawBars();
     graph1.plotFunction(yValues, color(255, 0, 187), 3);
     graph1.drawAxes("X", "Y");
     
     drawGraph2();
     drawSlider();
 };
 
 var mousePressed = function() {
     var x = graph2.plotX(nBoxes);
     var y = graph2.gy2 - 14;
     
     if (abs(mouseX - x) <= sliderSize &&
         abs(mouseY - y) <= sliderSize) {
         sliderSelected = true;
     }
 };
 
 var mouseDragged = function() {
     if (sliderSelected) {
         nBoxes = round((mouseX - graph2.originX) / graph2.scaleX);
         nBoxes = constrain(nBoxes, 1, maxN);
     }
 };
 
 var mouseReleased = function() {
     sliderSelected = false;
 };
 
 var mouseOut = function() {
     sliderSelected = false;
 };