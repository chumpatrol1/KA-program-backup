// Leg position
var legX = 0;
var legY = 420;
var legZ = 1600;

// Leg size (radius including scales)
var legR = 220;
var legR2 = legR * legR;

// Leg size without scales
var scaleThickness = 16;
var legInner = legR - scaleThickness;
var legInner2 = legInner * legInner;

// How big is the gap inside the leg
var legEmpty = legR - 50;
var legEmpty2 = legEmpty * legEmpty;

// Height of leg
var legH = 400;

// Bounding box
var legX1 = legX - legR;
var legX2 = legX + legR;
var legY1 = legY - legH / 2;
var legY2 = legY + legH / 2;
var legZ1 = legZ - legR;    // Frontmost point of the leg
var legZ2 = legZ * legZ;    // Distance to center squared for intersection calculation
var legDZ = legR2 - legZ2;  // For intersection calculation

var HalfAngle = 200 / asin(1);  // Used to map point on cylinder to point on surface

// Light vector
var lightX = -10;
var lightY = -5;
var lightZ = -12;
// Normalise
var lightD = sqrt(lightX * lightX + lightY * lightY + lightZ * lightZ);
lightX /= lightD;
lightY /= lightD;
lightZ /= lightD;

var scaleBorder = 0.8;

// Get initial sites using Possion distribution
var possionDiscSampling = function(minDist) {
    // How many points we try before rejecting a point
    var k = 30;
    var maxDist = minDist * 2;
    var minDist2 = minDist * minDist;
    
    var x, y, i, j, p, d;
    // Final array of points that we'll return
    var points = [];
    
    // Points that we use to find neighbours
    var activePoints = [];
    
    // Start at a random point
    x = (0.2 + random() * 0.6) * width;
    y = (0.2 + random() * 0.6) * height;
    points.push([x, y]);
    activePoints.push([x, y]);
    
    var activeIndex, currentPoint, pointAdded, angle, collision;
    
    while (activePoints.length) {
        // Pick a random active point
        activeIndex = floor(random() * activePoints.length);
        currentPoint = activePoints[activeIndex];
        pointAdded = false;
        
        for (i = 0; i < k; i++) {
            angle = random() * 360;
            d = random(minDist, maxDist);
            x = currentPoint[0] + cos(angle) * d;
            y = currentPoint[1] + sin(angle) * d;
            
            if (x < 0 || x > width || y < 0 || y > height) {
                continue;
            }
            
            // Check distance from each other point is > minDist
            collision = false;
            for (j = points.length; j--;) {
                p = points[j];
                if ((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1]) < minDist2) {
                    collision = true;
                    break;
                }
            }
            
            if (!collision) {
                points.push([x, y]);
                activePoints.push([x, y]);
                pointAdded = true;
                break;
            }
        }
        
        // Failed to add point so remove it from the active list
        if (!pointAdded) {
            activePoints.splice(activeIndex, 1);
        }
    }
    
    return points;
};

/*********************************************************
 *       Site Object
 * Represents an initial point on the diagram.
 * Has methods to draw a parabola using the site
 * as a focus and the sweepline as a directrix.
*********************************************************/
{
var sortVertices = function(a, b) { return a.angle - b.angle; };
    
var Site = function(focus) {
    this.x = focus[0];
    this.x2 = this.x * this.x;
    this.y = focus[1];
    
    // Array of vertices that define the cell
    this.cell = [];    
};

Site.prototype.orderCellVertices = function() {
    var vertices = this.cell;
    var n = vertices.length;
    this.numVertices = n;
    
    // Find bounding box
    this.minX = vertices[0].x;
    this.maxX = vertices[0].x;
    this.minY = vertices[0].y;
    this.maxY = vertices[0].y;
    
    var i, vertex, dx, dy;
    var x = this.x;
    var y = this.y;
    for (i = 0; i < n; i++) {
        vertex = vertices[i];
        dx = vertex.x - x;
        dy = vertex.y - y;

        vertices[i] = {
            angle: atan2(dy, dx),
            x: vertex.x,
            y: vertex.y,
            x1: x + dx * scaleBorder,
            y1: y + dy * scaleBorder
        };
        
        if (vertex.x > this.maxX) { this.maxX = vertex.x; }
        else if (vertex.x < this.minX) { this.minX = vertex.x; }

        if (vertex.y > this.maxY) { this.maxY = vertex.y; }
        else if (vertex.y < this.minY) { this.minY = vertex.y; }
    }
    
    vertices.sort(sortVertices);
    
    // Calculate area
    this.deltas = [];
    var p2, p1 = vertices[n - 1];
    for (i = 0; i < n; i++) {
        p2 = vertices[i];
        this.deltas.push([p1.x - p2.x, p1.y - p2.y]);
        p1 = p2;
    }
};

Site.prototype.pointInArea = function(px, py) {
    // Bounding box test
    if (px <= this.minX || px >= this.maxX || py <= this.minY) {
        return false;
    }
    
    var i, d, p, cross, sign;
    for (i = this.cell.length; i--; ) {
        p = this.cell[i];
        d = this.deltas[i];
        cross = Math.sign(d[0] * (py - p.y) - d[1] * (px - p.x));
        if (!sign) {
            sign = cross;
        } else if (cross !== sign) {
            return false;
        }
    }

    return true;
};

Site.prototype.pointInArea2 = function(px, py) {
    var i, d, p, cross, sign;
    for (i = this.cell.length; i--; ) {
        p = this.cell[i];
        d = this.deltas[i];
        cross = Math.sign(d[0] * (py - p.y1) - d[1] * (px - p.x1));
        if (!sign) {
            sign = cross;
        } else if (cross !== sign) {
            return false;
        }
    }
    return true;
};

}
/*********************************************************
 *          Node object
 * Represents a node in the binary tree
 * Internal nodes represents breakpoint between
 * two arcs in the beachline (left and right).
 * Leaf nodes point to a parabola site and
 * represent an arc in the beachline.
*********************************************************/
{
var Node = function() {
    if (arguments.length === 1) {
        // Make an arc
        this.site = arguments[0];
    } else {
        // Make a breakpoint with the parameters as children
        this.setChild('left', arguments[0]);
        this.setChild('right', arguments[1]);
    }
};

Node.prototype.setChild = function(dir, child) {
    this[dir] = child;
    child.parent = this;
};

// Find the arc to the left of this breakpoint
Node.prototype.getLeftArc = function() {
    var node = this.left;
    while (!node.site) {
        node = node.right;
    }
    return node;
};

Node.prototype.getRightArc = function() {
    var node = this.right;
    while (!node.site) {
        node = node.left;
    }
    return node;
};

Node.prototype.getParent = function(dir) {
    var parent = this.parent;
    var parentLast = this;
    
    while (parent[dir] === parentLast) { 
        if (!parent.parent) { return; }
        parentLast = parent;
        parent = parent.parent; 
    }
    
    return parent;
};

Node.prototype.getY = function(x, y) {
    var d = this.site.y - y;
    var a = 0.5 / d;
    return a * x * x - 2 * a * this.site.x * x + a * this.site.x2 + y + 0.5 * d;
};

Node.prototype.finishEdge = function() {
    var edge = this.edge;
    if (edge) {
        var x = edge.dx < 0 ?
            max(width, edge.start.x + 100) :
            min(0, edge.start.x - 100);
        
        var p = { x: x, y: edge.getY(x) };
        edge.end = p;
        
        // Add vertex to cell
        edge.siteLeft.cell.push(p);
        edge.siteRight.cell.push(p);
    }
    
    if (!this.left.site) { this.left.finishEdge(); }
    if (!this.right.site) { this.right.finishEdge(); }
};
}
/*********************************************************
 *          Edge object
 * Represents an edge in Voronoi diagram
 * Edges are created whenever a breakpoint is created
 * They can be ended when a breakpoint is removed.
*********************************************************/
{
var Edge = function(start, siteLeft, siteRight) {
    this.start = start;
    this.siteLeft = siteLeft;
    this.siteRight = siteRight;
    
    // Direction vector
    this.dx = this.siteLeft.y - this.siteRight.y;
    this.dy = this.siteRight.x - this.siteLeft.x;

    // Constant term in line equation
    // y - y1 = (dy / dx)(x - x1) rearranged to
    //  dx(y) = dy(y) - dy(x1) + dx(y1)
    this.c = start.x * this.dy - start.y * this.dx;
    
    // TODO: fix for dy = 0
    this.grad = this.dy / this.dx;
};

Edge.prototype.getY = function(x) {
    return this.start.y + this.grad * (x - this.start.x);
};
}
/*********************************************************
 *          Voronoi object
 * Constructs the cells for a Voronoi diagram.
*********************************************************/
{
var sortSites = function(a, b) { return b[1] - a[1]; };
var sortEvents = function(a, b) { return b.site.y - a.site.y; };

var Voronoi = function(size) {
    this.events = [];
    this.edges = [];
    this.sites = [];
    
    var sites = possionDiscSampling(size);
    sites.sort(sortSites);
    
    // Add each site to the event queue
    // Add a cell for each site
    var site;
    for (var i = 0, len = sites.length; i < len; i++) {
        // Convert array of coordinates into a site object
        site = new Site(sites[i]);
        this.sites.push(site);
        
        this.events.push({
            site: site,
            newArc: true
        });
    }

    this.compute();
};

Voronoi.prototype.compute = function() {
    while (this.events.length) {
        var event = this.events.pop();
        this.sweepline = event.site.y;
        
        // Process event
        if (event.newArc) {
            this.insertArc(event.site);
        } else {
            this.removeArc(event);
        }
    }
    
    this.root.finishEdge();
    var i, len;
    for (i = 0, len = this.edges.length; i < len; i++) {
        if (this.edges[i].neighbour) {
            this.edges[i].start = this.edges[i].neighbour.end;
        }
    }
    
    // Sort cell vertices
    for (i = 0, len = this.sites.length; i < len; i++) {
        this.sites[i].orderCellVertices();
    }
};

// Add a new arc with its focus at the given site
Voronoi.prototype.insertArc = function(site) {
    // Create a new arc based on this site
    var newArc = new Node(site);
    
    // No need to do anything further with the first parabola
    if (!this.root) {
        this.root = newArc;
        return;
    }
    
    // Find leaf representing the arc above the new parabola
    var existingArc = this.getArcAbovePointX(site.x);
    
    // Split existing arc into two pieces
    var arc1 = new Node(existingArc.site);
    var arc2 = new Node(existingArc.site);
    var breakpoint = new Node(newArc, arc2);

    // Convert existing arc node to a breakpoint
    existingArc.setChild('left', arc1);
    existingArc.setChild('right', breakpoint);
    
    this.removeCircleEvent(existingArc);
    
    // Add a new edge
    var p = { x: site.x, y: existingArc.getY(site.x, this.sweepline) };
    var leftEdge = new Edge(p, existingArc.site, site);
    var rightEdge = new Edge(p, site, existingArc.site);
    
    leftEdge.neighbour = rightEdge;
    this.edges.push(leftEdge);
    existingArc.edge = rightEdge;
    breakpoint.edge = leftEdge;
    
    existingArc.site = false;
    
    // Check for new circle events
    this.checkForCircleEvent(arc1);
    this.checkForCircleEvent(arc2);
};

// Search binary tree for parabola covering given x-position
Voronoi.prototype.getArcAbovePointX = function(x) {
    var node = this.root;
    var p1, p2, d1, d2, a1, a2, a, b, c, discriminant, testX, x1, x2;
    
    // While we are not at a leaf in the tree (representing an arc).
    while (!node.site) {
        p1 = node.getLeftArc().site;
        p2 = node.getRightArc().site;
    
        // Coeffiecients for parabola equation in standard form
        d1 = p1.y - this.sweepline;
        d2 = p2.y - this.sweepline;
        
        a1 = 0.5 / d1;
        a2 = 0.5 / d2;
        
        a = a1 - a2;
        b = 2 * (a2 * p2.x - a1 * p1.x);
        c = a1 * p1.x2 - a2 * p2.x2 + 0.5 * (d1 - d2);
    
        discriminant = b * b - 4 * a * c;
        a *= 2;
        x1 = (-b + sqrt(discriminant)) / a;
        x2 = (-b - sqrt(discriminant)) / a;
        testX = p1.y > p2.y ? max(x1, x2) : min(x1, x2);
        node = testX > x ? node.left : node.right;
    }
    
    return node;
};

Voronoi.prototype.removeArc = function(event) {
    var arc = event.arc;
    var leftBreak = arc.getParent('left');
    var rightBreak = arc.getParent('right');
    var leftArc = leftBreak.getLeftArc();
    var rightArc = rightBreak.getRightArc();

    // Get point where the arc disappears
    var x = event.site.x;
    var p = { x: x, y: arc.getY(x, this.sweepline) };
    
    // Add a vertex to each of the cells
    arc.site.cell.push(p);
    leftArc.site.cell.push(p);
    rightArc.site.cell.push(p);
    
    // Add an end point to the two breakpoints that have joined

    leftBreak.edge.end = p;
    rightBreak.edge.end = p;
    
    this.removeCircleEvent(leftArc);
    this.removeCircleEvent(rightArc);
    
    // Find the higher breakpoint
    var higher;
    var parent = arc;
    while (parent !== this.root){
        parent = parent.parent;
        if (parent === leftBreak) { higher = leftBreak; }
        if (parent === rightBreak) { higher = rightBreak; }
    }
    
    higher.edge = new Edge(p, rightArc.site, leftArc.site);
    this.edges.push(higher.edge);

    // Remove leaf from tree and reorder
    var parent = arc.parent;
    var gparent = parent.parent;
    var d1, d2;
    
    if (parent.left === arc) {
        d2 = 'right';
        d1 = gparent.left === parent ? 'left' : 'right';
    } else {
        d2 = 'left';
        d1 = gparent.left === parent ? 'left' : 'right';
    }
    
    // Set new parents
    gparent.setChild(d1, parent[d2]);
    
    this.checkForCircleEvent(leftArc);
    this.checkForCircleEvent(rightArc);
};

Voronoi.prototype.checkForCircleEvent = function(b) {
    var leftBreak = b.getParent('left');
    var rightBreak = b.getParent('right');
    
    if (!leftBreak || !rightBreak) { return; }
    
    var a = leftBreak.getLeftArc();
    var c = rightBreak.getRightArc();
    
    if (!a || !c || a.site === c.site) { return; }
    
    //println(a + " " + b + " " + c);
    
    // Check whether edges of breakpoints intersect
    var e1 = leftBreak.edge;
    var e2 = rightBreak.edge;
    var den = e1.dx * e2.dy - e1.dy * e2.dx;
    
    // Lines are parallel
    if (!den) { return; }
    
    // Center circle at intersection point
    var ix = (e2.c * e1.dx - e1.c * e2.dx) / den;
    var iy = (e2.c * e1.dy - e1.c * e2.dy) / den;
    
    // Test whether edge is in the wrong direction
    if ((ix - e1.start.x) * e1.dx > 0 || (iy - e1.start.y) * e1.dy > 0 ||
        (ix - e2.start.x) * e2.dx > 0 || (iy - e2.start.y) * e2.dy > 0) {
        return;
    }

    var radius = dist(ix, iy, a.site.x, a.site.y);
    
    //println(radius);
    //println(ix + " " + iy);
    
    // Convert center to lower edge
    iy += radius;
    
    // Ignore circle if the sweep line has passed
    if (iy <= this.sweepline) { return; }
    
    // Create new event
    var event = {
        site: { x: ix, y: iy },
        radius: radius,
        arc: b
    };
    
    b.circleEvent = event;
    this.events.push(event);
    this.events.sort(sortEvents);
};

// Remove a circle event associated with the given arc
Voronoi.prototype.removeCircleEvent = function(arc) {
    //println("Remove circle event " + arc);
    if (arc.circleEvent) {
        //println("Removed");
        var index = this.events.indexOf(arc.circleEvent);
        if (index > -1) { this.events.splice(index, 1); }
        arc.circleEvent = null;
    }
};

Voronoi.prototype.getSiteAtPoint = function(x, y) {
    for (var i = this.sites.length; i--;) {
        if (y < this.sites[i].maxY && this.sites[i].pointInArea(x, y)) {
            // This is the site, is it the skin or scale?
            return this.sites[i].pointInArea2(x, y);
        }
    }
};

}
/*********************************************************
 *      Create object
*********************************************************/

var ms = millis();
var voronoi = new Voronoi(50);
//println(millis() - ms);
background(0);

/*********************************************************
 *      PixelGrid
 *  Where we do the ray-tracing 
*********************************************************/

var PixelGrid = {
    // Set up pixel grid with width and height (w, h),
    // centered on (0, y, z), perpendicular to the vector
    // from (0, 0, 0) to (0, y, z)
    x: 0,

    setup: function(y, z, w, h) {
        this.y = y;
        this.z = z;
        
        this.w = w;
        this.h = h;
        var w2 = w / 2 - 0.5;
        var h2 = h / 2 - 0.5;

        var d = sqrt(y * y + z * z);
        this.dy = z / d;
        this.dz = -y / d;
        
        // Vector to top left corner
        this.x1 = this.x - w2;
        this.y1 = this.y - h2 * this.dy;
        this.z1 = this.z - h2 * this.dz;
    },
    
    rayTrace: function() {
        var x, y, y2, z2, px, py, pz, ix, iy, iz, nx, nz, gx, gy;
        var i, intensity, scaleZ, d, t, det, dot;

        loadPixels();
        var p = imageData.data;
        
        for (y = 0; y < this.h; y++) {
            py = this.y1 + y * this.dy;
            pz = this.z1 + y * this.dz;
            y2 = py * py;
            z2 = pz * pz;

            // Ratio of distance to the center of the leg to the distance from camera to pixel grid
            scaleZ = legZ / pz;

            for (x = 0; x < this.w; x++) {
                px = this.x1 + x;
                // Ray trace with a ray from [0, 0, 0] to [px, py, pz]

                // Test for topcap
                if (py > 0) {   // Always true now?
                    // Find intersection with plane at legY1
                    iy = legY1 / py;            // How many rays to reach the plane
                    ix = px * iy;               // Distance from legX, assuming legX = 0;
                    iz = pz * iy - legZ;        // Distance from legZ
                    d = ix * ix + iz * iz;
                    if (d < legR2) {
                        i = x + y * width << 2;
                        if (d < legEmpty2) {
                            // Inside leg
                            p[i++] = 45;
                            p[i++] = 45;
                            p[i++] = 40;
                        } else if (d < legInner2) {
                            // Top of leg skin
                            p[i++] = 90;
                            p[i++] = 120;
                            p[i++] = 90;
                        } else {
                            // Top of scales
                            // Where along the grid are we?
                            gx = 200 + atan(ix / iz) * HalfAngle;
                            if (voronoi.getSiteAtPoint(gx, 0)) {
                                p[i++] = 125 | 0;
                                p[i++] = 150 | 0;
                                p[i++] = 100 | 0;
                            } else {
                                // Show skin between scales
                                ix = px * scaleZ;
                                if (abs(ix) <= legInner) {
                                    p[i++] = 55;
                                    p[i++] = 66;
                                    p[i++] = 60;
                                }
                            }

                        }
                        continue;
                    }
                }

                // Bounding-box test
                // Does the ray hit a rectangle of width 2r in front of the cylinder
                ix = px * scaleZ;
                if (ix < legX1 || ix > legX2) { continue; }

                // TODO: Increase legY2 based on camera angle
                //iy = py * scaleZ;
                //if (iy < legY1 || iy > legY2) { continue; }
                //if (iy < legY1) { continue; }

                i = x + y * width << 2;

                // Test for line vs circle (top down view)

                // Length of ray from origin to pixel, ignoring y
                d = px * px + z2;
                dot = z2 * legZ2 / d;
                det = dot + legDZ;

                // Does line intersect with circular cross-section?
                // Might always be true given boundary box test
                if (det < 0) { continue; }

                // Length of 3D vector to pixel grid
                d = sqrt(d + y2);

                // Distance along ray as unit vector
                t = (sqrt(dot) - sqrt(det)) / d;

                iy = py * t;

                // Is intersection point off the end of the cylinder?
                if (iy < legY1 - 3 || iy > legY2) { continue; }

                // Intersection points
                ix = px * t;
                iz = pz * t;

                // Calculate normal
                // nx = ix;
                // ny = 0;
                nz = iz - legZ;
                d = sqrt(ix * ix + nz * nz);
                nx = ix / d;
                nz /= d;

                // Dot with light vector
                intensity = 0.35 + 0.7 * (nx * lightX + nz * lightZ);

                // Map to position on 2D gird
                // gy = iy
                // gx = acos(ix / legR)

                gx = acos(ix / legR) * HalfAngle;
                gy = iy - legY1;

                // Test for hitting voronoi cell
                if (voronoi.getSiteAtPoint(gx, gy)) {
                    p[i++] = 100 * intensity;
                    p[i++] = 160 * intensity;
                    p[i++] = 60 * intensity;
                } else {
                    // Check for ray intersection with inner cylinder using bounding box test
                    ix = px * scaleZ;
                    if (abs(ix) > legInner) { continue; }

                    p[i++] = 55 * intensity;
                    p[i++] = 66 * intensity;
                    p[i++] = 60 * intensity;

                    
                }

            }
        }
        
        updatePixels();
    }
};
PixelGrid.setup(300, 1000, 400, 400);

background(0);
PixelGrid.rayTrace();