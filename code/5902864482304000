/*******************************************************************
 *      Cell circuitry game (work in progress)
 * 
 *  The aim is to create gene regulatory networks that provide a
 * cell with a specific behaviour.
 * 
 * To do:
 *  - Improve mRNA on graph
 *  - Reset cell after aborting simulation
 *  - Play / Pause button (speed control?)
 *  - Fix and improve graph
 *  - Fix how bars calculate max unbound protein
 *  - Show interaction between promoters and gene
 *  - Click gene to show its promoter
 *  - Add completed level screen
 *  - More levels
 *  - Improve simulation display
*******************************************************************/

/*******************************************************************
 *      Fonts, colours and other globals
*******************************************************************/

var menuFont = createFont("impact", 26);
var sansFont = createFont("sans-serif", 18);
var smallFont = createFont("sans-serif", 11);
var buttonFontSize = 20;

var CELL_FILL = color(250, 250, 255);
var CELL_FILL2 = color(120, 200, 55);
//CELL_FILL = CELL_FILL2;
var CELL_STROKE = color(20, 100, 15);
var WATER_COL = color(200, 220, 250);
var WATER_COL2 = color(120, 165, 230);
var OFF_WHITE = color(250, 250, 255);
var DNA_COL = color(90, 165, 250);
var DNA_COL2 = color(40, 110, 190);
var RNA_COL = color(190, 75, 220);
var PROTEIN_COL = color(245, 75, 32);
var TEXT_COL = color(0, 0, 10);

var E = exp(1);

var cell, gui;
var level = 1;

/*******************************************************************
 *      Level data
*******************************************************************/

var levels = [
    {
        name: "Introducing transcription factors",
        aim: "Get 80% of the tf1 promoter bound by TF1 protein.",
        desc: "Transcription factors (TFs) are proteins that stick to sequences of DNA. The sequences are called promoters. The strength of a promoter is a measure of how strongly a transcription factor binds it.",
        genes: ['TF1'],
        proteins: [
            { type: 'transcription-factor', name: 'TF1', amount: 5 }
        ],
        graphing: function() {
            return [cell.genes.tf1.occupied.TF1 * 100 || 0];
        },
        completionTest: function() {
            return cell.genes.tf1.occupied.TF1 >= 0.8;
        }
    },
    {
        name: "Introducing RNA polymerase",
        aim: "Synthesise 200 units of mRNA",
        desc: "RNA polymerase (RNAP) is an enzyme that binds DNA where transcription factors are bound. Once bound it can travel along the DNA, transcribing a gene into messenger RNA.",
        genes: ['TF1', 'RNAP'],
        proteins: [
            { type: 'transcription-factor', name: 'TF1', amount: 4 },
            { type: 'RNA-polymerase', name: 'RNAP', amount: 1 }
        ],
        graphing: function() {
            return [cell.proteins.TF1.mrna, cell.proteins.RNAP.mrna];
        },
        completionTest: function() {
            return cell.proteins.TF1.mrna + cell.proteins.RNAP.mrna > 200;
        }
    },
    {
        name: "Introducing ribosomes",
        aim: "Synthesise 50 units of RNA polymerase",
        desc: "Ribosomes (ribo) are enzyme complexes that bind mRNA and translate it into proteins. Multiple ribosomes can bind mRNA at the same time to increase the rate of translation.",
        genes: ['TF1', 'RNAP', 'Ribo'],
        proteins: [
            { type: 'transcription-factor', name: 'TF1', mrna: 10 },
            { type: 'RNA-polymerase', name: 'RNAP', mrna: 10 },
            { type: 'ribosome', name: 'Ribo', amount: 1 },
        ],
        graphing: function() {
            return [cell.proteins.RNAP.amount];
        },
        completionTest: function() {
            return cell.proteins.RNAP.amount > 50;
        }
    }
];

// Semi logarithmic scale
// 0 - 10 map to 0 - 10 (units),
// 11 maps to 15,
// 12 - 20 map to 20 - 100 (tens)
// 21 maps 150 and so on
var setStrength = function(x) {
    x = round(x);
    if (x < 11) { return x; }
    
    var n = x % 10;
    var mag = pow(10, floor(x / 10));
    if (n === 1) {
        return floor (1.5 * n * mag);
    } else {
        return mag * n || mag;
    }
};

// Do the opposite of above
var getSliderVal = function(x) {
    x = round(x);
    if (x < 11) { return x; }
    
    var mag = floor(log(x) / log(10));
    var n = x / pow(10, mag);
    if (n === 1) {
        n = 0;
    }
    
    return mag * 10 + floor(n);
};

/*******************************************************************
 *      GUI objects
*******************************************************************/
var Button = function(name, x, y, clickF) {
    this.x = x;
    this.y = y;
    this.name = name;
    this.defaultCol = CELL_STROKE;
    this.highlightCol = color(10, 10, 10);
    this.clickF = clickF;
    
    var dx = 6;
    var dy = 3;
    
    this.mouseover = function() {
        if (this.name === 'X') {
            return dist(mouseX, mouseY, this.x, this.y) <= 8;
        } else {
            return mouseX >= this.x && mouseX <= this.x + this.w && 
                   mouseY >= this.y && mouseY <= this.y + this.h;
        }
    };
    
    this.click = function() {
        if (this.clickF) {
            this.clickF();
            return true;
        }
    };
    
    this.drawCloseButton = function() {
        stroke(CELL_STROKE);
        strokeWeight(2);
        
        if (this.mouseover()) {
            fill(CELL_FILL2);
        } else {
            fill(CELL_FILL);
        }
        
        ellipse(this.x, this.y, 16, 16);
        var d = 3;
        line(this.x - d, this.y - d, this.x + d, this.y + d);
        line(this.x + d, this.y - d, this.x - d, this.y + d);
    };
    
    this.draw = function() {
        if (this.name === 'X') {
            this.drawCloseButton();
            return;
        }
        
        textFont(menuFont, buttonFontSize);
        textAlign(LEFT, TOP);
        
        this.h = textAscent() + textDescent() + dy * 2 + 1;
        this.w = textWidth(this.name) + dx * 2;
        
        if (this.mouseover()) {
            fill(CELL_FILL2);
        } else {
            fill(CELL_FILL);
        }
        
        stroke(CELL_STROKE);
        strokeWeight(2);
        rect(this.x, this.y, this.w, this.h, 8);
        
        fill(CELL_STROKE);
        text(this.name, this.x + dx, this.y + dy);
    };
};

/********************************************************
 *               Slider and functions
*********************************************************/
var Slider = function(x, y, w, min_v, max_v, current_v, setF) {
    this.x = x;
    this.y = y;
    this.width = w; 
    this.held = false;

    // Use when min and max (re)defined
    this.calibrate = function(min_v, max_v) {
        this.min = min_v;
        this.max = max_v;
        this.scale = (max_v - min_v) / w;
        this.val = current_v === undefined ? min_v : current_v;
        this.bx = this.x + (this.val - min_v) / this.scale;          
    };
    this.calibrate(min_v, max_v);

    this.draw = function() {
        noStroke();
        fill(DNA_COL);
        rect(this.x - 8, this.y - 6, this.width + 16, 12, 8);
        fill(DNA_COL2);
        ellipse(this.bx, this.y, 16, 16);
        
        fill(10);
        textAlign(RIGHT, CENTER);
        textFont(sansFont, 13);
        text(setStrength(this.val), this.x - 16, this.y);
    };
    
    this.selected = function() {
        this.held = mouseX > this.x - 8 && mouseX < this.x + this.width + 8 && 
                    mouseY > this.y - 8 && mouseY < this.y + 8;
        this.drag();
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + (x - this.x) * this.scale;
            
            if (setF) {
                setF(this.val);
            }
        }
    };
    
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

/*******************************************************************
 *      GUI functions and subwindows
*******************************************************************/

// Standard window with outline and title
var drawOrganelle = function(x, y, h, title) {
    strokeWeight(4);
    stroke(CELL_STROKE);
    fill(CELL_FILL);
    rect(x, y, width - x * 2, h, 12);
    
    strokeWeight(1);
    stroke(CELL_FILL);
    noFill();
    rect(x, y, width - x * 2, h, 12);
    
    if (title) {
        fill(TEXT_COL);
        textFont(sansFont, 13);
        textAlign(LEFT, TOP);
        text(title, x + 6, y + 5);   
    }
};

// Function for closing screens - triggered when clicking the X in the top right corner
var closeSubScreen = function() {
    if (gui.selected) {
        gui.selected.x = gui.selected.oldx;
        gui.selected.y = gui.selected.oldy;   
    }
    gui.subScreen = false;
    gui.selected = false;
};

// A pop-up window appearing in front of the main window and which can be closed
var subScreen = function(title, x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.title = title;
    this.buttons = [new Button("X", x + w - 14, y + 14, closeSubScreen)];
    this.sliders = [];
    this.selected = false;
};
    
subScreen.prototype.draw  = function() {
    drawOrganelle(this.x, this.y, this.h, this.title);
    
    for (var i = 0; i < this.buttons.length; i++) {
        this.buttons[i].draw();
    }
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].draw();
    }
};
    
subScreen.prototype.mousedown = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].selected();
    }
};
    
subScreen.prototype.mouseup = function() {
    if (this.selected && !(
        mouseX >= this.x && mouseX <= this.x + this.w &&
        mouseY >= this.y && mouseY <= this.y + this.h)) {
        this.buttons[0].click();
        return;
    }
    
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseover()) {
            if (this.buttons[i].click()) {
                break;
            }
        }
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].held = false;
    }
};
    
subScreen.prototype.drag = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].drag();
    }
};

// Simple subscreen with a message and close button
var alertScreen = function(x, y, w, h, message) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.message = message;
    this.buttons = [new Button("X", x + w - 14, y + 14, closeSubScreen)];
};
alertScreen.prototype = Object.create(subScreen.prototype);

alertScreen.prototype.draw  = function() {
    drawOrganelle(this.x, this.y, this.h);
    this.buttons[0].draw();
    
    textAlign(CENTER, CENTER);
    fill(TEXT_COL);
    text(this.message, this.x + this.w/2, this.y + this.h/2);
};

var createPromoterStrengthWindow = function(gene, protein) {
    var x = 50;
    var y = 200;
    var title = "Set strength for " + gene + " binding to " + protein + " promoter";
    gui.subScreen = new subScreen(title, x, y, 300, 60);
    
    // Slider function
    var sliderF = function(x) {
        cell.genes[protein].promoter[gene] = setStrength(x);
    };
    
    var currentVal = getSliderVal(cell.genes[protein].promoter[gene] || 0);
    gui.subScreen.sliders.push(new Slider(x + 80, y + 36, 180, 0, 40, currentVal, sliderF));
};

/*******************************************************************
 *      GUI object - stores screens which determine
 *      what is drawn, including which buttons
*******************************************************************/

var GUI = function() {
    this.screens = {};
    this.currentScreen = false;
    this.subScreen = false;
    
    var buttons = [];
    this.draggables = [];
    this.selected = false;
    
    this.addButton = function(screen, name, x, y, clickF) {
        if (this.screens[screen]) {
            this.screens[screen].buttons.push(new Button(name, x, y, clickF));
        } else {
            println("No such screen " + screen);
        }
    };
    
    this.addScreen = function(screen, drawFunction) {
        this.screens[screen] = {
            draw: drawFunction,
            buttons: []
        };
    }; 
    
    this.changeScreen = function(newScreen) {
        this.currentScreen = this.screens[newScreen];
        if (this.currentScreen) {
            buttons = this.currentScreen.buttons;
        }
    };
    
    this.draw = function() {
        if (this.currentScreen) {
            this.currentScreen.draw();
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].draw();
            }
            
            if (this.subScreen) {
                // Shade background
                noStroke();
                fill(0, 0, 50, 80);
                rect(0, 0, width, height);
                this.subScreen.draw();
            }
        }
    };
    
    this.mousedown = function() {
        if (this.subScreen) {
            this.subScreen.mousedown();
        } else {
            for (var i = 0; i < this.draggables.length; i++) {
                var obj = this.draggables[i];
                if (mouseX >= obj.x - obj.w / 2 && mouseX <= obj.x + obj.w / 2 &&
                    mouseY >= obj.y - obj.h / 2 && mouseY <= obj.y + obj.h) {
                        this.selected = obj;
                    }
            }
        }
    };
    
    this.mouseup = function() {
        if (this.subScreen) {
            this.subScreen.mouseup();
        } else if (this.selected) {
            var x1 = this.selected.x - this.selected.w / 2;
            var x2 = this.selected.x + this.selected.w / 2;
            var y1 = this.selected.y - this.selected.h / 2;
            var y2 = this.selected.y + this.selected.h / 2;
            
            for (var i = 0; i < this.droppables.length; i++) {
                var obj = this.droppables[i];
                if (x1 <= obj.x + obj.w / 2 && x2 >= obj.x - obj.w / 2 &&
                    y1 <= obj.y + obj.h / 2 && y2 >= obj.y - obj.h / 2) {
                        // TODO: Define action of match elsewhere
                        createPromoterStrengthWindow(this.selected.name, obj.label);
                        return;
                }
            }
            this.selected = false;
        } else {
            for (var i = 0; i < buttons.length; i++) {
                if (buttons[i].mouseover()) {
                    if (buttons[i].click()) {
                        break;
                    }
                }
            }
        }
    };
    
    this.drag = function() {
        if (this.subScreen) {
            this.subScreen.drag();
        } else if (this.selected) {
            var dx = this.selected.w / 2 + 3;
            var dy = this.selected.h / 2 + 3;
            this.selected.x = constrain(this.selected.x + mouseX - pmouseX,
                                        this.container.x1 + dx, this.container.x2 - dx);
            this.selected.y = constrain(this.selected.y + mouseY - pmouseY,
                                        this.container.y1 + dy, this.container.y2 - dy);
        }
    };
};

gui = new GUI();

/*******************************************************************
 *      Gene objects
*******************************************************************/

var Gene = function(cell, protein, promoter) {
    this.cell = cell;
    this.protein = protein;
    this.promoter = promoter || {};
    this.occupied = { };
    
    this.free = 1;      // Unbound by transcription factor or inhibitor
    this.tfBound = 0;
    this.rnapBound = 0;
};

// Release some transcription factors and
// find what what proportion of the promoter
Gene.prototype.update = function() {
    this.tfsBound = 0;
    var totalOccupied = 0;
    
    // Transcription factors and inhibitors dissociate from the promoter
    for (var i in this.occupied) {
        var protein = this.cell.proteins[i];
        var dissociation = this.occupied[i] * (1 - this.promoter[i] / (this.promoter[i] + 1));
        this.occupied[i] -= dissociation;
        protein.amount += dissociation;
        totalOccupied += this.occupied[i];
        
        if (protein.type === 'transcription-factor') {
            this.tfBound += this.occupied[i];
        }
    }
    this.free = constrain(1 - totalOccupied, 0, 1);
    
    // RNAP dissociates from promoter
    if (this.rnapBound) {
        this.cell.proteins.RNAP.amount += this.rnapBound;
        this.rnapBound = 0;
    }
};

/*******************************************************************
 *      Protein objects
*******************************************************************/

var Protein = function(cell, data) {
    this.cell = cell;
    this.type = data.type;
    this.name = data.name;
    this.amount = data.amount || 0;
    this.mrna = data.mrna || 0;
};

// Default protein function does nothing
Protein.prototype.update = function() {};

// Transcription factors bind DNA at promoters
var TranscriptionFactor = function(cell, data) {
    Protein.call(this, cell, data);
};
TranscriptionFactor.prototype = Object.create(Protein.prototype);

TranscriptionFactor.prototype.update = function(volume) {
    var concentration = this.amount / volume;
    
    // Find all the free sites
    // Add 0.5 as a binding constant
    var totalSites = 0.5;
    for (var g in this.cell.genes) {
        var gene = this.cell.genes[g];
        if (gene.promoter[this.name]) {
            totalSites += gene.free;
        }
    }
    
    // Bind promoters of genes
    for (var i in this.cell.genes) {
        var gene = this.cell.genes[i];
        
        if (gene.promoter[this.name]) {
            var proteinBound = concentration * gene.free / totalSites;
            var currentLevel = gene.occupied[this.name] || 0;
            gene.occupied[this.name] = currentLevel + proteinBound;
            this.amount -= proteinBound;
        }
    }
};

// RNA Polymerase binds DNA at promoters where transcription factors are bound
var RNAPolymerase = function(cell, data) {
    Protein.call(this, cell, data);
    this.bindingConst = 0.001;
};
RNAPolymerase.prototype = Object.create(Protein.prototype);

RNAPolymerase.prototype.update = function(volume) {
    var concentration = this.amount / volume;
    var proteinsToBind = this.amount * concentration / (concentration + this.bindingConst);
    var totalSites = 1;
    
    // Find amount of transcription factor on each promoter
    for (var g in this.cell.genes) {
        totalSites += this.cell.genes[g].tfBound;
    }

    // Bind promoters of genes
    for (var i in this.cell.genes) {
        var gene = this.cell.genes[i];
        var proteinBound = proteinsToBind * gene.tfBound / totalSites;
        gene.rnapBound = proteinBound;
        this.amount -= proteinBound;
        this.cell.proteins[gene.protein].mrna += proteinBound;
    }
};

/*******************************************************************
 *      Cell object
*******************************************************************/
var Cell = function(genes, proteins) {
    this.running = false;
    this.water = 2000;
    this.genes = { };
    this.proteins = { };
    
    this.age = 0;
    this.graphValues = [];
    this.graphFunction = levels[level].graphing;
    this.graphMax = 1;
    this.winFunction = levels[level].completionTest;
    
    // Create genes
    this.numGenes = 0;
    for (var i = 0; i < genes.length; i++) {
        var name = genes[i].toLowerCase();
        this.genes[name] = new Gene(this, genes[i]);
        this.numGenes++;
    }
    
    // Create proteins
    this.numProteins = 0;
    this.maxProteinAmount = 0;
    for (var i = 0; i < proteins.length; i++) {
        var data = proteins[i];
        var protein;
        
        switch (data.type) {
            case 'transcription-factor':
                protein = new TranscriptionFactor(this, data);
                break;
            case 'RNA-polymerase':
                protein = new RNAPolymerase(this, data);
                break;
            default:
                protein = new Protein(this, data);
        }
        this.proteins[data.name] = protein;
        this.numProtein++;
        this.maxProteinAmount += data.amount;
        this.numProteins++;
    }
};

// Volume of the cell is all the water in it plus all the proteins
Cell.prototype.findVolume = function() {
    var volume = this.water;
    for (var i in this.proteins) {
        volume += this.proteins[i].amount;
    }
    return volume;
};

Cell.prototype.update = function() {
    if (this.running) {
        this.age++;
        var volume = this.findVolume();
        
        //if (this.age > 3) {
          //  this.running = false;
        //}
        
        for (var g in this.genes) {
            this.genes[g].update();
        }
        
        this.maxProteinAmount = 0;
        for (var p in this.proteins) {
            var protein = this.proteins[p];
            
            protein.update(volume);
            if (protein.amount > this.maxProteinAmount) {
                this.maxProteinAmount = protein.amount;
            }
        }
        
        var graphValues = this.graphFunction();
        for (var i = 0; i < graphValues.length; i++) {
            if (graphValues[i] > this.graphMax) {
                this.graphMax = graphValues[i];
            }
        }
        
        this.graphValues.push(graphValues);
        if (this.winFunction()) {
            if (this.running) {
                gui.subScreen = new alertScreen(100, 100, 200, 100, "Level completed!");   
                this.running = false;
            }
        }
    }
};

/*******************************************************************
 *      New level
*******************************************************************/

var setLevel = function(level) {
    var data = levels[level];
    cell = new Cell(data.genes, data.proteins);
    
    // Make TF factors in cell draggable objects
    gui.draggables = [];
    gui.selected = false;
    
    // Get list of TFs
    var tfs = [];
    for (var p = 0; p < data.proteins.length; p++) {
        var protein = data.proteins[p];
        if (data.proteins[p].type === 'transcription-factor') {
            tfs.push(data.proteins[p]);
        }
    }
    
    // Create draggable protein interface
    var x = 10;
    var y = 100;
    var w = width - x * 2;
    var h = 250;

    gui.container = { x1: x, x2: x + w, y1: y, y2: y + h };
    
    var dx = w / (tfs.length + 1);
    x += dx;
    
    // Add proteins
    for (var p = 0; p < tfs.length; p++) {
        var protein = tfs[p];
        gui.draggables.push({
            x: x, 
            y: y + 40,
            oldx: x,
            oldy: y + 40,
            w: 54,
            h: 45,
            name: protein.name,
            label: protein.name + "\n" + protein.amount + " units"
        });
        x += dx;
    }
    
    // Create genes to drop
    var geneHeight = 12;
    var geneWidth = constrain(w / (cell.numGenes + 1), 20, 80);
    var dx = (w - 8) / (cell.numGenes + 1);
    var x = 8 + dx;
    
    gui.droppables = [];
    for (var i in cell.genes) {
        gui.droppables.push({
            x: x,
            y: y + h - 30,
            w: geneWidth,
            h: geneHeight,
            label: i
        });
        x += dx;
    }
};

/*******************************************************************
 *      Draw functions
*******************************************************************/

var drawBackground = function(title, subtitle) {
    var p = 0.5 + 0.5 * sin(frameCount);
    var col = lerpColor(WATER_COL, WATER_COL2, p);
    background(col);
    
    // Title
    var border = 6;
    var titleY = 32;
    var titleX = border * 2;
    title += ":  ";
    textFont(menuFont);
    textAlign(LEFT, BASELINE);
    fill(15, 5, 80);
    text(title, titleX, titleY);
    
    // Subtitle
    titleX += textWidth(title);
    textFont(sansFont);
    text(subtitle, titleX, titleY);
    
    fill(10);
    textFont(sansFont);
    textAlign(LEFT, BASELINE);
    text("Aim:", 24, titleY + 25);
    
    fill(30);
    textFont(sansFont, 13);
    text(levels[level].aim, 64, titleY + 24);
};

// Screen introducing the game
var drawFrontScreen = function() {
    drawBackground("Gene Regulation Challenge");
    var x = 24;
    var y = 70;
    var dy = 20;
    
    // Cell
    strokeWeight(2);
    stroke(CELL_STROKE);
    fill(250, 250, 255);
    var rate = sin(frameCount * 2) * 4;
    ellipse(330, y + dy, 70 + rate, 70 - rate);
    
    fill(10);
    textAlign(LEFT, BOTTOM);
    textFont(sansFont, 15);
    text("You have a simple cell to experiment on.", x, y);
    text("The cell is like a bag of water.", x, y + dy);
    text("It contains DNA, mRNA and proteins.", x, y + dy * 2);
    
};

/*******************************************************************
 *      Level introduction screens
*******************************************************************/

var drawLevel1IntroScreen = function() {
    var border = 8;
    var border2 = border + 10;
    var y = 160;
    var h = 200;
    var DNAy = y + h - 72;
    var DNAWidth = width - border * 2 - 8;
    var DNAHeight = 10;
    
    drawOrganelle(border, y, h);
    
    var geneY = border + 20;
    var promoter = 80;
    var codingLength = 160;
    var geneLength = promoter + codingLength;

    // Protein
    noStroke();
    fill(PROTEIN_COL);
    ellipse(220, y + 32, 60, 50);
    ellipse(geneY + promoter / 2, DNAy - 12, 60, 50);

    // Arrow
    stroke(PROTEIN_COL);
    strokeWeight(5);
    line(190, y + 50, geneY + promoter, DNAy - 38);
    
    noStroke();
    translate(geneY + promoter, DNAy - 38);
    rotate(152);
    quad(0, 0, -8, -8, 16, 0, -8, 8);
    resetMatrix();

    // Gene
    strokeWeight(1);
    stroke(CELL_FILL);
    fill(DNA_COL);
    rect(border + 4, DNAy - 2, DNAWidth, DNAHeight);
    fill(DNA_COL2);
    rect(geneY, DNAy - 10, promoter, 25);
    fill(DNA_COL);
    rect(geneY + promoter, DNAy - 10, codingLength, 25);
    
    fill(255);
    textAlign(CENTER, CENTER);
    textFont(sansFont, 16);
    text("Promoter", geneY + promoter / 2, DNAy + 2);
    text("Coding sequence", geneY + promoter + codingLength / 2, DNAy + 2);
    
    // Gene label
    stroke(10);
    var labelY = DNAy + 22;
    line(geneY, labelY, geneY + geneLength, labelY);
    line(geneY, labelY - 3, geneY, labelY + 3);
    line(geneY + geneLength, labelY - 3, geneY + geneLength, labelY + 3);

    textFont(sansFont, 13);
    var txt = "tf1 gene";
    var w = textWidth(txt) + 6;
    noStroke();
    fill(OFF_WHITE);
    rect(geneY + (geneLength - w) / 2, labelY - 1, w, 3);
    fill(10);
    text(txt, geneY + geneLength / 2, labelY);
    
    textAlign(LEFT, TOP);
    text("This cell starts with " + levels[0].proteins[0].amount + 
         " molecules of a transcription factor called " + levels[0].proteins[0].name +".", 
         border2, y + 10, 180, 50);
    text("Change the promoter strength to change how strongly TF1 binds it.",
          160, y + 72, 220, 50);
    text("Genes consist of promoter sequences and a sequence that encodes a protein.",
         border2, DNAy + 35, width - border2 * 2, 54);
};

var levelIntroScreens = [drawLevel1IntroScreen];

// Screen introducing a level
var drawLevelIntroScreen = function() {
    drawBackground("Level " + (level + 1), levels[level].name);
    
    var x = 8;
    var y = 68;
    var h = 80;
    drawOrganelle(x, y, h);
    
    x = 16;
    fill(10);
    textFont(sansFont, 13);
    textAlign(CENTER, CENTER);
    text(levels[level].desc, x, y - 2, width - x * 2, h);

    levelIntroScreens[level]();
};

/*******************************************************************
 *      Screen for Level set up
*******************************************************************/

var drawDNA = function(x, y) {
    var DNAWidth = width - x * 2 - 5;
    var DNAHeight = 4;
    
    // DNA
    noStroke();
    fill(DNA_COL);
    rect(x + 3, y + 5, DNAWidth, DNAHeight);
    
    fill(10);
    textAlign(LEFT, BASELINE);
    text("DNA", x + 5, y + 3);
};

var drawLevelScreen = function() {
    drawBackground("Level " + (level + 1), levels[level].name);
    
    var x = gui.container.x1;
    var y = gui.container.y1 - 18;
    var h = gui.container.y2 - y;
    
    drawOrganelle(x - 1, y, h, "Drag transcription factors to a gene to add a promoter");

    // Genome
    drawDNA(x + 1, gui.droppables[0].y);
    
    // Show promoters
    /*stroke(255, 125, 38);
    for (var g in cell.genes) {
        var gene = cell.genes[g];
        for (var p in gene.promoter) {
            // TODO: Draw line from protein to gene 
        }
    }*/
    
    stroke(OFF_WHITE);
    strokeWeight(1);
    for (var g = 0; g < gui.droppables.length; g++) {
        var gene = gui.droppables[g];
        // Gene
        fill(DNA_COL);
        rect(gene.x - gene.w / 2, gene.y, gene.w / 2, gene.h);
        fill(DNA_COL2);
        rect(gene.x, gene.y, gene.w / 2, gene.h);
        
        // Gene name
        fill(TEXT_COL);
        textAlign(CENTER, TOP);
        textFont(sansFont, 12);
        text(gene.label, gene.x, gene.y + gene.h + 1);
        
        textAlign(RIGHT, BASELINE);
        for (var p in cell.proteins) {
            var promoter = cell.genes[gene.label].promoter[p];
            if (promoter) {
                text(p + ": " + promoter, gene.x, gene.y - 2);
            }
        }
    }

    // Proteins
    textAlign(CENTER, CENTER);
    noStroke();
    
    for (var p = 0; p < gui.draggables.length; p++) {
        var protein = gui.draggables[p];
        fill(PROTEIN_COL);
        ellipse(protein.x, protein.y, protein.w, protein.h);
        fill(255);
        text(protein.label, protein.x, protein.y - 2);
    }
};

/*******************************************************************
 *      Screen showing the simulation as it runs
*******************************************************************/

var drawWinConditionChart = function(x, y, h) {
    drawOrganelle(x, y, h);
    
    var border = 8;
    var w = width - 2 * x - border * 2;
    var n = cell.graphValues.length;

    if (n < 2) { return; }
    var dx = w / n;
    
    // Graph line
    strokeWeight(1);
    stroke(PROTEIN_COL);
    
    var graphH = h - 12;
    var axisY = y + h - 6;
    var scaleY = graphH / cell.graphMax;
    
    var x1 = x + border;
    var y1 = axisY - cell.graphValues[0][0] * scaleY;
    
    for (var i = 1; i < n; i++) {
        var y2 = axisY - cell.graphValues[i][0] * scaleY;
        line(x1, y1, x1 + dx, y2);
        x1 += dx;
        y1 = y2;
    }
    
};

var drawProteins = function(x, y, h) {
    var chartWidth = width - x * 2 - 5;
    var barWidth = constrain((chartWidth - 10) / (cell.numProteins + 1), 30, 80);
    var barDX = chartWidth / (cell.numProteins + 1);
    var barX = x + barDX - barWidth / 2;
    var barY = y + h - 20;
    var maxBarHeight = 50;
    
    textFont(smallFont);
    var magnitude = pow(10, floor(log(cell.maxProteinAmount) / E));
    var maxAmount = magnitude * ceil(cell.maxProteinAmount / magnitude);
    var scaleH = maxBarHeight / maxAmount;
    
    // Key
    var box = 12;
    var boxY =  y + 30;
    noStroke();
    fill(PROTEIN_COL);
    rect(x + 8, boxY, box, box);
    fill(RNA_COL);
    rect(x + 8, boxY + box + 4 , box, box);
    
    fill(10);
    textAlign(LEFT, CENTER);
    text("Protein", x + box + 12, boxY + box/2);
    text("mRNA", x + box + 12, boxY + 1.5 * box + 4);
    
    for (var i in cell.proteins) {
        // Bar chart
        noStroke();
        fill(180);
        rect(barX + 1, barY - maxBarHeight, (barWidth - 3) / 2, maxBarHeight);
        
        fill(PROTEIN_COL);
        var barheight = cell.proteins[i].amount * scaleH;
        rect(barX + 1, barY - barheight, (barWidth - 3) / 2, barheight);
        
        // Axis
        stroke(0);
        strokeWeight(1);
        line(barX, barY, barX + barWidth, barY);
        
        // Label
        fill(10);
        textAlign(CENTER, TOP);
        text(i, barX + barWidth / 2, barY + 3);
        
        textAlign(CENTER, CENTER);
        text(cell.proteins[i].amount, barX + barWidth / 4, barY - barheight / 2 - 1);
        
        // mRNA
        text(cell.proteins[i].mrna, barX + barWidth * 3 / 4, barY - barheight / 2 - 1);
        
        barX += barDX;
    }
};

var drawGenomeChart = function(x, y, h) {
    // DNA
    var DNAy = y + h - 25;
    var DNAWidth = width - x * 2 - 9;
    var DNAHeight = 5;
    noStroke();
    fill(DNA_COL);
    rect(x + 5, DNAy + 3, DNAWidth, DNAHeight);
    
    fill(10);
    textAlign(LEFT, BASELINE);
    text("DNA", x + 5, DNAy + 1);
    
    var geneHeight = 10;
    var geneWidth = constrain(DNAWidth / (cell.numGenes + 1), 30, 80);
    var geneDX = DNAWidth / (cell.numGenes + 1);
    var geneX = x + geneDX - geneWidth / 2;
    var maxBarHeight = 50;
    
    var drawBar = function(x, percent) {
        noStroke();
        fill(PROTEIN_COL);
        var barheight = percent * maxBarHeight;
        rect(x, DNAy - barheight, (geneWidth - 3) / 2, barheight);
        
        var str = round(100 * percent) + "%";
        
        fill(TEXT_COL);
        if (barheight > maxBarHeight / 2) {
            textAlign(CENTER, CENTER);
            text(str, x + geneWidth / 4, DNAy - barheight / 2 - 1);
        } else {
            textAlign(CENTER, BASELINE);
            text(str, x + geneWidth / 4, DNAy - barheight - 1);
        }
        
    };
    
    textFont(smallFont);
    strokeWeight(1);
    
    for (var i in cell.genes) {
        stroke(OFF_WHITE);
        fill(DNA_COL);
        rect(geneX, DNAy, geneWidth, geneHeight);
        fill(DNA_COL2);
        rect(geneX, DNAy, geneWidth / 2, geneHeight);

        // TF
        drawBar(geneX + 1, 1 - cell.genes[i].free);
        
        // RNAP
        drawBar(geneX + geneWidth/2 + 1, cell.genes[i].rnapBound);
        
        // Label
        fill(TEXT_COL);
        textAlign(CENTER, TOP);
        text(i, geneX + geneWidth / 2, DNAy + DNAHeight + 6);
        
        geneX += geneDX;
    }
};

var drawRunningScreen = function() {
    drawBackground("Level " + (level + 1), levels[level].name);

    var cellX = 8;
    drawWinConditionChart(cellX, 80, 85);
    drawOrganelle(cellX, 175, 180);
    drawProteins(cellX, 175, 85);
    drawGenomeChart(cellX, 270, 85);
    
    textAlign(CENTER, CENTER);
    textFont(sansFont, 16);
    fill(10);
    text("Time: " + cell.age, 200, height - 16);
};

/*******************************************************************
 *      Button functions
*******************************************************************/

var introLevel = function() {
    gui.changeScreen('level-intro');
};

var startLevel = function() {
    setLevel(level);
    gui.changeScreen('level-setup');
};

var runLevel = function() {
    // May need to reset cell at some point
    //setLevel(level);
    cell.running = true;
    gui.changeScreen('level-running');
};

var abortLevel = function() {
    cell.running = false;
    gui.changeScreen('level-setup');
};

/*******************************************************************
 *      Create screens and their buttons for the
 *      different stages of the game
*******************************************************************/

gui.addScreen("level-intro", drawLevelIntroScreen);
gui.addScreen("level-setup", drawLevelScreen);
gui.addScreen("level-running", drawRunningScreen);

var buttonY = 368;
gui.addButton("level-intro", "Start", 335, buttonY, startLevel);
gui.addButton("level-setup", "Run", 335, buttonY, runLevel);
gui.addButton("level-setup", "Back", 20, buttonY, introLevel);
gui.addButton("level-running", "Abort", 20, buttonY, abortLevel);

/*******************************************************************
 *      Top level functions
*******************************************************************/

// Initialise game
gui.changeScreen('level-intro');
startLevel();

// Main game loop
var draw = function() {
    gui.draw();
    cell.update();
};

/*******************************************************************
 *      Event handling
*******************************************************************/

var keyPressed = function() {
    // Spacebar toggles animation
    if (keyCode === 32) { cell.running = !cell.running; }
};

var mouseClicked = function() {
    //gui.click();
};

var mousePressed = function() {
    gui.mousedown();
};

var mouseReleased = function() {
    gui.mouseup();
};

var mouseDragged = function() {
    gui.drag();
};