
var showCycles = false;
var orbitColour = color(20, 160, 20);
var oldColour = color(20, 160, 20, 100);

// Centre of the system (the sun)
var cx = 200;
var cy = 240;

// Size of epicyles
var radius1 = 100;
var radius2 = 50;

// Speed of orbits
var speed1 = 0.5;
var speed2 = 1.1;

// Starting angles
var angle1 = 0;
var angle2 = 180;

var previousPoints = [];
var plotGap = 4;
var maxPoints = 3600 / (abs(speed1) * plotGap);

// Initial positions
var x1 = cx + radius1 * cos(angle1);
var y1 = cy + radius1 * sin(angle1);
var x2 = x1 + radius2 * cos(angle2);
var y2 = y1 + radius2 * sin(angle2);

var running = true;
var t = 0;

var Slider = function(x, y, w, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = w; 
    this.held = false;

    // Use when min and max (re)defined
    this.calibrate = function(min_v, max_v) {
        this.min = min_v;
        this.max = max_v;
        this.scale = (max_v - min_v) / w;
        this.val = current_v === undefined ? min_v : current_v;
        this.bx = this.x + (this.val - min_v) / this.scale;          
    };
    this.calibrate(min_v, max_v);

    this.draw = function() {
        noStroke();
        fill(200);
        rect(this.x, this.y-1, this.width+2, 3, 4);
        
        strokeWeight(1);
        stroke(60);
        line(this.x + 1, this.y-1, x + this.width, this.y);
    
        fill(180);
        stroke(50);
        rect(this.bx, this.y-8, 10, 16, 3);
        
        for (var i=0; i<3; i++) {
            var y = this.y + i*3 - 3;
            stroke(50);
            line(this.bx + 3, y, this.bx + 7, y); 
            stroke(200);
            line(this.bx + 3, y+1, this.bx + 7, y+1); 
        }
    };
    
    this.selected = function() {
        this.held = mouseX > this.bx - 1 && mouseX < this.bx + 11 && 
                    mouseY > this.y - 9 && mouseY < this.y + 9;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + (x - this.x) * this.scale;
            previousPoints = [];
        }
    };
    
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

var sliderName = ["Deferent radius", "Epicycle radius", "Speed 1", "Speed 2"];
var sliderX = 140;
var sliders = [
    new Slider(sliderX, 16, 240, 10, 130, radius1),
    new Slider(sliderX, 32, 240, 10, 130, radius2),
    new Slider(sliderX, 48, 240, -5, 5, speed1),
    new Slider(sliderX, 64, 240, -5, 5, speed2)
];

textSize(12);
textAlign(LEFT, CENTER);

var draw = function() {
    if (running) {
        t++;
        if (t % 4 === 0) {
            previousPoints.push([x2, y2]);
            if (previousPoints.length > maxPoints) {
                previousPoints.shift();
            }   
        }
        
        angle1 += speed1;
        angle2 += speed2;
        
        x1 = cx + radius1 * cos(angle1);
        y1 = cy + radius1 * sin(angle1);
        x2 = x1 + radius2 * cos(angle2);
        y2 = y1 + radius2 * sin(angle2);
    }
    
    background(0);
        
    // Previous points
    if (previousPoints.length > 1) {
        stroke(oldColour);
        strokeWeight(3);
        var px1 = previousPoints[0][0];
        var py1 = previousPoints[0][1];
        
        for (var p=1; p<previousPoints.length; p++) {
            var px2 = previousPoints[p][0];
            var py2 = previousPoints[p][1];
            line(px1, py1, px2, py2);
            px1 = px2;
            py1 = py2;
        }   
    }
    
    // Cycles
    if (showCycles) {
        noFill();
        strokeWeight(2);
        stroke(120, 120, 240);
        ellipse(cx, cy, radius1*2, radius1*2);
        
        stroke(20, 160, 20);
        ellipse(x1, y1, radius2*2, radius2*2);
        
        // Cycle centres
        noStroke();
        fill(240, 240, 60);
        ellipse(cx, cy, 15, 15);
        
        fill(120, 120, 240);
        ellipse(x1, y1, 5, 5);   
    }
    
    strokeWeight(1);
    stroke(255);
    fill(orbitColour);
    ellipse(x2, y2, 9, 9);
    
    for (var s in sliders) {
        fill(255);
        var txt = sliderName[s] + ": " + round(10*sliders[s].val)/10;
        text(txt, 10, sliders[s].y);
        sliders[s].draw();
    }
};

var keyPressed = function() {
    // Spacebar toggles animation
    if (keyCode === 32) { running = !running; }
};

var mousePressed = function() {    
    for (var s in sliders) {
        sliders[s].selected();
    }
};

var mouseReleased = function() {
    for (var s in sliders) {
        sliders[s].held = false;
    }
};

var mouseDragged = function() {
    for (var s in sliders) {
        sliders[s].drag();
    }
    radius1 = sliders[0].val;
    radius2 = sliders[1].val;
    speed1 = sliders[2].val;
    speed2 = sliders[3].val;
};