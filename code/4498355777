// I'm not entering the contest (I'm helping to run it), I'm just giving an example of what can be done

// Made here:
//https://www.khanacademy.org/computer-programming/mike-animation-program/4935125299494912


frameRate(24);
var shapes = [{
  name: "L-leg-1",
  fill: -8544191,
  stroke: -7556024,
  subdivide: 3,
  vertices: [[132, 288], [156, 275], [180, 330], [170, 335]],
  origin: [150, 290]
}, {
  name: "L-leg-2",
  fill: -8544191,
  stroke: -7556024,
  subdivide: 3,
  vertices: [[179, 325], [167, 325], [165, 380], [175, 380]],
  origin: [173, 330]
}, {
  name: "R-leg-1",
  fill: -8544191,
  stroke: -7556024,
  subdivide: 3,
  vertices: [[108, 288], [84, 275], [50, 330], [60, 335]],
  origin: [90, 290]
}, {
  name: "R-leg-2",
  fill: -8544191,
  stroke: -7556024,
  subdivide: 3,
  vertices: [[51, 325], [63, 325], [65, 380], [55, 380]],
  origin: [57, 330]
}, {
  name: "horn-L",
  fill: -2302756,
  subdivide: 3,
  vertices: [[130, 180], [150, 180], [155, 145]],
  origin: [120, 290]
}, {
  name: "horn-R",
  fill: -2302756,
  subdivide: 3,
  vertices: [[110, 180], [90, 180], [85, 145]],
  origin: [120, 290]
}, {
  name: "body",
  fill: -8544191,
  subdivide: 3,
  vertices: [[90, 160], [150, 160], [200, 240], [170, 305], [70, 305], [40, 240]],
  origin: [120, 290]
}, {
  name: "eye",
  radius: 65,
  center: [120, 200],
  origin: [120, 200],
  vertices: [[120, 200], [185, 200]],
  drawShape: function () {
        var r = dist(this.finalCoords[0].x, this.finalCoords[0].y, this.finalCoords[1].x, this.finalCoords[1].y);
        ellipse(this.finalCoords[0].x, this.finalCoords[0].y, r, r);
    }
}, {
  name: "iris",
  radius: 25,
  fill: -8865381,
  center: [135, 200],
  origin: [120, 200],
  vertices: [[135, 200], [160, 200]],
  drawShape: function () {
        var r = dist(this.finalCoords[0].x, this.finalCoords[0].y, this.finalCoords[1].x, this.finalCoords[1].y);
        ellipse(this.finalCoords[0].x, this.finalCoords[0].y, r, r);
    }
}, {
  name: "pupil",
  radius: 13,
  fill: -16777216,
  center: [135, 200],
  origin: [120, 200],
  vertices: [[135, 200], [148, 200]],
  drawShape: function () {
        var r = dist(this.finalCoords[0].x, this.finalCoords[0].y, this.finalCoords[1].x, this.finalCoords[1].y);
        ellipse(this.finalCoords[0].x, this.finalCoords[0].y, r, r);
    }
}, {
  name: "eye-lid",
  fill: -8544191,
  subdivide: 3,
  vertices: [[98, 163], [142, 163], [160, 180], [80, 180]],
  origin: [120, 162]
}, {
  name: "mouth",
  fill: -16777216,
  subdivide: 3,
  vertices: [[80, 250], [160, 250], [140, 280], [100, 280]],
  origin: [120, 268]
}, {
  name: "R-arm-1",
  fill: -8544191,
  stroke: -7556024,
  subdivide: 3,
  vertices: [[65, 247], [75, 225], [25, 197], [15, 205]],
  origin: [60, 230]
}, {
  name: "R-arm-2",
  fill: -8544191,
  stroke: -7556024,
  subdivide: 3,
  vertices: [[16, 145], [28, 145], [30, 208], [18, 208]],
  origin: [25, 205]
}, {
  name: "L-arm-1",
  fill: -8544191,
  stroke: -7556024,
  subdivide: 3,
  vertices: [[175, 247], [165, 225], [215, 197], [225, 205]],
  origin: [180, 230]
}, {
  name: "L-arm-2",
  fill: -8544191,
  stroke: -7556024,
  subdivide: 3,
  vertices: [[224, 145], [212, 145], [210, 208], [222, 208]],
  origin: [215, 205]
}];
var connections = ["body->eye->iris->pupil", "body->eye-lid", "body->L-leg-1->L-leg-2", "body->R-leg-1->R-leg-2", "body->L-arm-1->L-arm-2", "body->R-arm-1->R-arm-2", "body->mouth", "body->horn-L", "body->horn-R"];
var deformers = ["rotate->body", "translateX->body", "translateY->body", "rotate->L-leg-1", "rotate->L-leg-2", "rotate->R-leg-1", "rotate->R-leg-2", "rotate->L-arm-1", "rotate->L-arm-2", "rotate->R-arm-1", "rotate->R-arm-2", "rotate->iris", "scaleY->eye-lid", "scaleY->mouth", "rotate->mouth"];
var n = 47;

var avars = [[-18.37, -8.07, 0.78, 8.21, 14.24, 18.88, 22.15, 24.06, 24.64, 23.91, 21.87, 18.55, 13.97, 8.14, 1.08, -3.3, -7.01, -10.07, -13.01, -14.68, -15.75, -16.3, -16.12, -15.42, -14.21, -12.52, -10.36, -7.75, -5.51, -2.16, 0.61, 0.58, 0.52, 0.45, 0.39, 0.33, 0.26, 0.21, 0.16, 0.12, 0.09, 0.05, 0.03, 0.02, 0.01, 0, 0], [0, 0.96, 3.74, 7.36, 12.08, 17.84, 23.14, 29.02, 35.43, 42.34, 49.72, 57.52, 63.62, 72.07, 80.85, 87.62, 96.86, 103.94, 113.53, 120.83, 128.2, 138.11, 145.58, 153.06, 163.04, 170.5, 177.92, 187.73, 195, 204.56, 211.6, 220.78, 227.5, 236.19, 242.5, 250.59, 258.29, 263.78, 270.69, 277.11, 284.36, 289.51, 294.04, 298.77, 302.39, 305.17, 306.12], [0, -4.53, -6.88, -8.23, -8.67, -8.48, -7.6, -6.54, -4.68, -3, -0.47, 2.3, 5.18, 8.09, 12.24, 10.63, 8.77, 7.6, 6.62, 5.56, 4.96, 4.4, 4.09, 4, 4.09, 4.37, 4.83, 5.63, 6.64, 7.82, 9.42, 6.92, 5.16, 3.94, 2.74, 1.95, 1.44, 1.02, 0.69, 0.49, 0.29, 0.18, 0.1, 0.04, 0.02, 0, 0], [18.37, -15.71, -39.6, -54.84, -62.96, -65.49, -64.63, -61.05, -56.07, -51.24, -47.72, -32.63, -13.82, 0.8, 11.71, 21.22, 25.19, 27.08, 24.91, 20.77, 16.76, 14.96, 17.49, 17.2, 16.7, 16, 15.12, 14.09, 13.19, 12.21, 11.2, 10.14, 9.07, 8, 6.93, 6.15, 5.14, 4.17, 3.49, 2.65, 2.08, 1.41, 0.98, 0.51, 0.26, 0.05, 0], [-18.37, 2.12, 13.38, 26.96, 36.87, 44.96, 47.66, 47.41, 43.54, 34.88, 23.48, 8.46, -5.35, -5.37, -5.32, -5.24, -5.14, -4.99, -4.85, -4.68, -4.51, -4.31, -4.11, -3.89, -3.72, -3.49, -3.31, -3.07, -2.89, -2.64, -2.46, -2.21, -2.03, -1.8, -1.63, -1.4, -1.24, -1.04, -0.85, -0.67, -0.55, -0.4, -0.27, -0.17, -0.07, -0.02, 0], [36.73, 22.02, 9.22, -1.76, -11.05, -18.73, -26.67, -31.03, -34.14, -36.52, -37.12, -36.54, -34.61, -31.57, -26.6, -21.99, -15.84, -9.71, -4.1, 1.29, 4.41, -3.8, -10.46, -15.68, -18.9, -21.83, -23.38, -24.28, -24.6, -24.4, -23.74, -22.67, -21.27, -19.59, -18.19, -16.17, -14.04, -11.86, -10.23, -8.11, -6.12, -4.74, -3.09, -1.74, -0.74, -0.25, 0], [-14.69, -10.52, -6.63, -3.01, -0.75, 1.91, 4.38, 6.23, 7.96, 9.57, 11.07, 12.45, 13.41, 14.6, 15.67, 16.4, 17.29, 17.87, 18.57, 19.01, 19.52, 19.82, 20.07, 20.31, 20.42, 20.48, 20.46, 20.38, 20.18, 19.97, 19.7, 19.26, 18.86, 18.25, 17.54, 16.95, 16.07, 15.11, 14.04, 12.89, 11.65, 10.31, 8.52, 6.99, 4.95, 2.78, 0], [58.78, 45.12, 33.04, 22.46, 13.31, 5.52, -2.89, -7.8, -12.63, -15.05, -16.83, -17.1, -16.41, -14.45, -10.57, -6.53, -0.58, 6.04, 13, 21.33, 29.09, 33.83, 37.86, 40.7, 42.64, 44.66, 45.97, 47.01, 47.78, 48.31, 48.58, 48.62, 48.42, 48.13, 47.54, 46.96, 46.01, 44.86, 43.87, 42.39, 41.17, 39.38, 37.93, 35.85, 33.63, 31.86, 29.39], [29.39, 14.21, 1.63, -11.41, -18.64, -26.33, -29.04, -28.84, -26.31, -20.89, -15.26, -19.28, -22.58, -25.22, -28.03, -29.64, -30.19, -29.29, -26.11, -21.25, -17.23, -17.61, -17.98, -18.22, -19.02, -20.21, -24.11, -33.47, -53.5, -42.35, -33.11, -23.7, -18.79, -15.06, -14.49, -18.11, -28.67, -10.73, 3.31, 8.94, 7.96, 2.25, -5.63, -16.98, -26.63, -38.08, -51.43], [-143.27, -142.05, -139.16, -135.14, -131.91, -126.35, -120.06, -113.19, -103.42, -95.82, -85.62, -75.67, -64.14, -56.09, -48.08, -42.42, -41.82, -47.11, -63.11, -73.77, -83.99, -92.06, -99.65, -105.31, -110.58, -116.53, -120.73, -124.41, -127.5, -129.99, -131.42, -132.72, -133.3, -133.23, -132.43, -131.29, -128.99, -126.68, -122.76, -117.86, -113.52, -106.8, -101.05, -92.39, -82.57, -74.41, -62.45], [-139.59, -129.2, -122.96, -114.58, -107.32, -101.14, -94.47, -90.57, -86.73, -84.33, -83.23, -83.3, -84.82, -87.7, -91.66, -96.46, -101.81, -107.47, -113.18, -117.85, -120.39, -121.07, -120.15, -118.44, -116.02, -112.19, -108.64, -104.82, -101.85, -97.88, -93.99, -90.34, -87.06, -84.92, -82.61, -81.04, -80.43, -80.48, -81.24, -83.33, -86.77, -91.7, -96.46, -104.32, -114.03, -125.75, -139.59], [3.67, -3.37, -9.59, -17.42, -21.71, -26.82, -30.48, -32.79, -34, -33.36, -30.38, -25.52, -18.04, -8.28, 1.07, 7.52, 12.9, 17.28, 20.74, 24.01, 25.55, 26.52, 26.5, 25.63, 23.92, 21.53, 17.82, 14.47, 10.06, 4.84, 0.2, 4.02, 6.29, 7.74, 9.63, 11.19, 13.04, 16.2, 19.28, 24.59, 31.6, 43.27, 62.42, 43.17, 39.77, 45.8, 36.73], [0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.9, 0.9, 0.9, 0.9, 0.91, 0.91, 0.91, 0.92, 0.92, 0.92, 0.93, 0.93, 0.93, 0.94, 0.94, 0.94, 0.94, 0.94, 0.94, 0.94, 0.94, 0.95, 0.95, 0.94, 0.97, 1, 1.04, 1.12, 1.2, 1.35, 1.49, 1.81, 2.14, 2.9, 2.29, 1.87, 1.3, 1], [1.54, 1.48, 1.43, 1.37, 1.32, 1.26, 1.22, 1.17, 1.13, 1.09, 1.07, 1.05, 1.04, 1.04, 1.05, 1.09, 1.13, 1.19, 1.27, 1.35, 1.46, 1.39, 1.34, 1.29, 1.26, 1.23, 1.21, 1.21, 1.21, 1.23, 1.26, 1.3, 1.37, 1.46, 1.59, 1.31, 1.15, 1.04, 0.94, 0.88, 0.8, 0.75, 0.71, 0.68, 0.66, 0.65, 0.66], [14.69, 13.3, 12, 10.99, 10.03, 9.3, 8.45, 7.8, 7.19, 6.61, 6.07, 5.55, 5.18, 4.72, 4.39, 3.97, 3.68, 3.31, 3.05, 2.73, 2.5, 2.29, 2.02, 1.84, 1.66, 1.45, 1.3, 1.16, 1, 0.88, 0.74, 0.65, 0.54, 0.46, 0.37, 0.31, 0.24, 0.19, 0.14, 0.1, 0.07, 0.04, 0.03, 0.01, 0, 0, 0]];
var deformerData = {
  translateX: {
    min: -500,
    max: 500,
    transform: function (coord, origin, value) {
            coord.x += value;
        }
  },
  translateY: {
    min: -200,
    max: 200,
    transform: function (coord, origin, value) {
            coord.y -= value;
        }
  },
  scale: {
    min: 0.2,
    max: 3,
    value: 1,
    transform: function (coord, origin, value) {
            coord.x = (coord.x - origin.x) * value + origin.x;
            coord.y = (coord.y - origin.y) * value + origin.y;
        }
  },
  scaleX: {
    min: 0.2,
    max: 3,
    value: 1,
    transform: function (coord, origin, value) {
            coord.x = (coord.x - origin.x) * value + origin.x;
        }
  },
  scaleY: {
    min: 0.2,
    max: 3,
    value: 1,
    transform: function (coord, origin, value) {
            coord.y = (coord.y - origin.y) * value + origin.y;
        }
  },
  rotate: {
    min: -180,
    max: 180,
    transform: function (coord, origin, value) {
            var cosAngle = cos(value);
            var sinAngle = sin(value);
            var x = coord.x - origin.x;
            var y = coord.y - origin.y;
            coord.x = origin.x + x * cosAngle - y * sinAngle;
            coord.y = origin.y + x * sinAngle + y * cosAngle;
        }
  }
};

var drawBackground = function (x, y, w, h) {
    noStroke();
    fill(82, 115, 173);
    rect(x, y, w, h - 75);
    fill(184, 134, 40);
    rect(x, y + h - 75, w, 75);
};

var drawCircle = function() {
    var r = dist(this.finalCoords[0].x, this.finalCoords[0].y, this.finalCoords[1].x, this.finalCoords[1].y);
    ellipse(this.finalCoords[0].x, this.finalCoords[0].y, r, r);
};
var Shape = function(data, name) {
    if (data.origin) {
        this.originalOrigin = new PVector(data.origin[0], data
.origin[1]);
    }
    if (data.radius && data.center) {
        var center = data.center;
        data.vertices = [center, [center[0] + data.radius,
center[1]]];
        data.drawShape = drawCircle;
    }
    this.originalCoords = data.vertices || [];
    this.fillColor = data.fill;
    this.strokeColor = data.stroke;
    this.strokeWeight = data.strokeWeight || 1;
    this.subdivide = constrain(data.subdivide | 0, 0, 4);
    if (data.drawShape) {
        this.drawShape = data.drawShape.bind(this);
    }
    this.dependentShapes = [];
    this.resetCoords();
    this.updateCurvePoints();
};
Shape.prototype.resetCoords = function() {
    this.finalCoords = this.originalCoords.map(function(coord){
        return new PVector(coord[0], coord[1]);
    });
    if (this.originalOrigin) {
        this.origin = this.originalOrigin.get();
    }
};
Shape.prototype.transform = function(transform, origin, value) {
    for (var i = 0; i < this.finalCoords.length; i++) {
        transform(this.finalCoords[i], origin, value);
    }
    this.updateCurvePoints();
    this.dependentShapes.forEach(function(shape) {
        transform(shape.origin, origin, value);
        shape.transform(transform, origin, value);
    });
};
Shape.prototype.draw = function() {
    if (this.fillColor || this.drawShape) {
        noStroke();
        fill(0, 0, 0, 50);
        pushMatrix();
        translate(2, 3);
        this.drawShape(true);
        popMatrix();
        fill(this.fillColor);
    } else {
        noFill();
    }
    if (this.strokeColor) {
        strokeWeight(this.strokeWeight);
        stroke(this.strokeColor);
    } else {
        noStroke();
    }
    this.drawShape();
};
Shape.prototype.drawShape = function() {
    beginShape();
    this.curvePoints.forEach(function(p) { vertex(p.x, p.y); });
    endShape(CLOSE);
};
Shape.prototype.updateCurvePoints = function() {
    if (!this.subdivide) {
        this.curvePoints = this.finalCoords;
    } else {
        var q = pow(2, this.subdivide);
        var q2 = q * q;
        var n = this.finalCoords.length;
        var p1, p2, p3, a, b, c, s, t, x, y;
        this.curvePoints = [];
        for (var i = 0; i < n; i++) {
            p1 = this.finalCoords[(i + n - 1) % n];
            p2 = this.finalCoords[i];
            p3 = this.finalCoords[(i + 1) % n];
            for (t = 0; t < q; t++) {
                s = q - t - 1;
                a = (s * s + s) >> 1;
                c = (t * t + t) >> 1;
                b = q2 - a - c;
                x = (p1.x * a + p2.x * b + p3.x * c) / q2;
                y = (p1.y * a + p2.y * b + p3.y * c) / q2;
                this.curvePoints.push({x: x, y: y});
            }
        }
    }
};
var Model = function(shapes, connections, deformers) {
    this.shapes = {};
    this.deformers = [];
    this.id = 0;
    if (shapes) {
        for (var i = 0; i < shapes.length; i++) {
            var shape = shapes[i];
            if (!shape) { continue; }
            var name = shape.name || 'shape' + this.id++;
            this.shapes[name] = new Shape(shape, name);
        }
    }
    var splitRE = new RegExp('\\s*->\\s*');
    if (connections) {
        for (var i = 0; i < connections.length; i++) {
            var shapes = connections[i].split(splitRE);
            for (var j = 0; j < shapes.length - 1; j++) {
                this.shapes[shapes[j]].dependentShapes.push(this.shapes[shapes[j + 1]]);
            }
        }
    }
    if (deformers) {
        for (var i = 0; i < deformers.length; i++) {
            var d = deformers[i].split(splitRE);
            this.deformers.push([this.shapes[d[1]], deformerData[d[0]].transform, avars[i]]);
        }
    }
};


var model = new Model(shapes, connections, deformers);
var t = 0;

draw = function() {
	t = (t + 1) % n;
	for (var shape in model.shapes) {model.shapes[shape].resetCoords();}
	model.deformers.forEach(function(d){d[0].transform(d[1], d[0].origin, d[2][t]);});
	background(0);
	drawBackground(0, 50, 400, 300);
	pushMatrix();
	translate(0, 50);
	scale(0.75, 0.75);
	for (var shape in model.shapes) { model.shapes[shape].draw(); }
	popMatrix();
};
