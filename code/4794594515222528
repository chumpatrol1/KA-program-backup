/**********************************************
 * Program to build animations
 * 
 * Now with rotation
 * 
 * - Allow keyframes to be dragged to a new frame.
**********************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var SKYBLUE = color(230, 240, 255);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(140, 140, 140);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 240);

var sansFont = createFont("sans", 24);
var serifFont = createFont("serif", 24);

frameRate(24);
var FRAMES = 24;

var removeButton, speedSlider;

// Linear interpolation of the values of an array between two indices
var interpolate = function(arr, index1, index2) {
    var d = index2 - index1;
    var v1 = arr[index1];
    var v2 = arr[index2];
    
    for (var i = 1; i < d; i++) {
        arr[index1 + i] = lerp(v1, v2, i / d);
    }
};

/*********************************************
 *      Slider object
**********************************************/

var Slider = function(x, y, length, orientation, minValue, maxValue, nowValue, name, updateF) {
    this.x = x;
    this.y = y;
    this.length = length;
    this.orientation = orientation;
    
    if (this.orientation === 'vertical') {
        this.start = y;
        this.end = y + this.length;
        this.v1 = this.end;
        this.v2 = this.start;
    } else {
        this.start = x;
        this.end = x + this.length;
        this.v1 = this.start;
        this.v2 = this.end;
    }
    
    this.name = name;
    this.updateFunction = updateF;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = minValue;
    this.max = maxValue;
    this.value = nowValue || minValue;
    this.setValue(this.value);

    this.held = false;
};

Slider.prototype.draw = function() {
    strokeWeight(3);
    stroke(GREY);
    if (this.orientation === 'vertical') {
        line(this.x, this.y, this.x, this.end);
    } else {
        line(this.x, this.y, this.end, this.y);
    }
    
    strokeWeight(1);
    stroke(BACKGROUND);
    fill(ORANGE);
    if (this.orientation === 'vertical') {
        ellipse(this.x, this.ball, this.ballD, this.ballD);
    } else {
        ellipse(this.ball, this.y, this.ballD, this.ballD);
    }
    
};

Slider.prototype.mouseOver = function() {
    if (mouseX >= this.x - this.ballR &&
        mouseY >= this.y - this.ballR) {
        if (this.orientation === 'vertical') {
            return mouseX <= this.x + this.ballR &&
                   mouseY <= this.end + this.ballR;
        } else {
            return mouseX <= this.end + this.ballR &&
                   mouseY <= this.y + this.ballR;
        }   
    }
};
    
Slider.prototype.selected = function() {
    if (this.orientation === 'vertical') {
        this.held = dist(mouseX, mouseY, this.x, this.ball) <= this.ballR;
    } else {
        this.held = dist(mouseX, mouseY, this.ball, this.y) <= this.ballR;
    }
    if (!this.held && this.mouseOver()) {
        this.setBallPosition();
    }
};
    
Slider.prototype.mouseDragged = function() {
    if (this.held) {
        this.setBallPosition();
        return true;
    }
};

Slider.prototype.setBallPosition = function() {
    var value = this.orientation === 'vertical' ? mouseY : mouseX;
    this.ball = constrain(value, this.start, this.end);
    this.setValue();
};

Slider.prototype.setValue = function(d) {
    if (d !== undefined) {
        this.value = constrain(d, this.min, this.max);
    } else {
        
        this.value = round(map(this.ball, this.v1, this.v2, this.min, this.max));
        this.update();
    }
    this.ball = map(this.value, this.min, this.max, this.v1,  this.v2);
};

Slider.prototype.update = function() {
    if (this.updateFunction) {
        this.updateFunction(this.value);
    }
};

/********************************************************
 *  GUI Button
*********************************************************/

var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultColor = color(140, 140, 140);
    this.highlightColor = color(40, 40, 40);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.mouseReleased = function() {
    if (this.mouseOver()) {
        this.click();
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    noFill();
    strokeWeight(1);
    stroke(this.defaultColor);
    if (!this.deactivated && (this.mouseOver() || this.selected)) {
        fill(TOOLBAR);
        stroke(this.highlightColor);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 13);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

// Circular button
var CircleButton = function(x, y, w, h, clickFunction, drawFunction) {
    Button.call(this, x, y, w, h, "", clickFunction);
    this.drawIcon = drawFunction;
};
CircleButton.prototype = Object.create(Button.prototype);

CircleButton.prototype.draw = function() {
    var c;
    if (this.mouseOver()) {
        c = color(40, 40, 40);
        fill(TOOLBAR);
    } else {
        c = color(140, 140, 140);
        noFill();
    }
    
    var x = this.x + this.w / 2;
    var y = this.y + this.w / 2;
    stroke(c);
    strokeWeight(2);
    ellipse(x, y, this.w, this.w);
    
    if (this.drawIcon) {
        fill(c);
        this.drawIcon(x, y, this.w / 2);   
    }
};

/*********************************************************************
 *      Draggable point
*********************************************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.r = 14;
    this.color = color || ORANGE;
    this.animation = 0;
    this.selected = false;
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

DraggablePoint.prototype.draw = function() {
    if (this.selected || (!this.selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);    
    }
    
    var r = this.r + this.animation;
    
    ellipse(this.x, this.y, r, r);
};

var ConstrainedPoint = function(x, y, rangeX, rangeY, color) {
    DraggablePoint.call(this, x, y, color);
    this.minX = rangeX[0];
    this.maxX = rangeX[1];
    this.minY = rangeY[0];
    this.maxY = rangeY[1];
};
ConstrainedPoint.prototype = Object.create(DraggablePoint.prototype);

ConstrainedPoint.prototype.move = function() {
    this.x = constrain(this.x + mouseX - pmouseX, this.minX, this.maxX);
    this.y = constrain(this.y + mouseY - pmouseY, this.minY, this.maxY);
};

/***************************************************
 *      Frame selector
 * A slider allowing the user to select a frame
****************************************************/

var FrameSelector = function(timeline, x, y, dx, maxFrames) {
    this.timeline = timeline;
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.w = (maxFrames + 1) * this.dx;
    
    this.r = 9;
    this.by = this.y - this.r;
    this.maxFrames = maxFrames;
    this.held = false;
    
    this.setBallPosition();
    this.mouseOverFrame = -1;
};

FrameSelector.prototype.draw = function() {
    this.setBallPosition();
    
    this.mouseOverFrame = this.mapMouseToFrame();
    if (this.mouseOver() &&
        this.mouseOverFrame !== this.timeline.currentFrame) {
            strokeWeight(2);
            stroke(ORANGE);
            noFill();
            var x = this.x + (this.mouseOverFrame + 0.5) * this.dx;
            ellipse(x, this.by, this.r * 2, this.r * 2);
    }
    
    // Frame counter
    strokeWeight(1);
    stroke(GREY);
    fill(TEXTCOL);
    textSize(11);
    textAlign(CENTER, BASELINE);
    for (var i = 0; i <= this.maxFrames; i++) {
        var x = this.x + (i + 0.5) * this.dx;
        line(x, this.y, x, this.y - 3);
        text(i + 1, x, this.y - 5);
    }
    
    // Line over the avar boxes
    strokeWeight(1);
    stroke(200);
    line(this.bx, this.y, this.bx, this.y + this.timeline.h);
    
    // Selector ball
    fill(ORANGE);
    stroke(BACKGROUND);
    ellipse(this.bx, this.by, this.r * 2 + 1, this.r * 2 + 1);
    
    fill(TEXTCOL);
    textSize(11);
    textAlign(CENTER, CENTER);
    text(this.timeline.currentFrame + 1, this.bx, this.by);
    
    strokeWeight(1);
    stroke(GREY);
    line(this.x - 36, this.y, this.x + this.w, this.y);
};

FrameSelector.prototype.setBallPosition = function() {
    this.bx = this.x + (this.timeline.currentFrame + 0.5) * this.dx;
};

FrameSelector.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.by) <= this.r;
};

FrameSelector.prototype.mouseDragged = function() {
    if (this.held) {
        this.updateFrame();
        return true;
    }
};

FrameSelector.prototype.mouseOver = function() {
    return mouseX > this.x && mouseX < this.x + this.w &&
           mouseY < this.y && mouseY > this.y - 2 * this.r;
};

FrameSelector.prototype.mouseReleased = function() {
    // Clicking on frame moves to that frame
    if (this.mouseOver()) {
        this.updateFrame();
    }
    this.held = false;
};

FrameSelector.prototype.mapMouseToFrame = function() {
    var f = map(mouseX + 2, this.x, this.x + this.w, 0, this.maxFrames + 1);
    return constrain(floor(f), 0, this.maxFrames);
};

FrameSelector.prototype.updateFrame = function() {
    // Move to a new frame based on the mouse position
    this.timeline.currentFrame = this.mapMouseToFrame();
    this.setBallPosition();
};

/***************************************************
 *      Avar
 * An animation variable.
 * Each variable has a value for each frame.
 * Values are determined by keyframes and
 * interpolation between these frames.
****************************************************/

var Avar = function(timeline, name, y, value, vmin, vmax) {
    this.timeline = timeline;
    this.name = name;
    this.min = vmin;
    this.max = vmax;
    
    this.frameCount = timeline.frameCount;
    this.x = timeline.x;
    this.y = y;
    this.w = timeline.w;
    this.h = timeline.dy;
    
    this.dx = this.w / this.frameCount;
    var padding = 8;
    this.y1 = this.y + this.h - padding;
    this.y2 = this.y + padding;
    
    this.keyFrames = [];
    this.addKeyFrame(0, value);
    this.addKeyFrame(this.frameCount - 1, value);
    this.selected = -1;
    this.dragging = -1;
    
    this.values = [];
    for (var i = 0; i < this.frameCount; i++) {
        this.values.push(value);
    }
};

Avar.prototype.draw = function(f) {
    // Lower border line
    strokeWeight(1);
    stroke(GREY);
    noFill();
    line(this.x - 36, this.y + this.h, this.x + this.w, this.y + this.h);
    
    // Label
    noStroke();
    fill(224);
    rect(this.x - 36, this.y + 1, 35, this.h - 1);
    
    textAlign(CENTER, BASELINE);
    textFont(serifFont, 24);
    fill(TEXTCOL);
    text(this.name, this.x - 18, this.y + this.h / 2 - 4);
    
    textAlign(CENTER, TOP);
    textFont(sansFont, 12);
    text(round(this.values[f]), this.x - 18, this.y + this.h / 2 + 1);
    
    // Draw value graph
    strokeWeight(2);
    stroke(BLUE);
    noFill();
    
    beginShape();
    for (var i = 0; i < this.values.length; i++) {
        var vx = this.x + (i + 0.5) * this.dx;
        var vy = map(this.values[i], this.min, this.max, this.y1, this.y2);
        vertex(vx, vy);
    }
    endShape();
    
    for (var i = 0; i < this.keyFrames.length; i++) {
        this.keyFrames[i].draw();
    }

    // Mouse over keyframe
    var frame = this.mouseOverAvars();
    if (frame !== undefined) {
        // Indicate possible keyFrame
        if (!this.isKeyFrame(frame[0])) {
            strokeWeight(2);
            stroke(ORANGE);
            fill(BACKGROUND);
            ellipse(frame[1], frame[2], 13, 13);   
        }
        
        // Indicate this frame
        var fs = this.timeline.frameSelector;
        noFill();
        ellipse(frame[1], fs.by, fs.r * 2 + 1, fs.r * 2 + 1);
    }
    
};

Avar.prototype.addKeyFrame = function(frame, value) {
    var x = this.x + (frame + 0.5) * this.dx;
    var y = this.valueToPosition(value);
    var p = new ConstrainedPoint(x, y, [x, x], [this.y2, this.y1]);
    p.frame = frame;
    this.keyFrames.push(p);
    this.keyFrames.sort(function(a, b) { return a.frame - b.frame; });
};

Avar.prototype.update = function(index) {
    // Re-interpolate between this.keyframe and neighbouring ones
    var frame = this.keyFrames[index].frame;
    
    // Interpolate before this frame
    if (index !== 0) {
        interpolate(this.values, this.keyFrames[index - 1].frame, frame);
    }
    
    // Interpolate after this frame
    if (index !== this.keyFrames.length - 1) {
        interpolate(this.values, frame, this.keyFrames[index + 1].frame);
    }
};

Avar.prototype.updateKeyFrame = function(index) {
    // Recalculate the value of a keyframe based on its position
    var value = this.positionToValue(this.keyFrames[index].y);
    var frame = this.keyFrames[index].frame;
    this.values[frame] = value;
    this.update(index);
};

Avar.prototype.valueToPosition = function(v) {
    return map(v, this.min, this.max, this.y1, this.y2);
};

Avar.prototype.positionToValue = function(y) {
    return map(y, this.y1, this.y2, this.min, this.max);
};

Avar.prototype.mouseOver = function() {
    return mouseY >= this.y && mouseY <= this.y + this.h && 
           mouseX >= this.x && mouseX <= this.x + this.w;
};

Avar.prototype.isKeyFrame = function(frame) {
    for (var i = 0; i < this.keyFrames.length; i++) {
        if (this.keyFrames[i].frame === frame) {
            return true;
        }
    }
};

Avar.prototype.mouseOverAvars = function() {
    if (this.mouseOver()) {
        var fs = this.timeline.frameSelector;
        var frame = fs.mouseOverFrame;
        
        if (frame > -1) {
            var vx = this.x + (frame + 0.5) * this.dx;
            var vy = this.valueToPosition(this.values[frame]);
            
            if (dist(mouseX, mouseY, vx, vy) <= 10) {
                return [frame, vx, vy];
            }
        }
    }
};

Avar.prototype.removeSelectedKeyFrame = function() {
    // Check it's not the first or last frame just to be sure
    if (this.selected > 0 && this.selected < this.keyFrames.length - 1) {
        var f1 = this.keyFrames[this.selected - 1].frame;
        var f2 = this.keyFrames[this.selected + 1].frame;
        this.keyFrames.splice(this.selected, 1);
        interpolate(this.values, f1, f2);
    }
};

Avar.prototype.mousePressed = function() {
    if (this.selected > -1) {
        this.keyFrames[this.selected].selected = false;
        this.selected = -1;
    }
    
    // Select key frame node
    if (this.mouseOver()) {
        for (var i = 0; i < this.keyFrames.length; i++) {
            if (this.keyFrames[i].mouseOver()) {
                this.selected = i;
                this.dragging = i;
                this.keyFrames[i].selected = true;
                this.timeline.currentFrame = this.keyFrames[i].frame;
                
                var frame = this.keyFrames[i].frame;
                
                if (frame > 0 && frame < this.frameCount - 1) {
                    removeButton.showing = true;
                }
                return;
            }
        }
    }
};

Avar.prototype.mouseDragged = function() {
    if (this.dragging > -1) {
        this.keyFrames[this.dragging].move();
        this.updateKeyFrame(this.dragging);
    }
};

Avar.prototype.mouseReleased = function() {
    this.dragging = -1;
    
    var frame = this.mouseOverAvars();
    if (frame !== undefined && !this.isKeyFrame(frame[0])) {
        this.addKeyFrame(frame[0], this.values[frame[0]]);
        this.timeline.currentFrame = frame[0];
    }
};

/***************************************************
 *      Timeline
 * A object that contains an array for each avar
****************************************************/

var Timeline = function(x, y, w, dy, frames, scene) {
    this.x = x + 36;
    this.y = y;
    this.w = w - 36;
    this.h = 0;
    this.dx = this.w / frames;
    this.dy = dy;
    this.scene = scene;
    this.state = 'paused';
    
    this.padding = 8;
    
    this.frameCount = frames;
    this.currentFrame = 0;
    this.frameSelector = new FrameSelector(
        this, this.x, this.y, this.dx, this.frameCount -1
    );
    
    this.avars = {};
    
    this.keyFrames = [0, this.frameCount - 1];
};

Timeline.prototype.addAvar = function(name, value, vmin, vmax) {
    // Add an animation variable
    // Its value will be set to the given value for all frames
    // A slider to control it is also added
    
    this.avars[name] = new Avar(this, name, this.y + this.h, value, vmin, vmax);
    this.h += this.dy;
};

Timeline.prototype.draw = function() {
    // Move to next frame if running
    
    if (this.state === 'running' &&
        frameCount % (6 - speedSlider.value) === 0) {
        this.currentFrame = (this.currentFrame + 1) % this.frameCount;
    }
    
    // Frame Selector
    this.frameSelector.draw();

    // Draw avars
    for (var a in this.avars) {
        this.avars[a].draw(this.currentFrame);
    }
};

Timeline.prototype.removeSelectedKeyFrame = function() {
    for (var a in this.avars) {
        if (this.avars[a].selected > -1) {
            this.avars[a].removeSelectedKeyFrame();
            removeButton.showing = false;
        }
    }
};

Timeline.prototype.mouseOver = function() {
    return mouseX >= this.x && mouseX <= this.x + this.w &&
           mouseY >= this.y && mouseY <= this.y + this.h;
};

Timeline.prototype.mouseDragged = function() {
    // Drag sliders and update values
    if (this.state === 'paused') {
        this.frameSelector.mouseDragged();
        
        for (var a in this.avars) {
            this.avars[a].mouseDragged();
        }
    }
};

Timeline.prototype.mousePressed = function() {
    if (this.state === 'paused') {
        this.frameSelector.selected();
        
        if (this.mouseOver()) {
            var anySelected = false;
            for (var a in this.avars) {
                this.avars[a].mousePressed();
                
                if (this.avars[a].selected > -1) {
                    anySelected = true;
                }
            }
            
            if (!anySelected) {
                removeButton.showing = false;
            }   
        }
    }
};

Timeline.prototype.mouseReleased = function() {
    if (this.state === 'paused') {
        this.frameSelector.mouseReleased();
        
        for (var a in this.avars) {
            this.avars[a].mouseReleased();
        }
    }
};

/***************************************************
 *      Actor
 * An actor is an object in a scene to be animated.
****************************************************/

var Actor = function(timeline) {
    this.timeline = timeline;
    this.attr = timeline.avars;
};

Actor.prototype.draw = function(dx, dy) {
    strokeWeight(1);
    stroke(200, 30, 30);
    noStroke();
    
    var f = this.timeline.currentFrame;
    var x = dx + this.attr.x.values[f];
    var y = dy - this.attr.y.values[f];
    var rx = this.attr.sx.values[f];
    var ry = this.attr.sy.values[f];
    var a = this.attr.a.values[f];
    
    pushMatrix();
    translate(x, y);
    rotate(a);
    fill(0, 0, 0, 60);
    ellipse(1, 1, rx, ry);
    fill(255, 60, 60);
    ellipse(0, 0, rx, ry);
    popMatrix();
};

/***************************************************
 *      Scene
 * A scene is box in which the actor exists
****************************************************/

var Scene = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.actors = [];
};

Scene.prototype.draw = function() {
    fill(SKYBLUE);
    rect(this.x, this.y, this.w, this.h + 20);
    
    noStroke();
    fill(120, 200, 160);
    rect(this.x + 1, this.y + this.h, this.w - 1, 20);
    
    strokeWeight(2);
    stroke(GREEN);
    line(this.x + 1, this.y + this.h + 1, this.x + this.w - 1, this.y + this.h + 1);
    
    for (var i = 0; i < this.actors.length; i++) {
        this.actors[i].draw(this.x, this.y + this.h);
    }
    
    // Border
    strokeWeight(1);
    stroke(GREY);
    noFill();
    rect(this.x, this.y, this.w, this.h + 20);
};

Scene.prototype.addActor = function(actor) {
    this.actors.push(actor);
};

/***************************************************
 *      Setup
****************************************************/

// TODO: bind avars to actor somehow
var scene = new Scene(20, 10, width - 40, 200);

// Create 24 frames of animation
var timeline = new Timeline(20, 255, width - 40, 60, FRAMES, scene);
timeline.addAvar('x', 200, 0, scene.w);
timeline.addAvar('y', 50, 0, scene.h);
timeline.addAvar('sx', 20, 1, 50);
timeline.addAvar('sy', 20, 1, 50);
timeline.addAvar('a', 0, 0, 180);

// Add the ball
scene.addActor(new Actor(timeline));

/***************************************************
 *      Set up other GUI elements
****************************************************/

var playPause = function() {
    if (timeline.state === 'running') {
        timeline.state = 'paused';
    } else if (timeline.state === 'paused') {
        timeline.state = 'running';
    }
};

var playIcon = function(x, y, r) {
    noStroke();
    if (timeline.state === 'running') {
        rect(x - 4, y - 5, 3, 10, 5);
        rect(x + 1, y - 5, 3, 10, 5);
    } else {
        triangle(x - r * 0.4, y - r * 0.5, x - r * 0.4, y + r * 0.5, x + r * 0.65, y);
    }
};

var removeKeyFrame = function() {
    timeline.removeSelectedKeyFrame();
};

var buttonY = timeline.y + timeline.h + 10;
var playButton = new CircleButton(26, buttonY, 24, 24, playPause, playIcon);

removeButton = new Button(200, buttonY + 1, 125, 20, "Remove keyframe", removeKeyFrame);
removeButton.showing = false;

speedSlider = new Slider(80, buttonY + 20, 60, 'horizontal', 1, 5, 3);

/***************************************************
 *      Main loop
****************************************************/

draw = function() {
    background(BACKGROUND);
    
    scene.draw();
    
    // Clip scene
    noStroke();
    fill(BACKGROUND);
    rect(0, 0, width, scene.y);
    rect(0, 0, scene.x, scene.y + scene.h + 60);
    rect(scene.x + scene.w + 1, 0, scene.x, scene.y + scene.h + 60);
    rect(0, scene.y + scene.h + 21, width, 40);
    
    timeline.draw();
    
    playButton.draw();
    
    if (timeline.state === 'paused') {
        removeButton.draw();    
    }
    
    // Extra GUI elements
    fill(TEXTCOL);
    textAlign(CENTER, BASELINE);
    textSize(13);
    text("Speed: " + speedSlider.value, speedSlider.x + speedSlider.length / 2, speedSlider.y - 10);
    speedSlider.draw();
};

/*****************************************************
 *      Event handling
******************************************************/

mousePressed = function() {
    timeline.mousePressed();
    speedSlider.selected();
};

mouseDragged = function() {
    timeline.mouseDragged();
    speedSlider.mouseDragged();
};

mouseReleased = function() {
    timeline.mouseReleased();
    playButton.mouseReleased();
    removeButton.mouseReleased();
    speedSlider.held = false;
};

mouseOut = function() {
    mouseReleased();
};
