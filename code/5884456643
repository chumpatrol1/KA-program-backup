
var ORANGE = color(255, 165, 0);
var BLUE = color(40, 153, 40);
var GREEN = color(28, 173, 123);
var BACKGROUND = (0);

var thresholdR = 40;
var thresholdRa = thresholdR + 1.2;
var thresholdR2 = thresholdR * thresholdR;
var threshold = 1 / thresholdR2;
var thresholda = 1 / (thresholdRa * thresholdRa);
var thresholdd = 1 / (threshold - thresholda);

var selected = false;
var contours = [];
var showing = {
    Fill: false,
    Surface: true,
    Shading: true,
};
var isoValue = 40;

var callForEach = function(arr, func) {
    for (var i = 0; i < arr.length; i++) {
        arr[i][func]();
    }
};

// GUI
{
var sansFont = createFont("sans", 15);
/*******************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *      GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = color(255, 255, 255, 240);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(20);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/*******************************************************
 *      GUI Slider
********************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = params.ballR || h / 2;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = this.jumpSize;
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/*******************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for adding
 * components like buttons and sliders.
********************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    
    this.components = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, 240);
    rect(this.x, this.y, this.w, this.h, 8);
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].draw();
    }
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mousePressed();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseReleased();
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.components.length; i++) {
        this.components[i].mouseDragged();
    }
};
}
}

/*************************************************
 *      DraggablePoint
 *  A point that can be dragged
**************************************************/
{
var DraggablePoint = function(x, y, r) {
    this.x = x;
    this.y = y;
    this.r = r || 8;
    this.color = ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (this.selected || (!this.selected && this.mouseOver())) {
        if (this.animation < 5) {
            this.animation++;
        }
        cursor(MOVE);
    } else {
        this.animation = 0;
    }

    stroke(BACKGROUND);
    strokeWeight(1);
    fill(this.color);
    
    var pr = this.r * 2 + this.animation;
    ellipse(this.x, this.y, pr, pr);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= this.r + 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x = mouseX + dx;
    this.y = mouseY + dy;
};
}
/*************************************************
 *      Set-up
**************************************************/

var points = [
    new DraggablePoint(120, 180),
    new DraggablePoint(300, 280)
];

/*************************************************
 *      Main calculation
**************************************************/

var drawMetaBalls = function() {
    loadPixels();
    
    var p = imageData.data;
    if (!p) { return; }
    
    var p1 = points[0];
    var p2 = points[1];
    var n = points.length;
    var x, y, t, i, pi, a, d;
    
    for (x = 0; x < width; x++) {
        for (y = 0; y < height; y++) {
            t = 0;
            for (i = 0; i < n; i++) {
                pi = points[i];
                d = (x - pi.x) * (x - pi.x) + (y - pi.y) * (y - pi.y);
                t += 1 / (1 + d);
            }
            if (t > thresholda) {
                i = x + y * width << 2;
                
                a = threshold - t;
                if (a > 0) {
                    // Anti-alias
                    a = 1 - a * thresholdd;
                  
                    p[i++] = 64 * a;
                    p[i++] = 150 * a;
                    p[i] = 250 * a;
                } else {
                    //a = 1;
                    t = 1 / (thresholdR2 * t);
                    p[i++] = 64 * t + 255 * (1 - t);
                    p[i++] = 150 * t + 255 * (1 - t);
                    p[i] = 250 * t + 255 * (1 - t);
                }
                

            }
        }
    }
    
    updatePixels();
};

var findValue = function(x, y) {
    var t = 0;
    var dx, dy;
    
    for (var i = points.length; i--;) {
        dx = x - points[i].x;
        dy = y - points[i].y;
        t += 1 / (1 + dx * dx + dy * dy);
    }
    
    return t;
};

var findContourPoint = function(x, y, dx, dy, threshold) {
    var t = 1;
    var dt = 0.5;
    var v = findValue(x + t * dx, y + t * dy);

    do {
        if (v < threshold) {
            t -= dt;
        } else {
            t += dt;
        }
        dt *= 0.5;
        v = findValue(x + t * dx, y + t * dy);

    } while (abs(v - threshold) > 1e-8 && thresholdR * dt > 0.01);
    
    return t;
};

var testContour = function() {
    var x = points[0].x;
    var y = points[0].y;
    var dx = thresholdR;
    var dy = 0;
    
    var t = 1;
    var dt = 0.25;
    var v = findValue(x + t * dx, y + t * dy);

    do {
        println(t + " " + v);
        if (v < threshold) {
            t -= dt;
        } else {
            t += dt;
        }
        dt *= 0.5;
        v = findValue(x + t * dx, y + t * dy);

    } while (abs(v - threshold) > 1e-6 && thresholdR * dt > 0.01);
};

// Return an array of points around a given pint
var getArcAroundPoint = function(x, y, dAngle, maxAngle, startAngle, r, threshold) {
    var contour = [];
    for (var angle = 0; angle < maxAngle; angle += dAngle) {
        var dx = r * cos(angle + startAngle);
        var dy = r * sin(angle + startAngle);
        var t = findContourPoint(x, y, dx, dy, threshold);
        contour.push([x + t * dx, y + t * dy]);
    }
    return contour;
};

var getContours = function(isoValue) {
    contours = [];
    var threshold = 1 / (isoValue * isoValue);
    var threshold2 = 1 / ((isoValue + 0.5) * (isoValue + 0.5));
    
    // Find midpoint between points
    var px1 = points[0].x;
    var py1 = points[0].y;
    var px2 = points[1].x;
    var py2 = points[1].y;
    var pdx = px2 - px1;
    var pdy = py2 - py1;
    var pAngle = atan2(pdy, pdx);
    var mx = (px1 + px2) * 0.5;
    var my = (py1 + py2) * 0.5;
    
    var contour = [];
    var numAngle = 36;
    var dAngle = 360 / numAngle;
    
    // TODO: test whether p1 === p2
    if (px1 === px2 && py1 === py2) {
        // Points in the same place so draw contour around point 1
        contours.push(getArcAroundPoint(px1, py1, dAngle, 360, 0, isoValue, threshold));
    } else if (findValue(mx, my) > threshold2) {
        // Joined
        var length = sqrt(pdx * pdx + pdy * pdy);
        var ndx = pdx * isoValue / length;
        var ndy = pdy * isoValue / length;
        var n = 1 / floor(length / 5);
        
        // Semi-circle around point 1
        contour.push.apply(contour, getArcAroundPoint(px1, py1, dAngle, 180, pAngle + 90, isoValue, threshold2));
        
        // Join from particle 1 to particle 2
        for (var i = 0; i < 1; i += n) {
            mx = px1 + i * pdx;
            my = py1 + i * pdy;
            var t = findContourPoint(mx, my, ndy, -ndx, threshold2);
            contour.push([mx + t * ndy, my - t * ndx]);
            //ellipse(mx + t * ndy, my - t * ndx, 8, 8);
        }
        
        // Semi-circle around point 2
        contour.push.apply(contour, getArcAroundPoint(px2, py2, dAngle, 180, pAngle - 90, isoValue, threshold2));
        
        // Join from particle 2 to particle 1
        for (var i = 0; i < 1; i += n) {
            mx = px2 - i * pdx;
            my = py2 - i * pdy;
            var t = findContourPoint(mx, my, -ndy, ndx, threshold2);
            contour.push([mx - t * ndy, my + t * ndx]);
        }
        contours.push(contour);
    
    } else {
        // Loop around point, finding points on contour
        contours.push(getArcAroundPoint(px1, py1, dAngle, 360, pAngle, isoValue, threshold));
        contours.push(getArcAroundPoint(px2, py2, dAngle, 360, pAngle, isoValue, threshold));
    }
};

var drawContours = function() {
    if (showing.Fill) {
        fill(54, 150, 250);
    } else {
        noFill();
    }
    stroke(255, 255, 0);
    strokeWeight(3);
    
    for (var i = contours.length; i--;) {
        var contour = contours[i];
        if (!contour) { continue; }
        var n = contour.length;
        
        beginShape();
        curveVertex(contour[n - 1][0], contour[n - 1][1]);
        for (var j = 0; j < n; j++) {
            //ellipse(contour[j][0], contour[j][1], 6, 6);
            curveVertex(contour[j][0], contour[j][1]);
        }
        curveVertex(contour[0][0], contour[0][1]);
        endShape(CLOSE);
    }
};

/*************************************************
 *      Create GUI
**************************************************/

var toolbar = new Toolbar(5, 5, 120);
toolbar.add(Slider, {
    name: 'Heat',
    min: 10,
    now: 40,
    max: 200,
    trigger: function() {
        isoValue = this.val;
        getContours(isoValue);
    }
});
toolbar.addOptions(showing);

/*************************************************
 *      Main loop
**************************************************/

getContours(isoValue);

draw = function() {
    background(BACKGROUND);
    cursor('default');
    if (showing.Shading && !showing.Fill) { drawMetaBalls(); }
    if (showing.Surface) { drawContours(); }
    callForEach(points, 'draw');
    toolbar.draw();
};

/*********************************************
 *      Event handling
**********************************************/
{
mousePressed = function() {
    for (var i = points.length; i--;) {
        if (points[i].mouseOver()) {
            selected = points[i];
            return;
        }
    }
    toolbar.mousePressed();
};

mouseReleased = function() {
    selected = false;
    toolbar.mouseReleased();
};

mouseDragged = function() {
    if (selected) {
        selected.move(mouseX - pmouseX, mouseY - pmouseY);
        getContours(isoValue);
    } else {
        toolbar.mouseDragged();
    }
};

mouseOut = mouseReleased;
}
