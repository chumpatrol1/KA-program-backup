// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var BACKGROUND = color(240, 250, 255);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var BACKBONE_COL = color(0, 140, 0);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(225, 225, 225, 180);

textSize(13);
var pointR = 10;
var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 20;

var toolbarX = width * 0.01;
var toolbarY = height * 0.01;
var toolbarWidth = 120;
var toolbarHeight = 204;

var showing = {
    'Control points': true,
    'Control arms': true,
    'String points': true,
    Curve: true
};

var selected = false;
var sliders;

// Given the end points of two lines (x1, y1) to (x2, y2) and (x3, y3) to (x4, y4),
// return the point where they intersect
// Assume lines do intersect (i.e. are not parallel and are not segments)
var findIntersection = function(x1, y1, x2, y2, x3, y3, x4, y4) {
    var dx1 = (x1 - x2);
    var dx2 = (x3 - x4);
    var dy1 = (y1 - y2);
    var dy2 = (y3 - y4);
    var d = dx1 * dy2 - dy1 * dx2;
    return [(dx2 * (x1 * y2 - y1 * x2) - dx1 * (x3 * y4 - y3 * x4)) / d,
            (dy2 * (x1 * y2 - y1 * x2) - dy1 * (x3 * y4 - y3 * x4)) / d];
};

/*************************************************************
 * GUI Slider to vary parameters
**************************************************************/

var Slider = function(x, y, width, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;

    this.draw = function() {
        noStroke();
        fill(180);
        rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);
    
        strokeWeight(1);
        stroke(0, 0, 0, 120);
        fill(180, 180, 250);
        ellipse(this.bx, this.y, this.ballD, this.ballD);
        noStroke();
        fill(255, 255, 255, 150);
        ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);

    };
    
    this.selected = function() {
        this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + round((x - this.x) * this.scale);
            return true;
        }
    };
  
    // This is used if you want to update the value in a way other
    // than using the slider (but want the slider to update).
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

/********************************************************
 *  GUI Button
*********************************************************/

var Button = function(x, y, w, h, name, clickF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(200, 200, 200, 250);
    this.highlightCol = color(250, 50, 50, 250);
    this.showing = true;
    
    var boxSize = this.h - 6;
    
    this.mouseover = function() {
        return (mouseX >= this.x && mouseX <= this.x + this.w &&
                mouseY >= this.y && mouseY <= this.y + this.h);
    };
    
    this.click = function() {
        showing[this.name] = !showing[this.name];
    };
    
    this.draw = function() {
        if (!this.showing) { return; }
        
        noStroke();
        if (this.mouseover() || this.selected) {
            fill(this.defaultCol);
        } else {
            noFill();
        }
        rect(this.x - 5, this.y, this.w + 2, this.h + 1, 5);
        
        fill(10);
        textAlign(LEFT, CENTER);
        text(this.name, this.x + boxSize + 5, this.y + this.h/2);
        
        noFill();
        stroke(10);
        strokeWeight(1);
        rect(this.x, this.y + 3, boxSize, boxSize);
        
        if (showing[this.name]) {
            line(this.x, this.y + 3, this.x + boxSize, this.y + 3 + boxSize);
            line(this.x + boxSize + 1, this.y + 3, this.x + 1, this.y + 3 + boxSize);
        }
    };
};

/*********************************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
*********************************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (selected === this || (!selected && this.mouseover())) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};


// Curve between by two points at (x1, y1) and (x2, y2),
// with a control point at (x3, y3)
var Curve = function(x1, y1, x2, y2, x3, y3) {
    this.p1 = new DraggablePoint(x1, y1);
    this.p2 = new DraggablePoint(x2, y2);
    this.p3 = new DraggablePoint(x3, y3);
    this.controlPoints = [this.p1, this.p2, this.p3];
    this.splinePoints = [];
    
    this.update = function() {
        // Fill splinePoints array with points along the curve
        var n = sliders[0].val;
        var x1 = this.p1.x;
        var y1 = this.p1.y;
        var x2 = this.p3.x;
        var y2 = this.p3.y;
        
        this.splinePoints = [[x1, y1]];
        
        for (var i = 0; i <= n; i++) {
            var r = (i + 1) / (n + 1);
            var x3 = lerp(this.p1.x, this.p3.x, r);
            var y3 = lerp(this.p1.y, this.p3.y, r);
            var x4 = lerp(this.p3.x, this.p2.x, r);
            var y4 = lerp(this.p3.y, this.p2.y, r);
            var coord = findIntersection(x1, y1, x2, y2, x3, y3, x4, y4);
            this.splinePoints.push([coord[0], coord[1]]);
            x1 = x3;
            y1 = y3;
            x2 = x4;
            y2 = y4;
        }
        
        this.splinePoints.push([this.p2.x, this.p2.y]);
    };
    this.update();
    
    this.draw = function() {
        // Construction lines
        var pinkLine = false;
        var n = sliders[0].val;
        var highlight = round(n * sliders[2].val / sliders[2].max) - 1;
        var drawStrings = round(n * sliders[1].val / sliders[1].max);

        for (var i = 0; i < n; i++) {
            var r = (i + 1) / (n + 1);
            var x1 = lerp(this.p1.x, this.p3.x, r);
            var y1 = lerp(this.p1.y, this.p3.y, r);
            var x2 = lerp(this.p3.x, this.p2.x, r);
            var y2 = lerp(this.p3.y, this.p2.y, r);
            
            if (i === highlight) {
                pinkLine = [x1, y1, x2, y2];
            }
            
            if (i < drawStrings) {
                strokeWeight(1);
                stroke(GREY);
                line(x1, y1, x2, y2);
            }
            
            if (showing['String points']) {
                noStroke();
                fill(GREY);
                var d = 5;
                quad(x1, y1 - d, x1 + d, y1, x1, y1 + d, x1 - d, y1);
                quad(x2, y2 - d, x2 + d, y2, x2, y2 + d, x2 - d, y2);
            }

        }
        
        // Lines to control points
        if (showing['Control arms']) {
            stroke(BLUE);
            strokeWeight(2);
            line(this.p1.x, this.p1.y, this.p3.x, this.p3.y);
            line(this.p2.x, this.p2.y, this.p3.x, this.p3.y);
        }
        
        // Parabola
        if (showing.Curve) {
            strokeWeight(5);
            stroke(BACKBONE_COL);
            var x1 = this.splinePoints[0][0];
            var y1 = this.splinePoints[0][1];
            for (var i = 0; i <= this.splinePoints.length - 1; i++) {
                var x2 = this.splinePoints[i][0];
                var y2 = this.splinePoints[i][1];
                line(x1, y1, x2, y2);
                x1 = x2;
                y1 = y2;
            }   
        }
        
        if (pinkLine) {
            stroke(PINK);
            strokeWeight(2);
            line(pinkLine[0], pinkLine[1], pinkLine[2], pinkLine[3]);
        }
        
        if (showing['Control points']) {
            for (var i = 0; i < this.controlPoints.length; i++) {
                this.controlPoints[i].draw();
            }
        }
    };
    
    this.selectPoint = function() {
        for (var i = 0; i < this.controlPoints.length; i++) {
            if (this.controlPoints[i].mouseover()) {
                selected = i;
            }
        }
    };
    
    this.mouseDrag = function() {
        if (selected !== false) {
            var p = this.controlPoints[selected];
            p.x += mouseX - pmouseX;
            p.y += mouseY - pmouseY;
            this.update();
        }
    };
};

/****************************************************
 *  Creation of objects
*****************************************************/

var createButtons = function() {
    var buttons = [];
    var x = toolbarX + 12;
    var y = 130;
    var w = 100;
    var h = 15;
    
    for (var opt in showing) {
        buttons.push(new Button(x, y, w, h, opt));
        y += 20;
    }
    
    return buttons;
};

var createSliders = function() {
    var sliders = [];
    var x = toolbarX + 16;
    var y = toolbarY + 30;
    var w = 88;
    var r = MAX_RESOLUTION;
    
    var starting = [1, 0, 0];
    for (var i = 0; i < starting.length; i++) {
        sliders.push(new Slider(x, y, w, 0, r, starting[i]));
        y += 40;
    }
    
    return sliders;
};

var buttons = createButtons();
sliders = createSliders();

var myCurve = new Curve(width/2 + 100, 60, width/2 + 100, 380, width/2, 220);

/****************************************************
 *  Draw functions
*****************************************************/

var drawGUI = function() {
    noStroke();
    strokeWeight(1);
    fill(TOOLBAR);
    rect(toolbarX, toolbarY, toolbarWidth, toolbarHeight, 8);
    
    textAlign(CENTER, CENTER);
    fill(10);
    var s = sliders[0];
    text("Num of strings: " + s.val,  s.x + s.width / 2, s.y - 18);
    
    var s = sliders[1];
    var val = round(sliders[0].val * s.val / s.max);
    text("Draw strings: " + val,  s.x + s.width / 2, s.y - 18);
    
    var s = sliders[2];
    text("Highlight string",  s.x + s.width / 2, s.y - 18);

    
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].draw();   
    }
    
    textAlign(LEFT, CENTER);
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].draw();
    }
};

var draw = function() {
    background(BACKGROUND);
    myCurve.draw();
    drawGUI();
};

/****************************************************
 * Event handling
****************************************************/

mousePressed = function() {
    myCurve.selectPoint();
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].selected();
    }
    for (var b = 0; b < buttons.length; b++) {
        if (buttons[b].mouseover()) {
            buttons[b].selected = true;
        }
    }
};

mouseReleased = function() {
    selected = false;
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].held = false;
    }
    for (var b = 0; b < buttons.length; b++) {
        if (buttons[b].mouseover() && buttons[b].selected) {
            buttons[b].click();
        }
        buttons[b].selected = false;
    }
};

mouseOut = function() {
    mouseReleased();
};

mouseDragged = function() {
    myCurve.mouseDrag();
    for (var s = 0; s < sliders.length; s++) {
        if(sliders[s].drag()) {
            myCurve.update();
        }
    }
};