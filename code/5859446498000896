var boxWidth = 400;
var boxLength = 300;
var boxHeight = 200;

translate(200.5, 250.5);
scale(0.2, 0.2);

var topColor = color(240, 240, 240);
var sideColor1 = color(40, 80, 145);
var sideColor2 = color(200, 65, 55);

var sa = sin(45);
var sb = sin(60);
var ca = -sa * cos(60);

var gap = 7;
var dx1 = (boxWidth - gap) * sa;
var dy1 = (boxWidth - gap) * ca;
var dx2 = (boxLength - gap) * sa;
var dy2 = (boxLength - gap) * ca;
var dz = boxHeight * sb;

var drawBox = function(x, y, z, rot) {
    var x1 = (x + y) * sa;
    var y1 = (x - y) * ca - sb * z;
    
    if (rot) {
        fill(topColor);
        quad(x1, y1,
             x1 + dx1, y1 - dy1,
             x1 + dx1 + dx2, y1 - dy1 + dy2,
             x1 + dx2, y1 + dy2
            );
        fill(sideColor1);
        quad(x1 + dx1, y1 - dy1,
             x1 + dx1 + dx2, y1 - dy1 + dy2,
             x1 + dx1 + dx2, y1 - dy1 + dy2 + dz,
             x1 + dx1, y1 - dy1 + dz
            );
        fill(sideColor2);
        quad(x1, y1,
             x1 + dx1, y1 - dy1,
             x1 + dx1, y1 - dy1 + dz,
             x1, y1 + dz
            );
    } else {
        fill(topColor);
        quad(x1, y1,
             x1 + dx1, y1 + dy1,
             x1 + dx1 + dx2, y1 + dy1 - dy2,
             x1 + dx2, y1 - dy2
        );
        //ellipse(x1, y1, 50, 50);
        fill(sideColor1);
        quad(x1, y1,
             x1 + dx2, y1 - dy2,
             x1 + dx2, y1 - dy2 + dz,
             x1, y1 + dz
            );
        fill(sideColor2);
        quad(x1 + dx2, y1 - dy2,
             x1 + dx1 + dx2, y1 + dy1 - dy2,
             x1 + dx1 + dx2, y1 + dy1 - dy2 + dz,
             x1 + dx2, y1 - dy2 + dz
            );
    }
};

var sortFunction = function(a, b) {
  return (b[0] - b[1]) - (a[0] - a[1]);
};


var drawBoxes = function(boxes, layers) {
    boxes.sort(sortFunction);
    
    var minX = 0;
    var minY = 0;
    var maxX = 0;
    var maxY = 0;
    
    var sizes = [boxLength, boxWidth];
    
    for (var i = 0; i < boxes.length; i++) {
        var box = boxes[i];
        maxX = max(maxX, box[0] + sizes[+(box[2] === 0)]);
        maxY = max(maxY, box[1] + sizes[+(box[2] === 1)]);
    }
    
    var dx = maxX / 2;
    var dy = maxY / 2;
    
    stroke(10);
    strokeWeight(2);
    
    for (var z = 0; z < layers; z++) {
        for (var i = 0; i < boxes.length; i++) {
            var box = boxes[i];
            var x = box[0];
            var y = box[1];
            if (z % 2 === 1) {
                x = maxX - x - sizes[+(box[2] === 0)];
                y = maxY - y - sizes[+(box[2] === 1)];
            }
            drawBox(x - dx, y - dy, z * boxHeight, box[2]);
        }
        boxes.reverse();
    }
};

var boxes = [
    [0, 0, 1],
    [0, 400, 0],
    [0, 700, 0],
    [300, 0, 1],
    [400, 400, 0],
    [400, 700, 0],
    [600, 0, 1],
    [800, 400, 0],
    [800, 700, 0],
    [900, 0, 1]
];


drawBoxes(boxes, 5);

