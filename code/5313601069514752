var yaw = 0;
var pitch = 0;
var roll = 0;

var sphereX = 200;
var sphereY = 200;
var sphereR = 80;
var sphereR2 = sphereR * sphereR;

// Inverse radius
var ixy = 1 / sphereR;

draw = function() {
    background(0);
    loadPixels();
    
    // Auto-spin
    var time = frameCount * 0.01;
    pitch += sin(time * 100) * 0.5;
    yaw += 0.2;
    roll += 0.3;
    
    // Mouse controls
    // pitch += (mouseY-pmouseY)*0.5;
    // yaw += (mouseX-pmouseX)*0.5;
    
    var p = this.imageData.data;
    var ms = millis();
    
    // Trig for rotations
    var sy = sin(yaw);
    var sp = sin(pitch);
    var sr = sin(roll);
    var cy = cos(yaw);
    var cp = cos(pitch);
    var cr = cos(roll);
    
    /**
    // Move ball over time
    var sphereX = 200 + sin(time * 10) * 5;
    var sphereY = 200 + cos(time * 20) * 5;
    var sphereR = 20 * (5 + sin(time * 100));
    var sphereR2 = sphereR * sphereR;
    var ixy = 1 / sphereR;
    **/
    
    var x, y, dx, m, xEnd, yp, xp, zp;
    var drawY, pixelIndex;
    var u, v;
    
    // Temporary variable
    var tp;
    
    for (var y = -sphereR; y < sphereR; y++){
        // Length of along x we go
        dx = ceil(sqrt(sphereR2 - y * y));
        
        // Where to draw the sphere
        drawY = (y + sphereY) * 400;

        for (x = -dx; x < dx; x++) {
            // Position on sphere in the range 0 - 1
            yp = y * ixy;
            xp = x * ixy;
            zp = sqrt(1 - xp * xp - yp * yp);
            
            // Chnage points based on yaw, pitch and roll
            tp = yp;
            yp = yp * cp - zp * sp;
            zp = zp * cp + tp * sp;
            
            tp = xp;
            xp = xp * cy - yp * sy;
            yp = yp * cy + tp * sy;
            
            /*
            m=xp*xp; u=yp; v=zp;
            
            if (yp * yp > m) {
                m = yp * yp;
                u = xp;
            }
            
            if (zp * zp > m) {
                u = xp;
                v = yp;
            }
            
            m = (1 + u) * 128 ^ (1 + v) * 128;
            */
            
            m = 200 * noise(xp, yp) - 20;
            
            pixelIndex = sphereX + x + drawY << 2;
            p[pixelIndex] = m;
            p[pixelIndex + 1] = m;
            p[pixelIndex + 2] = m;
        }
    }
    
    ms = millis() - ms;
    updatePixels();
    
    // Test speed
    fill(200);
    text(ms, 370, 390);
    //text(d, 370, 370);
};