/*********************************************************************
 *  Illustrating how points on the Cartesian
 *  plane are transformed by a matrix
*********************************************************************/

var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 240, 160);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123, 160);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);

var matrix = [[2, 1], [2, 2]];

/*********************************************************************
 *      Graph parameters
*********************************************************************/
// Graph origin
var originX = width / 2;
var originY = height / 2;

// Pixels between ticks
var xTickSize = 20;
var yTickSize = 20;

// Value represented by a tick
var xTickValue = 1;
var yTickValue = 1;

/*********************************************************************
 *      Draw functions
*********************************************************************/

var drawGrid = function() {
    stroke(GRIDGREY);
    strokeWeight(1);
    
    var minX = originX % xTickSize;
    for (var x = minX; x < width; x += xTickSize) {
        line(x, 0, x, height);
    }
    
    var minY = originY % xTickSize;
    for (var y = minY; y < height; y += xTickSize) {
        line(0, y, width, y);
    }
    
    // Axes
    stroke(GREY);
    line(originX, 0, originX, height);
    line(0, originY, width, originY);
    
    // Labels
    fill(GREY);
    textSize(11);
    
    var minX = originX - xTickSize * 2 * floor(0.5 * originX / xTickSize);
    var maxX = originX + xTickSize * 2 * floor(0.5 * (width - originX) / xTickSize);
    var scaleX = xTickValue/ xTickSize * 1000;

    textAlign(CENTER, TOP);
    for (var x = minX; x <= maxX; x += 2 * xTickSize) {
        if (x !== originX) {
            line(x, originY - 2, x, originY + 2);
            text("" + round((x - originX) * scaleX) / 1000, x, originY + 5);
        }
    }
    
    var minY = originY - yTickSize * 2 * floor(0.5 * originY / yTickSize);
    var maxY = originY + yTickSize * 2 * floor(0.5 * (height - originY) / yTickSize);
    var scaleY = yTickValue/ yTickSize * 1000;
    
    textAlign(RIGHT, CENTER);
    for (var y = minY; y <= maxY; y += 2 * yTickSize) {
        if (y !== originY) {
            line(originX - 2, y, originX + 2, y);
            text("" + round((originY - y) * scaleY) / 1000,  originX - 5, y);
        }
    }
};

/*********************************************************************
 *      Generate points
*********************************************************************/

var generatePoints = function(minX, maxX, dx, minY, maxY, dy) {
    var points = [];
    
    for (var x = minX; x <= maxX; x += dx) {
        for (var y = minY; y <= maxY; y += dy) {
            points.push([x, y]);
        }
    }
    
    return points;
};

// Transform an array of points using a matrix
var transformPoints = function(points, matrix) {
    var newPoints = [];
    var m11 = matrix[0][0];
    var m12 = matrix[0][1];
    var m21 = matrix[1][0];
    var m22 = matrix[1][1];
    
    for (var i = 0; i < points.length; i++) {
        var x = points[i][0];
        var y = points[i][1];
        newPoints.push([x * m11 + y * m12 , x * m21 + y * m22]);
    }
    return newPoints;
};

// Convert an array of grid coordinate to an array of pixel coordinates
var getPlotCoordinates = function(points) {
    var newPoints = [];
    for (var i = 0; i < points.length; i++) {
        var p = points[i];
        newPoints.push([originX + p[0] * xTickSize, originY + p[1] * yTickSize]);
    }
    return newPoints;
};

var points = generatePoints(-10, 10, 1, -10, 10, 1);
var transformed = getPlotCoordinates(transformPoints(points, matrix));

points = getPlotCoordinates(points);

/*********************************************************************
 *      Main loop
*********************************************************************/

draw = function() {
    background(BACKGROUND);
    drawGrid();
    
    stroke(BLUE);
    strokeWeight(4);
    for (var p = 0; p < points.length; p++) {
        point(points[p][0], points[p][1]);
    }
    
    stroke(255, 0, 0, 100);
    strokeWeight(4);
    for (var p = 0; p < transformed.length; p++) {
        point(transformed[p][0], transformed[p][1]);
    }
    
    strokeWeight(2);
    for (var p = 0; p < transformed.length; p++) {
        line(points[p][0], points[p][1], transformed[p][0], transformed[p][1]);
    }
};