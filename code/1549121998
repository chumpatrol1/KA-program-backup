/********************************************************
 * Click and drag to move the magnet.
 * Use the left and right arrow keys to rotate it.
 * 
 * What happens to the dipoles in the needle when you 
 * move the magnet near the needle?
*********************************************************/

var heat = 4;

var material1 = {
    x: 10,
    y: 240,
    width: 380,
    height: 80,
    interaction: 0.02,
    friction: 0.8
};

// Display
var gap = 3;
var needle = 8;
var nSize = gap + needle;

// Calculate the vector of the magnetic field at position x,y
var calculateField = function(x, y, magnet) {
    var dx = x - magnet.x1;
    var dy = y - magnet.y1;
    var theta1 = atan2(dy, dx) + 90;
    var f1 = magnet.strength / sqrt(dx*dx + dy*dy);

    dx = x - magnet.x2;
    dy = y - magnet.y2;
    var theta2 = atan2(dy, dx) - 90;
    var f2 = magnet.strength / sqrt(dx*dx + dy*dy);
    
    var mx = f1 * cos(theta1) + f2 * cos(theta2);
    var my = f1 * sin(theta1) + f2 * sin(theta2);
    return atan2(my, mx);
};

var BarMagnet = function(x, y, w, h, a) {
    this.x = x;
    this.y = y;
    this.width = w;
    this.height = h;
    this.angle = a;
    this.strength = 100;
    
    this.draw = function() {
        var w = this.width/2;
        var h = this.height/2;
        
        translate(this.x, this.y);
        rotate(this.angle);
        
        noStroke();
        fill(0, 0, 0, 100);
        rect(3-w, 3-h, this.width, this.height);
        
        strokeWeight(1);
        stroke(0, 0, 0);
        fill(200, 20, 20);
        rect(-w, -h, this.width, h);
        fill(20, 20, 200);
        rect(-w, 0, this.width, h);
        
        textSize(18);
        textAlign(CENTER, CENTER);
        fill(255, 255, 255);
        text("N", 0, -this.height/4);
        text("S", 0, this.height/4);
        
        resetMatrix();
    };
    
    this.updatePolePositions = function() {
        var s = (this.height / 2) * sin(this.angle);
        var c = (this.height / 2) * cos(this.angle);

        this.x1 = this.x + s;
        this.x2 = this.x - s;
        this.y1 = this.y - c;
        this.y2 = this.y + c;
    };
    
    this.rotate = function(angle) {
        this.angle += angle;
        this.updatePolePositions();
    };
    
    // Set up x1, y1, x2, y2
    this.updatePolePositions();
};

var Dipole = function(x, y, r, theta) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.rotation = 0;
    this.theta = theta;
    
    this.draw = function() {
        var t = this.theta;
        var dx = r/2 * sin(t);
        var dy = r/2 * cos(t);
        var x1 = this.x + dx;
        var y1 = this.y - dy;
        line(x-dx, y+dy, x1, y1);
        line(x1, y1, x1 + 3*cos(t+60), y1 + 3*sin(t+60));
        line(x1, y1, x1 + 3*cos(t+120), y1 + 3*sin(t+120));
    };
    
    this.move = function(friction) {
        this.theta += this.rotation;
        this.rotation +=  (random() - 0.5) * heat;
        this.rotation *= friction;
    };
    
    this.interact = function(that, force) {
        var r = force * sin(that.theta - this.theta);
        this.rotation += r;
        that.rotation -= r;
    };
    
    this.barInteract = function(magnet) {
        var vector = calculateField(this.x, this.y, magnet);
        this.theta = vector;
    };
};

var Material = function(parameters) {
    this.x = parameters.x;
    this.y = parameters.y;
    this.width = parameters.width;
    this.height = parameters.height;
    this.interaction = parameters.interaction;
    this.friction = parameters.friction;
    this.netVector = [0, 0];
    
    // Add poles
    this.magnets = [];
    this.nPoles = 0;
    this.poleX = floor(this.width / nSize);
    this.poleY = floor(this.height / nSize);
    var dx = 0.5*(this.width - this.poleX * nSize);
    var dy = 0.5*(this.height - this.poleY * nSize);

    for (var x=0; x < this.poleX; x++) {
        var magnetRow = [];
        for (var y=0; y < this.poleY; y++) {
            var mX = this.x + dx + (x + 0.5) * nSize;
            var mY = this.y + dy + (y + 0.5) * nSize;
            var theta = random() * 360;
            magnetRow.push(new Dipole(mX, mY, needle, theta));
            this.nPoles++;
        }
        this.magnets.push(magnetRow);
    }

    this.draw = function() {
        noStroke();
        fill(160, 160, 160);
        rect(this.x+3, this.y+3, this.width, this.height, 5);
        
        strokeWeight(1);
        stroke(30, 30, 30);
        fill(255, 255, 255);
        rect(this.x, this.y, this.width, this.height, 5);
        
        stroke(20, 20, 20);
        strokeWeight(2);
        
        this.netVector = [0, 0];
        
        for (var x = 0; x < this.poleX; x++) {
            for (var y = 0; y < this.poleY; y++) {
                var m = this.magnets[x][y];
                m.draw();
                this.netVector[0] += sin(m.theta);
                this.netVector[1] -= cos(m.theta);
            }
        }
        
        this.netVector[0] /= this.nPoles;
        this.netVector[1] /= this.nPoles;
        this.drawNetVector();
    };
    
    this.drawNetVector = function() {
        var strength = sqrt(this.netVector[0] * this.netVector[0] +
                            this.netVector[1] * this.netVector[1]);
        this.netVector[0] /= strength;
        this.netVector[1] /= strength;
        
        /*
        var vx = this.x + this.width/2 + 0.5;
        var vy = this.y + this.height/2 + 0.5;
        stroke(200, 0, 0, strength*255);
        strokeWeight(10);
        line(vx - this.netVector[0], vy - this.netVector[1],
             vx + this.netVector[0], vy + this.netVector[1]);
        */
             
        var width = 2 + round(strength * 6);
        var length = 1 + round(strength * 40);
        var arrow = 20 * strength;
        var arrowS = length - arrow * 1.4;
        
        stroke(20, 20, 20);
        strokeWeight(1);
        
        translate(this.x + this.width/2, this.y + this.height/2);
        rotate(-atan2(this.netVector[0], this.netVector[1]));
            
        fill(255*(1-strength), 255*(1-strength), 255);        
        beginShape();
        vertex(-width, 0);
        vertex( width, 0);
        vertex( width, arrowS);
        vertex( width + arrow/2, arrowS);
        vertex(0, length+2);
        vertex(-width - arrow/2, arrowS);
        vertex(-width, arrowS);
        vertex(-width, 0);
        endShape();
        
        fill(255, 255*(1-strength), 255*(1-strength));
        rect(-width, -length, width*2, length);
        resetMatrix();
        
    };
    
    this.interact = function() {
        for (var x = 0; x < this.poleX; x++) {
            for (var y = 0; y < this.poleY; y++) {
                var m = this.magnets[x][y];
                if (x > 0) {
                    m.interact(this.magnets[x-1][y], this.interaction);
                }
                if (y > 0) {
                    m.interact(this.magnets[x][y-1], this.interaction);
                }
            }
        }
    };
    
    this.barInteract = function(magnet) {
        for (var x = 0; x < this.poleX; x++) {
            for (var y = 0; y < this.poleY; y++) {
                this.magnets[x][y].barInteract(magnet);
            }
        }
    };
    
    this.update = function() {
        this.interact();
        
        for (var x = 0; x < this.poleX; x++) {
            for (var y = 0; y < this.poleY; y++) {
                var m = this.magnets[x][y];
                m.move(this.friction);
            }
        }
    };
};

var materials = [new Material(material1)];
var bar = new BarMagnet(200, 100, 25, 60, 0);

var draw = function() {
    background(230, 240, 240);
    stroke(0, 0, 0);
    
    for (var i=0; i<materials.length; i++) {
        materials[i].update();
        materials[i].draw();
    }
    
    bar.draw();
};

var mouseDragged = function() {
    bar.x += mouseX - pmouseX;
    bar.y += mouseY - pmouseY;
    bar.updatePolePositions();
    
    for (var i=0; i<materials.length; i++) {
        materials[i].barInteract(bar);
    }
};

var keyPressed = function() {
    // Rotate magnet
    if (keyCode === 37) {
        bar.rotate(-5);
    } else if (keyCode === 39) {
        bar.rotate(5);
    }
    
    for (var i=0; i<materials.length; i++) {
        materials[i].barInteract(bar);
    }
};