var subdivideGrid = function(grid) {
    var w = grid.length;
    var h = grid[0].length;
    var splitGrid = [];
    
    // Split grid
    var i, j;
    var row, newRow, p2, p1;
    
    // For each row, add an element between each existing element, which is the mean of its neighbours
    for (i = 0; i < w; i++) {
        newRow = [];
        row = grid[i];
        p1 = row[h - 1];
        
        for (j = 0; j < h; j++) {
            p2 = row[j];
            newRow.push((p1 + p2) / 2, p2);
            p1 = p2;
        }
        splitGrid.push(newRow);
    }
    
    //splitGrid.forEach(function(row) { println(row); });
    
    // Add a new row in between each row, which is the average of its neighbours
    var row2, row1 = splitGrid[0];
    h = splitGrid[0].length;
    
    for (i = w; i--;) {
        newRow = [];
        row2 = splitGrid[i];
        for (j = 0; j < h; j++) {
            newRow.push((row1[j] + row2[j]) / 2);
        }
        splitGrid.splice(i + 1, 0, newRow);
        row1 = row2;
    }
    
    //splitGrid.forEach(function(row) { println(row); });
    
    // Average grid
    // For each element average it with each of its neighbours
    w = splitGrid.length;
    var d = [[-1, 0], [1, 0], [0, -1], [0, 1]];
    var averageGrid = [];
    var v;
    
    for (i = 0; i < w; i++) {
        newRow = [];
        
        for (j = 0; j < h; j++) {
            v = splitGrid[i][j] +
                splitGrid[i][(j + 1) % h] +
                splitGrid[i][(j + h - 1) % h] +
                splitGrid[(i + 1) % w][j] +
                splitGrid[(i + w - 1) % w][j];
            v *= 0.2;
            newRow.push(v);
        }
        averageGrid.push(newRow);
    }
    
    return averageGrid;
};

//subdivideGrid([[4,8,12], [60, 80, 100], [100,200, 300]]);

// Return a 2D array of random numbers
var getRandomNumbers = function(n, m) {
    //n -= 1;
    //m -= 1;
    
    var grid = [];
    
    for (var i = 0; i < n; i++) {
        var row = [];
        for (var j = 0; j < m; j++) {
            row.push(random() * 255);
        }
        grid.push(row);
    }
    
    // Make grid wrap by adding first number to the end of every line
    /*
    for (var i = 0; i < n; i++) {
        grid[i].push(grid[i][0]);
    }
    // Add copying first row to the end
    grid.push(grid[0]);
    */
    
    grid = subdivideGrid(grid);
    grid = subdivideGrid(grid);
    grid = subdivideGrid(grid);
    grid = subdivideGrid(grid);
    
    return grid;
};

var grid = getRandomNumbers(10, 10);

var x1 = 20;
var y1 = 20;
var x, y, row;

var w = grid.length;
var h = grid[0].length;
/*
for (x = 0; x < w * 2; x++) {
    row = grid[x % w];
    for (y = 0; y < h * 2; y++) {
        stroke(row[y % h]);
        point(x + x1, y + y1);
    }
}
*/

var test2 = function() {
    var arr = [2,4,6,8,10,12,14,16,18];
    var len = sqrt(arr.length);
    
    var drawArr = function(arr, x, y, d, k) {
        fill(0);
        var dx = 0;
        var dy = 0;
        
        for (var i = 0; i < arr.length; i++) {
            text(k ? i : arr[i], x + dx, y + dy);
            if (i % len === len - 1) {
                dy += d;
                dx = 0;
            } else {
                dx += d;
            }
        }
    };
    
    drawArr(arr, 20, 20, 20);
    
    var arr2 = [];
    
    // Add new nodes between every node except those at the edge of the grid
    for (var i = 0; i < arr.length; i++) {
        if (i % len) {
            arr2.push((arr[i] + arr[i - 1]) / 2);
        }
        arr2.push(arr[i]);
    }
    
    var n = len;
    len = 2 * len - 1;
    drawArr(arr2, 120, 20, 20);
    
    // Add a row of new nodes between each existing node
    for (var i = n - 1; i > 0; i--) {
        for (var j = len; j--;) {
            println(i * len + j - len);
            arr2.splice(i * len, 0,
                (arr2[(i - 1) * len + j] + arr2[(i + 1) * len - 1]) / 2
            );
        }
    }
    
    drawArr(arr2, 20, 120, 20);
    drawArr(arr2, 150, 120, 20, 1);
    
    // Add edges and faces
    for (i = 0; i < arr2.length; i++) {
        if (i % len) {
            println(i + " " + (i - 1));
        }
        
        if (i >= len) {
            println(i + " " + (i - len));
        }
        
        // Faces
        if (i % len && i >= len) {
            //println(i + " " + (i - 1) + " " + (i - len - 1) + " " + (i - len));
        }
    }
    
};
test2();

draw = function() {
};
