 /*******************************************************
 * Drag the grey circles to change the position of the lines.
 * 
 * What is the relationship between the central angle and
 * the inscribed angle?
 * 
 * For more information, see:
 * https://www.khanacademy.org/math/geometry/circles/v/inscribed-and-central-angles
 ********************************************************/

// Colours
var colourOut = color(42, 180, 250);
var colourIn = color(18, 196, 65);
var colourCircle = color(255, 255, 255);

// Initial values
var radius = 160;
var arcSize = 40;
var angleA = 150;
var angleB = 260;
var angleC = 0;

// Slider
var sliderSize = 16;
var mouseOverSlider = false;

// Text
textSize(14);

// Functions
var drawCircle = function() {
    strokeWeight(2);
    noFill();
    stroke(colourCircle);
    ellipse(200, 200, 2*radius, 2*radius);
};

var writePoint = function(letter, angle, d) {
    var x = 200 + (radius + d) * cos(angle);
    var y = 200 + (radius + d) * sin(angle);
    text(letter, x, y);
};

var drawAngle = function(x1, y1, x2, y2, x3, y3, colour) {
    var angle1 = atan2(y1 - y2, x1 - x2) + 180;
    var angle2 = atan2(y1 - y3, x1 - x3) + 180;
    
    if (angle1 > angle2) { angle2 += 360; }
    //println(angle1 + " " + angle2);
    
    noFill();
    stroke(colour);
    strokeWeight(2);
    arc(x1, y1, arcSize, arcSize, angle1, angle2);
    
    var meanAngle = (angle1 + angle2) / 2;
    var tx = x1 + 0.85 * arcSize * cos(meanAngle);
    var ty = y1 + 0.85 * arcSize * sin(meanAngle);
    var angle = "" + round(10*(angle2 - angle1))/10;
    
    fill(colourCircle);
    text(angle, tx, ty);
    noFill();
    stroke(colourCircle);
    strokeWeight(1);
    ellipse(tx + textWidth(angle)/2 + 3, ty - textAscent() + 3, 4, 4);
};

var drawLines = function() {
    var Ax = 200 + radius * cos(angleA);
    var Ay = 200 + radius * sin(angleA);
    var Bx = 200 + radius * cos(angleB);
    var By = 200 + radius * sin(angleB);
    var Cx = 200 + radius * cos(angleC);
    var Cy = 200 + radius * sin(angleC);
    
    // Lines
    strokeWeight(3);
    stroke(colourOut);
    line(Ax, Ay, Bx, By);
    line(Ax, Ay, Cx, Cy);
    stroke(colourIn);
    line(Bx, By, 200, 200);
    line(Cx, Cy, 200, 200);
    
    // Points
    textAlign(CENTER, CENTER);
    fill(250, 250, 250);
    writePoint("A", angleA, 16);
    writePoint("B", angleB, 16);
    writePoint("C", angleC, 16);
    
    // Angles
    drawAngle(Ax, Ay, Bx, By, Cx, Cy, colourOut);
    drawAngle(200, 200, Bx, By, Cx, Cy, colourIn);
};

var drawSlider = function(slider, angle) {
    var x = 200 + radius * cos(angle);
    var y = 200 + radius * sin(angle);
    
    if (mouseOverSlider === slider ||
        (mouseX >= x - sliderSize/2 &&
         mouseX <= x + sliderSize/2 &&
         mouseY >= y - sliderSize/2 &&
         mouseY <= y + sliderSize/2 &&
         !mouseOverSlider)) {
            fill(160, 160, 160, 200);
            stroke(240, 240, 240);
            mouseOverSlider = slider;
        } else {
            fill(160, 160, 160, 100);
            stroke(200, 200, 200, 200);
            if (!mouseIsPressed) {
                mouseOverSlider = false;   
            }
        }
        
    strokeWeight(2); 
    ellipse(x, y, sliderSize, sliderSize);
};

var draw = function() {
    background(0, 0, 0);
    
    drawCircle();
    drawLines();
    drawSlider(1, angleA);
    drawSlider(2, angleB);
    drawSlider(3, angleC);
};

var mouseDragged = function() {
    if (mouseOverSlider) {
        var angle = atan2(mouseY - 200, mouseX - 200);
        if (mouseOverSlider === 1) {
            angleA = angle;
        } else if (mouseOverSlider === 2) {
            angleB = angle;
        } else if (mouseOverSlider === 3) {
            angleC = angle;
        }
    }
};

var mouseReleased = function () {
    mouseOverSlider = false;
};

var mouseOut = function(){
    mouseOverSlider = false;
};