/*************************************
 * 
**************************************/

var BACKGROUND = color(250, 250, 250);
var TILE_COLOUR = color(230, 230, 220);

// Square root of 3 is very useful for equilateral triangles
var R3 = sqrt(3);

/*************************************
 *  A hexagonal tile on the grid
**************************************/

var HexTile = function(x, y, r) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.h = r * R3 / 2;
    
    // Coordinates for drawing tile
    this.getCoords(this.x, this.y, this.r, this.tilt);
};

HexTile.prototype.draw = function() {
    if (this.mouseOver()) {
        var dx = mouseX - this.x;
        var dy = mouseY - this.y;
        var d = dx * dx + dy * dy;
        var tileHeight = this.h * 2;
        
        var neighbourPositions = [];
        for (var i = 0; i < 6; i++) {
            neighbourPositions.push([
                tileHeight * cos(60 * (i + 0.5)),
                tileHeight * sin(60 * (i + 0.5))
            ]);
        }
        
        // Angle around center
        var angle = atan2(dy, dx) / 60;
        if (angle < 0) { angle += 6 ; }
        
        // Which triangle are we in?
        var triangle = floor(angle);
        
        // How far around the triangle (0 - 1)
        var p2 = angle - triangle;
        
        fill(0);
        var maxR = this.h * this.h / 4;
        if (d > maxR) {
            var triangle2 = neighbourPositions[triangle];
            var d1 = d;
            var d2 = (triangle2[0] - dx) * (triangle2[0] - dx) +
                     (triangle2[1] - dy) * (triangle2[1] - dy);
            triangle2 = neighbourPositions[(triangle + (p2 < 0.5 ? 5 : 1)) % 6];
            var d3 = (triangle2[0] - dx) * (triangle2[0] - dx) +
                     (triangle2[1] - dy) * (triangle2[1] - dy);
         
            maxR *= 9;
            d1 = max(0, maxR - d1);
            d2 = max(0, maxR - d2);
            d3 = max(0, maxR - d3);
            var sum = d1 + d2 + d3;
            d1 /= sum;
            d2 /= sum;
            d3 /= sum;
         
            text("Center weight: " + d1.toFixed(3), 5, 48);
            text("Front weight: " + d2.toFixed(3), 5, 64);
            text("Edge weight: " + d3.toFixed(3), 5, 80);
            //text("Distance to vertex 1 " + sqrt(d2).toFixed(3), 5, 64);
            //text("Distance to vertex 2 " + sqrt(d3).toFixed(3), 5, 80);
        }
        
        d = sqrt(d);
        var h = this.h - d * cos((0.5 - p2) * 60);
        
        // Distance along line from center to edge as a proportion
        var p1 = 1 - h / this.h;

        textSize(13);
        textAlign(LEFT, BASELINE);
        text("Triangle " + triangle, 5, 16);
        text("Relative angle " + p2.toFixed(3), 5, 32);
        // text("Distance from edge " + p1.toFixed(3), 5, 48);
        // text("Distance from center " + d.toFixed(3), 5, 48);
    }
    
    fill(TILE_COLOUR);
    
    beginShape();
    for (var i = this.coords.length; i--;) {
        vertex(this.coords[i][0], this.coords[i][1]);
    }
    endShape(CLOSE);
    
    // Spokes
    for (i = this.coords.length; i--;) {
        line(this.coords[i][0], this.coords[i][1], this.x, this.y);
    }
};

// Store the coordinates of the hexagon vertices in the coords array
HexTile.prototype.getCoords = function(x, y, r, tilt) {
    this.coords = [];
    for (var theta = tilt ? 30 : 0; theta < 360; theta += 60) {
        this.coords.push([x + r * cos(theta), y + r * sin(theta)]);
    }
    
    // Calculate bounding box coordinates
    if (!this.tilt) {
        this.minX = x - r;
        this.maxX = x + r;
        
        r *= R3 / 2;
        this.minY = y - r;
        this.maxY = y + r;
    }
};

HexTile.prototype.mouseOver = function() {
    return mouseX >= this.minX && mouseX <= this.maxX &&
           mouseY >= this.minY && mouseY <= this.maxY &&
           (this.r - abs(mouseX - this.x)) * R3 > abs(mouseY - this.y);
};

// Assuming (x, y) is inside the hexagon, return the index of the triangle 
HexTile.prototype.getTriangle = function(x, y) {
    // Horrible concatenation of tertiary operators
    return (y < this.y ? 0 : 3) + 
           ((abs(x - this.x) * R3 < abs(y - this.y)) ? 1 : (x < this.x ? 0 : 2));
};

// Assuming (x, y) is inside the hexagon,
// Calculate the proportion of what vertices that point is
HexTile.prototype.getProportion = function(x, y) {
    var dx = x - this.x;
    var adx = abs(dx);
    var ady = abs(y - this.y);
    var index = (adx * R3 < ady) ? 1 : (x < this.x ? 0 : 2);
    
    var py = ady / this.h;
    var px;
    
    if (index !== 1) {
        px = adx / this.r - py / 2;
    } else {
        px = (py - R3 * dx / this.r) / 2;
        py = py - px;
    }
    
    index += y < this.y ? 0 : 3;
    
    //println(px + " " + py);
};

var tile = new HexTile(240, 200, 100);

/*************************************
 *      Main loop
**************************************/

draw = function() {
    background(BACKGROUND);
    tile.draw();
    //noLoop();
};

/*************************************
 *      Event handling
**************************************/
