
// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(235, 235, 235, 200);

var pointR = 10;
var gridSize = 18;
var snapSize = 9;

var CONTROL_POINT_SIZE = 12;
var MAX_RESOLUTION = 20;
var RESOLUTION = 40;

var toolbarX = width * 0.01;
var toolbarWidth = 128;
var toolbarHeight = 178;

var showing = {
    'Control points': true,
    'Control arms': false,
    String: false,
    Curve: true,
    "y = x^2": true,
    Labels: true,
    Equation: true
};

var dragX, dragY;
var selectedPoint = false;
var sliders;

var snap = function(n) {
    return round(n / snapSize) * snapSize;
};

var snapX = function(x) {
    return width / 2 - snap(width / 2 - x);
};

var snapY = function(y) {
    return height / 2 - snap(height / 2 - y);
};

/*********************************************************************
 * GUI Slider to vary parameters
**********************************************************************/

var Slider = function(x, y, width, min_v, max_v, current_v) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.held = false;
    
    this.ballD = CONTROL_POINT_SIZE;
    this.ballR = this.ballD / 2;
    
    this.min = min_v;
    this.max = max_v;
    this.scale = (max_v - min_v) / width;
    this.val = current_v || min_v;
    this.bx = this.x + (this.val - min_v) / this.scale;
    
    this.held = false;

    this.draw = function() {
        strokeWeight(2);
        stroke(PINK);
        line(this.x, this.y, this.bx, this.y);
    
        stroke(BLUE);
        line(this.bx, this.y, this.x + this.width, this.y);
    
        strokeWeight(1);
        stroke(255);
        fill(GREEN);
        ellipse(this.bx, this.y, this.ballD, this.ballD);

    };
    
    this.selected = function() {
        this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = this.min + round((x - this.x) * this.scale);
            return true;
        }
    };
  
    // This is used if you want to update the value in a way other
    // than using the slider (but want the slider to update).
    this.update = function(d) {
        this.val = constrain(this.val + d, this.min, this.max);
        this.bx = (this.val - this.min) / this.scale + this.x;
    };
};

/********************************************************
 *  GUI Button
*********************************************************/

var Button = function(x, y, w, h, name, clickF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(220, 220, 220, 250);
    this.highlightCol = color(250, 50, 50, 250);
    this.showing = true;
    
    var boxSize = this.h - 6;
    
    this.mouseover = function() {
        return (mouseX >= this.x && mouseX <= this.x + this.w &&
                mouseY >= this.y && mouseY <= this.y + this.h);
    };
    
    this.click = function() {
        showing[this.name] = !showing[this.name];
    };
    
    this.draw = function() {
        if (!this.showing) { return; }
        
        noStroke();
        if (this.mouseover() || this.selected) {
            fill(this.defaultCol);
        } else {
            noFill();
        }
        rect(this.x - 5, this.y, this.w, this.h + 1, 5);
        
        fill(10);
        textSize(13);
        textAlign(LEFT, CENTER);
        text(this.name, this.x + boxSize + 5, this.y + this.h/2);
        
        noFill();
        stroke(10);
        strokeWeight(1);
        rect(this.x, this.y + 3, boxSize, boxSize);
        
        if (showing[this.name]) {
            line(this.x, this.y + 3, this.x + boxSize, this.y + 3 + boxSize);
            line(this.x + boxSize + 1, this.y + 3, this.x + 1, this.y + 3 + boxSize);
        }
    };
};


/*********************************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
*********************************************************/

var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (selectedPoint === this || this.mouseover()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    fill(this.color);
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseover = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function() {
    this.x += mouseX - pmouseX;
    this.y += mouseY - pmouseY;
};

DraggablePoint.prototype.move = function() {
    this.x = snapX(mouseX + dragX);
    this.y = snapY(mouseY + dragY);
};

// Curve between by two points at (x1, y1) and (x2, y2),
// with a control point at (x3, y3)
var Curve = function(x1, y1, x2, y2, x3, y3) {
    this.p1 = new DraggablePoint(x1, y1);
    this.p2 = new DraggablePoint(x2, y2);
    this.p3 = new DraggablePoint(x3, y3);
    this.controlPoints = [this.p1, this.p2, this.p3];
    
    this.draw = function() {
        var p = sliders[0].val * 0.01;
        var x1 = lerp(this.p3.x, this.p1.x, p);
        var y1 = lerp(this.p3.y, this.p1.y, p);
        var x2 = lerp(this.p2.x, this.p3.x, p);
        var y2 = lerp(this.p2.y, this.p3.y, p);
        var x3 = lerp(x2, x1, p);
        var y3 = lerp(y2, y1, p);

        if (showing["y = x^2"]) {
            this.drawParabola();   
        }
        
        if (showing.Curve) {
            this.drawCurve();   
        }
        
        // Lines to control points
        if (showing['Control arms']) {
            strokeWeight(2);
            stroke(BLUE);
            line(this.p1.x, this.p1.y, x1, y1);
            line(x2, y2, this.p3.x, this.p3.y);
            stroke(PINK);
            line(x1, y1, this.p3.x, this.p3.y);
            line(this.p2.x, this.p2.y, x2, y2);
        }
        
        if (showing['Control points']) {
            this.drawControlPoints();
        }
        
        if (showing.Labels) {
            this.drawLabels();
        }
        
        if (showing.String) {
            strokeWeight(2);
            stroke(PINK);
            line(x2, y2, x3, y3);
            stroke(BLUE);
            line(x1, y1, x3, y3);
            
            strokeWeight(1);
            stroke(255);
            fill(GREY);
            var d = 4;
            quad(x1, y1 - d, x1 + d, y1, x1, y1 + d, x1 - d, y1);
            quad(x2, y2 - d, x2 + d, y2, x2, y2 + d, x2 - d, y2);
            
            if (showing.Labels) {
                fill(GREY);
                this.drawLabel("R", x1, y1, x2, y2);
                this.drawLabel("Q", x2, y2, x1, y1);
            }
        }
        
        stroke(255);
        fill(GREEN);
        strokeWeight(1);
        ellipse(x3, y3, pointR, pointR);
    };
    
    // Curve defined by string art
    this.drawCurve = function() {
        var x1 = this.p1.x;
        var y1 = this.p1.y;
        var x2 = this.p2.x;
        var y2 = this.p2.y;
        var x3 = this.p3.x;
        var y3 = this.p3.y;
        
        strokeWeight(4);
        stroke(GREEN);
        noFill();
        
        beginShape();
        for (var i = 0; i <= RESOLUTION; i++) {
            var p = i / RESOLUTION;
            var rx = lerp(x3, x1, p);
            var ry = lerp(y3, y1, p);
            var sx = lerp(x2, x3, p);
            var sy = lerp(y2, y3, p);
            vertex(lerp(sx, rx, p), lerp(sy, ry, p));
        }
        endShape();
    };
    
    // Draw y = x^2
    this.drawParabola = function() {
        strokeWeight(4);
        stroke(28, 173, 123, 128);
        noFill();
        
        for (var x = -1.6; x <= 1.6; x += 0.025) {
            var gx = width / 2 + x * gridSize * 10;
            var gy = height / 2 - x * x * gridSize * 10;
            point(gx, gy);
        }
    };
    
    this.drawControlPoints = function() {
        for (var i = 0; i < this.controlPoints.length; i++) {
            this.controlPoints[i].draw();
        }
    };

    this.drawLabels = function() {
        textSize(14);
        textAlign(CENTER, CENTER);
        
        var x1 = this.p1.x;
        var y1 = this.p1.y;
        var x2 = this.p2.x;
        var y2 = this.p2.y;
        var x3 = this.p3.x;
        var y3 = this.p3.y;
        
        fill(ORANGE);
        this.drawLabel("C", x1, y1, x3, y3);
        this.drawLabel("A", x2, y2, x3, y3);
        this.drawLabel("B", x3, y3, (x1 + x2)/2, (y1 + y2)/2);
        
        var p = sliders[0].val * 0.01;
        x1 = lerp(this.p3.x, this.p1.x, p);
        y1 = lerp(this.p3.y, this.p1.y, p);
        x2 = lerp(this.p2.x, this.p3.x, p);
        y2 = lerp(this.p2.y, this.p3.y, p);
        var x3 = lerp(x2, x1, p);
        var y3 = lerp(y2, y1, p);
        
        fill(GREEN);
        var angle = atan2(y1 - y2, x1 - x2) - 90;
        this.drawLabel("P", x3, y3, x3 + cos(angle), y3 + sin(angle));
    };
    
    this.drawLabel = function(name, x1, y1, x2, y2) {
        var dx = x1 - x2;
        var dy = y1 - y2;
        var d = sqrt(dx * dx + dy * dy);
        dx /= d;
        dy /= d;
        
        text(name, x1 + dx * 15, y1 + dy * 15);
    };
    
    this.selectPoint = function() {
        for (var i = 0; i < this.controlPoints.length; i++) {
            if (this.controlPoints[i].mouseover()) {
                selectedPoint = i;
                dragX = this.controlPoints[i].x - mouseX;
                dragY = this.controlPoints[i].y - mouseY;
            }
        }
    };
    
    this.mouseDrag = function() {
        if (selectedPoint !== false) {
            var p = this.controlPoints[selectedPoint];
            p.move();
        }
    };
};

/*********************************************************************
 * Creation of objects
*********************************************************************/

var createButtons = function() {
    var buttons = [];
    var x = toolbarX + 12;
    var y = toolbarX + 38;
    var w = 108;
    var h = 15;
    
    for (var opt in showing) {
        buttons.push(new Button(x, y, w, h, opt));
        y += 20;
    }
    
    return buttons;
};

var buttons = createButtons();
sliders = [
    new Slider(toolbarX + 14, toolbarX + 26, 101, 0, 100, 50)
];

var myCurve = new Curve(width/2 + gridSize * 10, height/2 - gridSize * 10, width/2, height/2, width/2 + gridSize * 5, height/2);

//var myCurve = new Curve(170, 50, 570, 50, 370, 350);

/*********************************************************************
 *  Draw functions
*********************************************************************/

var drawGUI = function() {
    noStroke();
    fill(TOOLBAR);
    rect(toolbarX, toolbarX, toolbarWidth, toolbarHeight, 8);
    
    textAlign(CENTER, CENTER);
    fill(10);
    textSize(13);
    var s = sliders[0];
    text("t = " + (s.val / 100),  s.x + s.width / 2, s.y - 15);
    
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].draw();   
    }
    
    textAlign(LEFT, CENTER);
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].draw();
    }
};

var colorText = function(txtArr, x, y) {
    for (var i = 0; i < txtArr.length; i++) {
        fill(txtArr[i][1]);
        
        if (txtArr[i].length > 2) {
            textSize(txtArr[i][2]);
        }
        
        var txt = txtArr[i][0];
        text(txt, x, y);
        x += textWidth(txt);
    }
};

var drawPointCoord = function(A, B, C, name, tx, ty) {
    var eq = [[name, GREEN], [" = ", GREY]];
    
    var n = A - 2 * B + C;
    if (n) {
        if (n === -1) {
            eq.push(["-", ORANGE]);    
        } else if (n !== 1) {
            eq.push(["" + round(20 * n)/20, ORANGE]);
        }
        
        eq.push(["t", PINK]);
        eq.push(["2", PINK, 10]);
        
        if (B - A > 0) {
            eq.push([" + ", GREY, 16]);
        } else if (B - A < 0) {
            eq.push([" - ", GREY, 16]);
        } else if (A > 0) {
            eq.push([" + ", GREY, 16]);
        } else if (A < 0) {
            eq.push([" - ", GREY, 16]);
        } else {
            eq.push(["", GREY, 16]);
        }
    }
    
    var n = 2 * (B - A);
    if (n) {
        if (n === -1) {
            eq.push(["-", ORANGE]);    
        } else if (n !== 1) {
            eq.push(["" + round(20 * abs(n))/20, ORANGE]);
        }
        eq.push(["t", PINK]);
        
        if (A > 0) {
            eq.push([" + ", GREY]);
        } else if (A < 0) {
            eq.push([" - ", GREY]);
        }
    }
    
    if (A) {
        eq.push(["" + abs(A), ORANGE]);
    }
    
    if (eq.length === 2) {
        eq.push([0, GREY]);
    }
    
    colorText(eq, tx, ty);
};

var drawEquation = function() {
    var equationH = 144;
    var equationW = 250;
    
    var tx = toolbarX + 8;
    var tdy = 24;
    var ty = height - equationH - toolbarX + 2;
    
    noStroke();
    fill(TOOLBAR);
    rect(toolbarX, height - equationH - toolbarX, equationW, equationH, 8);
    
    
    textSize(16);
    textAlign(LEFT, TOP);
    
    var Ax = round(2*(myCurve.p2.x - width / 2) / gridSize) / 20;
    var Ay = round(-2*(myCurve.p2.y - height / 2) / gridSize) / 20;
    var Bx = round(2*(myCurve.p3.x - width / 2) / gridSize) / 20;
    var By = round(-2*(myCurve.p3.y - height / 2) / gridSize) / 20;
    var Cx = round(2*(myCurve.p1.x - width / 2) / gridSize) / 20;
    var Cy = round(-2*(myCurve.p1.y - height / 2) / gridSize) / 20;
    
    //println(Ay + " " + By + " " + Cy);
    
    colorText([
        ["A", ORANGE],
        [" = ", GREY],
        ["(" + Ax + ", " + Ay + ")", GREY]
    ], tx, ty);
    ty += tdy;
    
    colorText([
        ["B", ORANGE],
        [" = ", GREY],
        ["(" + Bx + ", " + By + ")", GREY]
    ], tx, ty);
    ty += tdy;
    
    colorText([
        ["C", ORANGE],
        [" = ", GREY],
        ["(" + Cx + ", " + Cy + ")", GREY]
    ], tx, ty);
    ty += tdy;
    
    colorText([
        ["P", GREEN],
        [" = ", GREY],
        ["(1 - t)(1 - t)", BLUE],
        ["A", ORANGE],
        [" + 2", GREY],
        ["t", PINK],
        ["(1 - t)", BLUE],
        ["B", ORANGE],
        [" + ", GREY],
        ["t", PINK],
        ["2", PINK, 10],
        ["C", ORANGE, 16],
    ], tx, ty);
    ty += tdy;
    
    drawPointCoord(Ax, Bx, Cx, "Px", tx, ty);
    ty += tdy;
    drawPointCoord(Ay, By, Cy, "Py", tx, ty);
};


var drawGrid = function() {
    stroke(GRIDGREY);
    strokeWeight(1);
    
    var n = ceil(0.5 * width / gridSize);
    for (var x = -n; x < n; x++) {
        var gx = width / 2 + x * gridSize;
        line(gx, 0, gx, height);
    }
    
    n = ceil(0.5 * height / gridSize);
    for (var y = -n; y < n; y++) {
        var gy = height / 2 + y * gridSize;
        line(0, gy, width, gy);
    }
    
    // Axes
    stroke(GREY);
    line(width / 2, 0, width / 2, height);
    line(0, height / 2, width, height / 2);
    
    // Labels
    fill(GREY);
    textSize(11);
    
    textAlign(CENTER, TOP);
    n = ceil(0.25 * width / gridSize) * 2;

    for (var x = -n; x <= n; x += 2) {
        if (x) {
            var gx = width / 2 + x * gridSize;
            line(gx, height/2 - 2, gx, height/2 + 2);
            text("" + x / 10, gx, height / 2 + 5);
        }
    }
    
    textAlign(RIGHT, CENTER);
    n = ceil(0.25 * height / gridSize) * 2;
    for (var y = -n; y <= n; y += 2) {
        if (y) {
            var gy = height / 2 + y * gridSize;
            line(width/2 - 2, gy, width/2 + 2, gy);
            text("" + (-y/10),  width/2 - 5, gy);   
        }
    }
};


/*********************************************************************
 * Main loop
*********************************************************************/

draw = function() {
    background(BACKGROUND);
    
    drawGrid();
    myCurve.draw();
    drawGUI();
    if (showing.Equation) {
        drawEquation();
    }
};

/*********************************************************************
 * Event handling
*********************************************************************/

mousePressed = function() {
    myCurve.selectPoint();
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].selected();
    }
    for (var b = 0; b < buttons.length; b++) {
        if (buttons[b].mouseover()) {
            buttons[b].selected = true;
        }
    }
};

mouseReleased = function() {
    selectedPoint = false;
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].held = false;
    }
    for (var b = 0; b < buttons.length; b++) {
        if (buttons[b].mouseover() && buttons[b].selected) {
            buttons[b].click();
        }
        buttons[b].selected = false;
    }
};

mouseDragged = function() {
    myCurve.mouseDrag();
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].drag();
    }
};
