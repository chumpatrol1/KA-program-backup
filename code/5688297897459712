/******************************************
 * TODO:

*******************************************/

// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

// Convert focal length of field of view angle in degrees divided by 2
var focalLengthToAngle = {
    28: 32,
    50: 20,
    70: 14,
    120: 9,
    200: 5
};

// Ratio of gradients (tan of angle) relative to 28mm
var focalLengthToRatio = {
    28: 1,
    50: 1.717,
    70: 2.506,
    120: 3.945,
    200: 7.142
};

var objects;
var scenes = {
    'Mind world': function() {
        objects = [
        {
            name: 'Mountains',
            distance: 50000000, // 50km in mm
            images: [
                getImage('insideout/shot1_layer0blur0'),
                getImage('insideout/shot1_layer0blur10'),
                getImage('insideout/shot1_layer0blur20'),
                getImage('insideout/shot1_layer0blur40'),
                getImage('insideout/shot1_layer0blur80')
            ]
        },
        {
            name: 'Cliff',
            distance: 2000000, // 2km in mm
            images: [
                getImage('insideout/shot1_layer1blur0'),
                getImage('insideout/shot1_layer1blur10'),
                getImage('insideout/shot1_layer1blur20'),
                getImage('insideout/shot1_layer1blur40'),
                getImage('insideout/shot1_layer1blur80')
            ]
        },
        {
            name: 'Island',
            distance: 1000000, // 1km in mm
            images: [
                getImage('insideout/shot1_layer2blur0'),
                getImage('insideout/shot1_layer2blur10'),
                getImage('insideout/shot1_layer2blur20'),
                getImage('insideout/shot1_layer2blur40'),
                getImage('insideout/shot1_layer2blur80')
            ]
        },
        {
            name: 'Floor',
            distance: 4000, // 4m in mm
            images: [
                getImage('insideout/shot1_layer4blur0'),
                getImage('insideout/shot1_layer4blur10'),
                getImage('insideout/shot1_layer4blur20'),
                getImage('insideout/shot1_layer4blur40'),
                getImage('insideout/shot1_layer4blur80')
            ]
        },
        {
            name: 'Joy',
            distance: 4000, // mm
            images: [
                getImage('insideout/shot1_layer3blur0'),
                getImage('insideout/shot1_layer3blur10'),
                getImage('insideout/shot1_layer3blur20'),
                getImage('insideout/shot1_layer3blur40'),
                getImage('insideout/shot1_layer3blur80')
            ]
        }
    ];
    },
    'Head quarters': function() {
        objects = [
        {
            name: 'Walls',
            distance: 6000, // 6m in mm
            images: [
                getImage('insideout/shot2_layer0blur0'),
                getImage('insideout/shot2_layer0blur10'),
                getImage('insideout/shot2_layer0blur20'),
                getImage('insideout/shot2_layer0blur40'),
                getImage('insideout/shot2_layer0blur80')
            ]
        },
        {
            name: 'Emotions',
            distance: 5000, // 4m in mm
            images: [
                getImage('insideout/shot2_layer1blur0'),
                getImage('insideout/shot2_layer1blur10'),
                getImage('insideout/shot2_layer1blur20'),
                getImage('insideout/shot2_layer1blur40'),
                getImage('insideout/shot2_layer1blur80')
            ]
        },
        {
            name: 'Joy',
            distance: 1500, // 1.5m in mm
            images: [
                getImage('insideout/shot2_layer2blur0'),
                getImage('insideout/shot2_layer2blur10'),
                getImage('insideout/shot2_layer2blur20'),
                getImage('insideout/shot2_layer2blur40'),
                getImage('insideout/shot2_layer2blur80')
            ]
        },
        {
            name: 'Dashboard',
            distance: 1500, // 1.5m in mm
            images: [
                getImage('insideout/shot2_layer4blur0'),
                getImage('insideout/shot2_layer4blur10'),
                getImage('insideout/shot2_layer4blur20'),
                getImage('insideout/shot2_layer4blur40'),
                getImage('insideout/shot2_layer4blur80')
            ]
        },
        {
            name: 'Sadness',
            distance: 1000, // mm
            images: [
                getImage('insideout/shot2_layer3blur0'),
                getImage('insideout/shot2_layer3blur10'),
                getImage('insideout/shot2_layer3blur20'),
                getImage('insideout/shot2_layer3blur40'),
                getImage('insideout/shot2_layer3blur80')
            ]
        }
    ];
    },
   /* 'Pizza shop': function() {
        //focalLength = 18;
        objects = [
        {
            name: 'wall',
            distance: 4000, // mm
            images: [
                getImage('insideout/layer0blur0'),
                getImage('insideout/layer0blur10'),
                getImage('insideout/layer0blur20'),
                getImage('insideout/layer0blur40'),
                getImage('insideout/layer0blur80')
            ]
        },
        {
            name: 'shelves',
            distance: 3000, // mm
            images: [
                getImage('insideout/layer1blur0'),
                getImage('insideout/layer1blur10'),
                getImage('insideout/layer1blur20'),
                getImage('insideout/layer1blur40'),
                getImage('insideout/layer1blur80')
            ]
        },
        {
            name: 'girl',
            distance: 1000, // mm
            images: [
                getImage('insideout/layer2blur0'),
                getImage('insideout/layer2blur10'),
                getImage('insideout/layer2blur20'),
                getImage('insideout/layer2blur40'),
                getImage('insideout/layer2blur80')
            ]
        },
        {
            name: 'pizza',
            distance: 150, // mm
            images: [
                getImage('insideout/layer3blur0'),
                getImage('insideout/layer3blur10'),
                getImage('insideout/layer3blur20'),
                getImage('insideout/layer3blur40'),
                getImage('insideout/layer3blur80')
            ]
        }
];
    }*/
};

scenes['Mind world']();

var showing = {};

imageMode(CENTER);
angleMode = "degrees";

// GUI functions
{
/******************************************
 * Generic GUI component from which other
 * elements inherit
 * The default object is basically a button
*******************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
    this.activeCursor = HAND;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        cursor(this.activeCursor);
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/******************************************
 *      GUI Button
*******************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, {name: name});
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}
/******************************************
 *      GUI Slider
*******************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballH = h;
    this.ballW = 24;
    
    x += this.ballW * 0.5;
    w -= this.ballW;
    
    var h = this.ballH + (params.name ? 16 : 0);
    y += h - this.ballH;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    if (params.ticks) {
        this.ticks = params.ticks;
        this.max = params.ticks.length - 1;
    }
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? (this.max || 1) : params.max;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    
    this.snap = params.snap;
    this.jumpSize = params.jumpSize || pow(10, this.decimalPlaces);
    this.val = params.now === undefined ? this.min : params.now;
    this.setValue(this.val);
    this.trigger();
    this.activeCursor = 'ew-resize';
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    this.fade();
    /*
    if (this.snap && !this.selected) {
        this.slide();
    }
    */
    
    fill(250);
    textSize(13);
    
    if (this.name) {
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 12);
    }
    
    if (this.ticks) {
        textAlign(CENTER, TOP);
        textSize(11);
        strokeWeight(3);
        stroke(255);
        
        var n = this.ticks.length;
        var dx = this.w / (n - 1);

        for (var i = 0; i < n; i++) {
            var x = this.x + i * dx;
            text(this.ticks[i] +"", x, this.y + 13);
            point(x, this.y + 12);
        }
    }
    
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition * 0.1));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    strokeWeight(2);
    rect(this.bx - this.ballW * 0.5, this.y - this.ballH * 0.5, this.ballW, this.ballH, 6);
    
    stroke(lerpColor(color(this.stroke), BACKGROUND, this.transition * 0.1));
    line(this.bx, this.y - this.ballH * 0.5 + 2,
         this.bx, this.y + this.ballH * 0.5 - 2);
};

// Move to nearest tick
Slider.prototype.slide = function() {
    //Find where ball should be
    var bx = round(map(this.val, this.min, this.max, this.x, this.x2));
    
    // Move it there
    this.bx += (bx - this.bx) * 0.5;
};

Slider.prototype.mouseOver = function() {
    return (mouseX >= this.bx - this.ballW * 0.5 &&
            mouseX <= this.bx + this.ballW * 0.5 &&
            mouseY >= this.y - this.ballH * 0.5 &&
            mouseY <= this.y + this.ballH * 0.5);
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        
        // Actual value
        this.v = map(this.bx, this.x, this.x2, this.min, this.max);
        
        // Round value to allowed value
        this.val = round(this.v * this.jumpSize) / this.jumpSize;
        this.bx = map(this.val, this.min, this.max, this.x, this.x2);
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.v = this.val;
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};
}
/******************************************
 * GUI Label
*******************************************/
var Label = function(x, y, w, h, name, params) {
    this.x1 = x + 8;
    this.x2 = x + w - 8;
    this.y = y + h + 1;
    this.y2 = y + h / 2 + 3;
    this.name = name;
    
    this.fontSize = params.fontSize || 16;
    this.underline = !params.noUnderline;
    this.alignH = params.alignH || CENTER;
    this.alignV = params.alignV || CENTER;
    
    this.x = this.alignH === CENTER ? x + w / 2: this.x1;
};

Label.prototype.draw = function() {
    fill(20);
    textFont(sansFont, this.fontSize);
    textAlign(this.alignH, this.alignV);
    text(this.name, this.x, this.y2);
    
    if (this.underline) {
        strokeWeight(1);
        stroke(20);
        line(this.x1, this.y, this.x2, this.y);
    }
};
/******************************************
 *  Dropdown Menu
*******************************************/
{
var Dropdown = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    
    this.options = params.options || [];
    this.selectedOption = params.selectedOption || 0;
    this.dy = 20;
    this.boxW = 100;
    this.boxH = this.dy * (this.options.length + 1);
    this.x2 = this.x + this.w - this.boxW;
    
    this.showDropdown = false;
    this.trigger(this.options[this.selectedOption]);
};
Dropdown.prototype = Object.create(Button.prototype);

Dropdown.prototype.draw = function() {
    this.fade();

    fill(250);
    textFont(sansFont, 16);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + 4, this.y + this.h / 2);
    var y = this.y + this.h / 2;

    textFont(sansFont, 14);
    textAlign(RIGHT, CENTER);
    var x = this.x2 + this.boxW - 4;
    
    if (this.showDropdown) {
        // Show all options
        noStroke();
        fill(255);
        rect(this.x2, this.y, this.boxW, this.boxH, 5);
        
        // Highlight selected
        if (this.mouseOver()) {
            if (this.transition) {
                noStroke();
                fill(lerpColor(this.defaultCol, this.highlightCol, this.transition * 0.1));
                var index = this.getOption();
                rect(this.x2 + 1, this.y + index * this.dy, this.boxW - 1, this.dy, 5);
            }
        }

        strokeWeight(1);
        stroke(180);
        noFill();
        rect(this.x2, this.y, this.boxW, this.boxH, 5);
        var y2 = this.y + this.dy;
        line(this.x2, y2, this.x2 + this.boxW, y2);
        
        fill(10);
        text(this.options[this.selectedOption], x, y);
        
        for (var i = 0; i < this.options.length; i++) {
            y += this.dy;
            text(this.options[i], x, y);
        }
        
    } else {
        // Selection box
        if (this.transition) {
            fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        } else {
            fill(250);
        }
        strokeWeight(1);
        stroke(200);
        rect(this.x2, this.y, this.boxW, this.h, 5);
        
        fill(10);
        text(this.options[this.selectedOption], x, y);
    }
};

Dropdown.prototype.getOption = function() {
    return min(floor((mouseY - this.y) / this.dy), this.options.length);
};

Dropdown.prototype.mouseOver = function() {
    return (mouseX >= this.x2 && mouseX <= this.x2 + this.boxW &&
            mouseY >= this.y && mouseY <= this.y + (this.showDropdown ? this.boxH : this.h));
};

Dropdown.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        if (this.showDropdown) {
            var selected = this.getOption();
            if (selected) {
                this.selectedOption = selected - 1;
                this.trigger(this.options[this.selectedOption]);
            }
            this.showDropdown = false;
        } else {
            this.showDropdown = true;
        }
    } else {
        this.showDropdown = false;
    }
    this.selected = false;
};
}
/******************************************
 *      Toolbar
 * Container for displaying and handling
 * GUI elements like buttons and sliders.
*******************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
    this.labels = [];
};

Toolbar.prototype.draw = function() {
    if (!this.components.length) { return; }
    
    this.labels.forEach(function(p) { p.draw(); });
    
    var selected = false;
    this.components.forEach(function(p) {
        if (!p.showDropdown) {
            p.draw();
        } else {
            // Draw selected component later, so they are on top
            selected = p;
        }
    });
    
    if (selected) {
        selected.draw();
    }
    
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var w = params.w || this.w - 10;
    var component = new type(this.x + 5, this.y + this.h, w, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addLabel = function(name, params) {
    params = params || {};
    var h = params.h || 20;
    this.labels.push(new Label(this.x, this.y + this.h, this.w, h, name, params));
    this.h += h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.addRadioButtons = function(options, trigger, defaultOption) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var radioButtons = [];
    
    var triggerFunction = function() {
        if (!this.marked) {
            this.marked = true;
            
            // Deselected other buttons
            for (var i = 0; i < radioButtons.length; i++) {
                if (radioButtons[i] !== this) {
                    radioButtons[i].marked = false;
                }
            }
        }
        if (trigger) { trigger(this.name); }
    };
    
    for (var i = 0; i < options.length; i++) {
        var button = new RadioButton(x, y, w, 22, options[i], triggerFunction);
        radioButtons.push(button);
        y += 27;
        this.h += 27;
    }
    
    radioButtons[defaultOption || 0].trigger();
    
    this.components = this.components.concat(radioButtons);
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
}
/**************************************
 *      Camera object
 * Captures image of the scene
***************************************/

var Camera = {
    focalLength: 28,
    fstop: 2.8,
    imagePlane: 28,
    height: objects[0].images[0].height,
    
    draw: function(x, y, w, h) {
        var w2 = (x + width) * 0.5;
        var h2 = y + this.height * 0.5;
     
        var n = objects.length;
        for (var i = 0; i < n; i++) {
            var obj = objects[i];
            if (obj.blur !== undefined) {
                pushMatrix();
                if (obj.scale) {
                    translate(w2, h2);
                    scale(obj.scale, obj.scale);
                }
                image(obj.images[obj.blur], 0, 0);
                popMatrix();
            }
        }
    },
    
    getImagePlane: function(p) {
        // Convert number from 0 - 1 to image plane distance
        return (1.1 - p * 0.1) * this.focalLength;
    },
    
    findFocusDistance: function(aperture, fstop, imagePlane) {
        // How much the lens bends the light
        var refractionAngle = atan(fstop * 2);
        
        // Angle of ray from image plane to aperture
        var focalAngle = atan(imagePlane / aperture);
        
        // Angle from object in focus to lens top
        var objectAngle = 90 + refractionAngle - focalAngle;

        // Distance to object in focus (o')
        return aperture * tan(objectAngle);
    },
    
    findBlurring: function() {
        // Radius of aperture
        var aperture = 0.5 * this.focalLength / this.fstop;

        // Distance to object in focus (o')
        var focusDistance = this.findFocusDistance(
            aperture, this.fstop, this.imagePlane);

        // Calculate scale relative to 28mm
        this.scale = tan(focalLengthToAngle[28]) / tan(focalLengthToAngle[this.focalLength]);

        var n = objects.length;
        
        // Keep closest object the same height
        var stableDistance = objects[n - 1].distance;
        var ratio = focalLengthToRatio[this.focalLength];
        var moveBack = (ratio - 1) * stableDistance;

        // Calculate blur radius for each object
        var A = aperture * this.focalLength;
        for (var i = 0; i < n; i++) {
            var obj = objects[i];
            var d = obj.distance;
            
            obj.scale = d / (d + moveBack) * ratio;
            
            d += moveBack;
            
            // Radius of CoC
            var r = abs(A * (focusDistance - d) / (focusDistance * (d - this.focalLength)));
            
            if (r > 0.4) {
                obj.blur = 3;
            } else if (r > 0.2) {
                obj.blur = 2;
            } else if (r > 0.1) {
                obj.blur = 1;
            } else {
                obj.blur = 0;
            }
            
        }
    }
};

/**************************************
 *  Build controls
***************************************/

var controls = [];

var buildControls = function() {
    var controlsW = 144;
    var controlsX = (width - controlsW * 3) / 4;
    var controlsDX = controlsX + controlsW;
    var controlsY = height - 48;
    
    var sceneSelector = new Dropdown(3, 5, 160, 20, {
        name: "Scene:",
        options: [
            "Mind world",
            "Head quarters",
            /*"Pizza shop"*/
        ],
        trigger: function(scene) {
            scenes[scene]();
            Camera.findBlurring();
        }
    });
    
    var fstopControl = new Slider(
        controlsX, controlsY, controlsW, 14, {
            name: 'F-stop',
            ticks: [2.8, 4, 5.6, 8, 11, 16],
            snap: true,
            trigger: function() {
                var fStop = this.ticks[this.val];
                if (fStop !== Camera.fstop) {
                    Camera.fstop = fStop;
                    Camera.findBlurring();
                }
            }
        }
    );
    
    var focusControl = new Slider(
        controlsX + controlsDX * 2, controlsY, controlsW, 14, {
            name: 'Focus (m)',
            min: 0,
            max: 100,
            now: 100,
            decimalPlaces: 1,
            ticks: [0.5, 0.7, 1, 1.5, 5, '∞'],
            trigger: function() {
                //Camera.focus = norm(this.v, this.max, this.min) * 8;
                Camera.imagePlane = Camera.getImagePlane(this.val * 0.01);
                Camera.findBlurring();
            }
        }
    );
    
    var findFocusPoints = function() {
        // Based on an fstop of 2.8
        var aperture = 0.5 * Camera.focalLength / 2.8;
        var distances = [];
        
        for (var i = 0; i < 1; i += 0.2) {
            var imagePlane = Camera.getImagePlane(i);
            var d = Camera.findFocusDistance(aperture, 2.8, imagePlane) * 0.001;
            
            var multiple = 1;
            if (d < 0.35) { multiple = 100; }
            else if (d < 0.9) { multiple = 10; }
            else if (d < 1.4) { multiple = 5; }
            else if (d < 1.9) { multiple = 2; }
            else if (d > 5) { multiple = 0.2; }
            
            distances.push(round(d * multiple) / multiple);
        }
        
        distances.push('∞');
        focusControl.ticks = distances;
    };
    
    var focalLengthControl = new Slider(
        controlsX + controlsDX, controlsY, controlsW, 14, {
            name: 'Focal length (mm)',
            ticks: [28, 50, 70, 120, 200],
            snap: true,
            trigger: function() {
                var focalLength = this.ticks[this.val];
                if (focalLength !== Camera.focalLength) {
                    Camera.focalLength = focalLength;
                    focusControl.trigger();
                    findFocusPoints();
                }
            }
        }
    );
    
    controls = [sceneSelector, fstopControl, focalLengthControl, focusControl];
};
buildControls();

/**************************************
 *  Main loop
***************************************/

var topBar = 32;

draw = function() {
    background(0);
    cursor('default');
    Camera.draw(0, topBar, 600, height);
    
    noStroke();
    fill(0);
    rect(0, 0, width, topBar);
    rect(0, topBar + Camera.height, width, height);
    
    controls.forEach(function(p) { p.draw(); });
};

/**************************************
 *  Event handling
***************************************/
{
mousePressed = function() {
    controls.forEach(function(p) { p.mousePressed(); });
};

mouseDragged = function() {
    controls.forEach(function(p) { p.mouseDragged(); });
};

mouseReleased = function() {
    controls.forEach(function(p) { p.mouseReleased(); });
};

mouseOut = mouseReleased;
}
