/*****************************************************
 * Use spacebar to play/pause the simulation.
*****************************************************/

// How much sugar agents eat each turn
var METABOLIC_RATE = 4;

// Amount sugar grows in a turn
var SUGAR_GROWTH = 1;

// Maximum amount of sugar a tile can hold
var SUGAR_MAX_AMOUNT = 200;

var running = true;

var randFromArray = function(arr) {
    return arr[floor(random(arr.length))];
};

/*****************************************************
 *  Agent
 * A being who lives in the world
*****************************************************/

var Agent = function(tile) {
    this.tile = tile;
    this.sugar = 0;
};

// Agents' AI inasmuch as they have any, lives here
Agent.prototype.update = function() {
    this.sugar -= METABOLIC_RATE;
    
    // If we're hungry and have sugar, we can eat up to 2 sugars
    var eatenSugar = min(2, min(this.sugar, this.hunger));
    this.hunger -= eatenSugar;
    this.sugar -= eatenSugar;
    
    if (this.tile.sugar === 0) {
        // No food here so look elsewhere
        this.searchSurroundings();
    }
};

Agent.prototype.searchSurroundings = function() {
    // Look at the neighbouring tiles, and move to the one with the most food
    
    var maxFood = -1;
    var tiles = this.tile.neighbours;
    var i, foodAmount, moveToTile;
    
    for (i = tiles.length; i--;) {
        foodAmount = tiles[i].sugar + random();
        if (foodAmount > maxFood) {
            maxFood = foodAmount;
            moveToTile = tiles[i];
        }
    }

    this.tile = moveToTile;
};

/*************************************
 *  Tile object
 * A region of territory in the world.
 * Contains sugar for agents to collect
**************************************/

var Tile = function(x, y) {
    this.x = x;
    this.y = y;
    this.neighbours = [];
    
    // Set initial sugar values
    this.sugar = 16;
    this.setColor();
};

Tile.prototype.update = function() {
    if (this.sugar < SUGAR_MAX_AMOUNT) {
        this.sugar += SUGAR_GROWTH;
        this.setColor();
    }
};

Tile.prototype.setColor = function() {
    this.color = color(this.sugar * 0.1, this.sugar, this.sugar * 0.3);
};

/*************************************
 *  The world is a (n, m) grid of tiles
 * where the agents live
**************************************/

var world = {
    tileSize: 12,
    time: 0,
    agents: [],
    tiles: [], 
    
    init: function() {
        this.cols = width / this.tileSize;
        this.rows = height / this.tileSize;

        var x, y, row;
        var size = this.tileSize;
        this.tiles = [];
    
        // Create a 2D grid of tiles collected in a 1D array   
        for (y = 0; y < this.rows; y++) {
            for (x = 0; x < this.cols; x++) {
                this.tiles.push(new Tile(x * size, y * size));
            }
        }
        
        // Add neighbours
        var tile, tile2, yIndex;
        
        for (y = 0; y < this.rows; y++) {
            yIndex = y * this.cols;
            
            for (x = 0; x < this.cols; x++) {
                var tile = this.tiles[yIndex + x];
                tile2 = this.tiles[yIndex + ((x + 1) % this.cols)];
                tile.neighbours.push(tile2);
                tile2.neighbours.push(tile);

                tile2 = this.tiles[((y + 1) % this.rows) * this.cols + x];
                tile.neighbours.push(tile2);
                tile2.neighbours.push(tile);
            }
        }
        
        this.addAgents(40);
    },
    
    addAgents: function(n) {
        var numTiles = this.tiles.length;
        for (var i = 0; i < n; i++) {
            var r = floor(random() * numTiles);
            this.agents.push(new Agent(this.tiles[r]));
        }
    },
    
    draw: function() {
        var i;
        var size = this.tileSize;
        noStroke();
        
        for (var i = this.tiles.length; i--;) {
            fill(this.tiles[i].color);
            rect(this.tiles[i].x, this.tiles[i].y, size, size);
        }
        
        var agent;
        var s = size * 0.5;
        var s2 = size * 0.6;
        for (i = this.agents.length; i--;) {
            agent = this.agents[i];
            fill(255 - agent.sugar, 0, agent.sugar);
            ellipse(agent.tile.x + s, agent.tile.y + s, s2, s2);
        }
    },
    
    update: function() {
        this.time++;
        for (var i = this.tiles.length; i--;) {
            this.tiles[i].update();
        }
        
        // Update agents
        // Find tile with the most food in the vicinity
        // Move there
        // Deal with collisions
        // Collect sugar
        // Eat sugar
        // Divide if possible
        // Deal with death
        
        /*

        for (var i = this.agents.length; i--;) {
            this.agents[i].update();
            if (this.agents[i].hunger >= MAX_HUNGER) {
                this.agents.splice(i, 1);
            } else if (this.agents[i].pregnant) {
                // New agents are born
                this.agents[i].pregnant = false;
                this.agents.push(new Agent(this.agents[i].tile));
            }
        }
        */
    }
};

/*************************************
 *      Set-up
**************************************/

world.init();

/*************************************
 *      Main loop
**************************************/

draw = function() {
    if (running) {
        world.update();
    }
    //world.drawNutrients();
    world.draw();
    
    fill(255);
    text("Time: " + world.time, 8, 16);
    text("Agents: " + world.agents.length, 8, 32);
};

/*************************************
 *      Event handling
**************************************/

keyPressed = function() {
    //println(keyCode);
    if (keyCode === 32) {
        running = !running;
    }
};
