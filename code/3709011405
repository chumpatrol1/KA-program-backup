// TODO: Update colour picker

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR =  color(250);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var noiseImageWidth = 160;
var noiseImageHeight = 160;

var showing = {
    'Use color': true
};

/*************************************************
 * Generic GUI component from which other elements inherit
 * The default object is basically a button
**************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    
    if (updateFunction) {
        this.trigger = updateFunction.bind(this);
    }
    
    this.selected = false;
    this.disabled = false;
    this.transition = 0;
};

GUI_Component.prototype.draw = function() {
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && !this.disabled && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    // To be over-written
};

GUI_Component.prototype.fade = function() {
    if (this.selected || this.mouseOver()) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};
}
/*******************************************************
 *  GUI Button
********************************************************/
{
var Button = function(x, y, w, h, params) {
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    this.defaultCol = TOOLBAR;
    this.highlightCol = params.highlightCol || color(210, 210, 210, 250);
    if (params.filled) {
        this.makeFilled();
    }
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.drawFilled = function() {
    this.fade();
    
    if (this.disabled) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function() {
    this.draw = this.drawFilled;
    this.defaultCol = color(0, 0, 0, 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, { name: name });
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.trigger = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(20);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2 + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);

    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1, this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};

var RadioButton = function(x, y, w, h, name, trigger) {
    Button.call(this, x, y, w, h, {name: name, trigger: trigger});
    this.r = this.h - 6;
    this.cx = this.x + this.r / 2 + 5;
    this.cy = this.y + this.h / 2;
    this.marked = false;
};
RadioButton.prototype = Object.create(Button.prototype);

RadioButton.prototype.draw = function() {
    this.fade();
    
    if (this.transition) {
        noStroke();
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        rect(this.x, this.y, this.w, this.h + 1, 4);
    }
    
    fill(10);
    textFont(sansFont, 15);
    textAlign(LEFT, CENTER);
    text(this.name, this.cx + this.r /2 + 4, this.cy + 1);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    ellipse(this.cx, this.cy, this.r, this.r);
    
    if (this.marked) {
        fill(10);
        ellipse(this.cx, this.cy, this.r / 2, this.r / 2);
    }
};
}
/*************************************************
 * GUI Slider
**************************************************/
{
var Slider = function(x, y, w, h, params) {
    // Size of ball
    this.ballR = 12;
    this.ballD = this.ballR * 2;
    
    x += this.ballR;
    w -= this.ballR * 2;
    
    var h = this.ballD + (params.name ? 16 : 0);
    y += h - this.ballR;
    
    GUI_Component.call(this, x, y, w, h, params.name, params.trigger);
    
    this.x2 = x + w;
    this.fill = params.fill || color(240);
    this.stroke = params.stroke || color(180);
    
    this.min = params.min || 0;
    this.max = params.max === undefined ? 1 : params.max;
    this.val = params.now === undefined ? this.min : params.now;
    this.decimalPlaces = params.decimalPlaces === undefined ? 0 : params.decimalPlaces;
    this.setValue(this.val);
    this.trigger();
};
Slider.prototype = Object.create(GUI_Component.prototype);

Slider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(lerpColor(color(this.fill), color(this.stroke), this.transition / 10));
    stroke(this.stroke);
    strokeWeight(3);
    line(this.x, this.y, this.x2, this.y);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    
    fill(20);
    textSize(11);
    textAlign(CENTER, CENTER);
    text("" + this.val, this.bx, this.y);
};

Slider.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
};

Slider.prototype.mousePressed = function() {
    if (this.mouseOver()) {
        this.selected = true;
        return true;
    }
};

Slider.prototype.mouseDragged = function() {
    if (this.selected) {
        this.bx = constrain(mouseX, this.x, this.x2);
        var p = pow(10, this.decimalPlaces);
        this.val = round(map(this.bx, this.x, this.x2, this.min, this.max) * p) / p;
        this.trigger();
        return true;
    }
};

Slider.prototype.setValue = function(v) {
    this.val = constrain(v, this.min, this.max);
    this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    this.trigger();
};

var ColorSlider = function(x, y, w, h, params) {
    Slider.call(this, x, y, w, h, params);
    this.saturation = params.saturation || 200;
    this.brightness = params.brightness || 180;
    this.setColor();
};
ColorSlider.prototype = Object.create(Slider.prototype);

ColorSlider.prototype.setColor = function() {
    colorMode(HSB);
    this.color = color(this.val, this.saturation, this.brightness);
    colorMode(RGB);
    this.R = red(this.color);
    this.G = green(this.color);
    this.B = blue(this.color);
};

ColorSlider.prototype.draw = function() {
    if (this.name) {
        fill(20);
        textSize(13);
        textAlign(CENTER, BASELINE);
        text(this.name,  this.x + this.w / 2, this.y - 15);
        //text(this.name + ": " + this.val,  this.x + this.w / 2, this.y - 14);
    }
    
    this.fade();
    fill(this.color);
    strokeWeight(4);
    stroke(this.stroke);
    line(this.x, this.y, this.x2, this.y);
    stroke(250);
    strokeWeight(1);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
};

ColorSlider.prototype.trigger = function() {
    this.setColor();
};

}
/*************************************************
 * GUI Label
**************************************************/
var Label = function(x, y, w, h, name) {
    this.x = x + w / 2;
    this.x1 = x + 8;
    this.x2 = x + w - 8;
    this.y = y + h - 2;
    this.y2 = y + h / 2;
    this.name = name;
};

Label.prototype.draw = function() {
    fill(20);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x, this.y2);
    
    strokeWeight(1);
    stroke(20);
    line(this.x1, this.y, this.x2, this.y);
};
/*************************************************
 *      Toolbar
 *  Like GUI but is displayed and has methods for
 * adding components like buttons and sliders.
**************************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 8;
    this.components = [];
    this.labels = [];
};

Toolbar.prototype.draw = function() {
    fill(250);
    strokeWeight(1);
    stroke(180);
    rect(this.x, this.y, this.w, this.h, 8);
   
    this.components.forEach(function(p) { p.draw(); });
    this.labels.forEach(function(p) { p.draw(); });
};

Toolbar.prototype.add = function(type, params) {
    params = params || {};
    var h = params.h || 20;
    var component = new type(this.x + 5, this.y + this.h, this.w - 10, h, params);
    this.components.push(component);
    this.h += component.h + 8;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        var button = new CheckBox(x, y, w, h, opt);
        this.components.push(button);
        y += h + 5;
        this.h += h + 5;
    }
    
    this.h += 2;
};

Toolbar.prototype.addLabel = function(name) {
    var h = 20;
    this.labels.push(new Label(this.x, this.y + this.h, this.w, h, name));
    this.h += h + 8;
};

Toolbar.prototype.addRadioButtons = function(options, trigger, defaultOption) {
    var x = this.x + 3;
    var y = this.y + this.h + 2;
    var w = this.w - 6;
    var radioButtons = [];
    
    var triggerFunction = function() {
        if (!this.marked) {
            this.marked = true;
            
            // Deselected other buttons
            for (var i = 0; i < radioButtons.length; i++) {
                if (radioButtons[i] !== this) {
                    radioButtons[i].marked = false;
                }
            }
        }
        if (trigger) { trigger(this.name); }
    };
    
    for (var i = 0; i < options.length; i++) {
        var button = new RadioButton(x, y, w, 22, options[i], triggerFunction);
        radioButtons.push(button);
        y += 27;
        this.h += 27;
    }
    
    radioButtons[defaultOption || 0].trigger();
    
    this.components = this.components.concat(radioButtons);
    this.h += 2;
};

Toolbar.prototype.mousePressed = function() {
    this.components.forEach(function(p) { p.mousePressed(); });
};

Toolbar.prototype.mouseReleased = function() {
    this.components.forEach(function(p) { p.mouseReleased(); });
};

Toolbar.prototype.mouseDragged = function() {
    this.components.forEach(function(p) { p.mouseDragged(); });
};
}
/*************************************************
 * Grid functions
**************************************************/

var subdivideGrid = function(grid) {
    var w = grid.length;
    var h = grid[0].length;
    var splitGrid = [];
    
    // Split grid
    var i, j;
    var row, newRow, p2, p1;
    
    // For each row, add an element between each existing element, which is the mean of its neighbours
    for (i = 0; i < w; i++) {
        newRow = [];
        row = grid[i];

        for (j = 0; j < h; j++) {
            p1 = row[j];
            p2 = row[(j + 1) % h];
            newRow.push(p1, (p1 + p2) * 0.5);
            p1 = p2;
        }
        splitGrid.push(newRow);
    }
    
    //splitGrid.forEach(function(row) { println(row); });
    
    // Add a new row in between each row, which is the average of its neighbours
    var row2, row1 = splitGrid[0];
    h = splitGrid[0].length;
    
    for (i = w; i--;) {
        newRow = [];
        row2 = splitGrid[i];
        for (j = 0; j < h; j++) {
            newRow.push((row1[j] + row2[j]) / 2);
        }
        splitGrid.splice(i + 1, 0, newRow);
        row1 = row2;
    }
    
    //splitGrid.forEach(function(row) { println(row); });
    
    // Average grid
    // For each element average it with each of its neighbours
    w = splitGrid.length;
    var d = [[-1, 0], [1, 0], [0, -1], [0, 1]];
    var averageGrid = [];
    var v;
    
    for (i = 0; i < w; i++) {
        newRow = [];
        
        for (j = 0; j < h; j++) {
            v = splitGrid[i][j] +
                splitGrid[i][(j + 1) % h] +
                splitGrid[i][(j + h - 1) % h] +
                splitGrid[(i + 1) % w][j] +
                splitGrid[(i + w - 1) % w][j];
            v *= 0.2;
            newRow.push(v);
        }
        averageGrid.push(newRow);
    }
    
    return averageGrid;
};

// Functions for generating original grid pattern
var patterns = {
    Random: function() { return random() * 255; },
    Checkerboard: function(x, y) {
        return 255 * ((x < 5) ^ (y < 5));
    },
    Circle: function(x, y) {
        var d = dist(5, 5, x, y);
        return 128 + sin(d * 120) * 127;
    },
    Wave: function(x, y) {
        //return 128 + sin(y * 72 + x * 180) * 127;
        return 128 + sin(y * 72 - sin(x * 72) * 36) * 127;
    }    
};

var patternNames = ['Random', 'Checkerboard', 'Circle', 'Wave'];

var subdivisions = 0;

var NoiseImage = function(x, y, w, h, octaves) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.octaves = octaves;
    this.amplitude = 1;
    
    this.getGrid('Random');
};

NoiseImage.prototype.draw = function() {
    strokeWeight(1);
    stroke(10);
    fill(200);
    rect(this.x - 1, this.y - 1, this.w + 1, this.h + 1);
    if (this.image) {
        image(this.image, this.x, this.y);
    }
};

NoiseImage.prototype.getGrid = function(type) {
    this.grid = [];
    var n = 10;
    var m = 10;
    var patternFunction = patterns[type];
    
    for (var x = 0; x < n; x++) {
        var row = [];
        for (var y = 0; y < m; y++) {
            row.push(patternFunction(x, y));
        }
        this.grid.push(row);
    }
    
    this.subdivideGrid();
    this.getImage();
};

NoiseImage.prototype.subdivideGrid = function() {
    this.subGrid = this.grid;
    for (var i = 0; i < subdivisions; i++) {
        this.subGrid = subdivideGrid(this.subGrid);
    }
};

NoiseImage.prototype.getImage = function() {
    var grid = this.subGrid;
    var gw = grid.length;
    var gh = grid[0].length;
    var d = gw / this.w;
    var h = gh / this.d;
    this.values = [];

    noStroke();
    fill(0);
    rect(this.x, this.y, this.w, this.h);

    loadPixels();
    var p = imageData.data;
    if (!p) { return; }

    var i, j, ix, ix2, iy, px, py, px1, px2, index;
    var v1, v2, v3;
    d *= 1 << this.octaves;

    for (i = 0; i < this.w; i++) {
        px = (i * d) % gw;      // Pixel in grid
        ix = px | 0;            // Index of row in grid
        
        px1 = grid[ix];
        px2 = grid[(ix + 1) % gw];
        ix = px - ix;           // How far along tile in grid
        ix2 = 1 - ix;

        for (j = 0; j < this.h; j++) {
            py = (j * d) % gh;
            iy = py | 0;
            py -= iy;
            
            v1 = px1[iy] * ix2 + px2[iy] * ix;
            v2 = px1[(iy + 1) % gh] * ix2 + px2[(iy + 1) % gh] * ix;
            v3 = lerp(v1, v2, py);
            
            index = (this.y + j) * width + this.x + i << 2;
            
            this.values.push(v3);
            p[index++] = v3;
            p[index++] = v3;
            p[index++] = v3;
        }
    }
    
    updatePixels();
    
    this.image = get(this.x, this.y, this.w, this.h);
};

var drawSumImage = function(x, y, images, colour) {
    loadPixels();
    var p = imageData.data;
    if (!p) { return; }

    var n = images.length;
    var i, sumScales = 0;
    for (i = 0; i < n; i++) {
        sumScales += images[i].amplitude;
    }

    var scales = [];
    for (i = 0; i < n; i++) {
        scales.push(images[i].amplitude / sumScales);
    }

    var w = images[0].w;
    var h = images[0].h;

    strokeWeight(1);
    stroke(10);
    fill(200);
    rect(x - 1, y - 1, w + 1, h + 1);

    if (!sumScales) { return; }

    var j, k, v, index;

    var c = 0;

    for (i = 0; i < w; i++) {
        for (j = 0; j < w; j++) {
            v = 0;
            for (k = 0; k < n; k++) {
                v += images[k].values[c] * scales[k];
            }
            index = (y + j) * width + x + i << 2;
            v /= 255;
            p[index++] = v * colour.R | 0;
            p[index++] = v * colour.G | 0;
            p[index++] = v * colour.B | 0;
            c++;
        }
    }

    updatePixels();
};

/*************************************************
 *  Set-up images
**************************************************/

var imageY = 20;
var imageX = 10;

var noiseImages = [];
var imageXs = [imageX];
for (var i = 0; i < 3; i++) {
    noiseImages.push(new NoiseImage(imageX, imageY, noiseImageWidth, noiseImageHeight, i));
    imageX += noiseImageWidth + 20;
    imageXs.push(imageX);
}

/*************************************************
 *  Toolbars
**************************************************/

var toolbars = [];
var toolbarY = imageY + noiseImageHeight + 10;

var updatePatternFunc = function(noiseImage) {
    return function(name) {
        noiseImage.getGrid(name);
    };
};

var updateAmplitudeFunc = function(noiseImage) {
    return function() {
        noiseImage.amplitude = this.val;
    };
};

var resolutionNames = ['Low', 'Medium', 'High'];
for (var i = 0; i < 4; i++) {
    var toolbar = new Toolbar(imageXs[i], toolbarY, noiseImageWidth);
    
    if (i < 3) {
        toolbar.addLabel(resolutionNames[i] + " resolution");
        toolbar.addRadioButtons(
            patternNames,
            updatePatternFunc(noiseImages[i])
        );
        toolbar.add(Slider, {
            name: 'Amplitude',
            max: 1,
            now: 1,
            decimalPlaces: 2,
            trigger: updateAmplitudeFunc(noiseImages[i])
        });
    }
    toolbars.push(toolbar);
}

// Add to final toolbar
toolbar.addLabel('Summed pattern');
toolbar.add(Slider, {
    name: 'Subdivision',
    max: 4,
    trigger: function() {
        if (subdivisions !== this.val) {
            subdivisions = this.val;
            noiseImages.forEach(function(el) {
                el.subdivideGrid();
                el.getImage();
            });
        }
    }
});
toolbar.add(ColorSlider, {
    name: 'Hue',
    max: 255,
    now: 100,
    brightness: 200
});


draw = function() {
    background(250);

    // Images of noise
    noiseImages.forEach(function(el) { el.draw(); });
    drawSumImage(imageXs[3], imageY, noiseImages, toolbars[3].components[1]);

    // Equation symbols
    textAlign(CENTER, CENTER);
    textSize(20);
    fill(10);
    var y = imageY + noiseImageHeight / 2;
    
    for (var i = 0; i < 3; i++) {
        text(i < 2 ? "+" : "=", imageXs[i + 1] - 10, y);
    }

    toolbars.forEach(function(el) { el.draw(); });
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    toolbars.forEach(function(el) { el.mousePressed(); });
};

mouseDragged = function() {
    toolbars.forEach(function(el) { el.mouseDragged(); });
};

mouseReleased = function() {
    toolbars.forEach(function(el) { el.mouseReleased(); });
};

mouseOut = mouseReleased;
