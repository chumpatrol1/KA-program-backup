/*
    Draws a line object of nodes and edges.
    You can rotate it about the centre of the screen
    using the arrow keys or by holding the mouse down.
*/

var persp = 400;

// Coordinates for object
var nodes = [[-80,-80, -80],
             [-80, 80, -80],
             [ 80, 80, -80],
             [ 80,-80, -80],
             [-80,-80, 80],
             [-80, 80, 80],
             [ 80, 80, 80],
             [ 80,-80, 80]];

// List of edge pairs to be connected by lines. 
var edges = [[0,1],[1,2],[2,3],[3,0],
             [4,5],[5,6],[6,7],[7,4],
             [0,4],[1,5],[2,6],[3,7]];

var nodeSize = 10;
var rotateAngle = PI;
var currentX = false;
var currentY = false;

var rotateY3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var x;
    var y;
    var z;
    
    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [ct*x + st*z, y, -st*x + ct*z];
    }
};

var rotateX3D = function(theta){
    var ct = cos(theta);
    var st = sin(theta);
    var x;
    var y;
    var z;
    
    for (var i = 0; i < nodes.length; i+=1) {
        x = nodes[i][0];
        y = nodes[i][1];
        z = nodes[i][2];
        nodes[i] = [x, ct*y - st*z, st*y + ct*z];
    }
};

var draw = function() {
    var i, p1, p2;
    var node1, node2;
    
    // Move to centre of screen
    resetMatrix();
    translate(200, 200);  
    
    background(255, 255, 255);
    stroke(51, 48, 51);
    strokeWeight(2);

    for (i = 0; i < edges.length; i+=1) {
        node1 = nodes[edges[i][0]];
        node2 = nodes[edges[i][1]];
        p1 = persp / (node1[2] + persp);
        p2 = persp / (node2[2] + persp);
        line(node1[0] * p1, node1[1] * p1,
             node2[0] * p2, node2[1] * p2);
    }
    
    noStroke();
    fill(35, 35, 219);
    for (i = 0; i < nodes.length; i+=1) {
        p1 = persp / (nodes[i][2] + persp);
      ellipse(nodes[i][0] * p1, nodes[i][1] * p1, nodeSize, nodeSize);
    }

    if (mouseIsPressed) {
        if (currentX !== false) {
            rotateY3D((currentX - mouseX)*PI/10);
            rotateX3D(-(currentY - mouseY)*PI/10);
        }
        currentX = mouseX;
        currentY = mouseY;
    } else {
        currentX = false;
    }  
};

var keyPressed = function() { 
    if (keyCode === LEFT) {
        rotateY3D(-rotateAngle);
    } else if (keyCode === RIGHT) {
        rotateY3D(rotateAngle);
    } else if (keyCode === UP) {
        rotateX3D(-rotateAngle);
    } else if (keyCode === DOWN) {
        rotateX3D(rotateAngle);
    }
};

// Initial rotations
rotateX3D(7*rotateAngle);
rotateY3D(6*rotateAngle);