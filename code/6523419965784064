/****************************************
 * Remove totalDays
 * Add keyboard control of parameters
 * Cache planet positions
 * Rocket power slider
 * Show rocket position
 * Show planet position at intersection
****************************************/
// Change in days per update
var speed = 1;
// How accurate orbit speed is
var resolution = 20;

var sunX = width - 180;
var sunY = height/2 - 25;
var sunR = 32;

var SCALE = 0.65;

// 6 Aug
var GRAVITY = 0.002626;
var launchSpeed = 0.095;

// For Spirit
//var GRAVITY = 0.00199;
//var launchSpeed = 0.25;

var marsData = {
    size: 12,
    colour: color(212, 95, 17),
    perihelion: 207,        // million km
    aperihelion: 249,       // million km
    longitude: 336,         // degrees
    year: 686.98,           // earth days
    mass: 0.64              // 10^24 kg
};

var earthData = {
    size: 24,
    colour: color(61, 100, 255),
    perihelion: 147,        // million km
    aperihelion: 152,       // million km
    longitude: 102,         // degrees
    year: 365.25,           // earth days
    mass: 5.97              // 10^24 kg
};

// At 6pm 28th August 2003, Earth and Mars in opposition
// Angles from ellipse centres, not sun
var earthAngle = -0.681;
var marsAngle = 23.632;

var startYear = 2000;
var _year = 0;
var _month = 0;
var _day = 0;
var _hour = 18;
var totalDays = 0;
var launchDay = 0;

// Other variables
var running = false;
var showCycles = true;
var mode = "choice";
var sliderW = 280;

var minDist, oldDist;

var sliders = [];
var options = [];

var Sun = function() {
    this.x = 0;
    this.y = 0;
    this.drawX = sunX;
    this.drawY = sunY;
    this.mass = 330000;
    
    this.draw = function() {
        noStroke();
        fill(255, 204, 0);
        ellipse(sunX, sunY, sunR, sunR);
        fill(255, 151, 33, 200);
        
        var flareA = 10;
        var flare = 3 + sin(frameCount * 10);
        
        beginShape();
            curveVertex(sunX + sunR/2 + flare, sunY);
            var up = true;
            for (var i = 0; i <= 360; i += flareA) {
                var r = up ? sunR/2 + flare : sunR/2;
                curveVertex(sunX + r * cos(i),
                            sunY + r * sin(i));
                up = !up;
            }
            curveVertex(sunX + sunR/2, sunY);
        endShape();
    };
};

var Planet = function(data, angle) {
    this.year = data.year;
    this.mass = data.mass;
    
    // Distance from ellipse centre to sun
    var focusDist = 0.5 * (data.aperihelion - data.perihelion);
    
    // Ellipse axes
    var major = data.aperihelion - focusDist;
    var minor = sqrt(major * major - focusDist * focusDist);
    
    // Store these to save repeatedly calculating them
    var phi = data.longitude;
    var cosPhi = cos(phi);
    var sinPhi = sin(phi);
    
    // Angle relative the perihelion
    this.angle = (angle - phi + 360) % 360;
    this.angle = angle;
    
    // Center of ellipse
    var cx = -focusDist * cosPhi;
    var cy = focusDist * sinPhi;
    
    // Handy properties for calculations
    var eccentricity = focusDist / major;
    var angleConstant = 360 * major * minor / this.year;

    // Add a numbers of days to the orbit
    this.update = function(days) {

        var sign = days < 0 ? -1 / resolution : 1 / resolution;
        var speed = 0;

        for (var d = 0; d < abs(days) * resolution; d++) {
            // Distance from sun
            var r = major * (1 - eccentricity * eccentricity) /
                            (1 + eccentricity * cos(this.angle));
            
            // Update angle around sun
            this.angle += sign * angleConstant / (r * r);
            speed += angleConstant / (r * r);
        }
        
        this.angle %= 360;
        var r = major * (1 - eccentricity * eccentricity) /
                        (1 + eccentricity * cos(this.angle));
                        
        // Position based on non-rotated ellipse
        var x = r * cos(this.angle) + focusDist;
        var y = r * sin(this.angle);
        
        // Rotate based on ellipse rotation
        var newX = cx + x * cosPhi - y * sinPhi;
        var newY = cy - x * sinPhi - y * cosPhi;
        this.dx = newX - this.x;
        this.dy = newY - this.y;
        this.x = newX;
        this.y = newY;
        
        this.drawX = sunX + this.x * SCALE;
        this.drawY = sunY + this.y * SCALE;
    };
    this.update(0);
    
    this.drawCycle = function(col) {
        var m1 = major * 2 * SCALE;
        var m2 = minor * 2 * SCALE;
        
        pushMatrix();
        translate(sunX + cx * SCALE, sunY + cy * SCALE);
        rotate(data.longitude);
        
        strokeWeight(3);
        stroke(col);
        ellipse(0, 0, m1, m2);
        strokeWeight(1);
        stroke(255, 255, 255, 42);
        ellipse(0, 0, m1, m2);
        popMatrix();
    };
    
    this.draw = function() {
        fill(data.colour);
        ellipse(this.drawX, this.drawY, data.size, data.size);
    };
};

/********************************************************
 *               Make planets here
*********************************************************/
var sun = new Sun();
var mars = new Planet(marsData, marsAngle);
var earth = new Planet(earthData, earthAngle);
var bodies = [sun, earth, mars];

/********************************************************
 *               Shuttle code
*********************************************************/

var shuttles;
var Shuttle = function(x, y, dx, dy) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.oldPositions = [];
    this.t = 0;
    
    this.draw = function() {
        fill(255);
        ellipse(sunX + this.x * SCALE, sunY + this.y * SCALE, 3, 3);
        
        fill(160);
        for (var i = 0; i < this.oldPositions.length; i++) {
            var p = this.oldPositions[i];
            ellipse(p[0], p[1], 1, 1);
        }
    };
    
    this.update = function() {
        if (_day % 4 === 1) {
            this.oldPositions.push([sunX + this.x * SCALE, sunY + this.y * SCALE]);
            if (this.oldPositions.length > 140) {
                this.oldPositions.shift();
            }   
        }
        
        this.t++;
        this.x += this.dx;
        this.y += this.dy;
        
        for (var i in bodies) {
            var b = bodies[i];
            var dx = this.x - b.x;
            var dy = this.y - b.y;
            var d2 = dx * dx + dy * dy;
            var f = GRAVITY * b.mass / d2;
            var theta = atan2(dy, dx);
            this.dx -= f * cos(theta);
            this.dy -= f * sin(theta);
        }
    };
};

/****************************************
 *               Date functions
*****************************************/

var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

var isLeapYear = function(y) {
    return (y % 4 === 0 && (y % 100 !== 0 || y % 400 === 0));
};

// Return the number of days in given month for a given year
var daysInMonth = function(m, y) {
    var d = monthDays[m];
    d += (m === 1 && isLeapYear(y));
    return d;
};

var daysInYear = function(y) {
    return 365 + isLeapYear(y);
};

var convertDaysToDate = function() {
    var y = 0;
    var m = 0;
    var days = floor(totalDays);
    
    while (days > daysInYear(_year + y)) {
        days -= daysInYear(_year + y);
        y++;
    }
    
    while (days > daysInMonth(m)) {
        days -= daysInMonth(m);
        m++;
    }

    _day = days;
    _month = m;
    _year = y;
};

var updateOrbits = function() {
    earth.angle = earthAngle;
    mars.angle = marsAngle;

    for (var i = 1; i < bodies.length; i++) {
        // A complete year doesn't affect the angle
        var years = floor(totalDays / bodies[i].year);
        var days = totalDays - bodies[i].year * years;
        bodies[i].update(days);
    }

};

var changeDay = function(change) {
    totalDays = max(0, totalDays + change);
    updateOrbits();
    convertDaysToDate();
};

var getKM = function(d) {
    return round(10 * d) / 10;
};

var getMiles = function(d) {
    return round(10 * d / 1.6093) / 10;
};

/********************************************************
 *               GUI functions
*********************************************************/

var getDay = function() { return _day + 1; };
var getMonth = function() { return monthNames[_month]; };
var getYear = function() { return _year + startYear; };

// Convert current _day, _month, _year into total days since Jan 1st 2000
var updateDate = function() {
    totalDays = _day + 365 * _year;
    for (var y = 0; y < _year; y+=4) {
        totalDays += isLeapYear(y + startYear);
    }
    for (var m = 0; m < _month; m++) {
        totalDays += daysInMonth(m, y + startYear);
    }
    
    updateOrbits();
};


var setYear = function(self) {
    _year = floor(101 * self.val / (self.width + 1));
    updateDate();
};

var setMonth = function(self) {
    _month = floor(12 * self.val / (self.width + 1));
    updateDate();
};

var setDate = function(self) {
    var maxDays = daysInMonth(_month, _year + startYear);
    _day = floor(maxDays * self.val / (self.width + 1));
    updateDate();
};

var writeDate = function() {
    return getDay() + " " + (getMonth().slice(0, 3));
};

// Get to launch date
// Curiosity 26th Nov 2011
//_day = 26;
//_month = 10;
//_year = 2011;
//updateDate();
// changeDay(4312);

// Spirit 10th June 2003
//changeDay(1256);

/****************************************
 *          GUI objects
*****************************************/

var Slider = function(x, y, w, setF) {
    this.x = x;
    this.y = y;
    this.h = 16;
    this.width = w; 
    this.held = false;
    
    this.ballR = 12;
    this.ballD = this.ballR * 2;
    
    this.bx = this.x;
    this.val = 0;
    
    this.draw = function() {
        this.update();
        noStroke();
        fill(250, 250, 250, 120);
        rect(this.x-8, this.y - this.h/2, this.width + 16, this.h, 8);
    
        noStroke();
        fill(0, 0, 0, 100);
        ellipse(this.bx, this.y, this.ballD + 2, this.ballD + 2);
        fill(180);
        ellipse(this.bx, this.y, this.ballD, this.ballD);
        fill(255, 255, 255, 150);
        ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);
    };
    
    this.selected = function() {
        this.held = dist(mouseX, mouseY, this.bx, this.y) <= this.ballR;
    };
    
    this.update = function() {
        if (setF) {
            setF(this);
        }
    };
    
    this.drag = function() {
        if (this.held) {
            var x = constrain(mouseX, this.x, this.x + this.width);
            this.bx = x;
            this.val = x - this.x;
            this.update();
        }
    };
};

var Button = function(x, y, w, h, name, clickF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(200, 200, 200, 250);
    this.highlightCol = color(250, 50, 50, 250);
    this.showing = true;
    
    this.mouseover = function() {
        return (mouseX >= this.x && mouseX <= this.x + this.w &&
                mouseY >= this.y && mouseY <= this.y + this.h);
    };
    
    this.click = function() {

    };
    
    this.draw = function() {
        if (!this.showing) { return; }
        
        noStroke();
        if (this.mouseover() || this.selected) {
            fill(this.highlightCol);
        } else {
            fill(this.defaultCol);
        }
        rect(this.x, this.y, this.w, this.h, 12);
        
        fill(10);
        textSize(24);
        textAlign(CENTER, CENTER);
        text(this.name, this.x + this.w/2, this.y + this.h/2 - 1);
    };
};

var OptionBox = function(x, y, w, h, name, writeF, slider) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.selected = false;
    
    this.draw = function() {
        noStroke();
        if (this.mouseover() || slider.held) {
            fill(200, 200, 200, 250);
        } else {
            fill(200, 200, 200, 100);
        }
        rect(this.x, this.y, this.w, this.h, 12);
        
        fill(0);
        textAlign(CENTER, BASELINE);
        textSize(16);
        text(this.name, this.x + this.w/2, this.y + this.h/2 - 1);
        
        textSize(13);
        text(writeF(), this.x + this.w/2, this.y + this.h - 4);
    };
    
    this.mouseover = function() {
        return (mouseX >= this.x && mouseX <= this.x + this.w &&
                mouseY >= this.y && mouseY <= this.y + this.h);
    };
    
};

var buttonX, buttonY;

var createOptions = function() {
    var names = ['Date', 'Month', 'Year'];
    var setFunc = [setDate, setMonth, setYear];
    var writeFunc = [getDay, getMonth, getYear];
    
    var h = 32;
    var w = 72;
    var n = names.length;
    
    buttonY = height - n * (h + 4);
    buttonX = 6;
    var sliderX = buttonX + w + 15;
    
    for (var i = 0; i < n; i++) {
        var y = buttonY + (h + 4) * i;
        var s = new Slider(sliderX, y + 18, sliderW, setFunc[i]);
        var b = new OptionBox(buttonX, y, w, h, names[i], writeFunc[i], s);
        options.push(b);
        sliders.push(s);
    }

};

createOptions();
var launchButton = new Button(buttonX, buttonY - 36, 108, 28, "LAUNCH");
var retryButton = new Button(sunX - 36,  sunY + 50, 72, 28, "Retry");

/********************************************************
 *               Shuttle functions
*********************************************************/

// Launch shuttle
var launch = function() {
    var angle = atan2(earth.y, earth.x) + 360 * _hour / 24;
    launchDay = totalDays;
    
    // Find Earth's current speed by going forward a day
    earth.update(1);
    var dx = launchSpeed * cos(angle) + earth.dx;
    var dy = launchSpeed * sin(angle) + earth.dy;
    earth.update(-1);   // Go back to original day
    
    shuttles = new Shuttle(earth.x + dx, earth.y + dy, dx, dy);
    
    var d = dist(shuttles.x, shuttles.y, mars.x, mars.y);
    minDist = d;
    oldDist = d;
    
    running = true;
    mode = "running";
};

// Check whether shuttle is close to Mars
var findOrbit = function() {
    var d = dist(mars.x, mars.y, shuttles.x, shuttles.y);
    if (d < minDist) {
        minDist = d;
    }
    
    if (d < 3) {
        running = false;
        mode = 'success';
    } else if (d < 20 && d > oldDist) {
        mode = 'fly past';
    } else if (dist(0, 0, shuttles.x, shuttles.y) > marsData.aperihelion * 1.2) {
        running = false;
        mode = 'fail';
    } else if (dist(earth.x, earth.y, shuttles.x, shuttles.y) < 2) {
        //running = false;
        //mode = "crash";
    } else if (shuttles.t > 560) {
        running = false;
        if (mode !== 'fly past') {
            mode = 'time out';
        }
    }
    oldDist = d;
};

var reset = function() {
    mode = 'choice';
    running = false;
    changeDay(launchDay - totalDays);
    for (var s in sliders) {
        sliders[s].val = sliders[s].calibrate();
    }
};

var writePosition = function(body) {
    var x = round(10000 * body.x) / 10000;
    var y = round(10000 * body.y) / 10000;
    return x + ", " + y;
};

var runTests = function() {
    println(writeDate() + " " + _year + " " + writePosition(earth));
    
    changeDay(200);
    println(writeDate() + " " + _year + " " + writePosition(earth));
    
    changeDay(-200);
    println(writeDate() + " " + _year + " " + writePosition(earth));
    
    changeDay(3983);
    println(writeDate() + " " + _year + " " + writePosition(earth));
};

//runTests();

/********************************************************
 *               Display functions
*********************************************************/
var drawEndState = function() {
    stroke(255);
    strokeWeight(2);
    fill(200, 200, 200, 200);
    var w = 190;
    var h = 80;
    rect(sunX - w/2, sunY - h/2, w, h, 5);
    strokeWeight(1);
    
    var title, sub1, sub2;
    switch(mode) {
        case 'success':
            title = "Mission successful!";
            sub1 = "Orbit achieved on:";
            sub2 = writeDate() + " " + _year;
            break;
        
        case 'fail':
            title = "Mission failed";
            sub1 = "Orbiter lost in space";
            break;
            
        case 'fly past':
            title = "Mission failed";
            sub1 = "Orbiter just missed Mars.";
            sub2 = "It got within " + getKM(minDist) + " million km.";
            break;
            
        case 'time out':
            title = "Mission failed";
            sub1 = "Orbiter missed Mars.";
            break;
    }
    
    fill(0);
    textSize(20);
    textAlign(CENTER, TOP);
    text(title, sunX, sunY - h/2 + 3);
    textAlign(LEFT, TOP);
    textSize(14);
    text(sub1, sunX - w/2 + 8, sunY - 5);
    if (sub2) {
        textAlign(CENTER, TOP);
        text(sub2, sunX, sunY +16);   
    }

};

var draw = function() {
    if (running) {
        changeDay(1);
        if (shuttles) {
            shuttles.update();   
        }
        findOrbit();
    }
    
    background(0);
    
    /*
    fill(255);
    textSize(14);
    textAlign(LEFT, BASELINE);
    text(totalDays, 20, 20);
    text(_day + " " + _month, 20, 40);
    text(GRAVITY * 1000, 20, 60);
    */
    
    noFill();
    if (showCycles) {
        var c = color(61, 100, 255, 90);
        earth.drawCycle(c);
        var c = color(212, 95, 17, 80);
        mars.drawCycle(c);
    }
    
    noStroke();
    for (var i in bodies) {
        bodies[i].draw();
    }
 
 /*
    var angle = atan2(earth.y - sunY, earth.x - sunX) + 360 * _hour / 24;
    var dx = launchSpeed * cos(angle) * 100;
    var dy = launchSpeed * sin(angle) * 100;
    stroke(255, 0, 0);
    line(earth.drawX, earth.drawY, earth.drawX + dx, earth.drawY + dy);
*/
 
    // GUI
    for (var i in options) { options[i].draw(); }
 
    if (mode === 'choice') {
        launchButton.draw();
        for (var i in sliders) { sliders[i].draw(); }
        var x = buttonX;
        var y = buttonY - 58;
        noStroke();
        fill(0, 0, 0, 100);
        rect(x-4, y-2, 372, 22, 8);
        fill(250, 250, 250, 220);
        textSize(16);
        textAlign(LEFT, TOP);
        text("Select the date to launch a shuttle to Mars", x, y);
        text("Mars", mars.drawX + 8, mars.drawY);
        text("Earth", earth.drawX + 15, earth.drawY - 18);
    } else {
        shuttles.draw();
        retryButton.draw();
        
        if (mode !== "running") {
            drawEndState();
        }
    }
    
};

/***************************************
 *               Event handling
****************************************/

var mousePressed = function() {
    if (mode === 'choice') {
        for (var s in sliders) {
            sliders[s].selected();
        }   
    }
};

var mouseReleased = function() {
    if (mode === "choice") {
        for (var s in sliders) {
            sliders[s].held = false;
        }
        if (launchButton.mouseover()) {
            launch();
        }
    } else {
        if (retryButton.mouseover()) {
            reset();
        }
    }
};

var mouseOut = function() {
    for (var s in sliders) {
        sliders[s].held = false;
    }
};

var mouseDragged = function() {
    if (mode === 'choice') {
        for (var s in sliders) {
            sliders[s].drag();
        }
    }
};

var keyPressed = function() {
    if (keyCode === 32) {
        if (mode === "running") {
            running = !running;   
        }
    }
    if (keyCode === 67) { showCycles = !showCycles; }
    if (keyCode === 83) {
        //launch();
    }
};
