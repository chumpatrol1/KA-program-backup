/*******************************************************
 * The ellipical orbit of a planet around the sun is
 * defined a focal point (grey circle).
 * 
 * Mouse-over any parameter for more information.
 * Click and drag the sun or focus.
 * 
 * How does moving this point change the parameters of
 * the orbit?
 * 
 * How does the peroid change as the ellipse changes
 * 
 * Spacebar = pause
********************************************************/
var standardGravity = 6;   // GM in m^3 / s^2

// Colours
var BACKGROUND = color(0, 0, 0);
var ORBITER = color(120, 80, 255, 255);
var ORBITER_T = color(120, 80, 255, 0);

var fadePoints, areaPoints;
var fadeGap = 5;
var maxPoints = 80;
var maxArea = 5;
var a = 115;
var t = 0;

// Menu positioning
var menuX = 20;
var menuDX = 144;
var menuY = 265;
var menuDY = 20;

var selected = false;
var mouseEvents = false;

var angle = 0;
var locus1, locus2, centre, a, b, orbx, orby;
var foci_dist, eccentricity, area, period, velocity;
var foci_angle = 0;

var updateLoci = function() {
    t = 0;
    fadePoints = [];
    areaPoints = [];
    
    foci_dist = dist(locus1.x, locus1.y, locus2.x, locus2.y);
    foci_angle = atan2(locus2.y-locus1.y, locus2.x-locus1.x);
    centre = { x: (locus1.x + locus2.x) / 2,
               y: (locus1.y + locus2.y) / 2 };
    
    b = sqrt(a * a - foci_dist * foci_dist / 4);
    area = PI * a * b;
    eccentricity = foci_dist / (2 * a);
    period = sqrt(a * a * a / standardGravity);
    
    orbx = centre.x + a * cos(foci_angle);
    orby = centre.y + b * sin(foci_angle);
};

var Locus = function(x, y, r, c) {
    this.x = x;
    this.y = y;
    this.r = r;
    var c2 = lerpColor(c, color(255,255,255), 0.5);
    
    this.draw = function() {
        fill(c);
        if (this.isSelected()) {
            strokeWeight(3);
            stroke(c2);
        } else {
            noStroke();   
        }
        ellipse(this.x, this.y, this.r, this.r);
    };
    
    this.isSelected = function() {
        if (dist(this.x, this.y, mouseX, mouseY) < this.r) {
            return true;
        }
    };
    
    this.drag = function() {
        var temp_x = this.x;
        var temp_y = this.y;
        this.x = mouseX;
        this.y = mouseY;
        
        if (dist(locus1.x, locus1.y, locus2.x, locus2.y) >= a * 2){
            // Loci further apart than string so undo
            this.x = temp_x;
            this.y = temp_y;
        } else {
            updateLoci();
        }
    };
};

/**************************************************
 *              Helper functions
**************************************************/
var triangleArea = function(x1, y1, x2, y2, x3, y3) {
    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2;
};

var getArea = function() {
    var triArea = 0;
    for (var i=1; i<areaPoints.length; i++) {
        triArea += triangleArea(locus1.x, locus1.y,
                        areaPoints[i-1][0], areaPoints[i-1][1],
                        areaPoints[i][0], areaPoints[i][1]);
    }
    return round(triArea);
};

var getEccentricity = function() {
    return round(1000 * eccentricity) / 1000;
};

var getPeriod = function() {
    return round(period / 3) / 10;
};

var getSpeed = function() {
    return round(300 * velocity)/10;
};

var getSunDist = function() {
    return round(dist(locus1.x, locus1.y, orbx, orby));
};

var getCentre = function() { return centre; };
var getSun = function() { return locus1; };
var getLatus = function() {
    var r = b * b / a;
    var x = locus1.x + r * cos(foci_angle + 90);
    var y = locus1.y + r * sin(foci_angle + 90);
    return { x: x, y: y };
};

var changeFocalDist = function(x) {
    if (x < 0 || foci_dist/2 + 1 < a) {
        locus1.x -= x * cos(foci_angle);
        locus1.y -= x * sin(foci_angle);
        locus2.x += x * cos(foci_angle);
        locus2.y += x * sin(foci_angle);
    }
};

var changePerhelion = function(x) {
    if (x < 0 || foci_dist > 1) {
        locus2.x -= x * cos(foci_angle);
        locus2.y -= x * sin(foci_angle);
    }
};

var changeAperhelion = function(x) {
    if (x > 0 || foci_dist > 1) {
        locus2.x += x * cos(foci_angle);
        locus2.y += x * sin(foci_angle);
    }
};

var changeLatusRectum = function(x) {
    if (x > 0 || b * b / a > 1) {
        b += x;
        a = sqrt(b * b + foci_dist * foci_dist/4);
    }
};

var semi_major = function() {
    return {
        x: centre.x + a * cos(foci_angle),
        y: centre.y + a * sin(foci_angle)
    };
};

var semi_major_opp = function() {
    return {
        x: centre.x - a * cos(foci_angle),
        y: centre.y - a * sin(foci_angle)
    };
};

var semi_minor = function() {
    return {
        x: centre.x + b * cos(foci_angle - 90),
        y: centre.y + b * sin(foci_angle - 90)
    };
};

var Parameter = function(name, f1, f2, desc) {
    this.name = name;
    this.f1 = f1;
    this.f2 = f2;
    this.desc = desc;
    
    this.draw = function() {
        var coord1 = this.f1();
        var coord2 = this.f2();
        line(coord1.x, coord1.y, coord2.x, coord2.y);
    };
    
    this.value = function() {
        var coord1 = this.f1();
        var coord2 = this.f2();
        return round(dist(coord1.x, coord1.y, coord2.x, coord2.y));
    };
};

var Property = function(name, f, units, desc) {
    this.name = name;
    this.units = units;
    this.desc = desc;
    this.value = f;
};

var Arrow = function(x, y, f) {
    this.x = x;
    this.y = y;
    var dx = 14;
    
    this.draw = function() {
        var s = this.isSelected();
        
        if (s === 1) { fill(255, 0, 0); }
        else { fill(150); }        
        triangle(this.x-dx, this.y+5,
                 this.x-dx, this.y-5,
                 this.x-dx-8, this.y);
                 
        if (s === 2) { fill(225, 0, 0); }
        else { fill(150); }   
        triangle(this.x+dx, this.y+5,
                 this.x+dx, this.y-5,
                 this.x+dx+8, this.y);
    };
    
    this.isSelected = function() {
        if (mouseY < this.y+5 && mouseY > this.y-5 &&
            mouseX < this.x+dx+8 && mouseX > this.x-dx-8) {
                if (mouseX < this.x) {
                    return 1;
                } else {
                    return 2;
                }
        }
    };
    
    this.update = function() {
        var s = this.isSelected();
        if (s) {
            f(s*2 - 3);
            updateLoci();
        }
    };
};

locus1 = new Locus(110, 100, 16, color(247, 222, 59));
locus2 = new Locus(290, 160, 10, color(128, 128, 128));
updateLoci();

var params = [
    new Parameter("Semi-major axis", getCentre, semi_major, "Half the longest axis"),
    new Parameter("Semi-minor axis", getCentre, semi_minor, "Half the shortest axis"),
    new Parameter("Focal distance", getCentre, getSun, "Distance between sun and ellipse center (linear eccentricity)"),
    new Parameter("Perihelion", getSun, semi_major_opp, "Closest point to the sun"),
    new Parameter("Aperihelion", getSun, semi_major, "Furthest point from the sun"),
    new Parameter("Semi-latus rectum", getSun, getLatus, "Half the chord through a focus parallel to the major axis")
];

var arrows = [];
var updateFuncs = [
    function(x) { if (a + x > foci_dist/2) { a += x; }},
    function(x) { b += x; a = sqrt(b * b + foci_dist * foci_dist/4);},
    changeFocalDist,
    changePerhelion,
    changeAperhelion,
    changeLatusRectum
];

for (var i=0; i<params.length; i++) {
    arrows.push(new Arrow(menuX + menuDX, menuY + menuDY*i, updateFuncs[i]));
}

var properties = [
    new Property("Eccentricity", getEccentricity, "", "How stretched the ellipse is"),
    new Property("Period", getPeriod, "seconds", "How long a complete orbit takes"),
    new Property("Speed", getSpeed, "pixels/second", "How fast the orbiting body is currently moving"),
    new Property("Orbit distance", getSunDist, "pixels", "Current distance from the sun"),
    new Property("Sweep area", getArea, "pixelsÂ²", "Area covered in a set period of time")
];

var selectables = [locus1, locus2];
var running = true;

var drawEllipseParameters = function() {
    stroke(255);
    strokeWeight(1);    
    for (var i=0; i<params.length; i++) {
        if (params[i].highlighted) {
            params[i].draw();   
        }
    }
    
};

/**************************************************
 *                 Menu Box
**************************************************/

var drawTextBox = function() {    
    stroke(50);
    strokeWeight(1);
    fill(0, 0, 0, 200);
    rect(menuX-10, menuY-12, 380, params.length*menuDY+5);
    
    // Parameters with arrows
    textSize(13);    
    for (var i=0; i<params.length; i++) {
        textAlign(LEFT, CENTER);
        if (params[i].highlighted) {
            fill(250);
            text(params[i].desc, menuX-5, 388);
        } else {
            fill(100);
        }
        
        text(params[i].name + ": ", menuX, menuY+menuDY*i);
        textAlign(CENTER, CENTER);
        text(params[i].value(), menuX+menuDX, menuY+menuDY*i);
        
        arrows[i].draw();
    }
    
    // Properties
    textAlign(LEFT, CENTER);
    var dx = 200;
        for (var i=0; i<properties.length; i++) {
        
        if (properties[i].highlighted) {
            fill(250);
            text(properties[i].desc, menuX-5, 388);
        } else {
            fill(100);
        }
        
        var txt = properties[i].name + ": ";
        txt += properties[i].value();
        txt += " " + properties[i].units;
        text(txt, menuX + dx, menuY + menuDY*i);
    }
};

var drawDirectrix = function() {
    stroke(255);
    strokeWeight(1);
    var d = 2 * a * a / foci_dist;
    var dx = centre.x + d * cos(foci_angle);
    var dy = centre.y + d * sin(foci_angle);
    line(dx + b * cos(foci_angle + 90),
         dy + b * sin(foci_angle + 90),
         dx + b * cos(foci_angle - 90),
         dy + b * sin(foci_angle - 90));
};

var moveOrbiter = function() {
    var r = max(a, b) * (1 - eccentricity * eccentricity) / 
                    (1 - eccentricity * cos(angle));
    angle += 360 * a * b / (period * r * r);

    var ct = cos(angle);
    var st = sin(angle);
    var cp = cos(foci_angle);
    var sp = sin(foci_angle);

    var x1 = r * ct - foci_dist/2;
    var y1 = r * st;
    var x = centre.x + x1 * cp - y1 * sp;
    var y = centre.y + x1 * sp + y1 * cp;
    
    velocity = dist(orbx, orby, x, y);
    //println(sqrt(speed*(2/r - 1/a)));
    
    orbx = x;
    orby = y;
};


var draw = function() {
    // Move point based on angle around and rotation of ellipse
    background(BACKGROUND);

    if (mouseEvents) {
        mouseEvents.update();
    }
    
    if (running) {
        moveOrbiter();
        
        t++;        
        if (t % fadeGap === 0) {
           fadePoints.push([orbx, orby]);
            if (fadePoints.length > maxPoints) {
                fadePoints.shift();
            }
        }
        
        areaPoints.push([orbx, orby]);
            if (areaPoints.length > maxArea) {
                areaPoints.shift();
        }
    }
    
    // Background ellipse
    stroke(50);
    strokeWeight(1);
    fill(lerpColor(ORBITER, ORBITER_T, 0.8));
    translate(centre.x, centre.y);
    rotate(foci_angle);
    ellipse(0, 0, a*2, b*2);
    resetMatrix();
    
    drawEllipseParameters();
    locus1.draw();
    locus2.draw();
    
    // Orbit
    noStroke();
    for (var i=0; i<fadePoints.length; i++) {
        fill(lerpColor(ORBITER_T, ORBITER, i/(fadePoints.length)));
        ellipse(fadePoints[i][0], fadePoints[i][1], 8, 8);
    }
    
    // Should make these a property function
    strokeWeight(1);
    if (properties[3].highlighted) {
        stroke(255);
        line(orbx, orby, locus1.x, locus1.y);
    }
    
    // Sweep area
    noStroke();
    if (properties[4].highlighted) {
        fill(247, 222, 59);
        var n = areaPoints.length - 1;
        triangle(locus1.x, locus1.y,
                 areaPoints[0][0], areaPoints[0][1],
                 areaPoints[n][0], areaPoints[n][1]);
    }
    
    //drawDirectrix();
    
    stroke(50);
    fill(ORBITER);
    ellipse(orbx, orby, 8, 8);
    
    drawTextBox();
};

var mousePressed = function() {
    for (var i in selectables) {
        if (selectables[i].isSelected()) {
            selected = selectables[i];
        }
    }
    for (var i=0; i<arrows.length; i++) {
        if (arrows[i].isSelected()) {
            mouseEvents = arrows[i];   
        }
    }
};

var mouseReleased = function() {
    selected = false;
    mouseEvents = false;
};

var mouseMoved = function() {
    for (var i = params.length-1; i>=0; i--) {
        params[i].highlighted = false;
    }
    for (var i = properties.length-1; i>=0; i--) {
        properties[i].highlighted = false;
    }
    
    if (mouseY > menuY - menuDY + 10) {
        if (mouseX < menuX + menuDX+30) {
            for (var i = params.length-1; i>=0; i--) {
                if (mouseY > menuY + i*menuDY-10) {
                    params[i].highlighted = true;
                    break;
                }
            }   
        } else {
            for (var i = properties.length-1; i>=0; i--) {
                if (mouseY > menuY + i*menuDY-10) {
                    properties[i].highlighted = true;
                    break;
                }
            }   
        }
    }
};

var mouseDragged = function() {
    if (selected) {
        selected.drag();
    }
};
var keyPressed = function() {
    // Spacebar toggles animation
    if (keyCode === 32) { running = !running; }
};