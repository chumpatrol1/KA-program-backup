var GROUND = 380;
var boxes;

// Test one box against all others
var collisionTest = function(box) {
    for (var b=0; b<boxes.length; b++) {
        var box2 = boxes[b];
        if (box2 !== box) {
            box.collideRect(box2);
        }
    }
};

var Box = function(x, y, width, height, angle) {
    this.x = x;
    this.y = y;
    this.dx = 0;
    this.dy = 0;
    
    var w = width/2;
    var h = height/2;                   
    this.d = pow(w*w + h*h, 0.5);
    this.a = atan2(h, w);
    this.angle = angle;
    this.collisions = [false, false, false, false];
    
    this.findVertex = function(angle) {
        return [this.x + this.d * cos(angle),
                this.y + this.d * sin(angle)];
    };
    
    this.findVertices = function() {
        var p1 = this.findVertex(this.angle + this.a);
        var p2 = this.findVertex(this.angle - this.a);
        var p3 = this.findVertex(this.angle + 180 + this.a);
        var p4 = this.findVertex(this.angle + 180 - this.a);
        this.points = [p1, p2, p3, p4];
    };
    this.findVertices();
    
    this.collidePoint = function(x, y) {
        var dx1 = this.points[1][0] - this.points[0][0];
        var dy1 = this.points[1][1] - this.points[0][1];
        var dx2 = this.points[3][0] - this.points[0][0];
        var dy2 = this.points[3][1] - this.points[0][1];
        var dx3 = x - this.points[0][0];
        var dy3 = y - this.points[0][1];
        
        if (dx1 * dx3 + dy1 * dy3 < 0) { return false; }
        if (dx2 * dx3 + dy2 * dy3 < 0) { return false; }
        if (dx1 * (x - this.points[1][0]) +
            dy1 * (y - this.points[1][1]) > 0) { return false; }
        if (dx2 * (x - this.points[3][0]) +
            dy2 * (y - this.points[3][1]) > 0) { return false; }        
            
        return true;
    };
    
    this.collideRect = function(box) {
        var collision = false;
        var coords;
        
        for (var i=0; i<4; i++) {
            coords = box.points[i];
            if (this.collidePoint(coords[0], coords[1])) {
                box.collisions[i] = true;
            } else {
                box.collisions[i] = false;
            }
        }
        for (var j=0; j<4; j++) {
            coords = this.points[j];
            if (box.collidePoint(coords[0], coords[1])) {
                this.collisions[j] = true;
            } else {
                this.collisions[j] = false;
            }
        }
    };
    
    this.findGroundCollision = function() {
        var collisions = [];
        
        for (var i=0; i<4; i++) {
            if (this.points[i][1] > GROUND) {
                this.y += GROUND - this.points[i][1];
                collisions.push(i);
            }
        }
        
        if (collisions.length > 1) {
            this.dy = 0;
        }
        
        return collisions;
    };
    
    this.update = function() {
        this.accelerate(0, 0.2);
        this.move(this.dx, this.dy);
    };
    
    this.accelerate = function(dx, dy) {
        this.dx += dx;
        this.dy += dy;
    };
    
    this.move = function(dx, dy) {
        this.x += dx;
        this.y += dy;
        this.findVertices();

        var ground = this.findGroundCollision();
        if (ground.length === 1) {
            this.pivot(ground[0], dy);
        }
        this.findVertices();
        
        collisionTest(this);
    };
    
    this.pivot = function(point, dy) {
        if (this.points[point][0] > this.x) {
            this.angle -= 2;
        } else {
            this.angle +=2;
        }
    };
    
    this.draw = function() {
        if (this.selected) {
            stroke(200, 50, 50);
            fill(250, 250, 250);
        } else {
            stroke(100, 100, 100);
            fill(200, 200, 200);
        }
        strokeWeight(2);
        quad(this.points[0][0], this.points[0][1],
             this.points[1][0], this.points[1][1],
             this.points[2][0], this.points[2][1],
             this.points[3][0], this.points[3][1]);
             
        stroke(255, 0, 0);
        for (var i=0; i<4; i++) {
            if (this.collisions[i]) {
                ellipse(this.points[i][0], this.points[i][1], 3, 3);
            }
        }
    };
};

var boxes = [new Box(100, 100, 20, 160, 40),
             new Box(300, 200, 20, 160, 80)];

var draw = function() {
    background(212, 245, 255);
    
    for (var b=0; b<boxes.length; b++) {
        boxes[b].update();
        boxes[b].draw();   
    }
    
    stroke(43, 135, 29);
    fill(94, 189, 87);
    rect(-2, GROUND, 404, 404-GROUND);
};

/*****************************************************
 * Event handling
******************************************************/

var mousePressed = function() {
    for (var b=0; b<boxes.length; b++) {
        boxes[b].selected = boxes[b].collidePoint(mouseX, mouseY);
    }
};

var mouseReleased = function() {
    for (var b=0; b<boxes.length; b++) {
        boxes[b].selected = false;
    }
};

var mouseOut = function() {
    for (var b=0; b<boxes.length; b++) {
        boxes[b].selected = false;
    }
};

var mouseDragged = function() {
    for (var b=0; b<boxes.length; b++) {
        var box = boxes[b];
        if (box.selected) {
            box.move(mouseX - pmouseX, mouseY - pmouseY);
            break;
        }
    }
};