// Standard colours and variables
var BACKGROUND = color(250, 250, 250);
var NULLCOL = color(0, 0, 0, 0);
var RED = color(200, 0, 0);
var GREY = color(100, 100, 100);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GRIDGREY = color(230, 240, 230);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(230, 230, 230, 200);
var MESSAGEBLUE = color(20, 60, 160);
var TICKGREEN = color(0, 200, 0);
var CS_GREEN = color(67, 122, 57);

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 16);

var CONTROL_POINT_SIZE = 12;
angleMode = "radians";

var showing = {};

var forEach = function(arr, func) {
    arr.forEach(function(el) {
        el[func]();
    });
};

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1.x * v2.x + v1.y * v2.y;
};

var normalise = function(v) {
    var m = mag(v.x, v.y);
    return { x: v.x / m, y: v.y / m }; 
};

// From: https://www.particleincell.com/2013/cubic-line-intersection/
var cubicRoots = function(p1, p2, p3, p4) {
    var A = p2 / p1;
    var B = p3 / p1;
    var C = p4 / p1;
 
    var A3 = A / 3;
    var Q = B / 3 - A3 * A3;
    var R = - A3 * A3 * A3 + (A3 * B - C) / 2;
    var Q3 = Q * Q * Q;
    var D = Q3 + R * R;    // polynomial discriminant
 
    var t = [];
 
    if (D >= 0) {
        // Complex or duplicate roots
        var D2 = sqrt(D);
        var S = Math.sign(R + D2) * pow(abs(R + D2), 1 / 3);
        var T = Math.sign(R - D2) * pow(abs(R - D2), 1 / 3);
        t.push(-A3 + (S + T));               // real root
    } else {
        // Distinct real roots
        var th = acos(R / sqrt(-Q3));
        var Q2 = 2 * sqrt(-Q);
 
        t[0] = Q2 * cos(th / 3) - A3;
        t[1] = Q2 * cos((th + 2 * PI) / 3) - A3;
        t[2] = Q2 * cos((th + 4 * PI) / 3) - A3;
    }
 
    // Discard out of spec roots
    t = t.filter(function(el) {
        return el >= 0 && el <= 1;
    });
 
    return t;
};

var bezierCoeffients = function(a, b, c, d) {
	return [
        -a + 3 * b - 3 * c + d, 
        3 * a - 6 * b + 3 * c,
        -3 * a + 3 * b,
        a
	];
};

// http://steve.hollasch.net/cgindex/render/refraction.txt
var getRefractedRay = function(p1, p2, normal, Ri) {
    var normal = normalise(normal);
    
    // Ray from source to intersection point
    var incidenceVector = normalise({
        x: p2.x - p1.x,
        y: p2.y - p1.y
    });
    
    // Calculate refraction
    var c1 = -dotProduct(incidenceVector, normal);
    var c2 = 1 - Ri * Ri * (1 - c1 * c1);
    
    if (c2 > 0) {
        c2 = Ri * c1 - sqrt(c2);
        return {
            x: Ri * incidenceVector.x + c2 * normal.x,
            y: Ri * incidenceVector.y + c2 * normal.y
        };
    }
};

// Intersection between a line from l1 to l2 and bezier defined by p1 - p4
// From: https://www.particleincell.com/2013/cubic-line-intersection
var findIntersection = function(p1, p2, p3, p4, l1, l2) {
    var dx = l1.x - l2.x;	            // dx = x1 - x2
    var dy = l2.y - l1.y;	            // dy = y2 - y1
    var C = l1.x * -dy + l1.y * -dx;    // C = x1 * (y1 - y2) + y1 * (x2 - x1)
 
    var bx = bezierCoeffients(p1.x, p2.x, p3.x, p4.x);
    var by = bezierCoeffients(p1.y, p2.y, p3.y, p4.y);
 
    var q1 = dy * bx[0] + dx * by[0];		// t^3
    var q2 = dy * bx[1] + dx * by[1];		// t^2
    var q3 = dy * bx[2] + dx * by[2];		// t
    var q4 = dy * bx[3] + dx * by[3] + C;	// 1
 
    var roots = cubicRoots(q1, q2, q3, q4);
    var points = [];
 
    // Verify the roots are in bounds of the linear segment
    for (var i = 0; i < 3; i++) {
        var t = roots[i];
        var t2 = t * t;
        var t3 = t * t2;
 
        // Intersection point assuming infinitely long line segment
        var x = bx[0] * t3 + bx[1] * t2 + bx[2] * t + bx[3];
        var y = by[0] * t3 + by[1] * t2 + by[2] * t + by[3];            
 
        // Find point along the line
        var s = dx ? (x - l1.x) / -dx : (y - l1.y) / dy;

        // Make sure we are also in bounds of the line
        if (s >= 0 && s <= 1) {
            var tx = -bezierTangent(p1.y, p2.y, p3.y, p4.y, t);
            var ty = bezierTangent(p1.x, p2.x, p3.x, p4.x, t);
            var d = mag(dx, dy);
            var r = getRefractedRay(l1, l2, { x: tx, y: ty }, 1/1.25);
            
            points.push({ x: x, y: y, t: t, dx: tx / d, dy: ty / d, r: r });
        }
    }   
    
    return points;
};

/**************************************
 * DraggablePoint
 * A freely draggable point with a position and colour.
***************************************/
{
var DraggablePoint = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color || ORANGE;
    this.animation = 0;
};

DraggablePoint.prototype.draw = function() {
    if (this.dragging || this.mouseOver()) {
        if (this.animation < 5) {
            this.animation++;
        }
    } else {
        this.animation = 0;
    }

    strokeWeight(1);
    stroke(BACKGROUND);
    if (this.selected) {
        fill(PINK);
    } else {
        fill(this.color);
    }
    
    var r = CONTROL_POINT_SIZE + this.animation;
    ellipse(this.x, this.y, r, r);
};

DraggablePoint.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.x, this.y) <= CONTROL_POINT_SIZE / 2;
};

DraggablePoint.prototype.move = function(dx, dy) {
    this.x += dx;
    this.y += dy;
};
}
/**************************************
 *      Scene object
 *  Wraps the other objects
**************************************/
{
var Scene = function() {
    this.selected = false;
    
    this.points = [
        new DraggablePoint(200, 20),
        new DraggablePoint(80, 20),
        new DraggablePoint(80, 380),
        new DraggablePoint(200, 380),
        new DraggablePoint(25, 300, GREEN),
        new DraggablePoint(380, 150),
    ];
 
    var p = this.points;
    this.Intersections = findIntersection(p[0], p[1], p[2], p[3], p[4], p[5]);
};

Scene.prototype.draw = function() {
    var p = this.points;
    
    // Handles
    strokeWeight(2);
    stroke(PINK + (200 << 24));
    line(p[0].x, p[0].y, p[1].x, p[1].y);
    line(p[2].x, p[2].y, p[3].x, p[3].y);
    
    stroke(BLUE);
    noFill();
    bezier(p[0].x, p[0].y, p[1].x, p[1].y, p[2].x, p[2].y, p[3].x, p[3].y);
    
    stroke(GREEN + (200 << 24));
    line(p[4].x, p[4].y, p[5].x, p[5].y);
    
    forEach(this.points, 'draw');
    
    this.Intersections.forEach(function(p) {
        noStroke();
        fill(BLUE);
        ellipse(p.x, p.y, 10, 10);
        
        stroke(BLUE);
        line(p.x + p.dx * 20, p.y + p.dy * 20,
             p.x - p.dx * 20, p.y - p.dy * 20);
             
        if (p.r) {
            stroke(PINK);
            line(p.x, p.y, p.x + p.r.x * 30, p.y + p.r.y * 30);
        }
    });
};

Scene.prototype.mousePressed = function() {
    for (var i = 0; i < this.points.length; i++) {
        if (this.points[i].mouseOver()) {
            this.selected = this.points[i];
            break;
        }
    }
};

Scene.prototype.mouseReleased = function() {
    this.selected = false;
};

Scene.prototype.mouseDragged = function() {
    if (this.selected) {
        this.selected.move(mouseX - pmouseX, mouseY - pmouseY);
        var p = this.points;
        this.Intersections = findIntersection(p[0], p[1], p[2], p[3], p[4], p[5]);
    }
};
}
/**************************************
 * Creation of objects
***************************************/

var scene = new Scene();

/**************************************
 *  Main loop
***************************************/

draw = function() {
    background(BACKGROUND);
    scene.draw();
};

/**************************************
 *  Event handling
***************************************/

mousePressed = function() {
    scene.mousePressed();
};

mouseDragged = function() {
    scene.mouseDragged();
};

mouseReleased = function() {
    scene.mouseReleased();
};

mouseOut = function() {
};
