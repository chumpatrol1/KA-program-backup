/**********************************************
 * If we have 5 actors and we need three for
 * a scene, how many different ways can we
 * cast the scene?
**********************************************/ 

var BACKGROUND = color(250, 250, 250);
var BACKGROUND = color(230, 240, 255);
var RED = color(200, 0, 0);
var GREY = color(160, 160, 160);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var BLACK = color(0, 0, 0);
var ORANGE = color(255, 165, 0);
var PURPLE = color(157, 56, 189);
var TOOLBAR = color(245, 245, 245);
var TEXTCOL = color(20, 20, 20);

var letters = 'ABCDEFGH'.split('');
var COLORS = [BLUE, PINK, GREEN, ORANGE, PURPLE, RED, BLACK];

var totalActors = 5;
var castSize = 3;
var sliders;

var findCombinations = function(n, r) {
    var items = [0,1,2,3,4,5,6,7].slice(0, n);
    var combinations = [];
    var usedItems = [];
    
    var end = items.length - 1;
    
    var combine = function(start) {
        for (var i = start; i < items.length; i++) {
            var item = items[i];
            usedItems.push(item);
            
            if (usedItems.length < r) {
                combine(i + 1);    
            } else {
                combinations.push(usedItems.slice());
            }
    
            usedItems.pop();
        }
    };
    
    combine(0);
    return combinations;
};

var findPermutations = function(items, r) {
    var permutations = [];
    var usedItems = [];
    
    var permute = function(items, r) {
        for (var i = 0; i < items.length; i++) {
            var item = items.splice(i, 1)[0];
            usedItems.push(item);
            if (r === 1) {
                permutations.push(usedItems.slice());
            }
            permute(items, r - 1);
            items.splice(i, 0, item);
            usedItems.pop();
        }
    };
    
    permute(items, r);
    
    return permutations;
};

var getPermutationsOfCombinations = function() {
    var combinations = findCombinations(totalActors, castSize);
    var permutations = findPermutations(castSize, castSize);
    
    var castCombinations = [];
    for (var i = 0; i < combinations.length; i++) {
        castCombinations.push(findPermutations(combinations[i], castSize));
    }
    
    return castCombinations;
};

var castCombinations = getPermutationsOfCombinations(totalActors, castSize);

var updateCastSize = function(n) {
    castSize = min(n, totalActors);
    sliders[1].setValue(castSize);
    castCombinations = getPermutationsOfCombinations(totalActors, castSize);
};

var updateNumberOfActors = function(n) {
    totalActors = n;
    updateCastSize(castSize);
};

/*****************************************************
 *      Slider object
******************************************************/
{
var Slider = function(x, y, width, minValue, maxValue, nowValue, name, updateF) {
    this.x = x;
    this.x2 = x + width;
    this.y = y;
    this.width = width;
    this.h = 12;
    this.useLog = false;
    this.updateFunction = updateF;
    
    this.ballR = 8;
    this.ballD = this.ballR * 2;
    
    this.min = minValue;
    this.max = maxValue;
    this.val = nowValue || minValue;
    
    if (this.useLog) {
        this.scale = log(this.max / this.min) / log(2);
        var n = log(this.val / this.min) / log(2);
        this.bx = map(n, 0, this.scale, this.x, this.x2);
    } else {
        this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    }

    this.name = name;
    this.held = false;
};

Slider.prototype.draw = function() {
    noStroke();
    fill(180);
    rect(this.x - 8, this.y - this.h / 2, this.width + 16, this.h, 8);

    strokeWeight(1);
    stroke(0, 0, 0, 120);
    fill(180, 180, 250);
    ellipse(this.bx, this.y, this.ballD, this.ballD);
    noStroke();
    fill(255, 255, 255, 150);
    ellipse(this.bx - this.ballR * 0.3, this.y - this.ballR * 0.3, 5, 5);
};

Slider.prototype.mouseover = function() {
    return mouseX >= this.x - 8 && mouseX <= this.x2 + 8 &&
           mouseY >= this.y - this.h / 2 && mouseY <= this.y + this.h / 2;
};
    
Slider.prototype.selected = function() {
    this.held = dist(mouseX, mouseY, this.bx, this.y) < this.ballR;
    if (!this.held && this.mouseover()) {
        this.setBallPosition();
    }
};
    
Slider.prototype.drag = function() {
    if (this.held) {
        this.setBallPosition();
        return true;
    }
};

Slider.prototype.setBallPosition = function() {
    this.bx = constrain(mouseX, this.x, this.x2);
    this.setValue();
};

Slider.prototype.setValue = function(d) {
    if (d !== undefined) {
        this.val = constrain(d, this.min, this.max);
        this.bx = map(this.val, this.min, this.max, this.x, this.x2);
    } else {
        if (this.useLog) {
            var n = map(this.bx, this.x, this.x + this.width, 0, this.scale);
            this.val = this.min * round(pow(2, n));
        } else {
            this.val = round(map(this.bx, this.x, this.x2, this.min, this.max));
        }
        this.update();
    }
};

Slider.prototype.update = function() {
    if (this.updateFunction) {
        this.updateFunction(this.val);
    }
};
}
/*********************************************
 *      Create objects
**********************************************/

sliders = [
    new Slider(60, 32, 100, 1, 6, totalActors, "Número total de atores", updateNumberOfActors),
    new Slider(width - 160, 32, 100, 1, 6, castSize, "Tamanho do elenco", updateCastSize)
];

/*********************************************
 *      Draw functions
**********************************************/

var drawCast = function(cast, x, y, w, dx) {
    for (var i = 0; i < cast.length; i++) {
        var n = cast[i];
        fill(COLORS[n]);
        rect(x, y, w, w, w * 0.6);
        if (w > 12) {
            fill(255);
            text(letters[n], x, y);
            text(letters[n], x, y);    
        }
        x += dx;
    }
};

var drawActors = function(y, w) {
    var dx = w + 8;
    var x = (width - dx * (totalActors - 1)) / 2;
    
    noStroke();
    textSize(16);
    textAlign(CENTER, CENTER);
    drawCast([0,1,2,3,4,5,6,7].slice(0, totalActors), x, y, w, dx);

};

// Return an array of factors of n
var findFactors = function(n) {
    var factors = [];

    for (var f = 1; f * f <= n; f++) {
        if (n % f === 0) {
            factors.push(f);
            if (n !== f * f) {
                factors.push(n / f);    
            }
            
        }
    }
    
    return factors.sort(
        function(a, b) { return a - b; }
    );
};

var drawPermutations = function() {
    // Limits on height
    var y1 = 112;
    var y2 = 15;
    var h = height - y1 - y2;
    
    var cols = castCombinations.length;
    var rows = castCombinations[0].length;
    
    if (rows > 24) {
        var f = findFactors(rows * cols);
        var n = f.length;
        rows = f[n / 2];
        cols = f[n / 2 - 1];
    }
    
    // Size of each cast member
    var r = min(width / cols / (castSize + 1), 0.8 * h / rows);
    var r2 = r / 2;
    
    // Gap between each cast
    var dx = r * (castSize + 1);
    
    var dy = max(ceil(r * 1.2), min(ceil(r * 1.8), (height - rows * r) / rows));
    //var dy = ceil(r * 1.2);
    
    var px = r + (width - cols * dx) / 2;
    var py = y1 + r2 + (h - (rows - 0.25) * dy) / 2 + 10;
    
    for (var c = 0; c < castCombinations.length; c++) {
        var combination = castCombinations[c];
        var x1 = px;
        
        // Box to show cast
        fill(20);
        rectMode(CORNER);
        
        var d = min(10, r / 4);
        var q = combination.length / rows;
        var w = r * (castSize + 1) * q  - r + d * 2;
        rect(x1 - r2 - d, py - r2 - d, w, r + (rows - 1) * dy + d * 2, 5);
        
        // Count casts
        textSize(14);
        textAlign(CENTER, BASELINE);
        text(c + 1, x1 - r2 - d + w/2, py - r2 - d - 4);
        
        noStroke();
        textSize(r * 0.65);
        textAlign(CENTER, CENTER);
        rectMode(CENTER);
        
        for (var p = 0; p < castCombinations[0].length; p++) {
            if (p % rows === 0 && p > 0) {
                px += dx;
            }
            var y = py + (p % rows) * dy;
            drawCast(combination[p], px, y, r, r);
        }
        
        px += dx;
    }
    
    fill(20);
    textSize(16);
    textAlign(CENTER, BASELINE);
    
    var n = castCombinations.length;
    var m = n * castCombinations[0].length;
    /*
    var txt = "There are " + m + " combination";
    txt += m === 1 ? "," : "s,";
    txt += " comprising " + n + " ";
    txt += n === 1 ? "cast" : "different casts";
    txt += " of " + castSize + " actor";
    txt += castSize === 1 ? "" : "s";
    txt += " chosen from " + totalActors + " available actor";
    txt += totalActors === 1 ? "." : "s.";
    */
    
    var txt = "Se você tem " + totalActors + " ator";
    txt += totalActors === 1 ? "" : "es";
    txt += " disponíveis para montar\num elenco com " + castSize;
    txt += totalActors === 1 ? " ator" : " atores";
    txt += ", há " + m;
    txt += m === 1 ? " combinação" : " combinações";
    txt += " possíveis,\nresultando em " + n + " ";
    txt += n === 1 ? "elenco." : "elencos diferentes.";
    
    //Se você tem 5 atores disponíveis para montar um elenco com 3 atores, há 60 combinações possíveis, resultando em 10 elencos diferentes.
    
    text(txt, width / 2, y1 - 45);
};

/********************************************
 *      Main loop
*********************************************/

draw = function() {
    background(BACKGROUND);
    rectMode(CENTER);
    //drawActors(20, 24);
    drawPermutations();
    
    rectMode(CORNER);
    textAlign(CENTER, BASELINE);
    textSize(13);
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].draw();
        fill(20);
        text(sliders[s].name + ": " + sliders[s].val, sliders[s].x + sliders[s].width / 2, sliders[s].y - sliders[s].h);
    }

};

Program.runTest(function() {
    return true;
});

/*********************************************
 *      Event handling
**********************************************/

mousePressed = function() {
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].selected();
    }
};

mouseDragged = function() {
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].drag();
    }
};

mouseReleased = function() {
    for (var s = 0; s < sliders.length; s++) {
        sliders[s].held = false;
    }
};

mouseOut = function() {
    mouseReleased();
};
