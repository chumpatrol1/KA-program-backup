/*******************************************************
 * Simulating masses on spring under the influence of
 * gravity.
 * 
 * Shows the effect of different masses and spring
 * strengths.
********************************************************/

var BACKGROUND = color(230, 250, 255);
var TEXTCOL = color(20, 20, 20);

var sansFont = createFont("sans", 15);

var running = true;

/**************************************
 *  Generic GUI component from which
 * other elements inherit
 * 
 * The default object is basically a
 * button
***************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};

GUI_Component.prototype.deactivationCondition = function() {
    if (this.deactivationFunction) {
        this.deactivated = this.deactivationFunction();
    }
};
}
/*******************************************************
 *  Generic GUI component from which other elements
 * inherit
 * 
 * The default object is basically a button
********************************************************/
{
var GUI_Component = function(x, y, w, h, name, updateFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.name = name;
    this.updateFunction = updateFunction;
    
    this.showing = true;
    this.selected = false;
    this.disabled = false;
};

GUI_Component.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.mouseOver()) {
        fill(100);
    } else {
        fill(200);
    }
    
    noStroke();
    rect(this.x, this.y, this.w, this.h, 12);
    
    fill(TEXTCOL);
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

GUI_Component.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

GUI_Component.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

GUI_Component.prototype.mouseDragged = function() {};

GUI_Component.prototype.mouseReleased = function() {
    if (this.selected && this.showing && !this.deactivated && this.mouseOver()) {
        this.trigger();
    }
    this.selected = false;
};

GUI_Component.prototype.trigger = function() {
    if (this.updateFunction) {
        this.updateFunction();
    }
};

GUI_Component.prototype.deactivationCondition = function() {
    if (this.deactivationFunction) {
        this.deactivated = this.deactivationFunction();
    }
};
}
/*******************************************************
 *  GUI Button
********************************************************/
{
var Button = function(x, y, w, h, name, updateFunction) {
    GUI_Component.call(this, x, y, w, h, name, updateFunction);

    this.defaultCol = color(235, 235, 235, 240);
    this.highlightCol = color(210, 210, 210, 250);
    this.transition = 0;
};
Button.prototype = Object.create(GUI_Component.prototype);

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(200);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 12);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(TEXTCOL);
    }
    
    textFont(sansFont, 15);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

Button.prototype.fade = function() {
    if (this.mouseOver() || this.selected) {
        this.transition = min(10, this.transition + 1);
    } else {
        this.transition = max(0, this.transition - 1);
    }
};

var FilledButtonDraw = function() {
    if (!this.showing) { return; }
    
    this.fade();
    this.deactivationCondition();
    
    if (this.deactivated) {
        fill(180);
        noStroke();
    } else {
        fill(lerpColor(this.defaultCol, this.highlightCol, this.transition / 10));
        strokeWeight(1);
        stroke(this.highlightCol);
    }
    
    rect(this.x, this.y - 1, this.w, this.h + 3, 19);
    
    if (this.deactivated) {
        fill(120);
    } else {
        fill(lerpColor(this.highlightCol, color(255, 255, 255), this.transition / 10));
    }
    
    textFont(sansFont, 16);
    textAlign(CENTER, CENTER);
    text(this.name, this.x + this.w / 2, this.y + this.h/2);
};

Button.prototype.makeFilled = function(col) {
    this.draw = FilledButtonDraw.bind(this);
    this.defaultCol = color(0, 0, 0, 1);
    this.highlightCol = col;
};

// Circular button
var CircleButton = function(x, y, w, h, clickFunction, drawFunction) {
    Button.call(this, x, y, w, h, "", clickFunction);
    this.drawIcon = drawFunction;
    this.cx = this.x + this.w / 2;
    this.cy = this.y + this.w / 2;
};
CircleButton.prototype = Object.create(Button.prototype);

CircleButton.prototype.draw = function() {
    var c;
    if (this.mouseOver()) {
        c = color(20, 20, 20);
        fill(235, 235, 235, 240);
    } else {
        c = color(40, 40, 40);
        fill(255);
    }
    
    stroke(c);
    strokeWeight(2);
    ellipse(this.cx, this.cy, this.w, this.w);
    
    if (this.drawIcon) {
        fill(c);
        this.drawIcon(this.cx, this.cy, this.w / 2);   
    }
};
}
/*******************************************************
 *      GUI
 * Contains and coordinates all the GUI elements.
********************************************************/
{
var GUI = function() {
    this.elements = [];
};

GUI.prototype.draw = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].draw();
    }
};

GUI.prototype.addElement = function(element) {
    this.elements.push(element);
};

GUI.prototype.mousePressed = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mousePressed();
    }
};

GUI.prototype.mouseReleased = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].mouseReleased();
    }
};
}
/***************************************************
 *      Body object
 * Bodies are Particles that move under gravity
****************************************************/
{
var Body = function(x, y, r, mass) {
    this.position = new PVector(x, y);
    this.r = r;
    this.mass = mass || 1;
    this.velocity = new PVector(0, 0);
    this.acceleration = new PVector(0, 0);
};

Body.prototype.draw = function() {
    strokeWeight(2);
    stroke(80, 80, 250);
    fill(255);
    ellipse(this.position.x, this.position.y, this.r * 2, this.r * 2);
};

Body.prototype.update = function() {
    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);
    // Now we make sure to clear acceleration each time
    this.acceleration.mult(0);
    this.bounce();
};

Body.prototype.bounce = function() {
    var boundary = height - this.r;
    if (this.position.y > boundary) {
        this.velocity.mult(new PVector(1, -1));
        this.position.y = 2 * boundary - this.position.y;
    }
    
    boundary = this.r;
    if (this.position.x < boundary) {
        this.velocity.mult(new PVector(-1, 1));
        this.position.x = 2 * boundary - this.position.x;
    }
    
    boundary = width - this.r;
    if (this.position.x > boundary) {
        this.velocity.mult(new PVector(-1, 1));
        this.position.x = 2 * boundary - this.position.x;
    }
};

Body.prototype.applyForce = function(force) {
  var f = PVector.div(force, this.mass);
  this.acceleration.add(f);
};

Body.prototype.mouseOver = function() {
    return dist(mouseX, mouseY, this.position.x, this.position.y) <= this.r;
};
}
/***************************************************
 *      Spring object
 *
****************************************************/

var Spring = function(p1, p2, restLength, strength) {
    this.p1 = p1;
    this.p2 = p2;
    this.restLength = restLength;
    this.strength = strength;
    this.thickness = restLength / 10;
    this.kinks = restLength / 5;
};

Spring.prototype.draw = function() {
    strokeWeight(this.strength * 4);
    stroke(60);
    //line(this.p1.position.x, this.p1.position.y, this.p2.position.x, this.p2.position.y);
    
    var angle = atan2(this.p2.position.y - this.p1.position.y, this.p2.position.x - this.p1.position.x);
    var d = dist(this.p1.position.x, this.p1.position.y, this.p2.position.x, this.p2.position.y) / this.kinks;
    
    var dx1 = d * cos(angle);
    var dy1 = d * sin(angle);
    var dx2 = this.thickness * sin(angle);
    var dy2 = -this.thickness * cos(angle);
    
    var x = this.p1.position.x;
    var y = this.p1.position.y;
    var dir;
    
    noFill();
    beginShape();
    for (var i = 0; i <= this.kinks; i++) {
        dir = i % 2 === 0 ? -1 : 1;
        if (i > 1 && i < this.kinks - 1) {
            vertex(x + dx2 * dir, y + dy2 * dir);
        } else {
            vertex(x, y);
        }
        x += dx1;
        y += dy1;
    }
    endShape();
    
};

Spring.prototype.update = function() {
    // Contract
    var difference = PVector.sub(this.p1.position, this.p2.position);
    var distance = difference.mag();
    difference.div(distance);
    
    var force = (this.restLength - distance) * this.strength;
    difference.mult(force);

    this.p1.applyForce(difference);
    difference.mult(-1);
    this.p2.applyForce(difference);
};

Spring.prototype.mouseOver = function() {
    // Spring are unselectable (could change at a later date)
    return false;
};

/***************************************************
 *      System object
 * Contains all the objects in the universe.
****************************************************/
{
var System = function() {
    // All elements
    this.elements = [];
    
    this.fixedBodies = [];
    this.dynamicBodies = [];
    this.springs = [];
    
    this.gravity = new PVector(0, 10);
    this.drag = 1;
    
    this.selected = false;
};

System.prototype.addFixedPoint = function(x, y, r) {
    var body = new Body(x, y, r);
    this.fixedBodies.push(body);
    this.elements.push(body);
};

System.prototype.addBody = function(x, y, r, mass) {
    var body = new Body(x, y, r, mass);
    this.dynamicBodies.push(body);
    this.elements.push(body);
};

System.prototype.addSpring = function(n1, n2, length, strength) {
    var p1 = this.elements[n1];
    var p2 = this.elements[n2];
    var spring = new Spring(p1, p2, length, strength);
    this.springs.push(spring);
    this.elements.push(spring);
};

System.prototype.draw = function() {
    for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].draw();
    }
};

System.prototype.update = function() {
    for (var i = 0; i < this.springs.length; i++) {
        this.springs[i].update();
    }
    
    for (var i = 0; i < this.dynamicBodies.length; i++) {
        var body = this.dynamicBodies[i];
        body.applyForce(this.gravity);
        body.velocity.mult(this.drag);
        body.update();
    }
};

System.prototype.mousePressed = function() {
    // Go in inverse order, so we select the top object;
    for (var i = this.elements.length - 1; i >= 0; i--) {
        if (this.elements[i].mouseOver()) {
            this.selected = this.elements[i];
            break;
        }
    }
};

System.prototype.mouseDragged = function() {
    if (this.selected) {
        var mouseVector = new PVector(mouseX - pmouseX, mouseY - pmouseY);
        this.selected.position.add(mouseVector);
        this.selected.velocity = mouseVector;
    }
};

System.prototype.mouseReleased = function() {
    this.selected = false;
};
}
/***************************************************
 *      Create physical system
****************************************************/

var system = new System();

// Add objects here

system.addFixedPoint(200, 40, 5);
system.addBody(200, 120, 20, 400);
system.addFixedPoint(300, 40, 5);
system.addBody(300, 120, 10, 100);
system.addFixedPoint(100, 40, 5);
system.addBody(100, 120, 20, 400);

system.addSpring(0, 1, 80, 0.5);
system.addSpring(2, 3, 80, 0.5);
system.addSpring(4, 5, 80, 0.2);

/***************************************************
 *      Create interface
****************************************************/

var playPause = function() {
    running = !running;
};

var playIcon = function(x, y, r) {
    noStroke();
    if (running) {
        rect(x - 4, y - 5, 3, 10, 5);
        rect(x + 1, y - 5, 3, 10, 5);
    } else {
        triangle(x - r * 0.4, y - r * 0.5, x - r * 0.4, y + r * 0.5, x + r * 0.65, y);
    }
};

var restartProgram = function() {
    Program.restart();
};

var restartIcon = function(x, y, r) {
    textAlign(CENTER, CENTER);
    textSize(20);
    text("↻", x, y);
};

var gui = new GUI();
gui.addElement(new CircleButton(8, 8, 24, 24, playPause, playIcon));
gui.addElement(new CircleButton(38, 8, 24, 24, restartProgram, restartIcon));

/***************************************************
 *      Main loop
 * This is where the system is updated.
****************************************************/

draw = function() {
    background(BACKGROUND);
    system.draw();
    gui.draw();

    if (running) {
        system.update();
    }
};

/*******************************************************
 * Event handling
********************************************************/

mousePressed = function() {
    system.mousePressed();
    gui.mousePressed();
};

mouseReleased = function() {
    system.mouseReleased();
    gui.mouseReleased();
};

mouseDragged = function() {
    system.mouseDragged();
};

mouseOut = function() {
    system.mouseReleased();
};

keyPressed = function() {
    if (keyCode === 32) {
        running = !running;
    }
};
