/*************************************
 * Add the images to the scene and
 * position them using translations.
 * 
 * Once an item is on the grid,
 * you can select it by click on it.
 * 
 * Allow reordering of elements
 * Block mouseover of lower elements
**************************************/

var BACKGROUND = color(250, 250, 250);
var BLUE = color(64, 95, 237);
var PINK = color(255, 0, 175);
var GREEN = color(28, 173, 123);
var ORANGE = color(255, 165, 0);
var GREY = color(60, 60, 70);
var GRIDGREY = color(205, 225, 205, 128
);
var GRIDGREY2 = color(160, 180, 160, 128);
var TEXTCOL = color(20, 20, 20);
var TOOLBAR = color(255, 255, 255);

// Colour of initial image
var START_COL = BLUE;
// Colour of transformed image
var END_COL = GREEN;
// Colour used for transformation values
var TRANS_COL = PINK;

var sansFont = createFont("sans", 15);
var serifFont = createFont("serif", 14);

// Objects
var grid, itemSelector;

var showing = {
    Grid: false,
    Floor: true,
    Target: true
};

/*************************************
 * Building my own images
**************************************/

var spritesLoaded = 0;
var sprites = [];
var spriteData = [
{
width: 83, height: 16, f: function() {/*Ĥß“ģÞ`ĥß“ĥà“Ĥß_Ĥà`Ĥß“ĥß“ĥâ–ĥá”ĥá“ĥá“ĥà”ĥâ‘ĥâ–Ħã‘Ħà“Ħâ”ħã–ĩä—īç‐Ĭè©Ĭæ‐ĭè°Įé®Įè©īä–īå‐Ĭç‒Īä…ĥß`ĥß`Ħà”Ħá”Ħá”ħä—īæ‐Ĭç‒Īæ…ħâ‘Ħâ‘īå…Įé‒ĩä—Ĩâ‘Ĩâ”ħá“ĩä–Īæ…Īä—Īå—Īä–Īå—īæ‐Īã–Ĭå—Įé©ĭè°Īå—ĩä—Ħà“ĢÜ_ģÝ^ħá”Ĩâ”Īâ“ĭæ–įè°Įæ‐Ĭå—Įæ—īä—ĭæ—ĭæ—Įç‐Įè‒ĭæ‐Įæ‐įè°ĭè‐Ĭå—ĭå…Įè‒Ĩã–Ĩâ‘ĩä—ĩä–ĩã‘ĩå–ĩä—Ĩâ‘Ĩä–Ĩä—ħã–ĩã–ĩä—ĩä—Ĩä—Ħâ‘Ĩâ–ĩä—Ĩã–ħâ”Ħà“ĥà“ħá”ħâ‘Ĩã–Ĭç©įé®įé©ĭç°ĭè‒ĭæ‒ĩã–Ħà”Ĩã‘Ĩã‘ħâ”ĩã–Ĭå…ĭç‒īå—ħá“Ĩà“ĭç…İê°ĭç‐Īã–Ĭå—ĩã‘ħá“Ĩá“īä‘ĭæ‐Īä–Īä—Įé©Īä—ħá“īå–Įê©ĭè‒Ĩâ“ģÞ^ġÛ?ĤÝ]Ĩâ”Īä‘Ĭå–ĭç…Įç‐ıê©İê°įè‒İé°įé°įè‒įé©įè°įè‒Įè‐įé°İè‒İé©Ĳì•īç‐īç…īç…Īå–ĩä‘ĩä‘ĩä–ĩå…ĩå…Ĩæ…Īæ—īç…īæ—Ĭè‐Ĭè‒Īå—Ĩã‘Ĩã–Ĩå—ĩå–Īå‘Īå—Īæ—ĩä–Ģß“ğÜ^Ħâ”Įé©įë®İë®įê°Ĭç‐Ĩä–īæ…Įê©Įé©Įé©ĭç‐įè°İë™Ĭæ—Ĩâ“īã‘ıë©İé°Īã‘Īã”Ĭå—Įé‒įè‒īä–ħá`ħá“ĤÞ_ĥß_ĩã”Ĩá“ħà`Ĭç…ıë©ıë©įè‐Įæ—ĩâ”Ħá`Ĩá“Ĭå–Ĭä–Īã”Īä‘ıê°İê°ĭæ…ĭç—ĭæ…Ĭæ…ĭæ…įè‒Įè‐ĭè…Įæ…Įå…Įè‐Ĩã–ħã”Ĩã”ĩä–ĩä‘ħã‘ĥâ”Ĥá`Ģà“ġà“Ĥá”Ħä‘ħä–Īç…Ĭé‒ĭë©Įí•ĭì•Ĩç‐Ħã”Īç—īè‐īé‒Ĩæ‐Ģà“ĠÞ_ĥã‘Įë®İî½İí•Įë®Įë©ĭé°Īå—īè‐Įë™Ĭê©Īå—ĩå—Ĭè‐ĭé°Īå—Īä‘Įç‐ıê°Ĭä–ĩã”īä‘Ĭå—Īä‘īå–ĭç‐īå–ĥÞ_ĥà`īå—īæ…ħá“ħà`īä—Įè‐įç‐įç…Įè—Ĩá“ģÝ]ĦÞ_ĩã”ĩã”ħà`Ĩá`ĭæ…İè°Ĭå—ĩâ”īä–Ĭå—īå—Ĭæ…Įè‐ĭæ—Ĭä–Ĭæ—Īä—Ĩâ‘ĩã”Ĩâ”ĥà`Ħá`Ĥà`ĢÝ^ĤÞ_ĥà“Ĥß`ģÝ^ĥß_Ĩã”ĩä‘Ĩã‘Ħá“Ĩã‘Ĩã‘Ĩâ”ħâ”Ĥß_ġÝ^ĢÝ^ģÞ^ħã‘īæ‐ĭè°ĭé°īç…ĩå—Ĩä–ĩä–īæ…ĭé©įê®ıí¼İí½Ĭè°Ĭç‐Īæ‐Ħâ‘Ĥà`ħã‘įê©Įé°īæ…įê©Ĭç…Ĩä‘ĩä–ĩå–īç‐Īæ…ħã”Ĥà_ħã”ħâ‘ğÜ[ģß_īæ…įê®İë®įê°įê©Įé‒Īå—ĩä—Ħá”ĩâ”Ĭç…ĭè°ĭè‒īæ—īä‘ĩä”ĩã‘ĩå–Īå—īç‒ĩå—ħâ”Ĩä–Ĩã—ġÝ^ĠÛ]ĠÛ]ġÜ[ĢÝ^ĠÜ^ĞÙ?ĢÜ^ħâ‘Ĩã‘Ĩã‘ħã‘ĥà`Ħâ”Ĩã–ħâ‘Ħá”ĥà“ĢÞ_ģß_Ħâ“Ĩâ‘ĩå—īæ‐Īæ‐Īå—Īå…īæ‒ĭè°Ĭç‐Īç…Ĭé°ĭê®Įì™ĭê®Ĭé©Īé©Ĭê®ĭë™Īç‐ħä–ĩæ…Ĭé®ıî¼Ĳð¾Ĭé©Ĭé°ĭê©ĩæ‐Īè‐Īç‒īè°Ĭé©Ĭé©ĩæ—Ĩä–Ĩå—ĥá”Ģà“ĥã‘Ĭé°ıð¾ıî½İí½İí•ĭì™Ĩæ‐ģà`Ĥâ”ĩæ…Ĭé©īé°īè‒Īç…ĩæ…Ĩå—ħä–Ħä‘ħä–ħä—Ħâ”ĥâ”Ĥà”ģà“ĥâ”ĥá‘Ĥâ‘Ĥâ‘Ĥá‘ģà“ģà”ĥá‘ģß`ĥá”ħã—ģà`Ĥß`Ħá”ĥß“ĥà“ĥà“ģÞ_Ĩá”ĩã‘ĩâ‘ĩâ–ĩâ–ĩâ–ĩä—ĩã‘Ĩá”Ĩá“ĩâ‘ħá‘Ĩâ‘ĩä—Ĩã‘ħá“ĩã‘ħâ‘ĩã–īå…ĭè‐įé°İì•İì•įê®ĭè‒Ĭè°Ĭæ‐įê©ĭè°Ĩã”ħâ”Īå–Įè°İê®Ĭè‒īæ—ĩä‘ħâ”ģÞ_ģÝ^ģÞ_ĤÞ`ĩã‘īç‐ĭè‐īç‐Ĥß`ğÛ?ĠÛ[ġÛ]ģÞ_ĩâ‘ħá“ĤÞ^ĥà`Ħà`Ħá”ħâ”Ĩâ“īå—īæ‐Ĭç‐īæ…ħã‘Ħá”Ħà”Ĥà“ģÞ`ģß`Ĥß“Ĥß”Ħâ‘ħâ–ħà“Ĩâ”ħá”Ħß“ħà”Ħß`ħß“Ĩá”īå…Ĭå—ĩã‘Ĩã‘ĩã–Ĩà“Ĩá”Ĩâ”ĩâ‘Ĩã‘ĩã‘īä–Ĭå‐īæ‐ĭè°ĭè°ĭç‒ĭç‒Įæ‐İê®Ĳì•Ĵñ⅓Ĵî¼ĳî¼įé©ĭç‐īæ—Ĭå—ĭç‒Īå—ĩã”īã‘Īã‘ĩã‘īã‘īå—īå—ĩâ“Ĭå–Ĭæ—ĩâ“ĩâ“Ħß`ġÚ[ĠÙ>ĤÞ^Ĩá`ħà_ĥß^ĦÞ^ĥÞ]Ĩâ“ĭå…įè°įè°ĭç‒īå‐īä—īå‐Ĭæ‐Ĭå…Ĭå…Ĭå…ĭç‒Īâ‘ħà“Ħß`ĥÞ_ĦÞ_Ħß`ĤÝ]ģÛ]ģÜ^ĥß`īå…ĩá‘Ĩà“ħá“ħà“ħâ‘Ĩâ”ĩã–Īã–īå—ĩã‘ħá“Ħá“Īä—īå…ĭç‒Īæ…Ĭç‒Įë™įì™İê™įê®įì•įí¼įì•Įé©ĭé°Įé©Įê©Įê®Īè‐īæ—īç°ĭê©Ĭè°īç‒ĩå…Īæ…Īæ—Ĭæ…Įé°Įç‒īå…ħà`Ĥá`ĤÞ^ĥß“Ĩâ‘ĩã‘Ĭå…ĭè°Ĭæ…Īã–ħá”Ħà”ĩã–īç‐īç°ĭç°Ĭç‒Ĭç°īç‐Ĩã–ĥß`Ħà`ħá”ĩå…īæ‐īæ‒Ĭç‒Ĭç‐Ĭæ°ĭé™Ħß”Ĥß`ģÞ_ĥà“Ħá”Ĩã–ĥá”ĢÜ_ġÝ_ģÞ`Ħã‘ĩã—ħá”Ĥà“Ĥà“ģà”ĢÝ`ĥà“Ĥá”Ħã–ĩä–ĩä–Ĭè°ĭé°ĭè°īæ‐Ĭè°ĭè°īç‒īæ—Ĩâ‘Ĩâ‘Ĩâ”ĩã–Īã‘īã–īå—Ĭå‐īä…īã–ĩã‘ħà_ģÝ^ģÜ]ĤÝ^Ĥß_Ĩá”īå…ĭç‐īä—ħá”ħà”ĩã–ĦÞ“Ĥß`ĤÝ_ĤÞ“ĥà“ĥá”Ħá‘ħã—Ĩä—ĩä…Ĩâ…ħâ–ĩä–Īå—ħá‘Ĩâ–Ħà‘Ĩã–Īå…Ĩá–Ĩá–īå…Ĩâ–Īä…īè©ĩä‒īæ‒īæ‐Ĩá–Īã…ħà”ĦÞ`ĥÞ`ĥÞ“ĤÞ“Ħß“ĥÞ`ĥÝ`ĥÞ“ĥà“Ħà“Ĩá”Ĩá–ĩã–Ħà“ħá”ĥà”ħá”ħá‘Ĩã—Ĭç°ĭé®Ĭæ‒Īä—ĩã–Īæ‐ĭé®Ĭé®Ĩä…Ħá”Ħá”ħã–ħã–ħã‘Ĩã—Ĩã–Ĩä—Īä—Īä–Īå—īæ…Īå…Īä—Īä—Ĩâ‘ħã‘ħâ‘Ĩâ‘ĩä–ĩã–ĥà“Ħß”Ĩâ–ħá–Ħá‘Ħà‘Ĩâ–Īä—ħâ–ħá‘Ħâ‘Ħà”Ħà“ħà‘Ĩá‘Īä—īå…ĩâ–Īã—ĩâ–Īã‘Īä—īä—Īä…īä…Īã—Īã—Ĩâ‘ħß”ĩã‘Ĩá‘ĩà”Īä…ĩã—ĩä‐ĩå‐ħâ–ĥá‘ĥá‘ĥá–ħâ—Ĥß“ĥà”ħá–Ħá‘ħâ‘Īä…ĩã—Ĩã–Ħà‘Ħß“Ħà‘ĩã–Ĭæ‒Ĭæ‐Īä—ĩã–Ĭæ‒Ĭè©Ħâ–Ĥß`Ħà“Ħà“ĤÝ_ĥß“īä…Īã–Ĩá”Ĩâ‘Ĩá‘ħß`ħá“Ĩá”ĩâ–Īã—Īã—Īä—ĩã—ĩä—ĩå—Īå…īæ‒īæ‐īå—ĩä–Ĩâ‘Ĩâ–Ħá‘ĥß“Ħà‘ħâ–ħã—Īå…Īå‐īå‐ĭè°ıì•İê•īå‒Ĩâ‘ĩã‘īä…Ĭå…Ĭæ‐ĭæ‒Ĭå…Īä—Īã‘Īã–Īã—īå‐īå‐Ĭç‒īæ‒īå‐Ĭè°īæ°ĩã…Ħá‘ħâ–ħâ–ħã—Ĩã…Ĥà“ģß“ĥá‘Ħã–ĥà‘Ħà“Ĩâ‘Ĩã—ĩä—Ĩã—ħã–Ĩâ–ĩä…Ĭç°Ĭæ‒īä…ĩã‘Įé©Įé™īå‐Ħá”ĥà`ĩã‘Ĩã–Ħá“Ĩá”ĩâ–Īä—Īå…Īä—ĩã–Īä—Īä—Īä—Īã—ĩâ‘Ĩâ‘ħâ”Ħà`Ĩà“Īä–īæ‒ĭç°Ĭæ‒ĭæ‐Įç°Įè©īæ‐īä…Ĭå…ĩä…ħâ–Ĩâ‘īæ‐īå‒Īæ‒ĩã—ĥÞ`ĥß“Ĩâ–Īã—Īä‐ĩâ–ħà”Ĩâ‘Ĩá”īä—īå‐Ĭæ‒īä…Ĭæ‐Ĭæ‐īä‐Ĭæ‒ĭæ‒įè‒Ĩá‘Ħß`Ħß“Ĩá‘Ħà“ĥÞ“ĥÞ`ĤÞ_ĤÞ_ĤÜ^Ħß“ĥÞ`ĥÞ`Ĩá”ĩá–ĩâ–Ĩâ‘ħá”Ĩâ–īå…Ĭç‒īå…Ĭå‐ĭè°Įê®īç‒Ĭç°Ĩå…ĥá”Ħâ”Ĩæ…ħä—ĩå—ĭè‒įì•įë™Įê®ĭé©Ĭè‒Įè°ĭè‒ĭè°ĭè‐īæ…īç‐Īä—ĩã–ĩã‘Īä–Īå…Ĭå…Ĭæ…ĭå…įé©İê™ĭç©īå…Īä‐Īä‐ĩã…Īä…ħà”ĥß`ĤÝ_ĤÝ_Ĩá”īã—Ĩá‘ħß“ħà“ħà”ħß“Ĩá”Ĭä–Īã—īã–Īá–Ĭä…ĭæ‒Įæ‒įè©İé®ıê™ĥÞ“ĥÞ_ĥÝ`ĥÞ`ĥÜ]ĥß“Ħà“ĥà“ĢÛ]ģÜ^ħà“ĥÞ`Ħß`Ĩâ‘ĩâ–ĩâ‘ĥß“ħà“Īã—īå…Ĭå…ĭç‐ĭæ‐Įè°īå…ħà“Ħß`ĥÞ`ħß`ħá”Ħß`Ħá“ĥß_Ħß`ĩâ‘īä—Ĭç‐ĭæ‐īä–īä—Ĭå…Īä—ĩã‘ĩâ”Īå—īã–īæ—īä–Ĭå…ĭç°īæ—īæ…Īã‘Ĩâ‘īæ…ĭè°Ĭç‐Īã–Ħá“ĤÞ`ħà`Īä—Īå…ĩâ–Īå…Īä—īå‐Ħà“ħß_Ĩâ‘īæ‒ĭå‐Ĭå‐Ĭä–Ĭå‐īä—īã—Ĭä…Įè©ĭæ‒Ĩâ–Ĩã—īå‐ĩà“ĩà“Ĩà`ħÝ]ħÝ^ħß`Ĩß`ĥÝ^ģÛ[ĤÝ^ĥÞ^ĥÝ^ĦÝ^Ĩß`Īá”ĩá”ħß`ĩà“Ĭå…Ĭå…ĭç‒ĭæ‐Įæ‐ĩã‘ĤÝ^ĥÞ`ĤÞ_ĤÞ_ĥÝ_ĤÝ_ĥÞ_ĥß`ģÜ]ĦÞ_ĥÞ_ĢÜ[ĢÜ]ĤÝ]ĥÝ]ĥÞ^ħÞ_ħà“Ĩà“Īá`ĩá`īâ”Īã‘ĩà`īã‘ĭå…ĩâ“Īà`ĩà`ĥÝ^ĩá“īã–ĭä–īã–ĩà`ĭã”Įå—Ĭå–ĥß_ġÙ?ħß^īã–ĩâ”ħß_ĩß_īã”Ĭä–ĭä–Įæ…īâ“īã‘Ĭä–ĭæ…Įå‐ĩã‘ħß`Īã‘Ĭå—įæ‐*/}},
{
width: 128, height: 16, f: function() {/*ģÝ^ĢÝ^ġÛ]ĠÛ[ĠÚ]ĢÜ]ĤÞ^Ĥß_Ħß`ĥß_Ħà`ĩã–Īå…īæ…Īä…īæ‒Ĭæ‐ĩã‘ĥß`ģÞ_Ĥß_ħà“Īä–ĩä—īã—īã—īä—īä—Īã—īä—īå—Ĭæ‒Ĭæ‐ĭæ‐Ĭç‐ĭç°ĭç°Įè©ĭé°ĭè°ĭè‒Įé©įé®ĭé®ĭç°Įé®įê®İë•įê™įë•İë•İë•ıì¼ĳî⅓Ĳí⅓Ĵñ‡ĳð†ĳî⅓ĳð⅔ĳð⅔ĳî¾Ĳî¾Ĳð¾ĳî⅓ĳð⅓ıì¼Ĳí¾ĳð⅔ĳñ†ĵóµĵó¢ĵò¢Ķô£ĵó¢ĵóµĶóµķö«Ķô¢ĵòµķõ«ĸø♥ĸõ♠Ķô€ĳî¾ĳî¾ĵñ†Ķóµķõ¢ĸö€Ĺö♠Ĺø♣Ĺ÷♠ĺ÷♠Ĺ÷♣ĺ÷♠ķõ£Ķô¢Ķô¢Ķóµĵò†Ķóµĸö♠Ĺö€Ķò†ĵò‡Ķò‡ĳî½ĳî¼ĵð⅓Ķò†ķõµĸõ¢Ĺõ£Ķò⅔İê•Ķòµĸõ£ķó‡Ļù♣Ķó¢Ĭæ—īã–ĭæ…įæ…İç‐İç‒įè‐İê°ġÜ[ġÛ]ĠÙ?ğØ>ĞØ?Ğ×?ĝ×=ĝØ>ĠÙ?ġÚ?ĢÚ?ġÛ[ģÝ]ģÛ]ġÚ?ĢÜ]ĤÝ^ĢÛ[ģÛ[ģÛ[ĠÚ>ġÚ?ĥÜ]ĥÝ]ĤÜ]ĤÜ[ĥÝ^ĥß_ĥÝ^ĦÞ^ĦÞ_ĥÝ]ĤÜ[ĤÛ[ĤÜ]ĥÝ^ĥÞ_ĦÝ^ħà`Ĩà`ħà`ħß`ħß_ĦÞ_Ħß_ħÞ_ħà`ħà“ħà`ĥÞ_Ħß_ħß`ħß`ħà`ħß“ĩâ”ĩâ”Ĩá“Ĩá“Ĩá”Ĩâ”Ĩá“Ĩá“ĩâ‘Ĩâ”ĩâ”Ĩá“Ĩá“Ĩâ“ĩã‘Ĩâ–Ħß`Ĩâ”ĩã–ĩâ‘ĩã‘Ĩâ”Ĩá“Ĩá”Ĩã‘ĩâ‘Ĩá”ĩã‘Īä–ĩâ”ĩâ”ĩã‘ĩã‘ĩä–Īä—ĩä–Īä–ĩâ‘Ĩâ‘Īä–Ĩâ‘ħâ”Ĩâ‘ħá“ħá”ħá“ĥß`Ĩâ‘Īä–ħà`Ħà_ĥß^ĩã‘īä–Īå—īå—Ĭæ…Ĭå…Īä—Ĩà“Ĩá“Ĩâ”ĩã‘Ĭæ‐Īå…Ĩá“Ħà_Ĩá`Īâ”Īâ‘Ĩá“ħà“ĥß`ĠÚ?ĞÙ?ĠÙ>ġÙ>ġÚ>ĠØ?ĠÙ>ĠÙ>ġÚ[ĤÜ]ĤÝ]ĥß]ĥÞ]ĥÜ[ĥÝ]ĥÞ^Ĥß_ĥÞ^ĥÝ]ĥÝ]ĥÞ^ĥÝ^ĥÞ_ħà_ħß^ħÞ^ħà_ħà`ħß_ħÞ^ĦÞ^ħà_Ĩá“ħà_ħà`Ħß^ĦÞ^ĦÞ_ĥÞ^Ħà_Ĩá”Ĩá“ħà_ħà`ħß_ħß_ħß`Ħß_ħß^Ħß_ħß_ĦÞ_ħà_ħß_ĦÞ_ħß_ħß_ĥÞ^ħß_ħá“ħà`ĥß^Ħß^Ħà_ħà`ħß_ħß_ħß_ħß`Ĩá“ĩã”Īã”ĩâ”ĩá`Īâ“Īâ”ĩâ”ĩã”ĩá“ĩâ‘Īå—Īä‘Īâ”ĩã‘Īä–ĩâ”ĩâ”ĩâ‘ĩá“Īã‘Īã‘ĩâ“ĩá“ĩá“Ĩá“Ĩà`Ĩà_Ĩá`ħß_ħß`ħß`ĤÜ]ĥÞ_ħß_ĥÝ^ĤÛ?ģÜ[ĦÞ^ĩá“ħß_ĦÞ_ħß`ĩá“Ĩß`Ĩß_ħÞ_ħß`ħß_Ħß_Ħà`Ĩß`ħß_Ĩà`Ĩà“ħÞ_ĤÝ^ģÜ]ģÝ^ğÙ>ĠÛ?ĢÛ[ģÛ[ģÛ[ĢÜ[ģÜ[ĤÞ^ģÜ^ĤÜ^ĦÞ^ĥÞ^ĥÝ]ĦÞ[ħß^ĥÞ_ĤÞ^ĥß^Ħß^Ĩà_Ĩß`ħà`ħá“Ĩá`ĩá“ĩâ“Īâ“Īã‘ĩã‘ĩà`Īá`ĩá“ĩã”ĩâ”ĩâ‘Īâ”Īã“ĩá“Ĩà_Ĩá`Ĩâ“ĩâ“Ĩâ“Ĩà`Ĩà^ĩâ”ĩã–īä‘īã”Ĭä‘Ĭå—Ĭå–īä–īå–Īã”Īâ“Ĩà_ħß`Ĩà`ħâ”Ĩâ”Ĩá`Ĩà`Ĩâ“ĩã–ĩã‘ĩâ“ħà`ħß`Ĩà_Ĩá“Ĩá“Ĩâ”Īã”īå‘īä–Īã‘īæ—īå—ĩâ”Īã”Īã“ĩâ`ĩá`Īã‘Ĭæ‐īä‘ĩâ“Īâ`Īâ“ĩâ”Ĭä–īä‘Īã”Īã”Īã”Īã”Ĩâ“ħà`ĥß_ĥÝ[ĤÜ]ĤÝ]Ħß_Ĩà_ħÞ^ĤÜ]Ħß_Ħà`Ħà`ħá”Ĩá“ĩâ‘ĩã‘Īâ”ĩâ“ĩá“ĩâ‘Ĩá“ĩâ”Ĩá“ħß_Ĩá`ħà“ħß`ħß_Ħß_Ħà`ğÛ[ĠÛ]ĠÛ]ĠÛ[ġÛ[ĢÝ^ĢÜ^ģÞ^Ĥß_ĥß“ĥà_ħá“ħá“ħà_ħà`Ĩã‘Ĩã–ĩã‘ĩã‘Īä‘Īä‘Īä‘Īä–Īä‘Īä–Īä–Īã‘Īä—ĩä–ĩâ“ĩâ“ĩã‘ĩã–ĩâ‘ĩá”ĩá“Ĩá`ĩá`Ĩá“Ĩâ”Ĩâ“ĩâ“ĩá“ĩá`Ĩà_ħà`ĩâ”īã‘Ĭã‘Ĭå–Ĭå—Ĭå—Ĭå—ĭæ—īä—īä‘īã”īã”ĩá“ħà_ħà_Ħß^ĦÞ^Ĩß_ħà_Ĩà`Ĩß_Ĩß^Ĩà_Ĩá_Ĩá_ħß_ħÞ^ħß^Ĩá“Ĩá“Ĩà`Ĩá`Ĩâ‘Ĩâ”ĩâ“Īã”ĩâ“ĩá_ĩâ“ĩã‘Ĭä–īã“Īâ`ĩâ`ĩá_Īã”Īä–Īâ“ĩá`ĩâ“Īã‘ĩå–Īã”Īâ”Ĩà_Ħß^ĦÞ_Ħß`Ħß^ĦÞ^ĤÜ]ĥß^Ħà`ĥß^ĥß`ħà“Ĩá“Ĩâ“Ĩá_ĩâ“Ĩá“Ħá“Ħá“Ħá“Ħá“ĥß_ĥà_Ħà`ĥß_ĥß^Ĥß^ĢÝ^ĥâ‘Ħã‘ĥâ”Ħâ‘ħä—Ĩå…Ĩå—Ĩä—Ĩå…ĩå—Ĩå–ĩæ…Īç‒ĩæ…ĩæ…ħæ‐Ħå–ħä–Ĩæ…ħä–ħä‘Ħã–ĥä—ĥâ‘Ĥá“ģà`ģà_ġß_Ģß`ģß_ģß^ģà`ģà“Ĥà`ģà`ĥà`ĥá`ĥà`Ĥá“ģà“ģà“Ħã“Ħâ”ĥá`Ħâ”ħä‘Ĩå–ĩå–Ĩä‘Ĩä‘Ĩå–ĩã‘īç…Ĭè‒īè‒īç…īæ–īç…īå—ĩå‘ĩä‘ĩã‘ĩä–Īå–ĩä–Ĩã‘Ĩã‘Ĩã‘ĩã”ĩä‘Īå–Īæ–Īä–ĩã”ĩã”ĩã”Īã”īä‘Īã”Īã‘Īâ”Īã”Īã”īä‘Īã”ĩá“Ĩá`Īâ”īä‘īã“Īâ“Īá`Īá“ĩà_ĦÞ]ħÞ]ĩà_ĩá“īâ`īâ`Īá`Īá`Ĩß_Ĩà_Ĩß^ĦÞ^ħÞ^ħÞ^Ħß_ĥÞ^ĥÝ]ĤÜ[ģÜ?ĤÝ[ĥÞ]ĥÝ]ĤÜ?ĤÝ[ĥÞ]ĤÝ[ĤÜ]ģÜ]ĢÛ?ģÜ[ģÜ]ģÜ]ģÜ]ġÛ[Ħâ”ħâ‘Ĩã”ħâ”ħá`Ħà“Ħâ”ĥá“ĥá“Ĥß_ĢÝ]ĠÛ[ğÜ]ĞÚ[ĝÙ>ĜÙ?ĝÙ?ĝÙ?ğÚ[ĞÙ?ğÚ?ğÚ[ĠÛ[ĞÚ?ĞÚ?ĢÝ]ģÝ]ģÞ^ĤÞ_Ĥß_ĥß`ĥà_ĥà`Ħá`ħá“ħà`Ħá“ħà`ħá`Ĩá“Ĩá“Ĩâ‘Ĩâ”ħâ”Ĩã‘ĩâ”Ĩâ“ħá“Ĩá“Ĩá“ħâ”ħà`Ĩá`ĩâ”ĩâ”ĩâ“Īä”Īã”īä‘Īã‘īä”Īã”īã”īã”Īâ‘Ĩâ”ĩã“Īä”ĩâ”ĩá“ĩâ“ĩã”ĩá“Īâ”Īâ‘Īã‘ĩâ”Ĩâ“ĩâ“Īã‘īä–Ĭä‘īã‘ĩâ”ĩá”ĩá“Ĩá“ĩâ“Īä”ĩã”ĩá“Ĩâ`ĩâ”Īä‘ĭç…ĭæ…īå–ĭç…Ĭæ—ĭå—ĭå–īæ—ĭæ…Ĭå–īä‘īä–īä–īå‘Ĩá“Ħà`ħá“ħá“Ħà`Ħá“Ħá“Ĩã”īå‘Īå—īå—īä–ĩä—Īå–Īå‘ĩä–īæ…ĩä–Ĩã”ĥà`ğÙ>ĝ×=ĞØ>ĞÙ>ğÙ>Ğ×=Ğ×=ğØ>ġÚ?ġÚ?ġÚ?ġÚ?ġÚ?ĢÛ]ĢÛ[ģÛ[ĢÙ?ĤÛ[ĤÝ]ĤÝ]ĤÝ]ĤÝ]ĥÜ]ĤÝ^ĤÝ^ĥß_Ħß^ĦÞ_ħß_ħà_ħà`ħß`ħß_Ħß^ĦÞ^ĥÝ]ĥÞ^Ħß_ĥÞ^ĦÞ_ĥÞ^ĤÝ^ġÚ?ģÛ?ĥÝ[ĥÝ[ĤÜ[ĤÝ]ĤÜ?ħÞ^ĩà_ĩá`Īá“ĩá“ĩà`Īá“īã”Īâ“Īâ“īã‘Ĭä–Ĭä–Ĭä–īã”īã‘Ĭä–Ĭä—īã–īã‘īã‘īã‘īã–īâ”īã”īã‘īã‘īâ‘ĩâ”Īâ”Īá“ĩà“ĩá”Īâ“Īá`Īá`Īá“ĩá“īâ”īã”īâ‘Īâ”Īâ“Īá“ĩá_Ĩá`Ĩá`ĩâ”Īâ“īä—ĭå…īä–Ħà`Īä–Ĭå–ĭä–ĭæ—Īã”Ĩâ“Īä‘ĩâ”ĩâ”ĩâ“Īã”ĩâ“ħá`ĩâ“ĩâ“ĩã”ĩâ”Ħá`ħá“ĥà`ĥß^Ĥß_Ĥà_Ĥà“Ħà“ĤÞ_ğÚ?ĞÙ?ĞØ=ġÛ[ĢÜ]ģÝ]ĤÝ^ģÝ^ģÛ]Ĥß`Ĥà`ħâ”ħá“ħâ“ĥá`ĥà“ĥß`ĥÞ_ĥá`ĥâ”Ĥß_ģÝ^ĢÜ]ĢÜ]ģÞ_ģÞ_ģÞ^ģà`ĥá`Ĥß^Ĥà`ĤÞ^ĥà_ĥâ“ħá“ħâ“Ħâ“ħâ“ħá`ħâ”ħã”Ħá“ģÞ_ħã‘Īæ—Īæ–Īå—Īä–ĩå–ĩä‘Īå–īç…Īå—Īä‘Īä–īæ–īæ—īä–īå—īå–īå–īæ—īå—īå–Īä–Īä—īå–īä—īå—Īä‘Īã‘Īä‘Īã‘Ĩá“Ĩá“Īâ”Īá“ĩâ“Īã”Īâ”Īâ“Īâ“īâ“īâ”īâ“Īà_īâ“īâ”īá`īá`īâ`īâ”ĭâ”Ĭã”ĭã”Ĭâ“Ĭã–Ĭä‘Ĭâ”Ĭâ‘Īà`Īá`īâ”ĭå–Ĭã‘Ĭá“īâ“ĩß_Īâ`Īâ“Īá`ĭä‘ĭã‘īâ“Ĭâ“īâ“īâ“ĭã”Ĭã‘Ĭå–Įæ…ĭä—īä–īâ”Īâ‘Ĩà“ħà`Ĩà`ģÝ_ĢÛ]ĢÚ[ĤÞ_ĥà`ĥß`ģÜ^ĢÜ^ġÛ]Ĥß`ģÝ_ĤÞ_ģÛ]ġÚ[ģÜ]ĢÛ]ĢÜ^ġÙ[ĢÛ]ģÞ_ĢÜ]ġÚ[ġÚ[ĢÛ]ģÝ^Ħß_ħà”Ĩã‘ĩä–Ĩá“ħà“ħá“Ĩâ“ħâ“Ħß_Ĩâ”ĩâ”ĩâ”ĩá“ĩá“ħá`ħá`Ĩá“ĩâ”Īå‘Īã”Īâ”ĩá`Īã”Ĭå–ĭæ—įè‐įé°įè‐įè‒İé°İë©İé°İê©İê°įè‒İé‒įè‒įè‒Įè‒ĭç‐Ĭå—ĭæ—ĭæ—ĭæ—īä‘īä‘īä—Ĭæ…ĭæ‐ĭè‒Ĭã‘Īã”īå–Īã”īã–Ĭæ‐ĭè‒ĭç‒ĭè‐ĭç…Ĭæ…ĭè‐ĭç…Įç…Įè‐ĭæ‐ĭæ—ĭç‐ĭç‐Įè°ĭé‒īæ…īå—īå—Ĭæ…Īä‘ĩá“īç—Ĭç‐ĭæ…ĭç‒įè‒İë®įë®Įè°Įê©ĭè‒ĭç‐ĭè‐ĭç…ĭè‒Ĭæ—īå—Īå—Īä–īå…īç‐Ĩá”ħã”ĩä–īä—Ħß`ģÛ]ĢÛ]ĢÚ]ģÜ]ĢÝ^ĠÙ[ğØ>ĠÙ[ĠÙ?ĢÛ]ĢÛ]ĤÝ_ģÛ]ĢÛ]ĤÝ^ĢÝ^ĥÞ_ĥÝ_ħà“ĩã‘Ĩâ”Ĩà”ħà”ĥÝ_ĤÞ_ĥÞ_ģÝ]ģÞ_ĢÝ]ġÙ[ĢÛ]ĤÝ^ĥÞ^ĥÞ^ħß_Ĩá”Ĭä—ĭå‐Ĭä—ĭä—Įæ‒İé°İé°įé®ıì™Įè°įé©ĭæ‒Įè‒Ĭè°īæ‒ĭè‒Ĭè°Įè‐ĭæ…ĭæ‐Ĭè°īæ‐īæ…īç‐īå…Īæ…Īä–Ĭæ…īå—Īå…īå…Ĩâ”ĩã”īæ–Īå—ĩâ”īå—īæ…īå…īç‒īä—Ĭæ‐Ĭç‐ĭæ…īæ…Īæ…Īå—Īã–Īã–Ĭå—īå–īä—Ĭä—īã‘Īã‘Īã‘Īâ”Ĭä–ĭä–Ĭå—ĭæ…ĭå–Įå…Įå…įæ‐Įå–Įä–ĳé©įç‐įä–Įæ‐įæ…Įç‐įç‒įå…Ĭå—Įç‐Įå…įç‐įæ…Įæ‐Įå…ĭå—ĭå—Ĭä–ĭã—Ĭå‐ĭå…ĭæ‒Įç‒įç‒ĭæ…ġÛ]ġÛ^ĢÜ^ġÛ]ĢÝ_ĢÜ]ĢÜ^ĢÛ]ġÛ]ğÚ]ĢÜ^ĤÞ_Ħß`ħá”Ĩâ‘Ĩã—Ĩâ‘ĥà“ģÞ`ġÝ_ĠÛ[ğÙ[ģÜ]ģÜ^ĢÜ]ģÝ^ĥÞ_Ħß`Ĩá“Ĩâ‘ĩâ‘ĩã—īã–īå…ĭæ‒Įè°ĭè‒ĭæ…įç‒Ĭæ…īå—Īä—ĩâ–ĩã–Ĩã–ħá“ħà“ĥß`ħà`Ĩà”ħà“Ĩà”ĩã–Īä‘īä–Ĭä—Ĭæ‐Ĭä—ĭä—Ĭå…Ĭä–Ĭæ…ĭæ…įç‐įè‒Įç‒ĭç‒Ĭå…Ĭå—īå—īä—Īâ‘Īâ‘Īã–Īã—īå—īã–Īâ‘īä–īä‘Ĭä–Ĭå—ĭæ‐ĭæ‐įæ‐įè°įé‒İé°İé°įè°įç‒įè°İç‒İé‒įç‒įè°įé©Įç‒įæ‐ĭæ‒ĭæ‐Ĭå—Īä‘Ĭæ‐Ĭå…ĭæ‒įè°ıê®ıé©įé°Įç‒ĭæ‐īä–Īã–īä—Ĩâ”ĩä–īå—īã–Ĭæ‐īå‐Īå—Īã–īã–Ĩã–Ħà“ħá“Ħß`ģÜ]ģÝ_ĥß`ĥß“ģÝ_ĠÚ[ğØ?ğÙ?ģÝ]ĤÝ_ħà”Ĩâ‘ħà“ħá‘ģÞ_ĢÜ^ĢÜ]ĠÚ?ĢÛ[ĢÜ^ĤÝ_ħà_Ĩá“Ĩá‘Ĩâ”ħâ”ĩâ‘īã–īä—Ĭå‐Ĭæ…Ĭå…īä—Ĭä—īä—īå—Īã–ĩâ”ĩá”ĩâ”ĩâ“ĩâ‘ħà“Īâ‘Ĭä—ĭæ…Įç‐įè°Įè©İè©ĭæ…Ĭå‐Īå—Īã–īã–Īâ‘ĩã‘ĩá‘ĩâ‘ĩâ‘ĩâ‘ĩá”Ĩà“Ĩá`ħà`Ĩà“ħß“ħà“īã–ĭä—Įå…ĭå—Įæ…įç°įç‒İè°İè‒İè°Ĳê®ĳë®ĳì½Ĳë™įè©Įè°Įç°Ĭæ…Ĭä—Ĭä—ĭç‒ĭç‐ĭå…Ĭä—Īâ‘īä–īä–Ĭä–Īã‘Ĩà“ĩá“Īã‘īä—Ĭä—Ĭã–ĩã‘Īã‘Īã–Īâ‘īã–ĭä—Ĭå—Īã–Īã–Īâ”Īã‘Īã‘Īâ”Īã”ĩã‘ĩá”ĩä–ĩä–Īã‘ĩä–Ĩâ”ĩá”Ħß`Ħß`ħà“ħß”Ħß“ĦÞ_ģÛ]ĢØ[ģÛ[ħß_Ĩà“Īâ”ĩà‘Ĩà“Ĩß`ĦÝ`ĦÜ]ĥÝ^ĦÝ^ĩá”Īâ‘Īâ‘Ĩß”ħß”ĥÝ_ĥÜ^ĦÞ^ĩà`īä—įç©İé®ĭå‐įæ‐įæ‐Ĭå‐Īâ–Īä—Ĭã—Īâ‘īã—ĭå…ĭä—Įæ—ĭå—ĭæ…Įç°ĭæ‒īä—īã…ĩä—īå…ĩä…ĩâ–ĥÞ_ĢÜ^ĥß`Ĩà“Ĭä–īä—īä—īä—īä—Īã–īå—Ĭå…īå—įè‒ıé©Ĳê™ĳí½Ĳí¼ĳì½ĳí½Ĵî¾Ĵí½ĳí½Ĳì½ıë•İé®ĭè°Ĭæ‐Ĭå…Ĩá”ĥß“ĤÞ_Ħß`Īã–Ĭå…īä…Įæ…ĭæ‐ĭå‐ĭå…Īã‘ħß_Ĩß_īã”ĭå—Įå…įç‐įç‐Ĭå…Ĭä—Ĭã–īã—Īâ‘ħÞ“ħß`ħß`ĦÝ^ĦÝ_ħÞ_ĦÝ^ģÛ^ĤÛ]ĥÛ]ĤÛ[ĤÚ[ģÛ[ĢÚ?ģÛ?ģÚ?ģÚ[ĥÜ^ĨÞ_ĨÞ_Ĩß_ħß`ĥÝ_ĥÜ]ģÚ]ģÛ^ĤÜ^ĦÝ^ĥÞ`ĦÞ`ĦÞ`Ĩß`ħà“Ħà“ģÝ^Ħß`ĩá‘Ĩá‘ĩá”Īã–Ĩà”ĥß`Ħà“ħß”ĤÜ_ĤÝ_Ħß_Īâ‘ĭå‐įç°įé©įè©įç©ĭæ‐Ĭå…Ĩã‘ħà”ĩà”Īâ‘ĭå…Įæ‐İè©įè°İè°Įè‒Ĭä—ĭä…īå—Īä–īâ‘īã–īä–Įæ‐İé©İè°įç‐įè‒Ĳê®ĳë®ĳë•Ĵí¼ĵí¼Ĵì¼ĵí¼ĵî¾Ķí½ĳë™Ĳê™Ĳë™ĳê®ıè©Ĳé©ıè°İç°Įå…īâ‘īá”Ĩß`Ĩà“Ĩß“ħÞ_ĦÞ_īâ‘Ĭã‘Īá“ĩà“ĭã–įæ‒ıè©ıê®ıé®įæ°Ĭä—Ĭã–Ĭä—įæ‐ıé©Ĳê™İè°ĭå—īã—Īã‘ĩá”ħß“ĦÞ_ĦÝ^Ħß`ħà“Ĩß“ĩà“īã–īã‘ĩá”īã–Ĭä—īâ–Ĭã–Ĭä—īå—Ĭã–Ĭå…ĭå…Ĭå…īä—Īá‘Ĩà“Ĩá‘ĥÝ_ġÚ[ğØ>ğØ?ġÚ]ġÛ]Ĩà“ĩá”Ĩà_ĩâ”Īá”īâ‘ĩá“ħß^ħß_Īâ‘ĭä—īã—Īã–ĦÞ`ĠÚ[ğ×>ġÛ[Ĩá“ĭå—İæ‐İê®ĳë™ĳé®ıé®İè°įè‒įæ‒įç‐ĭå…Ĩá`ĦÞ_īã–İç‒ıé°ıë®ĳê®Ĳé®ĳì•Ĳë™ıë®ıê®ıê©Ĳë•ĳì½Ĵì•Ĵî¼Ĵî¼ĵñ¾ĵñ⅓Ĵî¼Ĵî½Ĵð¼ĵð¼ĵî¼ĵî¼Ĵñ¾Ĵí½Ĳì•ĳì½ĳì½Ĳë™įé°Įç°Įè°Ĭæ‐īä—Ĭæ‐Ĭæ—Įé‒įê°įé‒įé°Ĳì™ĳí•ĳî¾ĵî¼ĵð¾Ķñ⅓ĵñ¾Ĵî¾Ĵí¼Ĵî¾ĳì•įé©Įè©Ĭå…ĭæ‐İè©İê©İê©įè‒īå—Ĩâ‘ħà“Ĩã‘īã–Ĭä‘Ĭä–ĭå…ĭä—ĭæ…įè°įè‒ĭä–īã‘ĩá”ĩà`īá“īâ–Īà“Īà`ĩà`ĩá“Īâ”Īß_ħß_ħß`ĦÞ_ħß`ĦÝ^ĤÜ]ĤÜ]ĥÛ]ĥÜ]ĦÜ]ĩß_īá‘Īá‘*/}},
{
width: 95, height: 16, f: function() {/*īâ‘Ĩß_ĩß`ĩà“Īà“Īà”Īà“Īá“Īá“īà”ĩß`ĨÞ`Ĩß`ĦÝ^ħÞ_ĩà”ħß`ĥÜ_Ĩß`ĩà`ĩß“ĩà“Ĭâ‘īâ‘īâ‘Īá‘ĩà“ĩà“īâ‘Ĭâ–Ĭã‘īâ”īâ–Ĭã—īã–īä–Įå—īâ‘Įå—ĭå…Įå…įæ‐İæ‒Įæ‐įç‒ıè©Ĳê®İé©ıê®ĳê®İé©Įç‒İé©İé®įç‒İé©İé°İê®Ĳë•ıê®İè©ıé©ĳë™ĳë™ıê™ıé©Ĳé©ıé°İè°İè©İç°įæ‒ĭä—Ĭä–Įæ…Įæ…įæ‐İç‒İç°ĳê®ĳë•įç°ĭä—ĭä–įä–İç‐ıç‒įå—ĭå—Įå—īâ”ħÞ_Ĩß`Ĭâ‘ĭå…Īá‘ħÝ`ħÞ“ħÞ`ħÜ^ħÝ^ħÜ^ĦÜ]ĩÞ_ĨÞ`ĨÝ^īß“īá”Īà“Īá”ĭã—ĭá–Īß“īá”Ĭá‘Ĭá“Ĭâ”įã…ĭã—Įâ–Įã—Įã—ĭâ‘ĭâ–ĭâ–Ĭâ‘Ĭâ”Ĭá”ĭâ‘Įä—İä…İå‐ıç°ıæ‒ıç‒ıç‒İå‐ıç°İæ‒ıæ‒İæ°İå‐İæ…İå‐İå‐įæ…İä—İæ‐ıç‒Ĳç‒ĳè©ĳé™Ĳè©Ĳè©ĳè©Ĳç©ĳé©ıè°İç‒İæ‐ĳé®Ķë½ĳé™ĳé®ĳé®ĳê®Ĳè°ĳè©Ĳè©İæ‐İå…ĭã–Ĭã‘ĭã‘įä—Įå…įå—įä—İæ‒ĳé°ĳé©ıç‒įå…ĭã–īá“Ĭá”ĭã–Ĭâ‘ĩß`Īá”ħà–ĥß”ħá–Ĩâ–ĩâ–ĩá‘Īâ–ĩá–ĭå‐Īâ—ĭæ‒īã‐Ĭä—Įç‒Įå‐įç‒Ĭã—Īá–Ĭã‐įç°Įæ‒Īá–īã—īâ–ĭä…Įä‐ĭä—ĭä…Įå‒Įå‐īâ—ĭä…įç‒Ĭã…Ĭä‐ĭä…Īá‘įç°Įå‐įæ‐Įå…ĭä…įæ°Ĳê™Ĵí¾ĵì¾ĳê½Ĵì¼Ĵì¼ĵë¼Ķí⅓ĵì¼ĳé½Ĳé™ĳë•Ĳê•Ĳé™įå…įå…İæ°İç°İæ°İç‒įå…ĭä…įæ‐Įå‐Ĭã–īà”ĭã–Įä—İå…ıæ‐ĳè©Ĵé®Ĵé®ĳé©Ĵé®ĳé©Ĳè°ıç‒İæ‐įä…ĭâ‘Īà“īá“īà“Ĭâ‘ĭä—Įå—įä—Įã–ĩß_īà`Įä—ģÝ_ĢÛ^ģÝ_ĥÝ_Ħß“Ħß“ħß”Ħß“Ĩâ‘Ĩà”Ĭå‐ĩá—ħß”ħà”ĩâ–Ĭæ‐īä‐Īã…īã—īä…īã—Ĩß”Ĩà”Īâ–Īâ–Ĭä‐Ĭå‐Īã…Īâ—ħß“Ĩß”īâ—ĭæ‐ĩã—Ĭä‐İê™Ĭå‒ıé®įç®İê•Įè©įè®Īã—Ĭå…įè°Įç‒Ĭä‐Įè°ĭç©īã…ĭæ‒ĩâ–Ĩà–īã…īå…Īâ—ĭæ‐Ĭå‒įè®Ĭå‒īä…Īã—īæ‐Ĭæ°Ĭå‒īå‒īå‐ĭç©Įç©Įè®İë•Ĳì½įê™Ĭæ‒īå‒īå…Ĭæ‐Īå…ĩã–ĩâ–īæ…ĩâ–Ĭæ…īã…īæ‒Įè°Ĭå…ĭç‒īä—ĭæ‐Īâ–Ĩá”Īâ–ĭæ…įç°īé®ĭê•ĭê•Ĭé™ĭé™Įë½ĭë½Ĭé™Ĭé™Įë½Įë½Ĭé®īé©Īç©ĩç‒ĩç©ĩæ©ĩæ°īæ°ĩæ‒ĩç©ĩæ‒ĩç©īè©Ĭè™ĭë•Ĭê•īé™ĭê•Įë•Įì½Įë¼ĭì½Įë½İí⅔įî¾įì¼İî⅓Įê•Ĭê™ĭê™ĭê•Ĭè®Įë•Įë½īé®ħä‐ĩç‒ĩæ‐Ĩã…īç°īæ‒Īæ°Ĭé©ĭé®Ĭè®įì¼ĭé•Įê•ĭé•įì½İì¼Įë½ĭé•ĭé®ĭè©Ĭæ°Īå‐Īå‐Īä…Ĩã—Ĩã‘ĩâ—ħà”Ĩà‘ħá”Ĩã–ĩã—Īã—Īä—Ĭç‒īä…Įè©īä‐īå—ĭç‒Ĭå‐įè°ĩâ–Īâ–īã–ĭå‒ĭæ°Ĭæ‐Īâ–ĭê½Īç®Īè©Īè©īç®Ĩå‒Īæ‒Īç°ĩå‐īç°ĩæ‒Īç°īç©ĩæ‒Īç°Īè©Ĭê•ĭê½įë½Įë¾İí⅓ıð⅔įì¾Įê½İî⅓İî⅓Įì¼ĭé•īè©īè©Ĭé®Įê™įë½įì½įì¼Įê•ĭê™Ĭé©īç°īç©Īæ°ĩæ‐ĩæ‒Īæ‐Īç‒Īæ‒Ĭç©ĭê™įë•ıì¼ıí¾ıì¼İë¼įì½Įê®Ĭè©īç‒īç©ĩä…ĩä…ĩä…ĩä…ħâ–ħâ–ĩã–ĩã–ĩã—Īä‐Īå‐Īä—īå‐īå‐Ĭæ‒Įç°ĭè°Īå‐ĩä…Ĩã–ĩä…ĭè©įë•įé®Įê™Įç©Ĭè©īæ‐ħâ‘ħâ‘ĩä…īç©Ĩå—ģÞ“Ħâ–īç°Ĭç©Īå‒ħá‘ħâ–Īå‐īæ‒īå‒īæ‒ĭè©Ĭæ©įé™ĭé™ĭê®ĭé®ĭç®ıë¼İë⅓ıí¾ıí¾įê•īæ‒īå‒Ĭç°Ĭç°īå‐Ĭç°ĭè©ĭç®įé™Įé™Įé®İí¼ıì¼Ĭç©īç©īç°Īä‐īæ‐Ĩá‘Īä‐īä…Ĭç‒Ĭç©įë•įè™ıë¼ĳí⅔Ĵòµĳî⅔ĵñµĵó¢ĳî†Ĵð⅓ĳî⅓įë•Įè®įé®ĭç°Įê™įê™įê™Įê•İë½İë™İê™įê™Įé©Ĭè°ĭé©ĭç©Įé°Įè°Ĭç°Ĭè°ĭé©Įê©ĭé©ĭè©įë™ıí¼İí½Įê®īç°Ĩä—Ĩä—Ĩå…Īå‒Ĭé®Ĭé®Īç‒ħã–Ĥà”Ħâ–Īæ‒īç°Īæ‐īé®īç©Ĭê™ĭì•ĭë•Įë½Ĭë½Įí¾įì¾įî⅔Įî⅓įñ⅔įî⅓īê•Īé™īë¼Īé®ĩè°ĩè°Īç°Ĭé™İî⅔ıñ‡ıò‡İð⅓īê•Īé™ĩç°Ĩæ‒ħä…ĩé°ĩç°Ħã…ĩæ°ĩè°Ħä—Īè‒Īç©īé™ĭë•ĭë½ĭë½İñ⅓Įì¼Ĭê½ħæ‐Ħå…Ĩå‐įí¼Ĳò†İð⅓ıñ⅔ĳô‡ĴóµĴô£ĵõ£Ĵó¢Ĵô¢Ĵò¢ĵõ€Ĳð†Ĳð†Ĳî⅔ıí¼įê•Įé®İì½ıî½įê™İí¼İë½Įé™İê•ıì½İë•Įè®Ĭæ‐Ĭç‒Īã—Ĩá‘ħß“ħá”ħà“ĩã‘Īä—Ĩâ–ħâ”Ħà`ħà`ĩá”īä—īä–Ĩâ‘ĥÞ`ĤÞ_ĭæ‒Ĭå‐įç°İè©Įç‒Įç‒Įç‒Įè‒Įç©ĭæ‒ĭæ‒Įè°ĭç‒īå…īä…Ĭå‐įè®İê•İê•įè©Įç°īå…Ĩá‘ĥÞ`ģÜ^ģÜ^ĤÞ_ħß`ĩâ‘ĩâ–Ĭæ…ĭç‐Ĭæ‐Ĭå‒Ĭä…īã–Ĭä…Ĭæ‐ĭæ‐ĭæ‒įè©Įè°ĭç‒Ħà”ġÚ]ĤÝ^Ĩá”ĩá”Ĭä–Įè‒ĭæ‐Ĩâ”ĩã‘Įç°įé©Įê™īç©Ĭç‒Ĭè°İì½ıí¼ıì½ıì¼Ĵî¾ĳî⅓Ĳí⅓ĳî¼Ĳî¾İê™Įè©Ĭé©Ĭå‐īå‐Ĭç‐īç‒ĭç‒īæ—Ĭè‒īç‒ĩä—ĩâ‘Ĩä—ħã—Ĩä–Ħã‘Ĥà`ĩæ—Ĭè°Įî¼īè©Ħâ“ħä–Ħâ–ħâ—Īê®įç©Ĭä—Ĭä–īå—ĭæ…Ĭå…ĭå…īå…Ĭå…Ĭä—īã–īã–Īâ”ĩà“ĩà“Ĩá`ĩà“Īâ”Īâ”Ĩà“ĥÞ^ĥÝ^Ĩà`Īá”Īâ‘īä–Įæ…Įæ…Įå—ĭæ…Įç‐Įæ…įæ‐įç‒İè‒Įç‐ĭç‐Įç‒Įç°ĭç‐īå—Īä–ĩâ“ħà`Ĩß_īã”ĭå…ĭç…įè‒İé°İé©ĭç‐Įç‐İê°įé‒Ĭæ…ĭæ‒İê©ıì™ıì™Ĳì•ıì™İê®İì®Ĳí½Ĳí•ıì™Ĳí½įé°ĭç…ĭç‐Įç…ĭç‐ĭç…Įé‒įê°Įè‐Ĭç‐īæ…īå—Ĭæ—ĭç‒Įè©įê°ĭè‐Ĩá”Ħá“Ħá“ħã‘Ĩã—Īå–ĭè°Īå…ĩã–Īå—ĭè°Īä–ĩã”Īã–īä–Ĭå—īä–ĩâ‘ĩâ‘ĩã–īã‘īã‘Ĭä‘īå…Ĭå…Ĭå—Ĭä–Ĭä–Ĭã”Ĭä‘Ĭä–īã‘Ĭä‘Ĭã–īã‘īã–Ĭã–īã‘Īá“ħà“Ĩà`Īâ“ĩà`ħà“ĩá”Ĩà`Ĩà_Ĩà`ĩà“Īâ“Ĩà_Ĩß`Īâ“Ĭã”įç—ĳê°ĵì•ĵí•Įå—ĩà_Įæ—Ĵì™Ķð⅓Ķð¾Ķñ⅓ķò†ķð⅔ĵî¾ĵî¾ĵî¾ĵí½Ĵí•Ĳë®İé‒ĭå–Įå–Įæ…Įå—Įå–Įæ…İè‒İè‐įç…Įæ…Ĭã–īã‘Ĭä‘Įå–İè‐ıé‒Ĳê°Ĳé°Įç…Įæ—Įå–ĭä‘Įæ—ĭå—ĭå—Ĭå—īå–īã–Ĭå–Ĭä–ĭå—ĭê®Ĭè‒Ĭç°Įè°Ĭè‐ĭç…ĭç‐Ĭæ‐Īæ‐Ĩä–ħâ“ĩä‘ĩâ”ĩä–Īå—īæ…ĩã‘ĩâ“Īã”īä‘ĩâ‘Ĩâ”ħá_ħà`ħá“Ĩá”Ĩá“Ĩâ“Īâ”ħá“Ĩá”ĩâ“Ĩâ“Ĩá‘īä‘Ĭæ…ĭæ…ĭæ—ĭæ‐įè‒İé°ıé©ıë®ĳì•ĳë™ıê©ıê°īå–ĭå–Ĳì®Ĵî¾ĵñ†ķò†ĵð⅔Ĵî¾Ĳì™Ĳì™Ĳë™ıê®ıé°Ĳê©ĳì™ĳë®ıê°ıé°ıë©ĳë•Ĳë®İé°Įç‐Ĭä–Ĭä–īã‘īä‘ĭå–įæ…ıè‒Ĵë™Ĳê©Ĳê°Ĳê°Ĭã”Ĭã‘įç…įç…Įæ…Įå—Įå—ĭä–Ĭã‘Ĭã‘Ĭâ”Īâ“Īá_Įå–Ĭê©īç…īç‐ĭê©ĭê©Ĭè‐Ĭé‒Įë®Įí•Ĭé°īè‐Ĭè‐Ĭè‒Ĭé©Ĭê©ĭé°Įë™Įë™Įì®ĭê©Ĭé°ĭê©Įë™Įì™Įë™Įì™ĭê™Ĭè‒Ĭé‒Įì™ĭë®įì•įì•įí•İì™İí½İî•İî½ıð¼įí™ıî•įì•Įë®ĭê°İí•ıî™ĳñ⅓Ķõµĸø«Ĺú♥ķ÷«ĵõ¢ĳñ⅓Ĳð¼ıð¾ıñ⅓İî¾ıð¾Ĳð⅔Ĵò†Ĵóµĳñ†ıð⅓ıð¼ıî½İí•įê®ĭè‒īæ‐ĩä–Ĩâ”ħá”Ħá‘ħâ‘Īä–ĭè‒ĳí•Ĳì•ĭè‒Ĭå—ĩâ“Īâ“Ĭä—Ĭå—Ĭå—ĭå—Ĭä–Īâ‘Īá“īã‘Ĭã–īá“ĩß_ĭã‘Įå–Ĵò†Ĵò⅔Ĵò†ĳñ⅔Ĳð¾Ĳð¾ıî¼İì•įì½įë•ĭé©ĭè°īæ‐Īç‒īè°Ĭç‒Ĭé‒Ĭç‐Ĭè‐īæ—Īå—Ĩä–Ĩã–ĩå—īæ—ĩå…ĩå—ĩã‘Ĩã”Ĩå–Ĩã‘Ĩâ”ĩã‘Ĭæ…Ĭç…ĭè‐ĭè‒Įé°Įé°Įé‒įé‒İé°Ĳì•ĵñ¾ķô¢ĺ÷€Ĺö£Ĺõ£ķóµĳî¼ıë™ıë™Ĳí½Ĵð⅔ıì½ĭè°Ĭæ‐Įé©ĭè©Įê©ĭè°Ĭç‒Ĭæ‐īå—Īå—īå—Ĭæ‐Ĭç‒Ĭæ‐īå…Ĭç‐Įè‒İê®İê®įé°Įé°ĭè‒Īä‘Īã‘Īä–Ĭå—Ĭç‐Ĭæ…Ĭæ—Ĭæ…Ĭæ…Ĭæ…īå—īå—Ĭæ…Ĭæ‐Īä–ĩä‘īæ—Ĭç‐Ĩã–ħã‘ħã–Ĩã‘ĩä–Īæ…ĭè°ĭè°ĭè°Ĭé‒Ĭè‒Īå—ĩå—ĩä—Īç…Īæ…Ĭç‐ĭè‒Įê®İì™İì•įê®įê®İë®įë®İì™ıë®ıì™İë™İì™İì®ıì™ıì™ıì™ıì•Ĳî¼Ĳî¼ĳî¾Ĵñ¾Ĵñ¾Ĵñ⅓Ĵó†ĵó‡ĵôµĵóµĴó†ĳñ¾İì™Įê°įê°ĳð⅓Ĵôµİî¾Įë®Ĭé°Ĭê®Įì½Įí½Ĩæ…ĩç‒īé°īè°īé°īè‒īé°ĭë®Įì•Įí½įì•įî¼İð⅓Ĳò†ıñ¾Įì•Ĭê©īè‒Īè‒Īé°īè°ĩè‒Īé‒īé°īé‒Ĭê©ĭì™Įí½Įí•Įì•Ĭê©Ĭê©īê°Īè…ĩæ—īé‒Įì®īç‒ĩå‐ĩä‐Īå…Īå…Īæ…Īæ‐īæ‐īæ‐Ĭé©Ĭç°Ĭè°Ĭè‒Īæ…Įé©Įë®ĭê®Ĭè°ĭé©Įé©Įé©Įê®Įë•İì•İë½İë½Įë™ĭê®Įé®Įé©Ĭè°īè°įê™İë™įí½įí•Įë®Įê®Įê®ĭé®īè°Ĭé©Įê®īé‒Ĩæ…ĩæ…īç‐ĭé©İì½ıí¼İî¼ĭë™īé°īé©Ĭè°Įë•Įì½īé®ĭì•Įí¾ĭë•ĭë½Įë•Įì½Įí¼įí½įí¼ıð⅔İî¼įí¼īé®Ĭé©ĭë®īé°Īç…Ĭê®Ĭé®Īç‒Ĭé°Ĭê©ĭë™ĭë®Įë®įì•įí½įî¼Įì™Ĭê°Ĭé©Įê®Įë™Įë©įì®İí•Ĳð¼*/}},
{
width: 64, height: 64, transparent: true, f: function() {/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ŉŉĿ5ÂÝĊs¾ßĔ_^ÝĔ‐`Óđ—Îéÿ+ĺĳàW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!€éĘA“âĚe‒çĝ=‘âěÜ”âĜĕ“âĚŅ]áěŉ]âĚŉ]ãĚŉ[áĜŉÕýÚŉĩĥwŉĥĢxŉģĠzŉĢğ)ığĜ@úğĜ/¿ĜĚ>vėĕ=R!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!°æĘV‘äĞÒ”æĠē‘æĠĹ“æĠŉ”æġŉ‘æġŉ”æġŉ”åĠŉ“äĞŉ_ãğŉÈøñŉįĩwŉīħwŉĪĦxŉħĤyŉĥĢyŉģğzŉĠĝzŉĜę%ŉĚĘ&ħĖĔ(øĔē[^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!♣åĖM”åğò”èĢŉ‘êĤŉ‘êĤŉ‘êĤŉ”êĤŉ‘éģŉ‘èĢŉ”çġŉ”çġŉ”æĠŉ‘æĜŉāĔµŉĮĩwŉĭĨwŉīħxŉĪĦxŉĨĤyŉĥĢzŉĤġzŉġĝzŉĜę#ŉĚĘ$ŉĖĔ$ŉđď@ĵĐĎ^“ĠĞ»2!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!–ãěb’éĢÙ”êģŉ‘ìĥŉ’ìĥŉ‘ìĥŉ‘ëĥŉ‘ëĥŉ”ëĥŉ”ëĤŉ”ëĤŉ‘éģŉ‘çĢŉ”æĠŉ™ìđŉġģ:ŉĮĩwŉĮĩwŉĬĨwŉīħxŉĨĤxŉĨģyŉĤġzŉģĠzŉĠĜ#ŉĜę#ŉĚĖ$ŉėĔ$ŉđĐ%ŉčċ@ėĈĆ<=åôÿ3!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!©íĕÀ‘ëĤĲ’ìĦŉ’îĦŉ’îħŉ’íĥŉ’íĥŉ’íĥŉ‘íĦŉ‘ìĥŉ‘ëĥŉ‘ëĤŉ‘êĤŉ‘èĢŉ‘èĢŉ¢ñĆŉĶĮrŉįĪwŉĮĩwŉĭĨwŉĭĨwŉĪĦxŉĨĤyŉħĤyŉĤĠzŉĢğzŉĞězŉěĘ$ŉęĖ$ŉĖē$ŉđď%ŉČĊ"ņĄā@ąöõ½H!!!!!!!!!!!!!!!!!!!!!!!!!!!!ĹĴ©EďĞµÿ¼òĘŉ’îħŉ–îħŉ–îĦŉ–îħŉ–îħŉ–îħŉ–îĦŉ–íĦŉ’ìĦŉ’ìĥŉ‘ìĥŉ‘ëĥŉ”êĤŉ“èĤŉÓÿìŉķįoŉįĪwŉįĪwŉĭĩwŉĭĨwŉīħxŉĩĥxŉħģyŉĤĢzŉģğzŉĠĜzŉĜę#ŉĚė$ŉėĔ$ŉĔĒ%ŉđĎ%ŉċĉ&ŉýý@Ňçä]#!!!!!!!!!!!!!!!!!!!!!!!!!!ĵı*zķĲzĪéČ×ŉ`íĬŉ–ïĨŉ–ïĨŉ–ïħŉ—îĦŉ–îħŉ–îħŉ–îħŉ–îĦŉ–ìĥŉ’íĥŉ’ìĥŉ‘êĤŉ‘êģŉ`çħŉîČÍŉĵĮqŉįīwŉįĪwŉĮĩwŉĭĨwŉĬĨwŉĪĦxŉĨĤyŉĥĢyŉĤĠzŉġĞzŉĝĚ#ŉěĘ$ŉęĖ$ŉĕē%ŉĒĐ%ŉĎČ%ŉĊĈ&ŉüú"ŉää+Ç!!!!!!!!!!!!!!!!!!!!!!!!ĶĲ:zĶıxľľĵoŉ®ðĞŉ–ïĩŉ—îħŉ–ïħŉ–îħŉ–íĦŉ–íĦŉ–íĥŉ–ìĥŉ–íĦŉ–íĥŉ–ìĥŉ’ìĥŉ’ìĥŉ‘ëĤŉ^çĨŉāĕ«ŉĵĮrŉİīwŉįĪwŉĮĩwŉĭĨwŉĭĨwŉĪĦxŉĨĤyŉĦģzŉĤĠzŉĢğzŉĞě#ŉěę#ŉĘĔ#ŉĘĚ$ŉĔĒ%ŉĐč%ŉċĉ&ŉĆĄ&ŉùø"ŉÝÝ+ô!!!!!!!!!!!!!!!!!!!!!!ĵı,#ķıwŉĸĳrŉĪĪ<ŉ;éĲŉ–ïħŉ–îĦŉ–îħŉ–íĦŉ–ìĥŉ–íĥŉ–îĦŉ–íĥŉ–ìĥŉ–íĥŉ–ìĥŉ–ìĥŉ–êĤŉ’êĤŉ^èĪŉČě¼ŉĴĮsŉİĬvŉįīwŉĮĩwŉĮĩwŉĭĨwŉĪħxŉĨĤxŉĦģzŉģĠzŉģĠzŉğě#ŉĜę#ŉĒĄzŉüÀuŉāÙxŉČĀ$ŉčĊ&ŉĉć&ŉĀÿ"ŉóó"ŉæç*ôÏËÖ3!!!!!!!!!!!!!!!!!!!ĶĲ,(ķĲwŀķĲtŉļĴoŉĀĘÂŉ^ìĮŉ–îĦŉ–îĦŉ–îĦŉ–îĦŉ–íĦŉ–íĥŉ–ìĥŉ–íĥŉ–íĦŉ–îĦŉ–îĦŉ–îĦŉ–íĦŉ’ëĥŉ]èĪŉđĞ™ŉĴĮsŉıĬvŉįĪwŉĮĩwŉĭĩwŉĭĨwŉĪħxŉĨĤyŉħģyŉĤġzŉģĠzŉĠĜ#ŉĜę#ŉĚę$ŉĖĒ$ŉýÆuŉæusŉð°wŉüàzŉąĆ"ŉùø"ŉïï"ŉâã,Ý!×Ø;1!!!!!!!!!!!!!!!!Ĺĳ©IĶĲyĳķĲtŉĸĲtŉĿĶmŉåċáŉ“íĬŉ–îĦŉ–îĦŉ–íĦŉ–íĦŉ–îĦŉ–îĦŉ–íĦŉ–íĦŉ–íĦŉ–îĦŉ–îħŉ–îĦŉ–îĦŉ–îĦŉ]êīŉĕĠ°ŉĴįsŉıĬvŉįīwŉĮĪwŉĭĩwŉĬĨwŉīħxŉĨĤxŉħĤzŉĤġzŉģĠzŉğĜ#ŉĜę#ŉěĘ$ŉĘĖ$ŉĕē$ŉĂàwŉäutŉávsŉà+rŉøñ&ŉñò"ŉðï&ŉÖ×<♠!!!!!!!!!!!!!!!!Ĺĸŉ1ĶĲ$ēķĲsŉĸĲtŉĸĳtŉŁķkŉÎāøŉ”íĪŉ–îĦŉ–íĦŉ–îĦŉ–îĦŉ–îĦŉ–îĦŉ–îĦŉ–îĦŉ–îĦŉ–îĦŉ–îħŉ–îħŉ–îħŉ–îħŉ_ìĭŉēğ™ŉĵįsŉıĬvŉįīwŉįĪwŉĮĩwŉĬĨwŉīħxŉĨĤxŉħģzŉĤġzŉģğzŉğĜ#ŉĜę#ŉĚĘ#ŉĘĖ$ŉĖē$ŉĕė&ŉĀÝxŉã#uŉÚlpŉÒksŉÝ£zŉîé&ňíï"ŉÕÓ:"!!!!!!!!!!!!!!!Ķı%áķĲsŉĸĲtŉĸĳtŉĸĳtŉńĸhŉÁûĎŉ‘íĩŉ–îħŉ–îĦŉ–îĦŉ–îħŉ—îħŉ—îĦŉ—îĦŉ—ïħŉ—îĦŉ–îĦŉ–îĦŉ–îĦŉ–îħŉ–îħŉ`íĭŉĎĞ½ŉĵİsŉıĭvŉįīvŉĮĪwŉĮĩwŉĬĨwŉīħxŉĨĤyŉħģyŉĤġzŉģĠzŉğĜ#ŉĜę#ŉěĘ$ŉĘĖ$ŉĖē$ŉĒď%ŉđĒ%ŉĀç#ŉÜqpŉÖrsŉËuwŉÈ/yŉéà$ŉäã(ğ¢;zH!!!!!!!!!!!!!ĶĲ:yķĲwĽĸĲtŉĸĳtŉĸĳtŉĹĳtŉņĹgŉ†õĒŉ’îħŉ–îĦŉ–îĦŉ—îħŉ‐ïħŉ…ïħŉ‐ðħŉ‐ïħŉ…ïħŉ…ïħŉ…ïħŉ–îĦŉ—íĦŉ–îĦŉ–îħŉ“íĭŉĉĜ€ŉĵįrŉıĭvŉıīvŉĮĪwŉĮĩwŉĭĨwŉĪĦxŉĨĤyŉĦĢzŉĤġzŉģĞzŉğĜ#ŉĜę#ŉěĘ$ŉĘĖ$ŉĖĔ$ŉĒĐ%ŉďč%ŉČċ&ŉöÑxŉ×tuŉÎxuŉÂxwŉ¿tyŉÜ¿yŉÃ–@Ê!!!!!!!!!!!!!ĶĲ&ĂķĲtŉĸĲtŉĸĳtŉĸĳtŉĹĳsŉŇĹgŉ†ôĒŉ’íħŉ–îĦŉ…îħŉ‒ðħŉ™ñĨŉ⅔óĩŉµõĪŉ¢öĪŉ†ôĩŉ½òĩŉ°ðħŉ…ïħŉ—îĦŉ—îĦŉ–îĦŉ“íĬŉüėÄŉĶİrŉıĭvŉİĬwŉĮĪwŉĮĩwŉĬĨwŉĪĦxŉĨĤyŉĦģzŉĤġzŉĢğzŉĞě#ŉĜę#ŉĚė$ŉĘĕ$ŉĕē%ŉĒĐ%ŉďč%ŉċĉ&ŉĉČ"ŉê»wŉÌouŉÃxwŉÃxxŉÂyyŉÀzwŉ¾[>d!!!!!!!!!!!ĶĲ“@ķĲtŉĸĲtŉĸĳtŉĸĳtŉĹĳsŉĺĳsŉŇĹgŉ‡ôđŉ’íħŉ…îĦŉ©ñĨŉ‡ôĩŉÁúĬŉËþĭŉÒĂįŉÑĂĮŉËÿĭŉÁúĬŉ‡ôĪŉ©ðħŉ…îĦŉ—îĦŉ—îĦŉ”íīŉîďÖŉĸıqŉĲĭvŉİīwŉĮĩwŉĭĨwŉĭĨwŉĪĦxŉħĤyŉĥĢzŉģĠzŉĢğzŉĞě#ŉěę#ŉęė$ŉėĕ$ŉĕē%ŉĒĐ%ŉĐč%ŉċĉ&ŉćĆ"ŉĀĀ"ŉÜ©xŉÂtwŉÂxwŉÂxwŉÃywŉ£xzė!!!!!!!!!!!ĶĲ&ĩķĲsŉĸĲtŉĸĳtŉĸĳtŉĺĳsŉĺĳsŉņĹgŉ♣÷Đŉ–íħŉ©ðħŉ£öĪŉËĀĮŉàĊıŉðđĴŉöĔĶŉõēĵŉêĎĲŉÚĆİŉÆüĬŉ‡ôĩŉ°ðħŉ…îĦŉ…îĦŉ‘íĩŉÜćëŉĺĲoŉĲĭvŉİīwŉĮĩwŉĭĨwŉĬĨwŉĨĥxŉħģyŉĥĢzŉģĠzŉġĝzŉĝĚ#ŉěĘ#ŉęė$ŉėĕ$ŉĔĒ%ŉĒď%ŉĎČ&ŉċĉ&ŉĆą"ŉĀÿ"ŉóë&ŉÇ*xŉÂxwŉÂxwŉÂxwŉÃyxŃ¾&",!!!!!!!!!ıħ?[ķĲtŉķĲtŉĸĳtŉĹĳtŉĹĳtŉĹĳsŉĺĳsŉŅĹhŉÉýĆŉ—íĨŉµõĩŉÎāįŉéďĴŉĂĜĹŉĒĥļŉĘĪľŉĕħĽŉĉğĺŉóĒĴŉÚąİŉÂúĬŉ½òĨŉ…îĦŉ‐ïħŉ’îħŉÇýÿŉļĳmŉıĭvŉİīwŉĮĪwŉĭĨwŉīħxŉĨĥyŉħģyŉĤġzŉģĠzŉġĝzŉĜę#ŉĚĘ#ŉęĖ$ŉėĕ$ŉĔĒ%ŉĒď%ŉĎČ&ŉċĈ&ŉĆą"ŉÿÿ"ŉøø"ŉÜÀ#ŉÁvwŉÂxwŉÂxwŉÂxwŉ♥#$ë¾’“4!!!!!!!!ħĊwýķĲtŉķĲtŉĸĳtŉĹĳtŉĹĳsŉĺĳsŉĺĳsŉłĸjŉØąõŉ®ðīŉÅüĮŉåČĳŉĆğĺŉĝĭĿŉĬĶŃŉİĹńŉīĶŃŉğĭĿŉĊĠĺŉëĎĳŉÍÿĮŉµõĪŉ‒ðĨŉ‐ïħŉ—ïħŉ€øďŉĸısŉıĭvŉįĪwŉĮĩwŉĭĨwŉīħxŉĨĤyŉĦģyŉĤĠzŉĢğzŉĠĜzŉĜę#ŉĚĘ$ŉĘĖ$ŉĖĔ%ŉēđ%ŉđď%ŉĎČ&ŉĊĈ&ŉĆĄ"ŉÿþ"ŉöô"ŉóõ"ŉÉ,wŉÁwxŉÂxwŉÂxwŉ♦#zķ£$%I!!!!!!!ĎÊ"TıġwĪķĲtŉĸĲtŉĸĳtŉĹĳtŉĺĳsŉĺĳsŉĻĴsŉŁķkŉìĎæŉ⅓óįŉÔĄİŉùėķŉęĪľŉĮĸŃŉĻŁņŉĿńňŉĺŀņŉĭķŃŉėĨĽŉ÷ĕĵŉÕĄİŉ«÷īŉ°ñĨŉ‐ïħŉ…ïħŉ⅓õĔŉĮĬ"ŉıĬwŉįīwŉĮĩwŉĬĨwŉĪĦxŉĨĤyŉĦģyŉģĠzŉĢĞzŉğězŉěĘ#ŉęė$ŉĘĖ$ŉĕĔ%ŉēđ%ŉđĎ%ŉčĊ&ŉĉć&ŉąă"ŉýü"ŉõó"ŉñò"ŉèÞ"ŉÀqvŉÂxwŉÂxwŉÀwvŉ»;:_!!!!!!!Ĥā"(ĳĨtŉķĲtŉĸĲtŉĹĳtŉĹĳtŉĺĳsŉĺĳsŉĻĴsŉŀĶmŉýėÏŉ¢öĲŉàĊĲŉĆĞĹŉĤıŁŉĸĿņŉńŇŉŉňŉŉŉŁŅňŉĲĻńŉěĬĿŉûėķŉ×ąİŉ♠øīŉ°ñĨŉ‐ïħŉ—ïħŉ¼óęŉĞĤ[ŉıĬvŉįĪwŉĮĩwŉīħxŉĩĥxŉħĤyŉĤġzŉģĠzŉġĝzŉĝĚ#ŉĚę$ŉęĖ$ŉėĕ$ŉĕē%ŉĒď%ŉĐč%ŉČĊ&ŉĈć&ŉăĂ"ŉüû"ŉóò"ŉòò"ŉçÛ%ŉÀrwŉÂxwŉÂxwŉÃxwŉ♠$%Ď!!!!!!!Ĩď%ÕķĳtŉĸĲtŉĸĳtŉĹĳtŉĹĳtŉĺĳsŉĺĳsŉĻĴsŉľĵnŉĖĢ♥ŉ¢öĴŉãČĳŉĉĠĺŉħĳŁŉĺŀņŉŅňŉŉňŉŉŉĿńŇŉİĹŃŉęĩľŉõĔĵŉÔăİŉ€÷īŉ‒ðĨŉ‐ïĦŉ–íĦŉ©ðĞŉĎĝ•ŉİīwŉĮĪwŉĭĨwŉīħxŉĩĥxŉĦĢyŉĤġzŉģğzŉğĜ#ŉĜę#ŉĚė$ŉęĖ$ŉĖĔ$ŉĔĒ%ŉĒď%ŉďČ%ŉċĉ&ŉćĆ&ŉĂā"ŉûú"ŉñð"ŉóö(ŉÇ*xŉÂwxŉÂxwŉÂxwŉÂxwŉ♥vvŉıŉŉ3!!!!!!ĲĦ%ĝķĲtŉĸĲtŉĸĳtŉĸĳtŉĹĳsŉĺĳsŉĺĳsŉĻĴsŉļĵpŉįĮ‘ŉ⅔õĵŉáċĲŉĄĞĹŉġįŀŉĴĻŅŉĽłŇŉĽŃŇŉķļŅŉĦĲŁŉČĢĻŉëĎĳŉËþĮŉ⅔óĩŉ‐îĦŉ…íĦŉ—íĥŉ–ìĤŉĀĖ♣ŉįĪwŉĮĩwŉĭĨxŉĪĦxŉĨĤxŉĥĢzŉĤĠzŉġĞzŉĞě#ŉěę#ŉĚė$ŉĘĖ$ŉĖĔ$ŉēĐ%ŉđď%ŉčċ%ŉĊĈ&ŉĆĄ"ŉĀÿ"ŉù÷"ŉññ"ŉÛÀ$ŉÂvwŉÂxwŉÂxwŉÂxwŉÂxwŉÃzxŉ¾)@=!!!!!!ĴĮvŉĸĲtŉĸĲtŉĸĳtŉĹĳtŉĹĳsŉĺĳsŉĻĴsŉĻĴsŉĻĴsŉĿĵvŉ†ôĶŉ×ĆıŉøĖĶŉĔħĽŉĥıŁŉĭķŃŉĭķŃŉĤıŀŉĔĦļŉùĖĶŉÙąİŉ¿ùīŉ™ðĨŉ…îĦŉ—íĦŉ–ìĥŉ”êĦŉìČÒŉįĪwŉĮĩwŉĬĨxŉĩĥxŉħĤyŉĥġzŉģğzŉĠĝzŉĜę#ŉěĘ#ŉęĖ$ŉėĕ$ŉĕē%ŉĒĐ%ŉĐč%ŉČĊ&ŉĊć&ŉąă"ŉþü"ŉöô"ŉëä&ŉÄ)yŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂyxŉ«%%Û!!!!!ĳĩ•mĶĲtŉĸĲtŉĸĲtŉĸĳtŉĸĳtŉĹĳtŉĺĳsŉĺĳsŉĻĴsŉĻĴsŉĿĶoŉÁûģŉÈþįŉãċĲŉüĘķŉĎģĻŉĕĨĽŉĔĦļŉċĠĺŉùĖķŉßĈıŉÇüĬŉ†òĨŉ‐íĦŉ…íĦŉ—ëĤŉ’ëĤŉ‘êĥŉÓĀíŉĭĩyŉĮĩwŉīħxŉĩĥxŉĦģyŉĤĠzŉĢğzŉĞě#ŉĜę#ŉěĘ$ŉęĖ$ŉĖĔ$ŉēđ%ŉđď%ŉďč%ŉċĉ&ŉĉą&ŉĂā"ŉûú"ŉóô"ŉÍ“yŉÁvwŉÂxwŉÃxwŉÂxwŉÂxwŉÂxwŉÂxwŉ♣##č!!!!!Ĵį@®ķĲtŉķĲtŉĸĲtŉĸĳtŉĸĳtŉĹĳtŉĺĳsŉĺĳsŉĻĴsŉĻĴsŉļĵqŉÓĄĂŉ£÷ĭŉÌĀĮŉàĉıŉïďĳŉõēĵŉôĒĴŉêčĳŉÙąįŉÇüīŉ¢óĨŉ°íĦŉ…ìĥŉ…ìĤŉ–êģŉ–ëĤŉ’êĥŉ€óĊŉĬĩzŉĭĩwŉīħxŉĨĤxŉĦģyŉĤĠzŉĢĞzŉĞě#ŉěę#ŉĚė$ŉĘĕ$ŉĕē$ŉĒĐ%ŉđĎ%ŉčĊ&ŉĊĈ&ŉĆĄ&ŉĀĀ"ŉúú"ŉÕ⅓yŉÀrwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉ♣wwĥŉŉŉ2!!!!Ķı,ÒķĲtŉķĲtŉĸĲtŉĸĳtŉĸĳtŉĹĳtŉĺĳsŉĺĳsŉĺĳsŉĻĴsŉļĴrŉìďåŉ°ðĬŉ€öĩŉÅûĬŉÏÿĭŉÒāĮŉÑĀĮŉÉýĬŉ¿øĪŉ⅔òħŉ©íĥŉ…ìĥŉ…ìĤŉ–êģŉ–êģŉ’êģŉ’êģŉ[äĦŉīĨ"ŉĭĨwŉīħxŉĨĤyŉĥĢyŉģĠzŉġĞzŉĞĚ#ŉĚĘ#ŉĚė$ŉĘĕ$ŉĔĒ%ŉĒď%ŉďč%ŉČĉ&ŉĉĆ&ŉąă"ŉþý"ŉâÁ#ŉÂxyŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÁxxī=`‘I!!!!ĵİ,ôĶıtŉķĲtŉĸĲtŉĸĳtŉĸĳtŉĹĳtŉĹĳsŉĺĳsŉĺĳsŉĺĳsŉĻĴsŉćěÃŉ”íīŉ®ðĨŉ¾òĨŉµôĩŉ«öĪŉ¢õĩŉ⅔òĨŉ™ïĦŉ‐ìĥŉ…ìĤŉ…ìĤŉ—ëĤŉ–êĤŉ’êģŉ’êĤŉ‘éģŉ<âĩŉČę½ŉĮĩuŉĪĦxŉĨĤxŉĤġzŉģĠzŉġĝzŉĜę#ŉěĘ$ŉęĖ$ŉėĔ$ŉĔĒ%ŉđď%ŉĎČ&ŉċĉ&ŉćą&ŉăĂ"ŉî×$ŉÅuxŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÂxwŉÃzyĲ«°–X!!!!ķĲ>ĊĶısŉķĲtŉĸĲtŉĸĳtŉĸĳtŉĸĳtŉĹĳsŉĹĳsŉĺĳsŉĺĳsŉĺĳsŉęĤ°ŉ‐ïĦŉ…îĦŉ‐îĦŉ‒ïĦŉ°ïħŉ‒ïħŉ‐îĥŉ…ìĥŉ—ëĤŉ…ëĤŉ—ëĤŉ–ëĤŉ’êĤŉ–êĤŉ’éĢŉ‘èĢŉ^åĦŉÙāáŉĲĪqŉĩĥxŉħģyŉĤġzŉģğzŉĠĜzŉĜę#ŉĚĘ$ŉęĖ$ŉĖĔ%ŉēĐ%ŉĒď%ŉčċ&ŉĊĈ&ŉĈĉ"ŉîÌyŉÏwuŉÃwxŉÁxwŉÁuxŉÁuwŉÁtwŉÁtwŉÁswŉÁrwŉÂwwŉÂxwŉÃ#yĶ†=“i!!!!ĶĲ?ĉĶıtŉķĲtŉķĲtŉĸĲtŉĸĳtŉĸĳtŉĹĳsŉĹĳtŉĹĳsŉĺĳsŉĺĳsŉĥĩ[ŉ⅔ôęŉ–îħŉ—îĦŉ…îĦŉ…íĦŉ—íĥŉ–ìĥŉ–ëĤŉ—ëĤŉ’êģŉ–êģŉ–ëĤŉ–ëĤŉ’êģŉ‘éĢŉ‘çĢŉ“æĢŉ…çđŉĸĮmŉĨĤxŉĦģyŉĤġzŉĢğzŉğĜ#ŉěę#ŉĚĘ$ŉęĖ$ŉĖĔ%ŉēĐ%ŉĐĎ%ŉčċ&ŉĊć&ŉñÆxŉÓotŉËtvŉÇ(vŉÊ<wŉÏ‘zŉÑ™#ŉØ£$ŉÛÂ$ŉÞÇ&ŉÞÉ%ŉÅ(wŉÂxwŉÃ##ĶÂ†`i!!!!Ķı:øĶıtŉķĲtŉĸĲtŉķĲtŉĸĳtŉĸĲtŉĸĳtŉĹĳsŉĹĳsŉĹĳsŉĹĳsŉĲį%ŉ♦úĉŉ–îĦŉ–íĦŉ–íĥŉ–ìĥŉ–ëĤŉ–ëĤŉ–ëĤŉ–êģŉ–êĤŉ’êģŉ–êĤŉ–êĤŉ‘éĢŉ‘çĢŉ”æġŉ“äĝŉ<ÞĞŉĝĠ<ŉĩĥwŉĥĢzŉĤĠzŉĢĞzŉĞě#ŉěĘ#ŉĚė$ŉėĖ$ŉĕē%ŉĒď%ŉĐč%ŉČĊ&ŉĈĆ&ŉýï&ŉýû%ŉúý(ŉøû(ŉõù(ŉóö"ŉòô"ŉòô"ŉòó"ŉòô"ŉïî"ŉÉ:yŉÂxwŉÆ(zĳûą‡b!!!!Ĵı/ÒĶıtŉķĲtŉķĲtŉĸĲtŉĸĲtŉĸĲtŉĸĳtŉĹĳtŉĸĳtŉĹĳtŉĹĳsŉľĵpŉÏā÷ŉ–íĦŉ–íĥŉ–ìĥŉ–ìĥŉ–ëĤŉ–êĤŉ–êĤŉ’êģŉ–êģŉ’êģŉ’éĢŉ‘éĢŉ‘èĢŉ”çġŉ“åğŉ`ãĚŉ^àęŉíĈÃŉīĦuŉĤġzŉĤĠzŉġĝzŉĝĚ#ŉěę$ŉęĖ$ŉėĕ$ŉĕĒ%ŉĒĐ%ŉďČ%ŉċĉ&ŉĈĆ&ŉăĂ"ŉûû"ŉ÷õ"ŉ÷õ"ŉöô"ŉóò"ŉòð"ŉñð"ŉññ"ŉññ"ŉïí"ŉÌ]yŉÂwwŉÈ,xĬçĔ‘J!!!!Ĵİ,™ĵıuŉķĲuŉķĲtŉķĲtŉĸĲtŉĸĲtŉĸĲtŉĸĲtŉĸĳtŉĸĳtŉĸĳtŉļĵpŉóđÐŉ’ëĦŉ–ìĥŉ–ëĤŉ–ëĤŉ–ëĤŉ–êĤŉ–ëĤŉ’êģŉ–êģŉ’éģŉ’éģŉ‘èĢŉ‘èĢŉ”åĠŉ`ãĜŉ_áęŉ^ßĕŉÂñîŉīĥuŉĤġzŉģğzŉĠĜ#ŉĜę#ŉĚė$ŉęĖ$ŉėĔ$ŉĔĒ%ŉđď%ŉĎČ%ŉċĉ&ŉćą"ŉāĀ"ŉûù"ŉùø"ŉùö"ŉ÷ö"ŉ÷ö"ŉõó"ŉóñ&ŉòñ"ŉññ"ŉïì"ŉÎ_yŉÁvwŉÉ_zĥĂŉŉ2!!!!ĳĭ‐pĵĲuŉĶıuŉķĲtŉķĲtŉķĲtŉĸĲtŉĸĲtŉĸĲtŉĸĲtŉĸĳtŉĸĳtŉĺĴrŉĝĥ’ŉ`éħŉ–ëĤŉ–ëĤŉ–ëĤŉ–ëĤŉ–êģŉ–êģŉ’éģŉ’éģŉ’éĢŉ‘èĢŉ‘çġŉ”æĠŉ`ãĜŉ`áęŉ^ßėŉ]Þĕŉ¼çÿŉęĝ/ŉĤĠzŉĢğzŉĞě#ŉĜę#ŉĚė$ŉĘĖ$ŉĖē$ŉēđ%ŉĐĎ%ŉčċ&ŉĊĈ&ŉąă"ŉÿÿ"ŉüú"ŉûù"ŉúù"ŉù÷"ŉøö"ŉøö"ŉõô"ŉóò&ŉòð"ŉïí"ŉÎ_yŉÀuyŉÔ»"Đ!!!!!!ĬęvŉĶĲuŉķĲuŉķĲtŉķĲtŉķĲuŉĸĲtŉĸĲtŉĸĲtŉĸĲtŉĸĲtŉĸĲtŉŁĶmŉ’êģŉ–ëĤŉ–ëĤŉ–ëĤŉ–êĤŉ’êģŉ–êģŉ’éĢŉ’éĢŉ‘èĢŉ‘çġŉ”æĠŉ“äĞŉ_âĚŉ_àėŉ]ßĕŉ]ÜĒŉ^ÝďŉĈē—ŉģĠzŉġĝzŉĝĚ#ŉěę#ŉĚė$ŉėĔ$ŉĕē%ŉēĐ%ŉĐč%ŉČĊ&ŉĈĆ"ŉĄĂ"ŉþþ"ŉýý"ŉýü"ŉüû"ŉûú"ŉù÷"ŉù÷"ŉùö"ŉöõ"ŉõó"ŉñí&ŉÍ[zŉ¿pyŉáÞ.Ü!!!!!!ĖÝxěķĳuŉĶıuŉĶıuŉķĲtŉķĲtŉķĲuŉĸĲtŉĸĲtŉķĲtŉķĲtŉĸĲtŉŀĶlŉÔĂðŉ“éĨŉ’êĤŉ–êģŉ’êģŉ’êģŉ’éģŉ’éĢŉ‘èĢŉ‘æġŉ”åĠŉ“äĝŉ`âĚŉ_àėŉ^ßĖŉ]Ýēŉ[ÜĒŉ:ØĔŉäĀÈŉģğyŉĠĜzŉĜę#ŉěĘ$ŉęĖ$ŉėĔ$ŉĔđ%ŉĒď%ŉďč%ŉċĈ&ŉĈĆ"ŉăĂ"ŉĀÿ"ŉþþ"ŉþý"ŉýü"ŉýû"ŉüú"ŉûù"ŉù÷"ŉù÷"ŉ÷õ"ŉóî"ŉÎ.wŉË=xŉÚç]?!!!!!!Ā,yÓĦăsŉĶĳuŉĶıuŉĶıuŉĶıuŉĶıuŉķĲuŉķĲuŉķĲuŉķĲuŉķĲtŉĺĳqŉĐĞ⅓ŉ=åĭŉ–êĤŉ–êģŉ’éģŉ’êģŉ‘èĢŉ‘èĢŉ‘çġŉ”åĠŉ“äĞŉ`âĚŉ_àĘŉ^ßĖŉ]ÞĔŉ]Üēŉ[Üđŉ>ÚĒŉ¼æùŉħġvŉĞě#ŉĜę#ŉĚė$ŉĘĕ$ŉĖĔ$ŉēđ%ŉđď%ŉĎċ%ŉĊĈ&ŉąĄ"ŉĂā"ŉĂā"ŉāĀ"ŉÿÿ"ŉþþ"ŉüý"ŉýü"ŉýû"ŉúù"ŉúø"ŉù÷"ŉöò&ŉÌywŉÙ♦$ŉØčĝ6!!!!!!ûpz%ýsrŉİģtŉĶĴuŉĶıuŉĶıuŉķĲuŉĶıuŉĶıuŉĶıuŉĶıuŉĶıuŉĶıuŉĴİyŉ–êġŉ’êĤŉ’êģŉ’èĢŉ‘èĢŉ‘èĢŉ‘çġŉ”æĠŉ“äğŉ`âĜŉ_áęŉ_àėŉ]Þĕŉ]Üēŉ]Ûđŉ?Ûđŉ?ÚĐŉ@Ôėŉēė=ŉğězŉěĘ$ŉĚė$ŉėĕ$ŉĔĒ%ŉēĐ%ŉĐč%ŉČĉ&ŉĉĆ&ŉąă"ŉĄă"ŉăĂ"ŉăĂ"ŉĂā"ŉāĀ"ŉÿþ"ŉþþ"ŉýü"ŉýü"ŉüû"ŉúø"ŉõð&ŉÌtuŉãÛ,ď!!!!!!!ø$yTúdoĩûfpŉĥþsŉĵĮuŉĶıuŉĶıuŉĶıuŉĶıuŉĶıuŉĶıuŉķĲuŉĵıuŉĳİxŉÎÿõŉ”èĥŉ’éĢŉ‘èĢŉ‘èĢŉ‘çġŉ”æġŉ”åĠŉ“ãĝŉ`áĚŉ_àĘŉ^ÞĖŉ]ÝĔŉ]ÜĒŉ?Ûđŉ?ÚĐŉ?Úďŉ<×ĒŉÍôØŉĤĞuŉĚĘ$ŉęĖ$ŉĖĔ%ŉēđ%ŉđĎ%ŉĎČ&ŉċĉ&ŉćĆ&ŉąĄ"ŉąă"ŉąă"ŉĄĂ"ŉăĂ"ŉĂā"ŉĂā"ŉĀÿ"ŉÿþ"ŉýü"ŉýü"ŉüü"ŉï×$ŉÙ”wŉàØ<—!!!!!!!!÷jsöúZoŉùXpŉĝåtŉĶĳuŉĵıuŉĵıuŉĵıuŉĶıuŉĵıuŉĵıuŉĵıuŉĶıuŉ÷ĒÉŉ”èĤŉ‘èĢŉ‘çġŉ‘çġŉ”åĠŉ“åĠŉ“ãĝŉ`âĚŉ_àĘŉ^ßĖŉ]ÝĔŉ[Üēŉ[Ûđŉ?ÚĐŉ?Úďŉ?Ùďŉ?ÙĎŉ[ÙĈŉĜĚ&ŉěė#ŉĘĖ$ŉĕē%ŉēĐ%ŉĐĎ%ŉčĊ&ŉĉć&ŉĈĆ&ŉĆĄ"ŉĆĄ&ŉąĄ"ŉąĄ"ŉąă"ŉăĂ"ŉăĂ"ŉăĂ"ŉāĀ"ŉĀÿ"ŉþý"ŉþā"ŉã⅓yŉäÁ$ĸøĀ”L!!!!!!!!ø%#/øbpŉĘÚrŉĳĮuŉĵıuŉĵıuŉĴıuŉĵıuŉĵıuŉĵıuŉĵıuŉĵıuŉĴıuŉĖġ—ŉ©ëĘŉ‘çġŉ‘æġŉ“åğŉ“åğŉ“ãĝŉ`âĚŉ_àĘŉ^ÞĖŉ]ÝĔŉ]Ýēŉ[Ûđŉ?ÚĐŉ?Ùďŉ?Ùďŉ?ÙĎŉ>Øčŉ>×ċŉéĀ€ŉěĘzŉĘĕ$ŉĔĒ%ŉĒď%ŉďČ%ŉċĉ&ŉĉć&ŉĉĆ&ŉĉą&ŉĆą"ŉĆĄ"ŉąĄ"ŉąĄ"ŉąă"ŉĄĂ"ŉăĂ"ŉĂā"ŉāĀ"ŉĀÿ"ŉāć(ŉ×$uŉ÷÷+îïï♥4!!!!!!!!!ĕâyĦĵĸvŉĳĮvŉĳįuŉĴİuŉĴİuŉĴİuŉĵıuŉĴıuŉĴİuŉĵıuŉĵıuŉĴİxŉµðĉŉ”æġŉ“åğŉ“äĞŉ“ãĜŉ_áĚŉ_àĘŉ^ßĖŉ]Þĕŉ]Üēŉ[Ûđŉ[ÚĐŉ?Ùďŉ?Ùďŉ?ÙĎŉ?ØĎŉ>Øčŉ=×Čŉ♥èäŉėĕ&ŉĖĔ$ŉĔđ%ŉđĎ%ŉčċ&ŉċĈ&ŉĊć&ŉĉć&ŉĉć&ŉĈĆ&ŉĉĆ&ŉĆą"ŉąĄ"ŉąĄ"ŉąă"ŉĄă"ŉăĂ"ŉĂā"ŉĂă"ŉôÜ$ŉíÎzŅúă_/!!!!!!!!!!ĵĺ‘zįĪxŉıĬvŉĲĭvŉĲĮvŉĲĮvŉĳįvŉĳįvŉĳĮvŉĲįvŉĳİvŉĳİvŉĺĳoŉçĈÖŉ^ãĠŉ“ãĝŉ`âěŉ_áęŉ_àĘŉ^ÞĖŉ]ÝĔŉ]Üēŉ[Ûđŉ[ÛĐŉ?Ùďŉ?Ùďŉ?Ùďŉ?ÙĎŉ?Øčŉ>×Čŉ=ÖĊŉ?ÖĄŉćč?ŉĕē$ŉĒĐ$ŉďč%ŉČĊ&ŉċĉ&ŉċĈ&ŉċć&ŉĊć&ŉĊć&ŉĉć&ŉĉĆ&ŉćĆ&ŉĆĄ&ŉąĄ"ŉąĄ"ŉąă"ŉĄĂ"ŉăĄ"ŉðÎxŉüþ.Ę!!!!!!!!!!!!Įĩ(ĀİīwŉıĬvŉĲĬvŉĲĭvŉĲĭvŉĲĮvŉĲĮvŉĲĮvŉĲĮvŉĲĮvŉĴİuŉĭī+ŉ;ÞĢŉ`áĚŉ_áęŉ_àėŉ^Þĕŉ]Ýēŉ]Üēŉ[ÛĒŉ[ÛĐŉ?ÚĐŉ?Ùďŉ?ÙĎŉ[ÙĎŉ?ÙĎŉ>Øčŉ>×ċŉ=Õĉŉ.ÒČŉÒòÌŉĖēzŉđď%ŉĎċ%ŉČĉ&ŉČĊ&ŉċĈ&ŉċĈ&ŉĊć&ŉĊć&ŉĊć&ŉĉć&ŉĉĆ&ŉĈĆ&ŉĆĄ&ŉąĄ"ŉąă"ŉĄă"ŉÿ÷%ŉþú&ŉýý‡e!!!!!!!!!!!!ĭĩ=uĮĩxŀįĪwŉİīvŉıīvŉıĬvŉĲĬvŉĲĭvŉĲĭvŉĲĭvŉĲĭvŉĲĮvŉĽĵmŉÈöñŉ[Þěŉ_ßĖŉ^Ýĕŉ]Üēŉ]ÛĒŉ[Ûđŉ[ÛĐŉ[Ûđŉ?Ùďŉ?ÙĎŉ?ØĎŉ?ØĎŉ?Øčŉ>×Čŉ?ÖĊŉ=Õĉŉ<ÓĈŉ/ÑĈŉďĎ)ŉĐĎ$ŉďČ%ŉČĊ&ŉČĊ&ŉċĊ&ŉČĉ&ŉċĉ&ŉĊĈ&ŉĊĈ&ŉĉĈ&ŉĊć&ŉĉć&ŉĉĆ&ŉćą&ŉĆĄ"ŉąă"ŉĄĂ"ŉāĀ=Ø!!!!!!!!!!!!!!īħ*ÜĮĩvŉĮĪwŉįĪwŉįĪwŉİīwŉİĬvŉİĬwŉıĭvŉıĬvŉĲĭvŉĳĮuŉęĠ’ŉ/Úĝŉ]ÝĔŉ]Üēŉ]Üēŉ[ÛĐŉ?ÚĐŉ[Úďŉ[Úďŉ[ÚĎŉ?Ùčŉ?Øčŉ>×čŉ>ÖČŉ=Öċŉ?Õĉŉ>ÕĈŉ;Óćŉ/ÑĉŉÀæÙŉĘđvŉďČ%ŉĎČ%ŉčċ&ŉČĊ&ŉČĊ&ŉČĊ&ŉČĉ&ŉċĈ&ŉĊĈ&ŉĊć&ŉĉć&ŉĉć&ŉĉĆ&ŉćą&ŉąĄ"ŉĄă@ģĂĂ—N!!!!!!!!!!!!!!!ĩĦ&ĠĭĨwŉĮĩwŉĮĪwŉįĪwŉįīwŉįĪwŉİĬwŉİīwŉıĬvŉĲĭvŉīĪ%ŉ»íøŉ]Üēŉ]ÛĒŉ[Ûđŉ[ÛĐŉ[Úďŉ?ÚĎŉ[ÚĎŉ?Ùčŉ?Ùčŉ?ØČŉ>ÖČŉ=ÖČŉ=Öċŉ>Õĉŉ>Õĉŉ<ÔĈŉ<ÒĆŉ?ÔĀŉÿĄ[ŉĐč%ŉďč%ŉčČ&ŉČĊ&ŉČĊ&ŉČĊ&ŉČĊ&ŉČĊ&ŉċĉ&ŉċĈ&ŉĊć&ŉĊć&ŉĉć&ŉĉĆ&ŉĆĄ(ŅāĀ^[!!!!!!!!!!!!!!!!ĩħ’QĩĦ#ĪĬĨwŉĭĩwŉĭĨwŉĮĩwŉįĪwŉĮĪwŉĮĩwŉįĪwŉİīwŉĲĭvŉéąËŉ^Üđŉ[ÚĐŉ[ÚĐŉ[Úďŉ[Úďŉ?ÚĎŉ?Účŉ?ØČŉ?ØĊŉ>×ċŉ>×Čŉ=Öċŉ=ÕĊŉ=Õĉŉ>ÕĈŉ;Óćŉ<ÒĆŉ<ÑąŉÉëÐŉĐč&ŉĐč%ŉďč%ŉĎČ%ŉčċ&ŉČĊ&ŉČĊ&ŉČĊ&ŉČĉ&ŉċĉ&ŉċĈ&ŉĊć&ŉĊć&ŉĈĆ"ŉĄĄ<♥!!!!!!!!!!!!!!!!!!ĦĤ_%ĨĤzŃĪħxŉĬĨxŉĬĨwŉĭĨwŉĭĨwŉĮĩwŉĮĩwŉĮĩwŉİīwŉĢĤ/ŉ_Ýčŉ[ÚĐŉ?ÚĐŉ[Ùďŉ?Ùčŉ?ÙČŉ?ØČŉ?Øċŉ?×Ċŉ?×Ċŉ=×ċŉ=ÕĊŉ=Õĉŉ=Õĉŉ=ÔĈŉ<Óćŉ<ÒĆŉ<Òąŉ/ÐĄŉąĉ;ŉđĎ%ŉĐč%ŉďČ%ŉďČ%ŉĎċ%ŉčċ&ŉČĊ&ŉČĉ&ŉČĊ&ŉċĉ&ŉĊć&ŉĊć&ŉĈć;ÕċČÊ1!!!!!!!!!!!!!!!!!!!ģĠ?^ĥĢzŀĨĤxŉĩĥxŉīĦxŉīħxŉīĨxŉīħwŉĬĨwŉĮĩwŉķįoŉ×úÛŉ;Øĕŉ?ÚĐŉ[Ùďŉ?ÙĎŉ?ØČŉ?Øċŉ?×Ċŉ>×Ċŉ>×Ċŉ=Öċŉ=ÕĊŉ=Õĉŉ<ÔĈŉ<Óćŉ<Óćŉ<ÒĆŉ;ÒĆŉ/Ðćŉ®Ýìŉēď$ŉĐč%ŉĐč%ŉďč%ŉĎČ%ŉčċ&ŉčċ&ŉČĊ&ŉČĊ&ŉČĊ&ŉċĉ&ŉĈĆ*ôČĔá4!!!!!!!!!!!!!!!!!!!!!Ģğ:)ģĠ%ĻĦĢyŉĦģyŉĨĤyŉĨĤyŉĩĥyŉĩĥyŉĩĥyŉīĦwŉĪħ$ŉ^ÛČŉ?ÙĐŉ?ÙĎŉ?ØĎŉ>×čŉ>×Čŉ>Öċŉ=Öċŉ=Öċŉ=ÕĊŉ=ÕĊŉ=Õĉŉ<Óćŉ<Óćŉ<Óćŉ;ÒĆŉ<ÒĆŉ;ÒĄŉ,ÏĈŉÈëÏŉĕĐyŉĐč%ŉĐč%ŉĐč%ŉĎČ%ŉĎċ%ŉČĊ&ŉČĊ&ŉċĉ&ŉĊĉ;ÛđĒÈ5!!!!!!!!!!!!!!!!!!!!!!!Ġğ”mğĜ&ľģğzŉģĠzŉĥġzŉĥĢyŉĦĢyŉĦģyŉĦģyŉĨĤxŉñć♦ŉ/Öēŉ?Øčŉ>×čŉ>×Čŉ=ÖČŉ=Öċŉ=ÕĊŉ=ÕĊŉ=ÕĊŉ=Õĉŉ<ÔĈŉ<Óćŉ;Óćŉ;Óćŉ;ÒĆŉ;Òąŉ;Òąŉ;ÑĄŉ=Òāŉìý½ŉĐĎ%ŉĐč%ŉĐč%ŉďč%ŉďČ%ŉĎČ%ŉČĊ"ŇČĊ;ÊĔē⅓2!!!!!!!!!!!!!!!!!!!!!!!!!ĢĞ€KĜĚ)ăĞě#ŉĠĝzŉġĝzŉĢĞzŉģğzŉĢğzŉģğyŉěě*ŉ¾äøŉ>×Čŉ=Öċŉ=Öċŉ=ÕĊŉ=Õĉŉ=Õĉŉ=Õĉŉ=Õĉŉ<Ôĉŉ<ÔĈŉ;Óćŉ<Óćŉ<ÒĆŉ;Òąŉ;Òąŉ;ÑĄŉ;ÑĄŉ/ÐĄŉ=Ñþŉïþ©ŉĖđxŉđč$ŉĐč%ŉĎČ%ŉčċ)ĭċċ=™!!!!!!!!!!!!!!!!!!!!!!!!!!!!ĠĜ—5Ěė>©ĘĖ"ŉěĘ#ŉĜę$ŉĜę$ŉĝĚ#ŉĝĚ#ŉğěyŉòĄ†ŉ/ÔĎŉ=ÕĊŉ<Õĉŉ<Ôĉŉ<ÔĈŉ=ÔĈŉ<ÔĈŉ<ÔĈŉ<Óćŉ<Óćŉ;ÓĆŉ;ÒĆŉ<Òąŉ;Òąŉ:ÑĄŉ:Ðăŉ:Ðăŉ:Ðăŉ:Ïăŉ>ÏüŉÈéËŉďĎ"ŉĒď#ŉčČ,õčč^W!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ĬĨÚ9ĖĔ*ÿėĔ%łĘĖ$ŉĘĖ$ŉęĖ$ŉęĖ$ŉĢětŉÁëÜŉ:ÓČŉ<Óćŉ<ÔĈŉ<ÔĈŉ<Óćŉ<Óćŉ<Óćŉ<Óćŉ<Óćŉ<ÒĆŉ<Òąŉ<Òąŉ;ÐĄŉ:Ðăŉ;Ñăŉ:Ðăŉ:Ðăŉ:Ðăŉ:ÍĀŉ.ÌĂŇ(Æÿį?Áï/!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ėĖ]#ėĕ)éĖĔ"ĻĖĔ$ŉėĔ$ŉėĔ$ŉęĕ#ŉ‡ãèŉ/Òĉŉ<ÒĆŉ;Óćŉ<Óćŉ<ÔĈŉ<ÓĆŉ;ÓĆŉ;ÒĆŉ;Òąŉ;Ñąŉ:Ðăŉ:Ðăŉ:Ðăŉ:Ðăŉ:Ðăŉ:Ðăŉ/ÍĀŉ;Èûĉ;Æ÷⅓Õ¢Ü4!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ģġ€3ĜĚ;MĘĖ:µėĕ*ĦĖĔ$ŉėĔ#ŉčĐ.ŉ…Ûôŉ;Òćŉ<ÒĆŉ;ÒĆŉ<Òąŉ;Ñąŉ;ÑĄŉ;ÑĄŉ:Ðăŉ:Ðăŉ:ÏĂŉ:ÏĂŉ:ÐĄŉ/Ïăŉ;ËþŇ;Çúß]Ëúg=♥íA!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ğĞ‒Zėĕ>ÂĘĖ"ċĖĔ&ħ•ÝìĲ;ÑąĹ<ÑĄŁ<ÑĄŇ;ÑĄŉ;ÑĄŉ;ÏĂń;ÏĂļ:ÐĂĵ/ËþĬ/Êüě=ÇùÝ“Ãó(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ĺĭ¢AĻĩwY…Öñq[Èû+^ÐĂ“<Ðă–>Ðă’`Íý=[Êúw=Áóf™♠éI!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/}},
{
width: 64, height: 64, transparent: true, f: function() {/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!Ĵğò2Ķğñ7ĶğòAĶğòBĶğòBĶğò9Ķğñ7ĶĜï2!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ĶğòCĶğòrĶğò”Ķğò♦Ķğò×ĶğòïĶğòýĶğòĂĶğòĂĶğòüĶğòíĶğòÕĶğò♠Ķğò_ĶğòoĶğò9!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Ķğò‘ĶğòûĶğòĨĶğòĶĶğòŃĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòłĶğòĵĶğòĦĶğòõĶğò>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Ķğò4ĶğñNĶğòØĶğòńĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŀĶğòÌĶğòKĶğò4!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ĶğòyĶğòéĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòņĶğòßĶğòq!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ĶğòNĶğòùĶğòļĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòĹĶğòíĶğïC!!!!!!!!!!!!!!!!!!!!!!!!!!!!ĳğò1Ķğò”ĶğòłĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòļĶĞò,!!!!!!!!!!!!!!!!!!!!!!!!!!ĶğòJĶğòÙĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòÌĶğòC!!!!!!!!!!!!!!!!!!!!!!!ĶĝòeĶğòĔĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòĉĶğòS!!!!!!!!!!!!!!!!!!!!!ĶğòcĶğòīĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòğķğòR!!!!!!!!!!!!!!!!!!!ĶğòcĶğòĲĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòğĶğòR!!!!!!!!!!!!!!!!!ĶğòeĶğòĬĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòğĶğòR!!!!!!!!!!!!!!!ĶğòJĶğòĔĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòćĶğòB!!!!!!!!!!!!!Ĳğï1ĶğòÚĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòÇ!!!!!!!!!!!!!Ķğò”ĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğò"!!!!!!!!!!!ĶğòNĶğòŁĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòĺĶğò6!!!!!!!!!!ĶğòúĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòå!!!!!!!!!ĶğòzĶğòļĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶĞñŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòĶĶğòl!!!!!!!Ķğò4ĶğòéĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶğòŉĶĞñŉĶĞñŉĶĞñŉĶĞñŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòÕĶğò3!!!!!!ĶğòOĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĜðŉĵĚïŉĵęîŉĵęíŉĵęíŉĵęîŉĵěïŉĶĞñŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòĽĶğòF!!!!!!ĶğòÙĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶğòŉĶğòŉķĢõŉĴĔêŉĮûÒŉĩâ♠ŉĥÏ®ŉĢÂ“ŉġ♦]ŉġ♦]ŉĢÄ”ŉĥÒ™ŉĪçÀŉİā×ŉĵĜïŉķġôŉĶĞòŉĶğòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğò»!!!!!!ĶğòńĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶğòŉĶğòŉĶĠóŉķġõŉīîÆŉĤÉ‐ŉĢÄ–ŉģÊ®ŉĥÑµŉĦ×»ŉĦÚ♥ŉĦØ♣ŉĥÔ£ŉĤÌ½ŉĢÄ–ŉġÀ`ŉĤË…ŉįþÕŉĸĤøŉĶĞòŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòĶ!!!!!Ķğò‘ĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶĞòŉĶĞòŉĴĖëŉĥÓ½ŉĢÃ‘ŉĥÐ⅔ŉħÞÂŉĪëÏŉĭõÙŉįúàŉįýãŉĮûáŉĮöÛŉīíÒŉĨáÅŉĥÓµŉģÅ…ŉĠ»<ŉĪã♠ŉĶĝñŉĶĞòŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòz!!!!ĶğòüĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶğóŉĴēèŉĥÑ•ŉĢÄ…ŉĦÚ♥ŉīíÒŉĳĉïŉļĦČŉŃĻġŉņŇĭŉňŉİŉŇňĮŉńĿĥŉľĬđŉĵďõŉĭóØŉħÝÂŉģÌ•ŉĠ»=ŉĨà€ŉĶĝñŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòä!!!ĶğòDĶğòĨĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶğóŉĵěïŉĤÍ°ŉĢÆ‐ŉħÞÂŉĭöÛŉľĪđŉŅłĨŉŇŇĭŉņņĬŉņŅīŉŇŅīŉņŅīŉņņĬŉŇŇĭŉņŅīŉŀıėŉİĀæŉĨãÈŉĤÍ½ŉĠ«<ŉĨÝ¢ŉķĤøŉĶĞòŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòğ!!!ĶğòrĶğòĶĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉķġõŉĨÝ£ŉĢÆ…ŉħÜÀŉĮøÝŉłĻĠŉņŅĬŉņŅīŉŇŅīŉņŅīŉņŅīŉņņīŉņŅīŉņŅīŉņņīŉņŅīŉņŅīŉńŁħŉİāæŉĨáÆŉģÊ®ŉĠ€:ŉĭöÍŉķġõŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòİĶğòb!!Ķğò“ĶğòłĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶĞòŉıćÝŉĢÆ’ŉĥÕ£ŉĬò×ŉĿİĖŉņņĬŉņŅīŉņŅīŉņŅīŉņŅĭŉņŅįŉņŅİŉņŅįŉņŅĭŉņŅĬŉņŅīŉņŅīŉņņĬŉńľĥŉįúàŉĦÚ♥ŉĢÃ‘ŉģÄ`ŉĴėëŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòĽĶğò,!!Ķğò♥ĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĶĝñŉĪçÀŉģÆ‐ŉĩäÉŉķĕûŉņŅīŉņŅīŉņŅīŉņŅĭŉņņıŉŇŇĶŉŉňĻŉŉňļŉňňĻŉŇŇĵŉņŅİŉņŅĬŉņŅīŉņŅīŉņņīŉĽĩďŉīëÐŉĤÍ¾ŉĠ»<ŉĮùÐŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĵĞñŉĵĞñŉĵĞñŉĵĞñŉĵĞñŇĴĝñ•!Ķğò2Ķğò×ĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĵĚîŉģÉ…ŉĤÒ‡ŉĬóØŉŁĶĝŉņņĬŉņŅīŉņŅĭŉņņĲŉňňļŉŉŉłŉŉŉńŉŉŉŅŉŉŉńŉŉŉŁŉŇŇĹŉņņİŉņŅĬŉņŅīŉņŅīŉńľĤŉıĂèŉĦÙ♣ŉġ♦]ŉĨÚ†ŉĶĜðŉĶĞòŉĶĞòŉĶğòŉĶğòŉĶğòŉĵĞñŉĵĞñŉĵĞñŉĵĞñŉĵĞñŉĵĞñŉĵĞñŉĴĝñŉĴĝñŉĴĝðŉĴĝðŉĴĝðŉĳĜðÆ!ĵğò7ĶğòðĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉĳĒçŉĠ»>ŉħÛ¿ŉıĂçŉŇŉįŉņŅīŉņņīŉņŅİŉňŇĹŉŉŉŃŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉňňŁŉŇŇķŉņŅĮŉņŅīŉņŅīŉŇŇĭŉķĖüŉĨâÇŉĢÅ—ŉĢÃ_ŉĵĚîŉĶĞòŉĵĝñŉĵĝñŉĵĞñŉĵĞñŉĴĝñŉĴĝñŉĴĝðŉĴĝðŉĴĝðŉĴĝðŉĳĜðŉĳĜïŉĳĜïŉĳĜïŉĳĜîŉĳĜîŉĲěîâıęì4ĶğòAĶğòýĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĠôŉįýÔŉġ¿`ŉĨáÅŉĸĘþŉŇŉįŉņŅīŉņŅĭŉņņĳŉŉŉĿŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉňŇļŉŇŅıŉņŅĬŉņŅīŉŇŇĭŉļħčŉĪéÏŉģÊ®ŉğ‡*ŉĵĘíŉĶĞòŉĳěïŉĳěðŉĳĜïŉĳĜïŉĲĜîŉĳěîŉĳěïŉĳĜîŉĳĜíŉĲěíŉĲěíŉıěîŉıĚíŉıĚíŉıĚíŉİęìŉįęëøĮėê9ĶğòBĶğòĂĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉķġôŉĬóÊŉġÂ’ŉĩäÈŉĻģĉŉŇňĮŉņŅīŉņŅĭŉŇŇĵŉŉŉłŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉňŀŉņņĳŉņŅĬŉņŅīŉņņĬŉĿįĕŉīíÒŉĤÌ½ŉĞ¾"ŉĴĔéŉĵĞòŉĲĚíŉĲĚíŉıĚíŉıĚíŉıĚíŉİĚíŉİĚìŉİęìŉįęìŉįĘëŉįĘëŉĮĘëŉĮėêŉĮėêŉĭėêŉĭĖêŉĬĖéĂīĕèBĶğòBĶğòĂĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶĞòŉĶĞòŉķġôŉĬóÊŉġÂ‘ŉĩäÈŉĻĢĈŉŇňĮŉņŅīŉņŅĭŉŇŇĵŉŉŉłŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŀŉņņĳŉņŅĬŉņņīŉņņĭŉĿĮĔŉīíÒŉĤÌ½ŉĞ¼"ŉĴĔéŉĴĜðŉįĘëŉİĘìŉįĘìŉįĘëŉĮĘëŉĮėëŉĮėêŉĭėêŉĭĖêŉĬĖéŉĬĖéŉīĕéŉīĕèŉīĔèŉĪĔèŉĩēçŉĩĒæāĩđåAĶğò9ĶğòûĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĶğòŉĵĞñŉĴĝñŉĵĞñŉĵĞðŉĵĞñŉĵĞñŉĵĝñŉĴĜñŉĶĠóŉįþÔŉġ¿`ŉĨàÅŉķĘýŉŇŉįŉņŅīŉņŅĬŉŇņĳŉŉŉĿŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉňňĽŉŇņıŉņŅīŉņŅīŉŇŇĭŉļĦċŉĪéÎŉģÊ®ŉğµ+ŉĵęíŉĲĚîŉĬĕéŉĬĕéŉĬĕéŉīĔèŉīĔèŉĪĔèŉĪēçŉĩēçŉĩēæŉĩĒæŉĨĒæŉĨĒæŉħđåŉĦĐåŉĦĐäŉĥďäŉĥďãõĤĎâ8Ĵĝð6ĵĞñëĵĞñŉĵĞñŉĵĞñŉĴĝñŉĴĝðŉĴĝðŉĴĝðŉĴĝðŉĴĝðŉĳĜðŉĳĜïŉĳĜïŉĳĜïŉĳĜîŉĲěîŉĲěîŉĶĞòŉĳēèŉĠ»>ŉħÚ¿ŉİāæŉŇŉįŉņŅīŉņņīŉņŅİŉňňĺŉŉŉŃŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉŉŉŅŉňňłŉŇŇķŉņņĮŉņŅīŉņŅīŉŇŇĭŉĶĔúŉĨâÆŉĢÄ–ŉģÄ`ŉĵĚîŉĮėëŉĨđæŉĩĒæŉĨđåŉħđåŉħđåŉħĐäŉĦĐäŉĥďäŉĥďãŉĤĎâŉģčâŉģčâŉĢČáŉġČàŉġċàŉĠċàŉĠĊßÝĝĊÝ3İęí1ĴĝðÒĴĝðŉĴĝðŉĳĝðŉĳĜïŉĳĜïŉĳĜïŉĳĜîŉĳĜîŉĲĜîŉĲĜîŉĲěîŉĲěîŉĲěíŉıěíŉıĚíŉıęíŉĳěïŉĵĚîŉģÊ‐ŉĤÑ‡ŉĬòÖŉŀĴěŉņņĬŉņŅīŉņŅĭŉņņĳŉňňĽŉŉŉłŉŉŉńŉŉŉŅŉŉŉŅŉŉŉłŉŇŇĺŉŇņıŉņŅĬŉņŅīŉņŅīŉŃĽģŉıāæŉĦØ♠ŉġ♥]ŉĨÜµŉĶĝñŉĨđåŉĤčãŉĤčãŉĤčâŉģčáŉĢČáŉĢČáŉġċàŉĠċßŉĠĊßŉğĉÞŉĞĉÞŉĞĈÝŉĝćÜŉĜćÜŉĜĆÜŉĚąÛŉĚĄÛÁ!!ĲĜî«ĲĜîŉĲĜîŉĲěîŉĲěîŉĲěîŉıěíŉıĚíŉıĚíŉİĚíŉİęìŉİęìŉİęìŉįęëŉįĘëŉĮėëŉĮĖêŉĮėëŉĶĝñŉĪèÂŉģÅ…ŉĩãÈŉĶĒ÷ŉņŅīŉņŅīŉņŅīŉņŅĭŉņŅĲŉňŇĸŉňŇĽŉňňľŉňňļŉŇŇķŉŇņıŉņŅĭŉņŅīŉņŅīŉņņĬŉļĦČŉĪéÎŉĤÍ¼ŉĠ»<ŉįûÑŉĳĜðŉğĈÞŉğĈßŉğĈÞŉĞĈÝŉĝćÝŉĝĈÝŉĜĆÜŉěĆÛŉěąÚŉĚĄÚŉęĄÙŉĘăÙŉėĂØŉėĂ×ŉĖā×ŉĕĀÖŉĔĀÕņĔÿÕ°!!įĚë?İĚìŀİĚìŉİęìŉįęìŉįęìŉįĘëŉĮĘëŉĮėëŉĮėêŉĭėêŉĭėêŉĬĖéŉĬĖèŉīĕéŉīĔéŉīĔçŉĩĒçŉĲěïŉĲĉßŉĢÆ’ŉĥÓ¢ŉĬðÕŉľĭēŉņņĬŉņŅīŉņŅīŉņŅĬŉņŅĮŉŇņıŉŇņĲŉņņıŉņŅĮŉņŅĬŉŇŅīŉņŅīŉņŇĭŉŃĻġŉĭøÝŉĦÙ♣ŉĢÂ”ŉĢÆ“ŉķĚîŉĤčãŉĚĄÚŉĚĄÚŉęăÙŉĘăÙŉĘĂØŉėĂ×ŉĖā×ŉĕĀÖŉĕÿÕŉēþÔŉĒþÔŉĒýÓŉĐüÒŉĐüÒŉďûÑŉďúÐŉčùÏĻČùÏ&!!ĭėéjĭėêĳĭĖêŉĭĖêŉĬĖéŉĬĕéŉīĕéŉīĔèŉĪĔèŉĪĔçŉĩēçŉĩēçŉĩĒæŉĨĒæŉĨĒæŉĨđåŉħĐåŉĦĐåŉĨđæŉķĢõŉĩà»ŉĢÅ–ŉĦÛ♦ŉĭôÚŉŁķĝŉņņĬŉņŅīŉņŅīŉņŅīŉņŅīŉņŅĬŉņŅĬŉņņĬŉņŅīŉņŅīŉņņĬŉŃĽģŉįýâŉħàÄŉģÉ©ŉğ€/ŉĮûÑŉıĜðŉĖĀ×ŉĕÿÖŉĔþÕŉĒþÔŉĒýÓŉĐüÒŉĐüÒŉďûÑŉĎûÐŉčùÐŉčùÏŉċøÎŉċ÷ÍŉĊöÍŉĉöÌŉĈôËŉćóÊŉĆóÊĮĄðÈU!!ħēå5ĪēçĤĩēçŉĩēæŉĨĒæŉĨĒæŉĨđåŉħđåŉħđåŉĦĐäŉĦĐäŉĥďäŉĥďãŉĤĎâŉĤĎâŉģčâŉĢČáŉĢċáŉġċàŉĬĕêŉĶĝñŉĥÐ®ŉġÄ—ŉħÜÀŉĬò×ŉļĥċŉńŁħŉŇŇĭŉņņĬŉņŅīŉŇŅīŉņŅīŉņņĬŉŇŇĭŉŅŃĩŉľĭēŉįüáŉĨâÅŉĤÌ•ŉğ«;ŉĩâ»ŉķĤøŉěĆÛŉĎùÐŉĎùÐŉČùÏŉċ÷Îŉċ÷ÍŉĊöÍŉĉöÌŉĈôËŉćôÊŉĆòÉŉąñÉŉĄðÈŉăïÇŉĂïÆŉĂíÅŉāíÅŉĀëÄŉÿêÃę!!!!ĥďäíĦĐäŉĥďãŉĤĎãŉĤĎâŉģčâŉģčáŉģČáŉġċàŉġċàŉġĊßŉğĊßŉğĉÞŉĞĈÞŉĝĈÝŉĝćÝŉĜĆÜŉěąÛŉĜĆÜŉıěïŉĴĖëŉĥÕ¾ŉĢÃ’ŉħØ♠ŉĪêÏŉĲąëŉĺġĆŉŁĶĜŉŅłĨŉņŇĭŉŅńĪŉłĹĠŉļĦċŉĴĊñŉĬïÕŉħÛ¿ŉģÊ™ŉğ»<ŉĩã♣ŉķĞòŉģčâŉĈóËŉćóÊŉĆòÊŉąòÉŉĄðÈŉĄðÇŉĂïÆŉĂíÆŉāíÅŉĀìÄŉÿëÃŉÿêÃŉþéÂŉýèÁŉüçÀŉûç¿ŉúå¿ŉùå♦ŉøä♥Ó!!!!ĠĊß@ĠċßŉĠĊßŉğĉÞŉğĉÞŉĞĈÞŉĝćÝŉĜćÜŉĜćÜŉěĆÛŉĚąÛŉĚĄÚŉęĄÚŉĘăÙŉĘĂØŉėĂØŉĖĀ×ŉĕÿ×ŉĕÿÖŉĖā×ŉĴĜðŉĵĘíŉĦØ⅔ŉġÁ“ŉĤÎ¾ŉħÜ¿ŉĪèÍŉĬò×ŉĮ÷ÝŉĮûàŉĮøÝŉĭóØŉīëÏŉĨÞÃŉĥÒ†ŉĢÄ–ŉğ«;ŉĪéÁŉķğóŉħđåŉāìÄŉĀëÅŉĀëÄŉÿëÃŉÿêÃŉþéÁŉýèÁŉýèÀŉûæ¿ŉúå♦ŉúå♦ŉøã♥ŉ÷ã♣ŉ÷â♠ŉöà»ŉôà«ŉôß€ŉóß€ŉñÝ¢ŉñÝµg!!!!!ĜĆÛĸěąÛŉĚąÚŉęĄÙŉĘăÙŉĘăØŉėĂØŉĖā×ŉĕĀÖŉĕĀÖŉĔÿÖŉēþÔŉēþÔŉĒýÔŉđýÓŉĐüÒŉĐûÒŉďúÑŉčùÐŉĐúÑŉĭĖêŉķģöŉĬôËŉģÊ‐ŉĢÄ–ŉĢÈ°ŉĥÏ⅔ŉĥÔ€ŉĥÖ»ŉĦÕ«ŉĥÑ‡ŉģÉ®ŉġÁ”ŉĠÁ`ŉĤÎ‒ŉıĆÜŉķĤ÷ŉğĈÞŉúå¿ŉüæÀŉûå¿ŉúå♦ŉùã♥ŉøã♣ŉ÷â♣ŉõá»ŉõà«ŉôß«ŉóß€ŉòÞ£ŉñÝ¢ŉðÛ‡ŉïÛ‡ŉîÚ†ŉíÚ†ŉìØ⅔ŉìØ⅓ŉë×⅓ĥ!!!!!!ĕĀÖ♥ĕÿÖŉĔÿÕŉēÿÕŉĒþÔŉĒýÓŉđýÓŉđüÒŉĐüÒŉďûÑŉĎúÐŉčùÏŉČùÏŉċ÷ÎŉĊ÷ÍŉĉöÌŉĈõÌŉĈôËŉćóÊŉĆñÉŉćòÊŉěąÛŉĶĠôŉķĚîŉįÿÖŉĩçÀŉĥÓ½ŉģÆ–ŉġÂ`ŉġÂ`ŉĢÈ–ŉĥÖ¾ŉīìÄŉıąÛŉĺġõŉĬĖëŉċôÌŉ÷á♠ŉõà»ŉôà«ŉóß€ŉòÞ£ŉñÝ¢ŉðÜ¢ŉðÛ‡ŉîÚ†ŉîÚ⅔ŉíÙ⅔ŉëØ⅓ŉë×⅓ŉêÖ¾ŉéÖ¼ŉéÕ½ŉçÔ½ŉæÓ•ŉæÓ™ŉäÑ®ŉäÒ®“!!!!!!ďüÑFĎûÐļĎûÐŉčùÏŉČøÎŉČ÷Îŉċ÷ÍŉĉõÌŉĉõËŉĈõÊŉĆóÊŉĆóÉŉąòÉŉĄðÇŉăïÇŉĂïÆŉāíÅŉĀìÄŉĀëÄŉÿêÃŉþéÂŉþèÂŉĀêÃŉĚăÙŉĴĜñŉķĞòŉĶĜðŉĵĚîŉĵęîŉĵęîŉĶĚïŉķĜñŉĸğóŉĮėëŉĉóÊŉóÞ£ŉðÛ‡ŉïÚ‡ŉïÙ†ŉíÙ⅔ŉìØ⅓ŉìØ⅓ŉéÖ¼ŉéÕ¼ŉéÕ½ŉçÔ•ŉçÓ•ŉæÓ™ŉäÑ®ŉäÑ®ŉäÐ©ŉâÏ°ŉâÏ‒ŉáÎ‒ŉàÍ…ŉßÌ…ŉßÌ—ĪßÌ…C!!!!!!ĈôÉ3ćôËÓćóÊŉĆóÊŉąòÉŉĄñÈŉăðÇŉăîÇŉāíÅŉāíÅŉĀìÄŉÿêÃŉþêÂŉþéÂŉýèÁŉüçÀŉûæ¿ŉúå♦ŉùä♥ŉøä♥ŉøã♣ŉöá♠ŉöá»ŉóÞ€ŉòÝ£ŉĄìÅŉĔüÒŉĞąÜŉģĊàŉĢĉÞŉěĂÙŉčõÍŉùã♠ŉèÓ½ŉéÖ¼ŉéÖ¼ŉéÕ¼ŉèÔ½ŉçÓ•ŉæÓ•ŉåÒ®ŉäÑ®ŉäÑ©ŉãÐ°ŉâÏ°ŉâÏ‒ŉàÍ‐ŉàÍ…ŉßÌ…ŉÞË—ŉÝÊ–ŉÝÊ–ŉÜÉ’ŉÛÈ‘ŉÛÈ”ŉÚÇ“ŉÙÇ“ÁØÇ^1!!!!!!!āìÅiĀìÄĵÿëÃŉÿêÂŉþèÂŉýèÁŉüçÀŉûç¿ŉúå♦ŉúå♦ŉøä♥ŉ÷â♣ŉ÷â♠ŉöá»ŉõà«ŉôß€ŉóß€ŉòÞ£ŉñÝ¢ŉðÜµŉïÛ‡ŉîÚ†ŉîÙ†ŉìØ⅔ŉêÖ¾ŉèÔ½ŉçÓ•ŉåÒ™ŉåÑ®ŉäÐ©ŉäÐ©ŉäÑ®ŉåÑ®ŉäÐ©ŉãÐ°ŉâÏ°ŉâÎ‒ŉàÍ‐ŉàÍ‐ŉßÌ…ŉÞË—ŉÞË–ŉÝÊ’ŉÜÉ‘ŉÜÉ‘ŉÛÈ”ŉÚÇ“ŉÙÆ`ŉÙÆ`ŉØÅ_ŉØÅ^ŉ×Ä^ŉÖÃ]ŉÖÃ[ŉÕÂ[ĭÖÂ[V!!!!!!!!!úå♦Þùä♥ŉøä♣ŉ÷â♠ŉöá»ŉõá»ŉôà€ŉóß€ŉòÞ£ŉñÝ¢ŉðÜµŉðÜµŉîÚ†ŉíÚ†ŉíÙ⅔ŉëØ⅓ŉê×¾ŉêÖ¾ŉéÕ¼ŉèÕ¼ŉèÔ½ŉæÓ•ŉåÒ™ŉåÑ®ŉäÐ©ŉãÐ©ŉãÏ°ŉâÎ‒ŉáÎ‐ŉàÍ‐ŉàÍ…ŉßÌ—ŉÞË—ŉÝÊ–ŉÜÉ’ŉÜÉ‘ŉÛÈ”ŉÚÇ“ŉÚÇ“ŉÙÆ`ŉØÅ_ŉØÅ_ŉ×Ä^ŉ×Ä]ŉÕÂ[ŉÕÂ[ŉÔÁ?ŉÔÁ?ŉÔÁ?ŉÓÀ>ŉÒ¿=ŉÒ¿<ŉÑ♦=ŉÐ♥;Ç!!!!!!!!!!öæÉ2ñÝµĴñÜµŉïÜ‡ŉïÚ‡ŉîÚ†ŉíÙ⅔ŉëØ⅓ŉë×¾ŉêÖ¾ŉéÕ½ŉèÔ½ŉçÔ½ŉçÓ•ŉæÒ™ŉåÒ®ŉäÑ®ŉãÐ©ŉãÏ°ŉâÏ‒ŉáÎ‒ŉàÍ‐ŉàÍ…ŉÞË—ŉÞË—ŉÝÊ–ŉÜÉ’ŉÜÉ‘ŉÛÈ”ŉÛÈ“ŉÚÇ“ŉÙÆ`ŉØÅ_ŉ×Ä^ŉ×Ä^ŉÖÄ^ŉÕÂ[ŉÕÂ[ŉÔÂ?ŉÔÁ?ŉÓÀ>ŉÓÀ>ŉÓÀ>ŉÑ¿<ŉÒ¿=ŉÑ♦<ŉÐ♦:ŉÏ♥;ŉÐ♥:ŉÏ♣:ŉÎ♠/ŉÎ♠.ŉÍ♠.Ĥ!!!!!!!!!!!!êÖ⅓téÕ¼ŇèÕ½ŉèÔ½ŉçÓ•ŉæÓ™ŉåÒ™ŉäÑ®ŉäÐ©ŉãÐ°ŉâÏ°ŉáÎ‒ŉáÎ‐ŉàÍ‐ŉßÌ…ŉÞË—ŉÞË–ŉÝÊ’ŉÜÉ‘ŉÛÈ‘ŉÛÈ”ŉÚÇ“ŉÙÆ`ŉÙÆ`ŉØÅ_ŉ×Å^ŉ×Ä^ŉÖÃ]ŉÕÃ[ŉÕÂ?ŉÔÁ?ŉÔÁ?ŉÓÁ?ŉÓÀ=ŉÒ¿=ŉÒ¿=ŉÑ♦<ŉÑ♦;ŉÐ♦;ŉÐ♣:ŉÏ♣/ŉÏ♣/ŉÍ♠/ŉÍ».ŉÍ»,ŉÌ«,ŉÌ€+ŉÌ€*ŉË€+ŉË£@ŉË£@ľÊµ@c!!!!!!!!!!!!!äÏ©♣âÏ‒ŉáÎ‒ŉáÎ‐ŉàÍ…ŉßÌ…ŉßÌ—ŉÝÊ–ŉÝÊ’ŉÜÉ‘ŉÛÈ‘ŉÛÈ”ŉÚÇ“ŉÙÆ“ŉÙÆ`ŉØÅ_ŉ×Å_ŉÖÄ^ŉÖÃ]ŉÖÃ]ŉÕÂ[ŉÕÂ[ŉÔÁ?ŉÓÀ>ŉÓÀ>ŉÒÀ=ŉÑ¿=ŉÑ¿<ŉÑ♦<ŉÐ♥;ŉÐ♥;ŉÏ♥:ŉÏ♠/ŉÎ♠.ŉÎ♠.ŉÍ».ŉÍ«,ŉÍ«+ŉÌ€*ŉÌ€*ŉÌ€*ŉÊ£*ŉË£@ŉÊ¢)ŉÉµ)ŉÊµ(ŉÉµ(ŉÈ‡(ŉÈ‡"ŉÈ‡(©!!!!!!!!!!!!!!ßÍ’5ÜÉ’üÜÉ’ŉÛÈ”ŉÚÇ“ŉÚÇ“ŉÙÆ`ŉØÅ_ŉØÅ_ŉ×Ä^ŉÖÄ]ŉÖÃ]ŉÕÃ]ŉÔÂ[ŉÔÁ?ŉÔÁ>ŉÓÀ>ŉÒ¿=ŉÒ¿=ŉÑ¿<ŉÑ♦;ŉÐ♥;ŉÐ♥:ŉÏ♣:ŉÎ♣:ŉÎ♣/ŉÎ♠.ŉÍ».ŉÍ».ŉÌ«+ŉÌ€+ŉÌ€*ŉË£*ŉË£@ŉÊ¢@ŉÊ¢@ŉÊ¢)ŉÉµ)ŉÉµ(ŉÉµ(ŉÈ‡(ŉÈ‡"ŉÇ‡"ŉÇ†"ŉÇ†&ŉÆ†&ŉÆ†&ŉÆ†&ŉÅ⅓%ì!!!!!!!!!!!!!!!!ØÅ^E×Ä^đÖÃ]ŉÕÃ[ŉÕÂ[ŉÔÁ?ŉÔÁ?ŉÓÀ>ŉÒÀ=ŉÒ¿=ŉÑ♦=ŉÑ♦<ŉÐ♦;ŉÐ♥:ŉÏ♣:ŉÏ♣/ŉÏ♣/ŉÎ♠.ŉÍ».ŉÍ»,ŉÍ«+ŉÌ«+ŉË€+ŉË€*ŉË£*ŉÊ¢@ŉÊ¢@ŉÊ¢)ŉÉµ)ŉÈµ)ŉÈ‡(ŉÈ‡(ŉÈ‡"ŉÈ‡"ŉÇ†"ŉÆ†&ŉÇ†&ŉÆ⅔&ŉÅ⅔%ŉÆ⅔%ŉÅ⅔%ŉÅ⅓%ŉÅ⅓$ŉÅ⅓$ŉÅ¾#ŉÅ⅓#ŉÄ¾#ĀÂ½#6!!!!!!!!!!!!!!!!!ÓÀ?JÑ¿=ĊÑ♦<ŉÐ♥;ŉÐ♥;ŉÏ♥:ŉÏ♣:ŉÎ♠/ŉÎ♠.ŉÍ».ŉÍ».ŉÍ«,ŉÌ€+ŉÌ€*ŉË€*ŉË£*ŉË£*ŉÊ¢@ŉÉ¢@ŉÊ¢)ŉÉµ)ŉÉ‡(ŉÈµ(ŉÈ‡"ŉÈ†"ŉÇ‡"ŉÇ‡"ŉÇ†&ŉÆ†&ŉÆ†&ŉÆ⅔%ŉÅ⅓%ŉÅ⅓%ŉÅ⅓$ŉÄ¾$ŉÅ¾#ŉÄ¾$ŉÄ¾#ŉÄ¾zŉÄ¾zŉÄ¾zŉÃ¼zŉÃ¼zŉÃ¼zŉÃ¼zõÄ¾yC!!!!!!!!!!!!!!!!!!!Í».HÍ»,čÌ«,ŉÌ«+ŉÌ€*ŉË£*ŉË£@ŉÊ¢*ŉÊ¢@ŉÊ¢@ŉÊ¢)ŉÉµ)ŉÉµ(ŉÈ‡(ŉÈ‡(ŉÈ‡"ŉÇ‡"ŉÇ†&ŉÇ†&ŉÆ†&ŉÆ⅔%ŉÆ⅔%ŉÆ⅔%ŉÅ⅓$ŉÅ⅓$ŉÅ⅓$ŉÅ⅓$ŉÄ¾#ŉÄ¾#ŉÄ¾#ŉÄ¾zŉÄ¾zŉÄ¾zŉÃ¼zŉÃ¼zŉÃ¼zŉÃ¼zŉÂ½zŉÂ½yŉÂ½yŉÂ½yŉÂ½yŉÁ•yþÁ•yB!!!!!!!!!!!!!!!!!!!!!Ê‡&BÊ¢)÷Éµ)ŉÉµ(ŉÈ‡(ŉÈ‡(ŉÈ‡"ŉÇ‡"ŉÇ†"ŉÇ†&ŉÆ⅔&ŉÆ⅔&ŉÆ⅔%ŉÅ⅔%ŉÅ⅓%ŉÅ⅓$ŉÅ⅓$ŉÅ⅓#ŉÅ⅓#ŉÅ⅓#ŉÄ¾#ŉÄ¾#ŉÄ¾#ŉÄ¾zŉÄ¾zŉÃ¼zŉÃ¼zŉÃ¼zŉÃ¼yŉÂ½zŉÂ½yŉÂ½zŉÂ½yŉÂ½yŉÂ½yŉÁ•xŉÁ•xŉÁ•xŉÁ•xŉÁ•xňÁ•xéÂ•b3!!!!!!!!!!!!!!!!!!!!!!!Ã½v3Æ†&⅓Æ†&łÆ⅔%ŉÅ⅔%ŉÅ⅔%ŉÅ⅔%ŉÅ⅓$ŉÅ⅓$ŉÄ¾$ŉÄ¾#ŉÄ¾#ŉÄ¾zŉÄ¾#ŉÃ¼yŉÃ¼zŉÃ¼yŉÃ¼zŉÃ¼zŉÂ½yŉÂ½yŉÂ½yŉÂ½yŉÂ½yŉÁ•yŉÁ•yŉÁ•xŉÁ•xŉÁ•xŉÁ•wŉÁ•xŉÁ•wŉÁ•xŉÁ•wŉÁ•wŉÁ•wŉÁ•vŉÁ•vĺÁ•w—!!!!!!!!!!!!!!!!!!!!!!!!!!!Ä¾#fÄ¾#ĨÄ¾zŉÄ¾zŉÄ¾zŉÃ¼zŉÃ¼zŉÃ¼zŉÃ¼zŉÃ¼zŉÂ½zŉÂ½yŉÂ½yŉÂ½yŉÂ½yŉÁ•yŉÁ•xŉÁ•yŉÁ•xŉÁ•xŉÁ•wŉÁ•wŉÁ•xŉÁ•wŉÁ•xŉÁ•wŉÁ•vŉÁ•wŉÁ•vŉÁ•vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vĜÀ™vU!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Ã¼yÈÃ¼zĬÂ½zŉÂ½yŉÂ½yŉÂ½yŉÂ½yŉÁ•yŉÁ•yŉÁ•xŉÁ•xŉÁ•xŉÁ•xŉÁ•wŉÁ•wŉÁ•wŉÁ•wŉÁ•wŉÁ•wŉÁ•vŉÁ•vŉÀ™vŉÀ™uŉÀ™vŉÀ™uŉÀ™vŉÀ™vŉÀ™vŉÀ™uŉÀ™vŉÀ™vħÀ™u«!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!À•xUÁ•w♦Á•xĥÁ•xŉÁ•wŉÁ•wŉÁ•wŉÁ•wŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™uŉÀ™vŉÀ™vŉÀ™uŉÀ™uŉÀ™vŉÀ™vŉÀ™vŉÀ™uŉÀ™uŉ¿®uŉ¿®uĝÀ™u‡À™uO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Á•t1Á•wBÀ™v:À™uĘÀ™uŉÀ™vŉÀ™vŉÀ™uŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™vŉÀ™uŉÀ™uŉ¿®uŉ¿®tŉ¿®uŉ¿®uŉ¿®uŉ¿®tč¿®t&¿®tA!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!À™wTÀ™uÃÀ™vĎÀ™vĪÀ™vĶÀ™vŁÀ™vŉÀ™uŉÀ™uŉ¿®uŉ¿®uŉ¿®tŉ¿®uŉ¿®uň¿®uŀ¿®tĵ¿®uĩ¿®tĉ¿®t♠¿®sK!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!♦™tJ¿®ur¿®t[¿®t⅔¿®uÉ¿®uÖ¿®uÜ¿®uÛ¿®uÕ¿®uÇ¿®u¼¿®t>¿®to¿®sG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!¿©r2¿®s3¿®u3♥°t2!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/}},
];

var createSprite = function(data, n) {
    var graphics = createGraphics(data.width, data.height, JAVA2D);
    var s = data.f.toString();
    var imgData = s.substring(15, s.length - 4);
    
    if (graphics) {
        graphics.background(0, 0, 0, 0);
        var img = graphics.get();
        var cxt = img.sourceImg.getContext("2d");
        var pixels = cxt.getImageData(0, 0, graphics.width, graphics.height);
        
        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%&"()@*+,./:;<=>?[]^_`“”‘’–—…‐‒°©®™•½¼¾⅓⅔†‡µ¢£€«»♠♣♥♦¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌō';
        var l = imgData.length;
        var x = 0;
        var i = 0;
        
        if (data.transparent) {
            var char;
            for (i = 0; i < l;) {
                char = imgData.charAt(i++);
                if (char === '!') {
                    // Transparent, so skip
                    x += 4;
                } else {
                    pixels.data[x++] = chars.indexOf(char);
                }
            }
        } else {
            for (i = 0; i < l;) {
                pixels.data[x++] = chars.indexOf(imgData.charAt(i++));
                pixels.data[x++] = chars.indexOf(imgData.charAt(i++));
                pixels.data[x++] = chars.indexOf(imgData.charAt(i++));
                pixels.data[x++] = 255;
            }
        }
        
        cxt.putImageData(pixels, 0, 0);
        graphics.image(img, 0, 0);
        sprites[n] = graphics;
        spritesLoaded++;
    }
};

/*************************************
 * Object to deal with different
 * image types
**************************************/

var Img = function(width, height, drawF) {
    this.width = width;
    this.height = height;
    this.draw = drawF;
};

var images = [
    new Img(64, 64, function(x, y, w, h) {
        if (sprites[3]) {
            image(sprites[3], x, y, w, h);
        }
    }),
    new Img(40, 40, function(x, y, w, h) {
        if (sprites[4]) {
            image(sprites[4], x, y, w, h);
        }
    }),
    /*
    new Img(96, 160, function(x, y, w, h) {
        if (sprites[2]) {
            image(sprites[2], x, y, w, h);
        }
    }),
    */
    new Img(64, 64, function(x, y, w, h) {
        stroke(183, 186, 158);
        fill(240, 243, 214);
        strokeWeight(1);
        ellipse(x + w / 4 - 1, y + h / 2, w / 16 + 1, w * 3 / 32);
        strokeWeight(2);
        rect(x + w / 4, y + h / 16, w * 0.68, h * 7/8, 1);
    }),
    new Img(128, 80, function(x, y, w, h) {
        stroke(183, 186, 158);
        fill(240, 243, 214);
        strokeWeight(1);
        ellipse(x + w * 0.2, y + h * 0.15 - 1, 6, 5);
        ellipse(x + w * 0.8, y + h * 0.15 - 1, 6, 5);
        strokeWeight(2);
        rect(x + 3, y + h * 0.15, w - 6, h * 0.8, 1);
    })
];

var roundStr = function(n) {
    return "" + (round(n * 100) / 100);
};

/*************************************
 *      Helper functions
**************************************/

// Write a array of text with values for size and dy
// Returns the x value of the end of the text
var writeText = function(txtArray, x, y) {
    for (var i = 0; i < txtArray.length; i++) {
        var t = txtArray[i];
        var txt = t.txt;
        var ty = y + (t.dy || 0);
        
        if (t.size) {
            textSize(t.size);    
        }
        
        if (t.col) {
            fill(t.col);    
        } else {
            fill(20);
        }
        
        text(t.txt, x, ty);
        x += textWidth(txt);
    }
    return x;
};

var multiplyMatrices = function(m1, m2) {
    var newMatrix = [];

    for (var i = 0; i < 3; i++) {
        var row = [];
        
        for (var j = 0; j < 3; j++) {
            var v = 0;
            
            for (var k = 0; k < 3; k++) {
                v += m1[i][k] * m2[k][j];
            }
            
            row.push(roundStr(v));
        }
        
        newMatrix.push(row);
    }
    
    return newMatrix;
};

// Assume everything has 2 dimensions
var dotProduct = function(v1, v2){
    return v1[0] * v2[0] + v1[1] * v2[1];
};

var subtractVectors = function(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1]];
};

var pointInQuadrilateral = function(point, quadPoints) {
    var v1 = subtractVectors(quadPoints[1], quadPoints[0]);
    var v2 = subtractVectors(quadPoints[2], quadPoints[0]);
    var v3 = subtractVectors(quadPoints[3], quadPoints[0]);
    var vp = subtractVectors(point, quadPoints[0]);
    
    // Calculate dot products
    var dot11 = dotProduct(v1, v1);
    var dot12 = dotProduct(v1, v2);
    
    var dot22 = dotProduct(v2, v2);
    
    var dot33 = dotProduct(v3, v3);
    var dot32 = dotProduct(v3, v2);
    
    var dot1p = dotProduct(v1, vp);
    var dot2p = dotProduct(v2, vp);
    var dot3p = dotProduct(v3, vp);
    
    // Calculate barycentric coordinates of two triangles
    var d = 1 / (dot11 * dot22 - dot12 * dot12);
    var u = (dot22 * dot1p - dot12 * dot2p) * d;
    var v = (dot11 * dot2p - dot12 * dot1p) * d;
    
    var d2 = 1 / (dot33 * dot22 - dot32 * dot32);
    var u2 = (dot22 * dot3p - dot32 * dot2p) * d2;
    var v2 = (dot33 * dot2p - dot32 * dot3p) * d2;
    
    return (u >= 0 && v >= 0 && u + v < 1) || (u2 >= 0 && v2 >= 0 && u2 + v2 < 1);
};

var _applyMatrix = function(m, x, y) {
    return [
    x * m[0][0] + y * m[0][1] + m[0][2],
    x * m[1][0] + y * m[1][1] + m[1][2]];
};

/**************************************
 *  GUI Button
***************************************/
{
var Button = function(x, y, w, h, name, clickFunction) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.name = name;
    this.defaultCol = color(220, 220, 220, 250);
    this.showing = true;
    this.box = this.h - 6;
    this.clickFunction = clickFunction;
};

Button.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Button.prototype.click = function() {
    if (this.clickFunction) {
        this.clickFunction();
    }
};

Button.prototype.mouseReleased = function() {
    if (this.showing && this.mouseOver()) {
        this.click();
        return true;
    }
};

Button.prototype.draw = function() {
    if (!this.showing) { return; }
    
    if (this.disabled) {
        fill(200);
    } else if (this.mouseOver() || this.selected) {
        fill(this.defaultCol);
    } else {
        noFill();
    }
    
    strokeWeight(1);
    stroke(200);
    rect(this.x, this.y - 1, this.w, this.h + 3, 8);
    
    if (this.disabled) {
        fill(120);
    } else {
        fill(20);
    }
    
    textSize(15);
    textAlign(CENTER, CENTER);
    textFont(sansFont);
    text(this.name, this.x + this.w / 2, this.y + this.h/2 + 1);
};

var CheckBox = function(x, y, w, h, name) {
    Button.call(this, x, y, w, h, name);
    this.box = this.h - 6;
    this.bx = this.x + 5;
    this.by = this.y + 3;
};
CheckBox.prototype = Object.create(Button.prototype);

CheckBox.prototype.click = function() {
    showing[this.name] = !showing[this.name];  
};

CheckBox.prototype.draw = function() {
    if (!this.showing) { return; }
    
    noStroke();
    if (this.mouseOver() || this.selected) {
        fill(this.highlightCol);
        rect(this.x, this.y, this.w, this.h + 1, 5);
    } else {
        noFill();
    }
    
    fill(10);
    textSize(14);
    textFont(sansFont);
    textAlign(LEFT, CENTER);
    text(this.name, this.x + this.box + 9, this.y + this.h/2);
    
    noFill();
    stroke(10);
    strokeWeight(1);
    rect(this.bx, this.y + 3, this.box, this.box);
    
    if (showing[this.name]) {
        line(this.bx + 1, this.by + 1,
             this.bx + this.box, this.by + this.box);
        line(this.bx + this.box, this.by + 1, this.bx + 1, this.by + this.box);
    }
};
}
/**************************************
 *      Number scrubber object
 * Shows a number with up and down arrow buttons to 
 * change the value
**************************************/
{
var Scrubber = function(x, y, w, h, values, updateF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.font = createFont("serif", h);
    this.fontSize = h * 0.8;
    
    this.index = values.now || 0;
    if (values.options) {
        this.mapping = values.options;
        this.value = this.mapping[this.index];
        this.min = 0;
        this.max = this.mapping.length - 1;
    } else if (values.range) {
        this.min = values.range[0];
        this.max = values.range[1];
        this.value = this.index;
    }
    
    this.updateFunction = updateF;
    this.selected = false;
};

Scrubber.prototype.draw = function(x, y) {
    if (x) { this.x = x; }
    if (y) { this.y = y; }
    
    // Box
    stroke(200);
    noFill();
    strokeWeight(1);
    rect(this.x, this.y - 1, this.w - 1, this.h + 1, 8);
    
    // Text
    textFont(this.font, this.fontSize);
    textAlign(CENTER, BASELINE);
    fill(TRANS_COL);
    
    var ty = this.y + textAscent() + 4;
    text("" + this.value, this.x + this.w / 2, ty);
    
    // Arrow buttons
    var mouseover = this.mouseOver();
    if (this.selected === 1 || mouseover === 1) {
        fill(ORANGE);
        stroke(ORANGE);
    } else {
        noFill();
        stroke(200);
    }
    
    triangle(this.x + 3, this.y - 3,
             this.x + this.w - 3, this.y - 3,
             this.x + this.w / 2, this.y - 12);
    
    if (this.selected === 2 || mouseover === 2) {
        //fill(200);
        //stroke(160);
        fill(ORANGE);
        stroke(ORANGE);
    } else {
        noFill();
        stroke(200);
    }
    
    triangle(this.x + 3, this.y + this.h + 3,
             this.x + this.w - 3, this.y + this.h + 3,
             this.x + this.w / 2, this.y + this.h + 12);
};

Scrubber.prototype.updateValue = function() {
    if (this.selected && this.t % 5 === 0) {
        if (this.selected === 1) {
            this.index = min(this.index + 1, this.max);
        } else if (this.selected === 2) {
            this.index = max(this.index - 1, this.min);
        }

        this.mapValue();
        this.update();
    }
    this.t++;
};

Scrubber.prototype.mapValue = function() {
    if (this.mapping) {
        this.value = this.mapping[this.index];
    } else {
        this.value = this.index;
    }
};

Scrubber.prototype.setValue = function(n) {
    this.value = n;
    if (this.mapping) {
        this.index = this.mapping.indexOf(this.value);
    } else {
        this.index = this.value;
    }
};

// Return 1 or 2 if mouse over top or
// bottom arrow respectively.
// Otherwise return null
Scrubber.prototype.mouseOver = function() {
    if (mouseX >= this.x + 3 && mouseX <= this.x + this.w - 3) {
        if (mouseY >= this.y - 12 && mouseY <= this.y) {
            return 1;
        } else if (mouseY >= this.y + this.h && mouseY <= this.y + this.h + 12) {
            return 2;
        }
    }
};

Scrubber.prototype.mousePressed = function() {
    this.selected = this.mouseOver();
};

Scrubber.prototype.mouseReleased = function() {
    this.selected = false;
    this.t = 0;
};

Scrubber.prototype.click = function() {
    this.selected = this.mouseOver();
    this.updateValue();
};

Scrubber.prototype.update = function() {
    if (this.updateFunction) {
        this.updateFunction(this.value);
    }
};
}
/*************************************
 *      Image Carousel object
 * Basically a horizontal number
 * scrubber, but showing images
**************************************/
{
var Carousel = function(x, y, w, h, images, updateF) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    
    this.index = 0;
    this.images = images;
    this.min = 0;
    this.max = images.length;
    this.value = this.index;
    
    this.updateFunction = updateF;
    this.selected = false;
};
Carousel.prototype = Object.create(Scrubber.prototype);

Carousel.prototype.draw = function() {
    // Box
    var dx = 16;
    var dy = 3;
    stroke(200);
    fill(background);
    strokeWeight(1);
    rect(this.x + dx, this.y - 1, this.w - dx * 2, this.h + 1, 8);
    
    // Text
    var ty = this.y + this.h/2;
    var tx = this.x + this.w/2;
    var img = this.images[this.index];
    img.draw(tx - 32, ty - 32, 64, 64);
    
    // Arrow buttons
    var mouseover = this.mouseOver();
    if (this.selected === 1 || mouseover === 1) {
        fill(ORANGE);
        noStroke();
    } else {
        fill(BACKGROUND);
        stroke(200);
    }
    
    triangle(this.x + 2, ty,
             this.x + dx - 3, this.y + dy,
             this.x + dx - 3, this.y + this.h - dy);
    
    if (this.selected === 2 || mouseover === 2) {
        fill(ORANGE);
        noStroke();
    } else {
        fill(BACKGROUND);
        stroke(200);
    }
    
    triangle(this.x + this.w - 2, ty,
             this.x + this.w - dx + 3, this.y + dy,
             this.x + this.w - dx + 3, this.y + this.h - dy);
};

// Return 1 or 2 if mouse over top or bottom
// arrow respectively. Otherwise return null
Carousel.prototype.mouseOver = function() {
    if (mouseY >= this.y && mouseY <= this.y + this.h) {
        if (mouseX >= this.x && mouseX <= this.x + 16) {
            return 1;
        } else if (mouseX >= this.x + this.w - 16 && mouseX <= this.x + this.w) {
            return 2;
        }
    }
};

Carousel.prototype.updateValue = function() {
    if (this.selected === 1) {
        this.index = (this.index - 1 + this.max) % this.max;
    } else if (this.selected === 2) {
        this.index = (this.index + 1) % this.max;
    }

    this.mapValue();
    this.update();
};
}
/*************************************
 *      Toolbar
 *  Contains other GUI elements
**************************************/
{
var Toolbar = function(x, y, w) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = 6;
    
    this.buttons = [];
    this.sliders = [];
};

Toolbar.prototype.draw = function() {
    noStroke();
    fill(TOOLBAR);
    
    noFill();
    strokeWeight(1);
    stroke(200);
    
    rect(this.x, this.y, this.w, this.h, 8);
   
    for (var i = 0; i < this.buttons.length; i++) {
        this.buttons[i].draw();
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].draw();
    }
};

Toolbar.prototype.addButton = function(name, func) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h;
    var w = this.w - 10;
    
    this.buttons.push(new Button(x, y, w, h, name, func));
    this.h += h + 8;
};
/*
Toolbar.prototype.addSlider = function(minX, maxX, nowX, name, updateF) {
    var h = 16;
    var x = this.x + 15;
    var y = this.h + h;
    var w = this.w - 30;
    
    if (name) {
        y += 18;
        this.h += 18;
    }
    
    this.sliders.push(new Slider(x, y, w, minX, maxX, nowX, name, updateF));
    
    this.h += h + 5;
};
*/
Toolbar.prototype.addScrubber = function(nowValue, values, updateF) {
    var h = 18;
    var x = this.x + 5;
    var y = this.y + this.h + h / 2;
    var w = this.w - 10;
    
    this.buttons.push(new Scrubber(x, y, w, h, nowValue, values, updateF));
    this.h += h + 8;
};

Toolbar.prototype.addCarousel = function(images) {
    var h = 70;
    var x = this.x + 5;
    var y = this.y + this.h + 5;
    var w = this.w - 10;
    
    this.buttons.push(new Carousel(x, y, w, h,images));
    this.h += h + 12;
};

Toolbar.prototype.addOptions = function(options) {
    var x = this.x + 3;
    var y = this.y + this.h;
    var w = this.w - 6;
    var h = 22;
    
    for (var opt in options) {
        this.buttons.push(new CheckBox(x, y, w, h, opt));
        y += 28;
        this.h += 28;
    }
    
};

Toolbar.prototype.mousePressed = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        if (this.buttons[i].mouseOver()) {
            this.buttons[i].selected = true;
        }
    }
    
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].selected();
    }
};

Toolbar.prototype.mouseReleased = function() {
    for (var i = 0; i < this.buttons.length; i++) {
        var button = this.buttons[i];
        if (button.selected && button.mouseOver()) {
            button.click();
        }
        button.selected = false;
    }
    for (var i = 0; i < this.sliders.length; i++) {
        this.sliders[i].held = false;
    }
};

Toolbar.prototype.mouseDragged = function() {
    for (var i = 0; i < this.sliders.length; i++) {
        if (this.sliders[i].drag()) {
            return true;
        }
    }
};
}
/*************************************
 *      Transformation object
 * A transformation applied to an item.
 * Displayed as a box with number scrubbers.
**************************************/
{
var Transformation = function(item) {
    this.item = item;
    this.w = 175;
    this.h = 100;
    this.scrubbers = [];
    this.update = item.update.bind(item);
};

Transformation.prototype.addScrubbers = function(n, values) {
    for (var i = 0; i < n; i++) {
        this.scrubbers.push(
            new Scrubber(0, 0, 35, 20,
                values, this.update)
        );
    }
};

Transformation.prototype.draw = function(x, y, n, values) {
    this.x = x;
    this.y = y;
    
    // Equations
    var w = this.drawText(n, values);
    
    // Outline
    strokeWeight(1);
    stroke(200);
    noFill();
    rect(this.x, this.y, w, this.h, 8);
    
    // Close button
    var x = this.x + 10;
    var y = this.y + 10;
    
    if (dist(mouseX, mouseY, x, y) <= 7) {
        fill(ORANGE);
        stroke(0);
    } else {
        stroke(160);
        fill(BACKGROUND);
    }
    ellipse(x, y, 14, 14);
    
    stroke(100);
    strokeWeight(2);
    var d = 3;
    line(x - d, y - d, x + d, y + d);
    line(x - d, y + d, x + d, y - d);
    
    // Update number scrubbers
    for (var i = 0; i < this.scrubbers.length; i++) {
        this.scrubbers[i].updateValue();
    }
};

// To be overwritten
Transformation.prototype.drawText = function(n) {};

Transformation.prototype.mouseOver = function() {
    return (mouseX >= this.x && mouseX <= this.x + this.w &&
            mouseY >= this.y && mouseY <= this.y + this.h);
};

Transformation.prototype.mousePressed = function() {
    for (var i = 0; i < this.scrubbers.length; i++) {
        this.scrubbers[i].mousePressed();
    }
};

Transformation.prototype.mouseReleased = function() {
    for (var i = 0; i < this.scrubbers.length; i++) {
        this.scrubbers[i].mouseReleased();
    }
    
    if (dist(mouseX, mouseY, this.x + 10, this.y + 10) <= 7) {
        this.item.removeTransformation(this);
    }
};

// **** TRANSLATION ****
var Translation = function(item) {
    this.type = 'translate';
    Transformation.call(this, item);
    
    this.addScrubbers(2, { range: [-20, 20] });
};

Translation.prototype = Object.create(Transformation.prototype);

Translation.prototype.drawText = function(n, values) {
    fill(20);
    textAlign(LEFT, BASELINE);
    textFont(serifFont, 16);
    
    var x = this.x + 6;
    var y = this.y + 36;
    var txt = "Translate by ";
    var minWidth = this.w;
    
    text(txt, x, y);
    x += textWidth(txt);
    this.scrubbers[0].draw(x, y - 16);
    x += this.scrubbers[0].w;
    
    fill(20);
    textAlign(LEFT, BASELINE);
    textFont(serifFont, 16);
    txt = ", ";
    text(txt, x, y);
    x += textWidth(txt);
    this.scrubbers[1].draw(x, y - 16);
    
    y += 34;

    var labels = ["x", "y"];
    for (var i = 0; i < labels.length; i++) {
        var x = this.x + 8;
        
        textAlign(LEFT, BASELINE);
        textFont(serifFont, 18);
        var txt = [
            { txt: labels[i], size: 20 },
            { txt: n + 1, size: 13, dy: 4 },
            { txt: " = ", size: 16 },
            { txt: labels[i], size: 20 },
            { txt: n, size: 13, dy: 4 },
            { txt: " + ", size: 16 },
            { txt: this.scrubbers[i].value, col: TRANS_COL },
            { txt: " = " + roundStr(values[i]) },
        ];
        
        var mx = writeText(txt, x, y);
        minWidth = max(minWidth, mx - x + 10);
        y += 20;
    }
    
    return minWidth;
};

// **** SCALE ****
var Scale = function(item) {
    this.type = 'scale';
    Transformation.call(this, item);
    
    this.addScrubbers(2, { options: [0.25, 0.5, 1, 1.5, 2, 3], now: 2 });
};

Scale.prototype = Object.create(Transformation.prototype);

Scale.prototype.drawText = function(n, values) {
    fill(20);
    textAlign(LEFT, BASELINE);
    textFont(serifFont, 16);
    
    var x = this.x + 6;
    var y = this.y + 36;
    var txt = "Scale by ";
    var minWidth = this.w;
    
    text(txt, x, y);
    x += textWidth(txt);
    this.scrubbers[0].draw(x, y - 16);
    x += 35;
    
    fill(20);
    textAlign(LEFT, BASELINE);
    textFont(serifFont, 16);
    txt = ", ";
    text(txt, x, y);
    x += textWidth(txt);
    this.scrubbers[1].draw(x, y - 16);
    
    y += 34;
    
    var labels = ["x", "y"];
    
    for (var i = 0; i < labels.length; i++) {
        var x = this.x;
        
        textAlign(LEFT, BASELINE);
        textFont(serifFont, 18);
        var txt = [
            { txt: labels[i], size: 20},
            { txt: n + 1, size: 13, dy: 4 },
            { txt: " = ", size: 16 },
            { txt: roundStr(this.scrubbers[i].value), col: TRANS_COL },
            { txt: labels[i], size: 20 },
            { txt: n, size: 13, dy: 4 },
            { txt: " = " + roundStr(values[i]), size: 16 },
        ];
        
        var mx = writeText(txt, x + 8, y);
        minWidth = max(minWidth, mx - x + 10);
        y += 20;
    }
    
    return minWidth;
};

// **** Rotation ****

var Rotation = function(item) {
    this.type = 'rotation';
    Transformation.call(this, item);
    this.h = 100;
    
    var rotations = [];
    for (var i = -180; i <= 180; i += 10) {
        rotations.push(i);
    }
    
    this.addScrubbers(1, { options: rotations, now: floor(rotations.length / 2) });
};

Rotation.prototype = Object.create(Transformation.prototype);

Rotation.prototype.drawText = function(n, values) {
    fill(20);
    textAlign(LEFT, BASELINE);
    textFont(serifFont, 16);
    
    var x = this.x + 6;
    var y = this.y + 36;
    var txt = "Rotate by ";
    var minWidth = this.w;
    
    text(txt, x, y);
    x += textWidth(txt);
    this.scrubbers[0].draw(x, y - 16);
    fill(20);
    text("degrees", x + 64, y);
    y += 34;

    var labels = ["x", "y"];
    var funcs = [
        ["cos", " - sin"],
        ["sin", " + cos"]
    ];
    
    for (var i = 0; i < labels.length; i++) {
        var x = this.x;
        
        fill(20);
        textAlign(LEFT, BASELINE);
        textFont(serifFont, 18);
        var txt = [
            { txt: labels[i], size: 20 },
            { txt: n + 1, size: 13, dy: 4 },
            { txt: " = " + funcs[i][0] + "(", size: 16 },
            { txt: this.scrubbers[0].value, col: TRANS_COL },
            { txt: ")", size: 16 },
            { txt: labels[i], size: 20 },
            { txt: n, size: 13, dy: 4 },
            { txt: funcs[i][1] + "(", size: 16 },
            { txt: this.scrubbers[0].value, col: TRANS_COL },
            { txt: ")", size: 16 },
            { txt: labels[1 - i], size: 20 },
            { txt: n, size: 13, dy: 4 },
            { txt: " = " + roundStr(values[i]), size: 16 },
        ];
        
        var mx = writeText(txt, x + 8, y);
        minWidth = max(minWidth, mx - x + 10);
        y += 22;
    }

    return minWidth;
};
}
/*************************************
 *      Item
 *  Items are images which can appear on the grid
**************************************/

var Item = function(img, x, y, scale) {
    this.image = img;
    this.w = this.image.width * scale;
    this.h = this.image.height * scale;
    this.x = x;
    this.y = y;
    
    this.transformations = [];
    this.values = [[0, 0]];
    this.calculateMatrix();
};

Item.prototype.draw = function(selected) {
    // Drawing icons
    if (selected) {
        noStroke();
        fill(BLUE + (60 << 24));
        rect(this.x - 2, this.y - this.h - 2,
             this.w + 5, this.h + 5, 5);
    }
    
    if (this.mouseOver()) {
        noFill();
        stroke(BLUE + (160 << 24));
        strokeWeight(2);
        rect(this.x - 2, this.y - this.h - 2,
             this.w + 4, this.h + 4, 5);
    }
    
    this.image.draw(this.x, this.y - this.h, this.w, this.h);
};

Item.prototype.drawOnGrid = function(colour, selected) {
    this.image.draw(0, -this.h, this.w, this.h);
    
    // Ellipse at origin point
    if (selected || this.mouseOver()) {
        noFill();
        stroke(colour);
        strokeWeight(2);
        rect(0, -this.h, this.w, this.h, 8);
        if (selected) {
            ellipse(this.values[0][0] * grid.dx, this.values[0][1] * -grid.dy, 6, 6);
        }
    }
};

Item.prototype.drawInitialImage = function() {
    pushMatrix();
    translate(grid.x, grid.y);
    this.drawOnGrid(START_COL, true);
    popMatrix();
};

Item.prototype.drawTransformedImage = function(selected) {
    var dx = grid.dx;
    var dy = -grid.dy;
    var x = this.x - grid.x;
    var y = this.y - grid.y + 4 * dy;
    var n = this.transformations.length;
    
    pushMatrix();
    translate(grid.x, grid.y);
    
    for (var i = 0; i < n; i++) {
        var t = this.transformations[n - i - 1];
        var s = t.scrubbers;
        if (t.type === 'translate') {
            translate(
                s[0].value * dx,
                s[1].value * dy);
        } else if (t.type === 'scale') {
            scale(
                s[0].value,
                s[1].value);
        } else if (t.type === 'rotation') {
            rotate(-s[0].value);
        }
    }
    
    this.drawOnGrid(n ? END_COL : START_COL, selected);
    
    popMatrix();
};

Item.prototype.showOutline = function() {
    noFill();
    stroke(255, 0, 0);
    strokeWeight(2);
    quad(grid.xCoordToPosition(this.points[0][0]), grid.yCoordToPosition(this.points[0][1]),
    grid.xCoordToPosition(this.points[1][0]), grid.yCoordToPosition(this.points[1][1]),
    grid.xCoordToPosition(this.points[2][0]), grid.yCoordToPosition(this.points[2][1]),
    grid.xCoordToPosition(this.points[3][0]), grid.yCoordToPosition(this.points[3][1]));
};

Item.prototype.drawTransformations = function() {
    var x = grid.x2 + 20;
    var y = grid.y2 - 10;
    
    this.drawCoordinates(x, y, "Initial", 0, START_COL);
    y += 50;
    
    var n = this.transformations.length;
    for (var i = 0; i < n; i++) {
        this.transformations[i].draw(x, y, i, this.values[i + 1]);
        y += this.transformations[i].h + 5;
    }
    
    if (n > 0) {
        this.drawCoordinates(x, y, "Final", n, END_COL);
    }
};

Item.prototype.drawCoordinates = function(x1, y1, name, count, col) {
    var maxWidth = 100;
    
    fill(20);
    textAlign(LEFT, CENTER);
    textFont(serifFont, 16);
    text(name + "\nCoordinates", x1 + 6, y1 + 23);
    
    var x = x1 + 100;
    var y = y1 + 19;
    
    var labels = ["x", "y"];
    textFont(serifFont, 18);
    textAlign(LEFT, BASELINE);
    for (var i = 0; i < labels.length; i++) {
        var txt = [
            { txt: labels[i], size: 20 },
            { txt: count, size: 13, dy: 5 },
            { txt: " = ", size: 16 },
            { txt: roundStr(this.values[count][i]), col: col }
        ];
        
        var mx = writeText(txt, x, y);
        maxWidth = max(maxWidth, mx - x1 + 10);
        y += 18;
    }
    
    // Outline
    strokeWeight(1);
    stroke(200);
    noFill();
    rect(x1, y1, maxWidth, 45, 8);
};

Item.prototype.mouseOver = function(d) {
    // Allows us to specify a border
    d = d || 0;

    if (this.transformations.length === 0) {
        return (mouseX >= this.x - d &&
                mouseX <= this.x + this.w + d &&
                mouseY <= this.y + d &&
                mouseY >= this.y - this.h - d);    
    } else {
        var m = [grid.xPositionToCoord(mouseX), grid.yPositionToCoord(mouseY)];
        return pointInQuadrilateral(m, this.points);
    }
};

Item.prototype.mousePressed = function() {
    for (var i = 0; i < this.transformations.length; i++) {
        if (this.transformations[i].mouseOver()) {
            this.transformations[i].mousePressed();
        }
    }
    this.updateOrigin();
};

Item.prototype.mouseReleased = function() {
    // Release on transformations
    for (var i = 0; i < this.transformations.length; i++) {
        if (this.transformations[i].mouseOver()) {
            this.transformations[i].mouseReleased();
        }
    }
};

Item.prototype.mouseDragged = function() {
    this.updateOrigin();
};

Item.prototype.updateOrigin= function() {
    if (mouseX >= this.x && mouseX <= this.x + this.w &&
        mouseY <= this.y && mouseY >= this.y - this.h) {
            var x = grid.xPositionToCoord(mouseX);
            var y = grid.yPositionToCoord(mouseY);
            this.values[0] = [x, y];
            this.calculateMatrix();
    }
};

Item.prototype.addTransformation = function(type) {

    if (this.transformations.length >= 4) {
        return;
    }
    
    if (type === 'translate') {
        this.transformations.push(new Translation(this));    
    } else if (type === 'scale') {
        this.transformations.push(new Scale(this));    
    } else if (type === 'rotate') {
        this.transformations.push(new Rotation(this));    
    }
    
    this.calculateMatrix();
};

Item.prototype.removeTransformation = function(transformation) {
    var index = this.transformations.indexOf(transformation);
    if (index > -1) {
        this.transformations.splice(index, 1);
        this.calculateMatrix();
    }
};

Item.prototype.calculateMatrix = function() {
    if (!grid) { return; }
    
    var x = this.values[0][0];
    var y = this.values[0][1];
    this.values = [[x, y]];
    
    // Corners of image
    this.points = [
        [0, 0], [4, 0], [4, 4], [0, 4]
    ];
    
     this.matrix = [
        [1, 0, 0],
        [0, 1, 0],
        [0, 0, 1]
    ];
    
    // Multiply matrices to get result
    for (var i = 0; i < this.transformations.length; i++) {
        var t = this.transformations[i];
        var s = t.scrubbers;
        var tMatrix;
        
        if (t.type === 'translate') {
            tMatrix = [
                [1, 0, s[0].value],
                [0, 1, s[1].value],
                [0, 0, 1]];
        } else if (t.type === 'scale') {
            tMatrix = [
                [s[0].value, 0, 0],
                [0, s[1].value, 0],
                [0, 0, 1]];
        } else if (t.type === 'rotation') {
            var c = cos(s[0].value);
            var s = sin(s[0].value);
            tMatrix = [
                [c, -s, 0],
                [s, c, 0],
                [0, 0, 1]];
        }
        
        this.matrix = multiplyMatrices(tMatrix, this.matrix);
        
        var v = _applyMatrix(tMatrix, x, y);
        this.values.push(v);
        x = v[0];
        y = v[1];
        
        // Calculate the position of the corners
    }
    
    for (var i = 0;  i< this.points.length; i++) {
        var x = +this.points[i][0];
        var y = +this.points[i][1];
        this.points[i] = [
            x * this.matrix[0][0] +
            y * this.matrix[0][1] +
            (+this.matrix[0][2]),
            x * this.matrix[1][0] +
            y * this.matrix[1][1] +
            (+this.matrix[1][2])
        ];
    }
};

Item.prototype.update = function() {
    this.calculateMatrix();
};

/*************************************
 *      Item selector
 *  A column of images, which can be
 * selected. Drawn at position (x, y),
 * with images given a width, w and
 * drawn d apart.
**************************************/

var ItemSelector = function(x, y, images, w, d) {
    this.x = x;
    this.y = y;
    this.d = d;
    this.w = w;
    this.h = d + 15;
    
    this.items = [];
    this.selected = -1;
    
    // Calculate height
    var x = this.x + this.d;
    for (var i = 0; i < images.length; i++) {
        var img = images[i];
        var _scale = this.w / img.width;
        var item = new Item(img, x, this.y + this.h, _scale);
        this.items.push(item);
        item.y += item.h;
        this.h += item.h + this.d;
    }
};

ItemSelector.prototype.draw = function() {
    noStroke();
    fill(0, 0, 0, 10);
    //rect(this.x, this.y, this.w + this.d * 2, this.h);
    
    textAlign(CENTER, TOP);
    textFont(sansFont, 14);
    fill(20);
    text("Select an item", this.x +  this.d + this.w / 2, this.y + 2);
    
    for (var i = 0; i < this.items.length; i++) {
        this.items[i].draw(i === this.selected);
    }
};

ItemSelector.prototype.mouseReleased = function() {
    // Check mouse is over the item selector
    if (mouseX < this.x ||
        mouseX > this.x + this.w ||
        mouseY < this.y ||
        mouseY > this.y + this.h) {
        return;
    }
    
    // Deselect items
    itemSelector.selected = -1;
    grid.selected = -1;
    
    for (var i = 0; i < this.items.length; i++) {
        if (this.items[i].mouseOver()) {
            this.selected = i;
            break;
        }
    }
};

/*************************************
 *          Grid object
 * Cartesian grid on which items are displayed
**************************************/

var createFloor = function(width, height) {
    var x = -round(50 * random());
    var y = 0;
    var planks = [];
    
    var drawFunctions = [
        function(p) {
            image(sprites[p.n], this.x, p.y);
        },
        function(p) {
            var img = sprites[p.n];
            pushMatrix();
            translate(p.x, p.y);
            scale(-1, 1);
            image(img, -img.width, 0);
            popMatrix();
        },
        function(p) {
            var img = sprites[p.n];
            pushMatrix();
            translate(p.x, p.y);
            scale(1, -1);
            image(img, 0, -img.height);
            popMatrix();
        },
        function(p) {
            var img = sprites[p.n];
            pushMatrix();
            translate(p.x, p.y);
            scale(-1, -1);
            image(img, -img.width, -img.height);
            popMatrix();
        }
    ];
    
    while (y < height) {
        var n = floor(random() * 3);
        planks.push({
            x: x,
            y: y,
            n: n,
            draw: drawFunctions[floor(random() * 3)]
        });
        x += spriteData[n].width;
        if (x > width) {
            x = -round(50 * random());
            y += spriteData[n].height;
        }
    }
    
    return planks;
};

var Grid = function(x, y, w, h, dx, dy) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.dx = dx;
    this.dy = dy || dx;
    
    this.x2 = this.x + this.w * this.dx;
    this.y2 = this.y - this.h * this.dy;
    
    this.items = [];
    this.icons = [];
    this.selected = -1;
    
    this.iconS = 48;
    this.iconX = this.x;
    this.iconY = this.y + this.iconS + 32;
    
    this.woodFloor = createFloor(this.w * this.dx, this.h * this.dy);
};

Grid.prototype.draw = function() {
    this.drawItems();
    
    // Overlay to give ghosting
    noStroke();
    fill(BACKGROUND + (100 << 24));
    rect(this.x, this.y2, this.x2 - this.x, this.y - this.y2);
    
    if (showing.Floor) {
        pushMatrix();
        translate(this.x, this.y2);
        for (var i = 0; i < this.woodFloor.length; i++) {
            var plank = this.woodFloor[i];
            plank.draw(plank);
        }
        popMatrix();
    }
    
    if (showing.Grid) {
        this.drawGridlines();
    }
    
    this.drawTransformedItems();
    
    if (showing.Target) {
        this.drawTarget();
    }
    
    // Draw clipping rectangles
    noStroke();
    fill(BACKGROUND);
    rect(0, 0, width, this.y2);
    rect(0, 0, grid.x, height);
    rect(0, grid.y + 1, width, height - grid.y);
    rect(this.x2 + 1, 0, width - this.x2, height);

    for (var i = 0; i < this.icons.length; i++) {
        this.icons[i].draw(this.selected === i);
    }

    // Outline
    noFill();
    stroke(GREY);
    strokeWeight(1);
    rect(this.x, this.y2, this.w * this.dx, this.h * this.dy);
    
    // Axes    
    textFont(sansFont, 12);
    textSize(12);
    fill(GREY);

    // X axis
    textAlign(CENTER, TOP);
    for (var i = 0; i <= this.w; i++) {
        var x = this.x + i * this.dx;
        if (i % 2 === 0) {
            line(x, this.y, x, this.y + 3);
            text(i, x, this.y + 6);            
        }
    }
    
    // Y-axis
    textAlign(RIGHT, CENTER);
    for (var i = 0; i <= this.h; i++) {
        var y = this.y - i * this.dy;
        if (i % 2 === 0) {
            stroke(GREY);
            line(this.x - 3, y, this.x, y);
            text(i,  this.x - 5, y);
        }
    }
    
    this.drawTransformations();
};

Grid.prototype.drawGridlines = function() {
    // X-axis
    strokeWeight(1);
    for (var i = 1; i <= this.w; i++) {
        stroke(i % 4 === 0 ? 
            GRIDGREY2 : GRIDGREY);
        var x = this.x + i * this.dx;
        line(x, this.y2, x, this.y + 1);
    }
    
    // Y-axis
    for (var i = 1; i <= this.h; i++) {
        stroke(i % 4 === 0 ? 
            GRIDGREY2 : GRIDGREY);
        var y = this.y - i * this.dy;
        line(this.x + 1, y, this.x2, y);
    }
};

Grid.prototype.drawTarget = function() {
    noFill();
    strokeWeight(3);
    stroke(GREEN + (100 << 24));
    
    // Nightstand
    var img = images[2];
    var x = this.x + 28 * this.dx;
    var y = this.y - 16 * this.dy - img.height;
    rect(x, y, img.width, img.height, 5);
    
    // Dresser
    var img = images[3];
    var x = this.x + 12 * this.dx;
    var y = this.y - img.height;
    rect(x, y, img.width, img.height, 5);
    
    // Lamp
    var img = images[1];
    var x = this.x + 29 * this.dx + img.width / 2;
    var y = this.y - 17 * this.dy - img.height / 2;
    ellipse(x, y, img.width, img.height);
    
};

Grid.prototype.drawItems = function() {
    if (this.selected > -1 && this.items[this.selected].transformations.length) {
        this.items[this.selected].drawInitialImage();
    }
};

Grid.prototype.drawTransformedItems = function() {
    for (var i = 0; i < this.items.length; i++) {
        this.items[i].drawTransformedImage(this.selected === i);
    }
};

Grid.prototype.drawTransformations = function() {
    if (this.selected > -1) {
        this.items[this.selected].drawTransformations();
    }
};

Grid.prototype.addItem = function(index) {
    var img = images[index];
    
    if (index > -1 && this.items.length < 8) {
        // Item added to grid
        this.items.push(new Item(img, this.x, this.y, 1));
        
        // Icon added below grid
        var scale = this.iconS / img.height;
        var icon = new Item(img, this.iconX, this.iconY, scale);
        this.icons.push(icon);
        
        this.iconX += icon.w + 10;
        this.selected = this.items.length - 1;
    }
};

Grid.prototype.removeItem = function(index) {
    this.items.splice(index, 1);
    this.icons.splice(index, 1);
    
    // Reposition icons
    // TODO: only reposition icons > index
    this.iconX = this.x;
    for (var i = 0; i < this.icons.length; i++) {
        this.icons[i].x = this.iconX;
        this.iconX += this.icons[i].w + 10;
    }
};

Grid.prototype.mouseReleased = function() {
    // Check transformations
    if (this.selected !== -1) {
        if(this.items[this.selected].mouseReleased()) {
            return;
        }
    }
    
    // Check mouse is over this
    if (mouseX < this.x || mouseX > this.x2 || mouseY < this.y2) {
        return;
    }

    // Deselect items
    itemSelector.selected = -1;
    this.selected = -1;
    
    for (var i = this.items.length; i--;) {
        if (this.items[i].mouseOver() || this.icons[i].mouseOver()) {
            this.selected = i;
            return;
        }
    }
};

Grid.prototype.mouseMoved = function() {
    if (this.selected !== -1) {
        this.items[this.selected].mouseMoved();
    }
};

Grid.prototype.mousePressed = function() {
    if (this.selected !== -1) {
        this.items[this.selected].mousePressed();
    }
};

Grid.prototype.mouseDragged = function() {
    if (this.selected !== -1) {
        this.items[this.selected].mouseDragged();
    }
};

Grid.prototype.xCoordToPosition = function(x) {
    return this.x + x * this.dx;
};

Grid.prototype.yCoordToPosition = function(y) {
    return this.y - y * this.dy;
};

Grid.prototype.xPositionToCoord = function(x) {
    return (x - this.x) / this.dx;
};

Grid.prototype.yPositionToCoord = function(y) {
    return (this.y - y) / this.dy;
};

/*************************************
 *      Create objects
**************************************/

var createGrid = function(x, y) {
    var tickSize = 16;
    // Make gridsize as big as we can while keeping numbers nice
    var w = 2 * floor(0.5 * (width - x - 250) / tickSize);
    var h = 2 * floor(0.5 * (y - 15) / tickSize);
    w = 32;
    h = 24;
    grid = new Grid(x, y, w, h, tickSize);
};
createGrid(180, height - 120);

itemSelector = new ItemSelector(28, 12, images, 64, 10);

var addButtons = function(toolbar) {
    var funcs = [
        function() {
            grid.addItem(toolbar.buttons[0].index);
        },
        function() {
            if (grid.selected > -1) {
                grid.removeItem(grid.selected);
                grid.selected = -1;
            }
        },
        function() {
            if (grid.selected > -1) {
                grid.items[grid.selected].addTransformation('translate');
            }
        },
        function() {
            if (grid.selected > -1) {
                grid.items[grid.selected].addTransformation('scale');
            }
        },
        function() {
            if (grid.selected > -1) {
                grid.items[grid.selected].addTransformation('rotate');
            }
        }
    ];
        
    var labels = [
        "Add to scene",
        "Remove",
        "Translate",
    //    "Scale",
    //    "Rotate",
    ];
    
    var n = toolbar.buttons.length;
    for (var i = 0; i < labels.length; i++) {
        toolbar.addButton(labels[i], funcs[i]);
        toolbar.buttons[n + i].disabled = i > 0;
    }
};

var toolbar = new Toolbar(10, 20, 132);
toolbar.addCarousel(images);
addButtons(toolbar);
toolbar.addOptions(showing);

/*************************************
 *      Main loop
**************************************/

draw = function() {
    background(BACKGROUND);
        
    if (spritesLoaded === spriteData.length) {
        grid.draw();
        //itemSelector.draw();
        toolbar.draw();
    } else {
        for (var i = 0; i < spriteData.length; i++) {
            if (!sprites[i]) {
                createSprite(spriteData[i], i);
            }
        }
    }
};

/*************************************
 *      Event handling
**************************************/

mousePressed = function() {
    grid.mousePressed();
    toolbar.mousePressed();
};

mouseDragged = function() {
    grid.mouseDragged();
};

mouseReleased = function() {
    if (mouseX < grid.x) {
        itemSelector.mouseReleased();
    } else {
        // Deselect item on grid unless
        grid.mouseReleased();
    }
    
    toolbar.mouseReleased();
    
    // Other buttons active only if grid item selected
    for (var i = 2; i < toolbar.buttons.length; i++) {
        toolbar.buttons[i].disabled = grid.selected === -1;
    }
};

mouseOut = function() {
};
